{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction to DIV Games Studio 2015\n\n\nHelp about the program language\n\n\nGlossary of Terms\n\n\nSyntax of a program\n\n\nDeclaration of statements\n\n\nList of functions\n\n\nPredefined constants\n\n\nPredefined global data\n\n\nPredefined local data\n\n\nArithmetic Expressions\n\n\nLogical conditions\n\n\nKey table Codes\n\n\nLanguage News\n\n\nHelp about key table commands\n\n\nGraphical environment Commands\n\n\nNormal Commands in the games\n\n\nCommands in the program debugger\n\n\nCommands in the program editor\n\n\nCommands in the graphical editor", 
            "title": "General index"
        }, 
        {
            "location": "/glossary_of_terms/", 
            "text": "!=\n\n\n!\n\n\n\n\n%=\n\n\n%\n\n\n\n\n=\n\n\n\n\n'\n\n\n(\n\n\n)\n\n\n*/\n\n\n*=\n\n\n*\n\n\n++\n\n\n+=\n\n\n+\n\n\n,\n\n\n--\n\n\n-=\n\n\n-\n\n\n-\n\n\n..\n\n\n.\n\n\n/*\n\n\n//\n\n\n/=\n\n\n/\n\n\n:\n\n\n;\n\n\n=\n\n\n\n\n=\n\n\n\n\n\n\n=\n\n\n==\n\n\n=\n\n\n=\n\n\n=\n\n\n=\n\n\n\n\n\n\n[\n\n\n[]](pointer\n[\n].md)\n\n\n^=\n\n\n^^\n\n\n^\n\n\n|=\n\n\n||\n\n\n|\n\n\n_a, _b, _c, ...\n\n\n_case_sensitive\n\n\n_extended_conditions\n\n\n_free_sintax\n\n\n_hidden\n\n\n_ignore_errors\n\n\n_max_process\n\n\n_no_check\n\n\n_no_id_check\n\n\n_no_null_check\n\n\n_no_optimization\n\n\n_no_range_check\n\n\n_no_strfix\n\n\n_normal\n\n\n_simple_conditions\n\n\n_subdir\n\n\n_system\n\n\n_volid\n\n\nabs()\n\n\nacos()\n\n\nadvance()\n\n\nall_drawing\n\n\nall_sound\n\n\nall_text\n\n\nand\n\n\nangle\n\n\nargc\n\n\nargv[]\n\n\nascii\n\n\nasin()\n\n\natan()\n\n\natan2()\n\n\nbegin\n\n\nbigbro\n\n\nbreak\n\n\nbyte\n\n\nc_0 ... c_9\n\n\nc_m7\n\n\nc_m8\n\n\nc_screen\n\n\nc_scroll\n\n\ncalculate()\n\n\ncase\n\n\nchange_channel()\n\n\nchange_sound()\n\n\nchannel[]\n\n\nchar()\n\n\nchdir()\n\n\nclear_screen()\n\n\nclone\n\n\ncnumber\n\n\ncollision()\n\n\ncompiler_options\n\n\ncomplete_dump\n\n\ncomplete_restore\n\n\ncompress_file()\n\n\nconst\n\n\ncontinue\n\n\nconvert_palette()\n\n\ncos()\n\n\nctype\n\n\ndebug\n\n\ndecode_file()\n\n\ndefault\n\n\ndefine_region()\n\n\ndelete_draw()\n\n\ndelete_text()\n\n\ndirinfo (struct)\n\n\ndisk_free()\n\n\ndraw()\n\n\ndraw_z\n\n\ndump_type\n\n\ndup\n\n\nelse\n\n\nencode()\n\n\nencode_file()\n\n\nend_fli()\n\n\nend\n\n\nexit()\n\n\nfade()\n\n\nfade_off()\n\n\nfade_on()\n\n\nfading\n\n\nfalse\n\n\nfast_mixer\n\n\nfather\n\n\nfclose()\n\n\nfget_angle()\n\n\nfget_dist()\n\n\nfileinfo (struct)\n\n\nfilelength()\n\n\nfile\n\n\nfind_color()\n\n\nflags\n\n\nflush()\n\n\nfopen()\n\n\nforce_pal()\n\n\nfor\n\n\nfps\n\n\nframe_fli()\n\n\nframe\n\n\nfread()\n\n\nfree()\n\n\nfrom\n\n\nfseek()\n\n\nftell()\n\n\nfunction\n\n\nfwrite()\n\n\ng_height\n\n\ng_width\n\n\ng_x_center\n\n\ng_y_center\n\n\nget_angle()\n\n\nget_dirinfo()\n\n\nget_dist()\n\n\nget_distx()\n\n\nget_disty()\n\n\nget_fileinfo()\n\n\nget_id()\n\n\nget_joy_button()\n\n\nget_joy_position()\n\n\nget_pixel()\n\n\nget_point()\n\n\nget_point_m8()\n\n\nget_real_point()\n\n\nget_sector_height()\n\n\nget_sector_texture()\n\n\nget_song_line()\n\n\nget_song_pos()\n\n\nget_wall_texture()\n\n\ngetdrive()\n\n\nglobal\n\n\ngo_to_flag()\n\n\ngraphic_info()\n\n\ngraph\n\n\nheight\n\n\nid\n\n\nif\n\n\nignore_error()\n\n\nimport\n\n\nint\n \n\n\nis_playing_cd()\n\n\nis_playing_song()\n\n\nis_playing_sound()\n\n\nitoa()\n\n\njoy (struct)\n\n\njoy_filter\n\n\njoy_state\n\n\nkey()\n\n\nlet_me_alone()\n\n\nload()\n\n\nload_fnt()\n\n\nload_fpg()\n\n\nload_map()\n\n\nload_pal()\n\n\nload_pcm()\n\n\nload_pcx()\n\n\nload_screen()\n\n\nload_song()\n\n\nload_wav()\n\n\nload_wld()\n\n\nlocal\n\n\nloop\n\n\nlower()\n\n\nm320x200 ... m1024x768\n\n\nm7 (struct)\n\n\nm8 (struct)\n\n\nm8_nextsector\n\n\nm8_sector\n\n\nm8_step\n\n\nm8_wall\n\n\nmalloc()\n\n\nmap_block_copy()\n\n\nmap_get_pixel()\n\n\nmap_put()\n\n\nmap_put_pixel()\n\n\nmap_xput()\n\n\nmax_int\n\n\nmax_process_time\n\n\nmemory_free()\n\n\nmin_int\n\n\nmkdir()\n\n\nmod\n\n\nmouse (struct)\n\n\nmove_draw()\n\n\nmove_scroll()\n\n\nmove_text()\n\n\nnear_angle()\n\n\nnet (struct)\n\n\nnet_get_games()\n\n\nnet_join_game()\n\n\nnew_map()\n\n\nno_restore\n\n\nnot\n\n\nnum_video_modes\n\n\noffset\n\n\nor\n\n\nout_region()\n\n\npartial_dump\n\n\npartial_restore\n\n\npath_find()\n\n\npath_free()\n\n\npath_line()\n\n\npi\n\n\nplay_cd()\n\n\npointer\n\n\npow()\n\n\npriority\n\n\nprivate\n\n\nprocess\n\n\nprogram\n\n\nput()\n\n\nput_pixel()\n\n\nput_screen()\n\n\nqsort()\n\n\nquality_mixer\n\n\nradius\n\n\nrand()\n\n\nrand_seed()\n\n\nrefresh_scroll()\n\n\nregion\n\n\nremove()\n\n\nrepeat\n\n\nreserved\n\n\nreset_fli()\n\n\nreset_sound()\n\n\nresolution\n\n\nrestore_type\n\n\nreturn\n\n\nroll_palette()\n\n\ns_freeze_tree\n\n\ns_freeze\n\n\ns_kill_tree\n\n\ns_kill\n\n\ns_sleep_tree\n\n\ns_sleep\n\n\ns_wakeup_tree\n\n\ns_wakeup\n\n\nsave()\n\n\nsave_map()\n\n\nsave_pcx()\n\n\nscan_code\n\n\nscreen_copy()\n\n\nscroll (struct)\n\n\nseek_cur\n\n\nseek_end\n\n\nseek_set\n\n\nset_color()\n\n\nset_env_color()\n\n\nset_fog()\n\n\nset_fps()\n\n\nset_mode()\n\n\nset_point_m8()\n\n\nset_sector_height()\n\n\nset_sector_texture()\n\n\nset_song_pos()\n\n\nset_volume()\n\n\nset_wall_texture()\n\n\nsetdrive()\n\n\nsetup (struct)\n\n\nsetup_program\n\n\nshift_state\n\n\nsignal()\n\n\nsin()\n\n\nsizeof()\n\n\nsize\n\n\nsmallbro\n\n\nsong()\n\n\nson\n\n\nsound()\n\n\nsound_bits_16\n\n\nsound_bits_8\n\n\nsqrt()\n\n\nstart_fli()\n\n\nstart_mode7()\n\n\nstart_mode8()\n\n\nstart_scroll()\n\n\nstep\n\n\nstop_cd()\n\n\nstop_mode7()\n\n\nstop_mode8()\n\n\nstop_scroll()\n\n\nstop_song()\n\n\nstop_sound()\n\n\nstrcat()\n\n\nstrchr()\n\n\nstrcmp()\n\n\nstrcpy()\n\n\nstrdel()\n\n\nstring\n\n\nstrlen()\n\n\nstrset()\n\n\nstrstr()\n\n\nstruct\n\n\nswitch\n\n\nsystem()\n\n\ntan()\n\n\ntext_z\n\n\ntimer[]\n\n\nto\n\n\ntrue\n\n\ntype\n\n\nuncompress_file()\n\n\ndrive_size\n\n\nunload_fnt()\n\n\nunload_fpg()\n\n\nunload_map()\n\n\nunload_pcm()\n\n\nunload_pcx()\n\n\nunload_song()\n\n\nunload_wav()\n\n\nuntil\n\n\nupper()\n\n\nvideo_modes (struct)\n\n\nvsync\n\n\nwhile\n\n\nword\n\n\nwrite()\n\n\nwrite_in_map()\n\n\nwrite_int()\n\n\nxadvance()\n\n\nxgraph\n\n\nxor\n\n\nxput()\n\n\nx\n\n\ny\n\n\nz", 
            "title": "Glossary of Terms"
        }, 
        {
            "location": "/abs()/", 
            "text": "abs(\nexpression\n)\n\n\nReturns\n\n\nThe \nabsolute value\n of the expression.\n\n\nDescription\n\n\nCalculates the absolute value of the expression given as parameter.\nIf the result of the expression is negative it will change the sign,\nif it is positive, it won't do anything.\n\n\nExample program\n\n\nPROGRAM example_abs;\n\nGLOBAL\n    INT values[15];\n    INT n;\n\nBEGIN\n    FROM n=0 TO 15;\n        values[n]=rand(-1000, 1000);\n        write_int(0, 0, n*10,0, offset values[n]);\n    END\n    write(0, 0, 192, 0, \nPress [SPACE] to run the function abs()\n);\n    LOOP\n        IF (key(_space))\n            FROM n=0 TO 15;\n\n                values[n] = abs(values[n]); // We find the absolute value\n\n            END\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nThis program will print a list of values on the screen that can be positive or negative, \nwhen the space bar is pressed it will apply the function \nabs()\n to all these values, \nmaking all values positive.\n\n\n\n\nSee: \nExpression", 
            "title": "abs()"
        }, 
        {
            "location": "/abs()/#returns", 
            "text": "The  absolute value  of the expression.", 
            "title": "Returns"
        }, 
        {
            "location": "/abs()/#description", 
            "text": "Calculates the absolute value of the expression given as parameter.\nIf the result of the expression is negative it will change the sign,\nif it is positive, it won't do anything.", 
            "title": "Description"
        }, 
        {
            "location": "/abs()/#example-program", 
            "text": "PROGRAM example_abs;\n\nGLOBAL\n    INT values[15];\n    INT n;\n\nBEGIN\n    FROM n=0 TO 15;\n        values[n]=rand(-1000, 1000);\n        write_int(0, 0, n*10,0, offset values[n]);\n    END\n    write(0, 0, 192, 0,  Press [SPACE] to run the function abs() );\n    LOOP\n        IF (key(_space))\n            FROM n=0 TO 15;\n\n                values[n] = abs(values[n]); // We find the absolute value\n\n            END\n        END\n        FRAME;\n    END\nEND  This program will print a list of values on the screen that can be positive or negative, \nwhen the space bar is pressed it will apply the function  abs()  to all these values, \nmaking all values positive.   See:  Expression", 
            "title": "Example program"
        }, 
        {
            "location": "/advance()/", 
            "text": "advance(\ndistance\n)\n\n\nDescription\n\n\nAdvances the process in its angle (specified by the local \nangle\n variable)\nas many points as specified in the \nexpression\n (distance) parameter.\n\n\nTo advance in a different angle to the one specified in this variable, use the\n\nxadvance()\n function instead.\n\n\nThe value can be also a negative number, in this case, the processes' graphic\n\nwill advance in the opposite direction to the angle specified.\n\n\nExample program\n\n\nPROGRAM example_advance;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    graph=101;\n    x=160;\n    y=100;\n    write(0, 0, 0, 0, \nUse the cursors (left + right) to change direction.\n);\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n\n        advance(2); // We advance 2 points\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis example will draw a triangle on screen that will advance in the specified\ndirection (2) in the specified local variable \nangle\n using this function.\n\n\nRemember that the angle is specified in thousandths of a degree.\n\n\nThe local \nangle\n variable will be changed using the cursor keys\n(adding or subtracting 10000, which is equivalent to 10 degrees).\n\n\n\n\nThis function is the same as executing the following two statements:\n\n\nx+=get_distx(angle,\n \ndistance\n);\n\n\ny+=get_disty(angle,\n \ndistance\n);\n\n\nThis function just modifies the coordinates of the process.\nIt is possible to use the two previous statements when you would like the\nprocess to advance in a different angle to the one which in the local\n\nangle\n variable. This could be useful if you want to advance without\nrotation.  Alternatively you can use the \nxadvance()\n function.\n\n\nFor example, to make a process advance 8 points in a direction ( \nstored in a private variable called \nangle2\n) but rotated in another direction,\n(the \nangle\n variable), you would use:\n\n\nx+=get_distx(angle2, 8);\n\n\ny+=get_disty(angle2, 8);\n\n\n\n\nSee: \nxadvance()\n - \nUse of angles in the language\n - \nget_distx()\n - \nget_disty()", 
            "title": "advance()"
        }, 
        {
            "location": "/advance()/#description", 
            "text": "Advances the process in its angle (specified by the local  angle  variable)\nas many points as specified in the  expression  (distance) parameter.  To advance in a different angle to the one specified in this variable, use the xadvance()  function instead.  The value can be also a negative number, in this case, the processes' graphic \nwill advance in the opposite direction to the angle specified.", 
            "title": "Description"
        }, 
        {
            "location": "/advance()/#example-program", 
            "text": "PROGRAM example_advance;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    graph=101;\n    x=160;\n    y=100;\n    write(0, 0, 0, 0,  Use the cursors (left + right) to change direction. );\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n\n        advance(2); // We advance 2 points\n\n        FRAME;\n    END\nEND  This example will draw a triangle on screen that will advance in the specified\ndirection (2) in the specified local variable  angle  using this function.  Remember that the angle is specified in thousandths of a degree.  The local  angle  variable will be changed using the cursor keys\n(adding or subtracting 10000, which is equivalent to 10 degrees).   This function is the same as executing the following two statements:  x+=get_distx(angle,   distance );  y+=get_disty(angle,   distance );  This function just modifies the coordinates of the process.\nIt is possible to use the two previous statements when you would like the\nprocess to advance in a different angle to the one which in the local angle  variable. This could be useful if you want to advance without\nrotation.  Alternatively you can use the  xadvance()  function.  For example, to make a process advance 8 points in a direction ( \nstored in a private variable called  angle2 ) but rotated in another direction,\n(the  angle  variable), you would use:  x+=get_distx(angle2, 8);  y+=get_disty(angle2, 8);   See:  xadvance()  -  Use of angles in the language  -  get_distx()  -  get_disty()", 
            "title": "Example program"
        }, 
        {
            "location": "/change_sound()/", 
            "text": "change_sound(\nchannel\n,\n \nvolume\n,\n \nfrequency\n)\n\n\nDescription\n\n\nTo use this function it is essential to have a sound card installed which is 100%\ncompatible with \nSound Blaster\n (tm) or \nGravis Ultrasound\n (tm)\nand have the correct drivers installed.\n\n\nThis function only works if it is used after the \nsound()\n function\nis called, which is used to play sounds.\n\n\nChange_sound()\n modifies one sound that is playing on one of the \nchannels\n,\nsetting the \nvolume\n and \nfrequency\n.\n\n\nThe \nchannel\n is the \nchannel code\n that is returned by the \nsound()\n\nfunction.  You can play up to 16 channels at the same time, with the same sound\nor with different sounds. Each time you play a sound it is quite possible that\nit will be played through a different channel.\n\n\nEach \nchannel\n has its own levels of volume and frequency.\n\n\nThe \nvolume\n is a value between \n0\n (minimum volume) and \n512\n (maximum volume)\nwhich determines the noise level that the sound will be heard through this channel.\n\n\nThe \nfrequency\n is a value that affects the speed of the sound through the\nchannel, it controls how deep or sharp the sound is emitted.\nValid values are between \n0\n (deep) and \n512\n (sharp).\n\n\nExample program\n\n\nPROGRAM example_change_sound;\n\nPRIVATE\n    freq=256;     // Medium Value (0..512)\n    vol=256;        // Medium Value (0..512)\n\n    sound_id;\n    chan;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n\n    sound_id = load_pcm(\nhelp/help.pcm\n, 1);\n    chan = sound(sound_id, vol, freq);\n\n    write(0, 0, 0, 0, \nPress right or left to change the frequency.\n);\n    write_int(0, 0, 10, 0, offset freq);\n    write(0, 0, 20, 0, \nPress up or down to change the volume.\n);\n    write_int(0, 0, 30, 0, offset vol);\n    LOOP\n\n        // Change the sound\n        change_sound(chan, vol, freq);\n\n        IF (key(_right)) freq++; END\n        IF (key(_left)) freq--; END\n        IF (key(_up)) vol++; END\n        IF (key(_down)) vol--; END\n        FRAME;\n    END\n\nEND\n\n\n\n\nIn the example a sound \nhelp.pcm\n is loaded and played. Inside the main loop\nof the program you can change the frequency and the volume of this sound using the\n\nchange_sound()\n function to modify these values using the cursor keys.\n\n\n\n\nSee: \nload_pcm/wav()\n - \nsound()\n - \nunload_pcm/wav()\n - \nSTRUCT setup", 
            "title": "change_sound()"
        }, 
        {
            "location": "/change_sound()/#description", 
            "text": "To use this function it is essential to have a sound card installed which is 100%\ncompatible with  Sound Blaster  (tm) or  Gravis Ultrasound  (tm)\nand have the correct drivers installed.  This function only works if it is used after the  sound()  function\nis called, which is used to play sounds.  Change_sound()  modifies one sound that is playing on one of the  channels ,\nsetting the  volume  and  frequency .  The  channel  is the  channel code  that is returned by the  sound() \nfunction.  You can play up to 16 channels at the same time, with the same sound\nor with different sounds. Each time you play a sound it is quite possible that\nit will be played through a different channel.  Each  channel  has its own levels of volume and frequency.  The  volume  is a value between  0  (minimum volume) and  512  (maximum volume)\nwhich determines the noise level that the sound will be heard through this channel.  The  frequency  is a value that affects the speed of the sound through the\nchannel, it controls how deep or sharp the sound is emitted.\nValid values are between  0  (deep) and  512  (sharp).", 
            "title": "Description"
        }, 
        {
            "location": "/change_sound()/#example-program", 
            "text": "PROGRAM example_change_sound;\n\nPRIVATE\n    freq=256;     // Medium Value (0..512)\n    vol=256;        // Medium Value (0..512)\n\n    sound_id;\n    chan;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n\n    sound_id = load_pcm( help/help.pcm , 1);\n    chan = sound(sound_id, vol, freq);\n\n    write(0, 0, 0, 0,  Press right or left to change the frequency. );\n    write_int(0, 0, 10, 0, offset freq);\n    write(0, 0, 20, 0,  Press up or down to change the volume. );\n    write_int(0, 0, 30, 0, offset vol);\n    LOOP\n\n        // Change the sound\n        change_sound(chan, vol, freq);\n\n        IF (key(_right)) freq++; END\n        IF (key(_left)) freq--; END\n        IF (key(_up)) vol++; END\n        IF (key(_down)) vol--; END\n        FRAME;\n    END\n\nEND  In the example a sound  help.pcm  is loaded and played. Inside the main loop\nof the program you can change the frequency and the volume of this sound using the change_sound()  function to modify these values using the cursor keys.   See:  load_pcm/wav()  -  sound()  -  unload_pcm/wav()  -  STRUCT setup", 
            "title": "Example program"
        }, 
        {
            "location": "/clear_screen()/", 
            "text": "clear_screen()\n\n\nDescription\n\n\nDelete from the screen all graphics placed on it with the\n\nput()\n, \nxput()\n, \nput_pixel()\n \n \nput_screen()\n functions.\n\n\nExample program\n\n\nPROGRAM example_clear_screen;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write(0, 0, 0, 0, \nPress [SPACE] to clear the screen.\n);\n    write(0, 0, 10, 0, \nPress [ENTER] to view it again.\n);\n    graph=100;\n    x=160;\n    y=100;\n    LOOP\n        IF (key (_space))\n\n            clear_screen(); // Deletes the graphic of the screen\n\n        END\n        IF (key (_enter)) put_screen(0, 1); END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example a graphic is drawn using the \nput_screen()\n function.\nWhen the space bar is pressed, the screen is deleted.\n\n\nPressing the key \nEnter\n, you can see the screen again.\n\n\nYou can see how the graphic of the process (a ball that appears in the\ncentre) doesn't disappear when you use the function \nclear_screen()\n, because\nthe function will just delete the screen.\n\n\n\n\nSee: \nput()\n - \nxput()\n - \nput_pixel()\n - \nput_screen()", 
            "title": "clear_screen()"
        }, 
        {
            "location": "/clear_screen()/#description", 
            "text": "Delete from the screen all graphics placed on it with the put() ,  xput() ,  put_pixel()     put_screen()  functions.", 
            "title": "Description"
        }, 
        {
            "location": "/clear_screen()/#example-program", 
            "text": "PROGRAM example_clear_screen;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write(0, 0, 0, 0,  Press [SPACE] to clear the screen. );\n    write(0, 0, 10, 0,  Press [ENTER] to view it again. );\n    graph=100;\n    x=160;\n    y=100;\n    LOOP\n        IF (key (_space))\n\n            clear_screen(); // Deletes the graphic of the screen\n\n        END\n        IF (key (_enter)) put_screen(0, 1); END\n        FRAME;\n    END\nEND  In the example a graphic is drawn using the  put_screen()  function.\nWhen the space bar is pressed, the screen is deleted.  Pressing the key  Enter , you can see the screen again.  You can see how the graphic of the process (a ball that appears in the\ncentre) doesn't disappear when you use the function  clear_screen() , because\nthe function will just delete the screen.   See:  put()  -  xput()  -  put_pixel()  -  put_screen()", 
            "title": "Example program"
        }, 
        {
            "location": "/collision()/", 
            "text": "collision(\ntype of process\n)\n\n\nReturns\n\n\nThe \nidentifier code\n of one process or \n0\n.\n\n\nDescription\n\n\nThis is the function \nto detect collisions\n between graphics.\n\n\nChecks if the current process (the one that executed this function) collides with\none of the indicated parameter types. It checks to see if the graphics\nof both processes are overlapped.\n\n\nIf a collision is detected, it returns the \nidentifier code\n\nof the process which is colliding with the current process. If not, the function will return \n0\n.\n\n\nIf the current process collides with more process of the specified type, the function\n\ncollision()\n will return the rest of the identifiers in the successive calls to the\n\ncollision()\n function.\n\n\nTo get every \n identifier code\n of the process that is in collision with the\ncurrent one, you must not use a \nFRAME\n statement between successive calls to the\n\ncollision()\n function. As soon as a \nFRAME\n statement is reached, the function will\nstart returning collision ID's starting with the first.\n\n\nSomething similar happens if you run a call to the function specifying a different\ntype of process; if, after this, collisions are still detected with the previous\ntype, this function will return every code from the first.\n\n\nIf you want to obtain every \nidentifier code\n of the processes\nof one particular type without collision, you must call the function \nget_id()\n.\n\n\nIf you want to check how near two processes are so that their graphics do not \ncollide, then you must use the \nget_dist()\n function.\n\n\nExample program\n\n\nPROGRAM example_collision;\n\nPRIVATE\n    id2;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    graph=100;\n    x=160;\n    y=100;\n    mobile_process(80, 50, 101);\n    LOOP\n        delete_text(all_text);\n        write(0, 160, 0, 1, \nUse the cursors to move the triangle\n);\n\n        id2 = collision(TYPE mobile_process); // Collision detected\n\n        IF (id2\n0)\n            write(0, 160, 200, 7, \n\u00a1 COLLISION DETECTED!\n);\n        END\n        FRAME;\n    END\nEND\n\nPROCESS mobile_process(x, y, graph);\n\nBEGIN\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n        IF (key(_up)) advance(4); END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example you can see a ball in the centre of the screen as\nthe graphic of the main program. After that a process named \nmobile_process\n\nis created with the picture of a controllable triangle with the cursor keys.\n\n\nThe main program will call the function \ncollision()\n to check if its graphic\n(the circle) collides with the graphic of the \nmobile_process\n type (the triangle).\nThe result of the function is saved in the private variable \nid2\n of the main program.\nThis value will be \n0\n until a collision is detected, and will return the\n\nidentifier code\n of \nmobile_process\n when it does.\n\n\nThe identifier codes of the processes are always odd numbers, which in the DIV\nlanguage are true conditions (the even numbers are associated with the false conditions),\nthus, in the example program we could have changed the statement to:\n\n\nIF (id2\n0)\n ... \nEND\n\n\nFor the next one:\n\n\nIF (id2)\n ... \nEND\n\n\nFor further information about this, see: \nDefinition of a condition.\n\n\n\n\nWhen you can see the mouse pointer in a DIV program (by assigning the code of the\ncorresponding graphic in the \nmouse structure\n), it is possible to see\nif it has collided with the current process using this function in the following way:\n\n\nIF (collision(TYPE mouse))\n\n\n  // The process collides with the mouse pointer\n\n\n\nEND\n\n\nWhen a collision with the mouse pointer is detected, it won't be done with the entire\ngraphic used as a pointer like a normal graph, but only with the main \ncheckpoint\n\n(the number 0) of the same item, known commonly as the \nhotspot\n (\nhotspot\n) of the mouse.\n\n\n\n\nThis function is used to detect collisions between graphics on the screen\nor in a window with a scrollbar.\n\n\nIt's not possible to use this function to detect collisions with processes \nthat don't have a graphic (a valid code allocated to its variable\n\ngraph\n) or between graphics of a window of mode 7 or mode 8 (with its variable\n\nctype\n allocated to the value \nc_m7\n o \nc_m8\n).\n\n\nIt is \nessential\n that the particular item of the current process that is the\nspecified graphic has a defined graphic associated with it.\n\n\nTo detect collisions between graphics of a window of mode 7 or mode 8 you must use\nthe \nget_dist()\n function to detect when the distance between the\ntwo processes is smaller than the distance stipulated as a \ncollision distance\n.\n\n\n\n\nSee: \nget_id()\n - \nget_dist()\n - \nTypes of processes\n - {#1038,Ways to obtain\nthe identifier code}", 
            "title": "collision()"
        }, 
        {
            "location": "/collision()/#returns", 
            "text": "The  identifier code  of one process or  0 .", 
            "title": "Returns"
        }, 
        {
            "location": "/collision()/#description", 
            "text": "This is the function  to detect collisions  between graphics.  Checks if the current process (the one that executed this function) collides with\none of the indicated parameter types. It checks to see if the graphics\nof both processes are overlapped.  If a collision is detected, it returns the  identifier code \nof the process which is colliding with the current process. If not, the function will return  0 .  If the current process collides with more process of the specified type, the function collision()  will return the rest of the identifiers in the successive calls to the collision()  function.  To get every   identifier code  of the process that is in collision with the\ncurrent one, you must not use a  FRAME  statement between successive calls to the collision()  function. As soon as a  FRAME  statement is reached, the function will\nstart returning collision ID's starting with the first.  Something similar happens if you run a call to the function specifying a different\ntype of process; if, after this, collisions are still detected with the previous\ntype, this function will return every code from the first.  If you want to obtain every  identifier code  of the processes\nof one particular type without collision, you must call the function  get_id() .  If you want to check how near two processes are so that their graphics do not \ncollide, then you must use the  get_dist()  function.", 
            "title": "Description"
        }, 
        {
            "location": "/collision()/#example-program", 
            "text": "PROGRAM example_collision;\n\nPRIVATE\n    id2;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    graph=100;\n    x=160;\n    y=100;\n    mobile_process(80, 50, 101);\n    LOOP\n        delete_text(all_text);\n        write(0, 160, 0, 1,  Use the cursors to move the triangle );\n\n        id2 = collision(TYPE mobile_process); // Collision detected\n\n        IF (id2 0)\n            write(0, 160, 200, 7,  \u00a1 COLLISION DETECTED! );\n        END\n        FRAME;\n    END\nEND\n\nPROCESS mobile_process(x, y, graph);\n\nBEGIN\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n        IF (key(_up)) advance(4); END\n        FRAME;\n    END\nEND  In this example you can see a ball in the centre of the screen as\nthe graphic of the main program. After that a process named  mobile_process \nis created with the picture of a controllable triangle with the cursor keys.  The main program will call the function  collision()  to check if its graphic\n(the circle) collides with the graphic of the  mobile_process  type (the triangle).\nThe result of the function is saved in the private variable  id2  of the main program.\nThis value will be  0  until a collision is detected, and will return the identifier code  of  mobile_process  when it does.  The identifier codes of the processes are always odd numbers, which in the DIV\nlanguage are true conditions (the even numbers are associated with the false conditions),\nthus, in the example program we could have changed the statement to:  IF (id2 0)  ...  END  For the next one:  IF (id2)  ...  END  For further information about this, see:  Definition of a condition.   When you can see the mouse pointer in a DIV program (by assigning the code of the\ncorresponding graphic in the  mouse structure ), it is possible to see\nif it has collided with the current process using this function in the following way:  IF (collision(TYPE mouse))    // The process collides with the mouse pointer  END  When a collision with the mouse pointer is detected, it won't be done with the entire\ngraphic used as a pointer like a normal graph, but only with the main  checkpoint \n(the number 0) of the same item, known commonly as the  hotspot  ( hotspot ) of the mouse.   This function is used to detect collisions between graphics on the screen\nor in a window with a scrollbar.  It's not possible to use this function to detect collisions with processes \nthat don't have a graphic (a valid code allocated to its variable graph ) or between graphics of a window of mode 7 or mode 8 (with its variable ctype  allocated to the value  c_m7  o  c_m8 ).  It is  essential  that the particular item of the current process that is the\nspecified graphic has a defined graphic associated with it.  To detect collisions between graphics of a window of mode 7 or mode 8 you must use\nthe  get_dist()  function to detect when the distance between the\ntwo processes is smaller than the distance stipulated as a  collision distance .   See:  get_id()  -  get_dist()  -  Types of processes  - {#1038,Ways to obtain\nthe identifier code}", 
            "title": "Example program"
        }, 
        {
            "location": "/convert_palette()/", 
            "text": "convert_palette(\nfile\n,\n \ngraphic\n,\n \nOFFSET new_palette\n)\n\n\nDescription\n\n\nManipulates a \ngraphic's\n map of colour to that of the indicated \nfile\n.\n\n\nThe \noffset\n new_palette\n is the path/address inside the memory of the computer\nof a 256-colour table where the new order of colours are located.\n\n\nNote The table must be (of the \nINT\n type, signed 32bit).\n\n\nIf the table is like this:\n\n\nnew_palette[255]=0, 1, 2, 3, 4, ... , 254, 255;\n\n\nThe graphic will not be changed.\n\n\nHowever, if in the 3rd position of the previous table (new_palette[3]) there is a 16 (not a 3),\nwhen the function is called with the \noffset\n of the table, \nthe colour 3 will be changed for the colour 16 in the graphic.\n\n\nThe graphics loaded with the functions \nload_map()\n or \nload_pcx()\n\n(or made with \nnew_map()\n) will be used as if they refer to the first file\n(the file with the code 0).\n\n\nIf a process wants to change the colours of its graphic, it must build \na palette with the new order of colours and, after that, call the function with\nthe parameters:\n\n\nconvert_palette(file, graph, \nOFFSET new_palette\n)\n\n\nHere is a program that changes the colours of its graphic in this way\nusing the predefined local variables \nfile\n and \ngraph\n.\n\n\nExample program\n\n\nPROGRAM example_convert_palette;\n\nPRIVATE\n    new_palette[255];\n    counter;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n\n    FROM counter=1 TO 255;\n        new_palette[counter]=(counter+16) MOD 256;\n    END\n\n    graph=100;\n    x=160;\n    y=100;\n\n    write (0, 160, 0, 1, \nPress [SPACE] to change the colours of the ball\n);\n    LOOP\n        IF (scan_code==_space)\n\n            // We convert the palette of the graphic number 100 (ball)\n            convert_palette(file, graph, offset new_palette);\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nFirst, \na table is created with the new order\n\nof the palette. The colour number 0 (transparent) never changes\n(new_palette[0] will always be 0) and the rest of the colours (from 1 to 255)\nwill be changed for the colour that is 16 positions further along in the palette\n(the 1 for 17, the 2 for 18, etc.). The last 16 colours will be changed\nfor the first 16 (when the operation \nMOD 256\n is done the values are truncated, \n256 will be 0, 257 will be 1, etc.).\n\n\nAfter that, inside the main loop of the program the function will run \n\nconvert_palette()\n and it will change the colours of the ball each time\nthat the space bar is pressed.\n\n\n\n\nSee: \nload_pal()\n - \nroll_palette()", 
            "title": "convert_palette()"
        }, 
        {
            "location": "/convert_palette()/#description", 
            "text": "Manipulates a  graphic's  map of colour to that of the indicated  file .  The  offset  new_palette  is the path/address inside the memory of the computer\nof a 256-colour table where the new order of colours are located.", 
            "title": "Description"
        }, 
        {
            "location": "/convert_palette()/#note-the-table-must-be-of-the-int-type-signed-32bit", 
            "text": "If the table is like this:  new_palette[255]=0, 1, 2, 3, 4, ... , 254, 255;  The graphic will not be changed.  However, if in the 3rd position of the previous table (new_palette[3]) there is a 16 (not a 3),\nwhen the function is called with the  offset  of the table, \nthe colour 3 will be changed for the colour 16 in the graphic.  The graphics loaded with the functions  load_map()  or  load_pcx() \n(or made with  new_map() ) will be used as if they refer to the first file\n(the file with the code 0).  If a process wants to change the colours of its graphic, it must build \na palette with the new order of colours and, after that, call the function with\nthe parameters:  convert_palette(file, graph,  OFFSET new_palette )  Here is a program that changes the colours of its graphic in this way\nusing the predefined local variables  file  and  graph .", 
            "title": "Note The table must be (of the INT type, signed 32bit)."
        }, 
        {
            "location": "/convert_palette()/#example-program", 
            "text": "PROGRAM example_convert_palette;\n\nPRIVATE\n    new_palette[255];\n    counter;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n\n    FROM counter=1 TO 255;\n        new_palette[counter]=(counter+16) MOD 256;\n    END\n\n    graph=100;\n    x=160;\n    y=100;\n\n    write (0, 160, 0, 1,  Press [SPACE] to change the colours of the ball );\n    LOOP\n        IF (scan_code==_space)\n\n            // We convert the palette of the graphic number 100 (ball)\n            convert_palette(file, graph, offset new_palette);\n\n        END\n        FRAME;\n    END\nEND  First,  a table is created with the new order \nof the palette. The colour number 0 (transparent) never changes\n(new_palette[0] will always be 0) and the rest of the colours (from 1 to 255)\nwill be changed for the colour that is 16 positions further along in the palette\n(the 1 for 17, the 2 for 18, etc.). The last 16 colours will be changed\nfor the first 16 (when the operation  MOD 256  is done the values are truncated, \n256 will be 0, 257 will be 1, etc.).  After that, inside the main loop of the program the function will run  convert_palette()  and it will change the colours of the ball each time\nthat the space bar is pressed.   See:  load_pal()  -  roll_palette()", 
            "title": "Example program"
        }, 
        {
            "location": "/define_region()/", 
            "text": "define_region(\nregion number\n,\n \nx\n,\n \ny\n,\nwidth\n \n,\nheight\n \n)\n\n\nDescription\n\n\nDefines a new region within the screen (like a borderless window).\nRegions are rectangular areas inside the screen, in which you will see some kind\nof process, scroll windows or mode 7 windows.\n\n\nThe \nregion number\n must be between 1 and 31. Up to 31 different \nregions in the screen can be defined that are assignable, after that, to different processes\n(fixing its local variable \nregion\n to the new number) as its view window\nor use it like a border for a scroll window or a mode 7 window, indicating it in the\n\nparameter of the functions \nstart_scroll()\n or \nstart_mode7()\n.\n\n\nThe \nregion number 0\n can't be redefined, because it will be always be the entire screen,\na window at the coordinates (0, 0) and as wide and as high as the screen.\nThis is the region in which every process will be displayed,\nbecause its local variable \nregion\n always has a value 0.\n\n\nExample program\n\n\nPROGRAM example_define_region;\n\nPRIVATE\n    counter;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n\n    define_region(1, 0, 0, 160, 200);   // We define the region 1\n    define_region(2, 160, 0, 160, 200); // We define the region 2\n\n    write(0, 0, 0, 0, \nRegion 1\n);\n    write(0, 320, 0, 2, \nRegion 2\n);\n\n    FROM counter=1 TO 20;\n        mobile_process(rand(0, 319), rand(0, 159), rand(-8, 8), rand(-8, 8), rand(1, 2));\n    END\nEND\n\nPROCESS mobile_process(x, y, increment_x, increment_y, region);\n\nBEGIN\n    graph=100;\n    LOOP\n        IF (x\n0 OR x\n320) increment_x=-increment_x; END\n        IF (y\n0 OR y\n200) increment_y=-increment_y; END\n        x+=increment_x;\n        y+=increment_y;\n        FRAME;\n    END\nEND\n\n\n\n\nFirst you define two regions as lateral divisions of the screen.\nAfter that, 20 processes of the type \nmobile_process\n are created using a loop at random\ncoordinates and movement, in one of the two regions.\n\n\nYou can see in the execution how each process can be seen in only one of the two halves\nof the screen (just in its region).\n\n\n\n\nSee: \nout_region()\n - \nstart_scroll()\n - \nstart_mode7()\n - \nVariable region", 
            "title": "define_region()"
        }, 
        {
            "location": "/define_region()/#description", 
            "text": "Defines a new region within the screen (like a borderless window).\nRegions are rectangular areas inside the screen, in which you will see some kind\nof process, scroll windows or mode 7 windows.  The  region number  must be between 1 and 31. Up to 31 different \nregions in the screen can be defined that are assignable, after that, to different processes\n(fixing its local variable  region  to the new number) as its view window\nor use it like a border for a scroll window or a mode 7 window, indicating it in the \nparameter of the functions  start_scroll()  or  start_mode7() .  The  region number 0  can't be redefined, because it will be always be the entire screen,\na window at the coordinates (0, 0) and as wide and as high as the screen.\nThis is the region in which every process will be displayed,\nbecause its local variable  region  always has a value 0.", 
            "title": "Description"
        }, 
        {
            "location": "/define_region()/#example-program", 
            "text": "PROGRAM example_define_region;\n\nPRIVATE\n    counter;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n\n    define_region(1, 0, 0, 160, 200);   // We define the region 1\n    define_region(2, 160, 0, 160, 200); // We define the region 2\n\n    write(0, 0, 0, 0,  Region 1 );\n    write(0, 320, 0, 2,  Region 2 );\n\n    FROM counter=1 TO 20;\n        mobile_process(rand(0, 319), rand(0, 159), rand(-8, 8), rand(-8, 8), rand(1, 2));\n    END\nEND\n\nPROCESS mobile_process(x, y, increment_x, increment_y, region);\n\nBEGIN\n    graph=100;\n    LOOP\n        IF (x 0 OR x 320) increment_x=-increment_x; END\n        IF (y 0 OR y 200) increment_y=-increment_y; END\n        x+=increment_x;\n        y+=increment_y;\n        FRAME;\n    END\nEND  First you define two regions as lateral divisions of the screen.\nAfter that, 20 processes of the type  mobile_process  are created using a loop at random\ncoordinates and movement, in one of the two regions.  You can see in the execution how each process can be seen in only one of the two halves\nof the screen (just in its region).   See:  out_region()  -  start_scroll()  -  start_mode7()  -  Variable region", 
            "title": "Example program"
        }, 
        {
            "location": "/delete_text()/", 
            "text": "delete_text(\ntext identifier\n)\n\n\nDescription\n\n\nDelete text on the screen that is specified with the \ntext identifier\n parameter,\nwhich is a numeric code returned by the functions \nwrite()\n and \nwrite_int()\n.\n\n\nIf \nall_text\n is specified as the \ntext identifier\n parameter, then all text\non screen will be deleted.\n\n\nExample program\n\n\nPROGRAM example_delete_text;\n\nPRIVATE\n    text_id;\n\nBEGIN\n    write(0, 160, 10, 1, \nPress [ENTER] to make the above text reappear.\n);\n    LOOP\n        text_id=write(0, 160, 0, 1, \nPress [SPACE] to delete this text.\n);\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n\n        delete_text(text_id); // Delete the text\n\n        WHILE (NOT key(_enter))\n            FRAME;\n        END\n    END\nEND\n\n\n\n\nIn this example, two texts appear on screen. When you press\nthe space bar, one of these texts will be deleted using the \ndelete_text()\n function,\nand when you press the Enter key, the text appears again using the \nwrite()\n function - \nwhich returns the new text identifier \ntext_id\n.\n\n\n\n\nSee: \nwrite()\n - \nwrite_int()\n - \nmove_text()", 
            "title": "delete_text()"
        }, 
        {
            "location": "/delete_text()/#description", 
            "text": "Delete text on the screen that is specified with the  text identifier  parameter,\nwhich is a numeric code returned by the functions  write()  and  write_int() .  If  all_text  is specified as the  text identifier  parameter, then all text\non screen will be deleted.", 
            "title": "Description"
        }, 
        {
            "location": "/delete_text()/#example-program", 
            "text": "PROGRAM example_delete_text;\n\nPRIVATE\n    text_id;\n\nBEGIN\n    write(0, 160, 10, 1,  Press [ENTER] to make the above text reappear. );\n    LOOP\n        text_id=write(0, 160, 0, 1,  Press [SPACE] to delete this text. );\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n\n        delete_text(text_id); // Delete the text\n\n        WHILE (NOT key(_enter))\n            FRAME;\n        END\n    END\nEND  In this example, two texts appear on screen. When you press\nthe space bar, one of these texts will be deleted using the  delete_text()  function,\nand when you press the Enter key, the text appears again using the  write()  function - \nwhich returns the new text identifier  text_id .   See:  write()  -  write_int()  -  move_text()", 
            "title": "Example program"
        }, 
        {
            "location": "/end_fli()/", 
            "text": "end_fli()\n\n\nDescription\n\n\nFinishes an animation \nFLI/FLC\n shown on screen and frees the memory that was\nbeing used.\n\n\nThe animations \nFLI/FLC\n are initiated with the \nstart_fli()\n function.\n\n\nOnly one animation can be loaded at a time.\n\n\nExample program\n\n\nPROGRAM example_end_fli;\nBEGIN\n    LOOP\n        start_fli(\nhelp/help.fli\n, 0, 0); // load and play the animation\n        WHILE (frame_fli()\n0)\n            FRAME;\n        END\n\n        end_fli(); // Unload the animation\n\n    END\nEND\n\n\n\n\nIn this example, the animation is loaded with the \nstart_fli()\n function\nand then is displayed via \nframe_fli()\n until it finishes (when\n\nframe_fli()\n returns 0). At that moment it is unloaded from memory using \nend_fli()\n.\n\n\nThe program does this sequence of commands (load, play, update  and unload)\nof the animation \nFLI/FLC\n) indefinitely.\n\n\nIt is not necessary for the animation to have finished before it is unloaded from\nthe memory.\n\n\n\n\nSee: \nstart_fli()\n - \nframe_fli()\n - \nreset_fli()", 
            "title": "end_fli()"
        }, 
        {
            "location": "/end_fli()/#description", 
            "text": "Finishes an animation  FLI/FLC  shown on screen and frees the memory that was\nbeing used.  The animations  FLI/FLC  are initiated with the  start_fli()  function.  Only one animation can be loaded at a time.", 
            "title": "Description"
        }, 
        {
            "location": "/end_fli()/#example-program", 
            "text": "PROGRAM example_end_fli;\nBEGIN\n    LOOP\n        start_fli( help/help.fli , 0, 0); // load and play the animation\n        WHILE (frame_fli() 0)\n            FRAME;\n        END\n\n        end_fli(); // Unload the animation\n\n    END\nEND  In this example, the animation is loaded with the  start_fli()  function\nand then is displayed via  frame_fli()  until it finishes (when frame_fli()  returns 0). At that moment it is unloaded from memory using  end_fli() .  The program does this sequence of commands (load, play, update  and unload)\nof the animation  FLI/FLC ) indefinitely.  It is not necessary for the animation to have finished before it is unloaded from\nthe memory.   See:  start_fli()  -  frame_fli()  -  reset_fli()", 
            "title": "Example program"
        }, 
        {
            "location": "/exit()/", 
            "text": "exit(\nmessage\n,\n \nreturn code\n)\n\n\nDescription\n\n\nEnds the game, killing all processes and returning to the operating system\n(or to the DIV IDE) with a \nmessage\n and a \nnumeric code\n.\n\n\nThe message is  text message displayed between quotation marks which will be shown when the game\nfinishes as an indication to the user that they have left DIV2.\n\n\nThe \nreturn code\n is valid for the use of external programs to\nDIV Games Studio (like *.BAT files ), to determine the action\nthat must be done after finishing the game.\n\n\nWhen the function \nexit()\nis used, you do not need to close any resources as this\nwill be done for you (such as maps, fli, sounds and songs) as the system frees\nall resources automatically .\n\n\nExample program\n\n\nPROGRAM example_exit;\nBEGIN\n    write(0, 160, 0, 1, \nPress [SPACE] to finish the program.\n);\n    LOOP\n        IF (key (_space))\n            fade_off();\n\n            exit(\nThanks for using me!\n, 0); // We exit the program\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example you can see a message whilst the program waits for the\nspace bar to be pressed, then exits with the \nexit()\n function.\n\n\n\n\nEvery DIV program will finish its execution at any moment if the key combination\n\n[ALT]+[X]\n is pressed. This is similar to calling the \nexit()\n function, but\nwithout any messages and with the return code 0.\n\n\n\n\nSee: \nlet_me_alone()\n - \nfade_off()", 
            "title": "exit()"
        }, 
        {
            "location": "/exit()/#description", 
            "text": "Ends the game, killing all processes and returning to the operating system\n(or to the DIV IDE) with a  message  and a  numeric code .  The message is  text message displayed between quotation marks which will be shown when the game\nfinishes as an indication to the user that they have left DIV2.  The  return code  is valid for the use of external programs to\nDIV Games Studio (like *.BAT files ), to determine the action\nthat must be done after finishing the game.  When the function  exit() is used, you do not need to close any resources as this\nwill be done for you (such as maps, fli, sounds and songs) as the system frees\nall resources automatically .", 
            "title": "Description"
        }, 
        {
            "location": "/exit()/#example-program", 
            "text": "PROGRAM example_exit;\nBEGIN\n    write(0, 160, 0, 1,  Press [SPACE] to finish the program. );\n    LOOP\n        IF (key (_space))\n            fade_off();\n\n            exit( Thanks for using me! , 0); // We exit the program\n\n        END\n        FRAME;\n    END\nEND  In the example you can see a message whilst the program waits for the\nspace bar to be pressed, then exits with the  exit()  function.   Every DIV program will finish its execution at any moment if the key combination [ALT]+[X]  is pressed. This is similar to calling the  exit()  function, but\nwithout any messages and with the return code 0.   See:  let_me_alone()  -  fade_off()", 
            "title": "Example program"
        }, 
        {
            "location": "/fade()/", 
            "text": "fade(\n% red\n,\n \n% green\n,\n \n% blue\n,\n \nspeed\n)\n\n\nDescription\n\n\nFades the palette until the percentages of colour is reached - (from 0% to 200%\nof the \nred\n (red), \ngreen\n (green) and \nblue\n (blue) components, specified as parameters).\n\n\nThe last parameter indicates the speed at which the fading will occur, \nnormally defined as a number from 1 (very slowly) to\n10 (Very fast).\n\n\nIf the speed indicates a number bigger or equal to 64, the fade will be done\ninstantaneously.\n\n\nThe fade will be done gradually in the successive frames of the game.\n\n\nIf all three colour components are 0 you will see a fade to black, if the three components are\nset to 200, the fade will be to white, if the components are 100 you will retrieve the \noriginal colours of the game palette.\n\n\nA value less than 100 in a component will tone down its colour, meanwhile that a value \ngreater than 100, will saturate the colour.\n\n\nRemember that the fade doesn't happen when the function \nfade()\n is called, but over \nthe next \nFRAME\n statements . Whilst the program is executing\na fade command, the predefined global variable \nfading\n will have a value of \ntrue\n\n(1) and when the fade is finished (the required values have been reached), this\nvariable will be set to \nfalse\n (0).\n\n\nExample program\n\n\nPROGRAM example_fade;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write (0, 0, 0, 0, \nPress [SPACE] to see the fade() effects.\n);\n    LOOP\n        IF (NOT fading AND key(_space))\n\n            fade(rand(0, 200), rand(0, 200), rand(0, 200), 5);\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example a screen is loaded and a message appears.\nEach time that the space bar is pressed and a fade is not already in\nprogress (\nIF (NOT fading ...)\n), a new fade will start with the three random values\nchosen between 0% and 200% (with the \nrand()\n function) at a speed value of 5.\n\n\n\n\nSee: \nfading\n - \nfade_off()\n - \nfade_on()\n - \nload_pal()", 
            "title": "fade()"
        }, 
        {
            "location": "/fade()/#description", 
            "text": "Fades the palette until the percentages of colour is reached - (from 0% to 200%\nof the  red  (red),  green  (green) and  blue  (blue) components, specified as parameters).  The last parameter indicates the speed at which the fading will occur, \nnormally defined as a number from 1 (very slowly) to\n10 (Very fast).  If the speed indicates a number bigger or equal to 64, the fade will be done\ninstantaneously.  The fade will be done gradually in the successive frames of the game.  If all three colour components are 0 you will see a fade to black, if the three components are\nset to 200, the fade will be to white, if the components are 100 you will retrieve the \noriginal colours of the game palette.  A value less than 100 in a component will tone down its colour, meanwhile that a value \ngreater than 100, will saturate the colour.  Remember that the fade doesn't happen when the function  fade()  is called, but over \nthe next  FRAME  statements . Whilst the program is executing\na fade command, the predefined global variable  fading  will have a value of  true \n(1) and when the fade is finished (the required values have been reached), this\nvariable will be set to  false  (0).", 
            "title": "Description"
        }, 
        {
            "location": "/fade()/#example-program", 
            "text": "PROGRAM example_fade;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write (0, 0, 0, 0,  Press [SPACE] to see the fade() effects. );\n    LOOP\n        IF (NOT fading AND key(_space))\n\n            fade(rand(0, 200), rand(0, 200), rand(0, 200), 5);\n\n        END\n        FRAME;\n    END\nEND  In the example a screen is loaded and a message appears.\nEach time that the space bar is pressed and a fade is not already in\nprogress ( IF (NOT fading ...) ), a new fade will start with the three random values\nchosen between 0% and 200% (with the  rand()  function) at a speed value of 5.   See:  fading  -  fade_off()  -  fade_on()  -  load_pal()", 
            "title": "Example program"
        }, 
        {
            "location": "/fade_off()/", 
            "text": "fade_off()\n\n\nDescription\n\n\nCreates a fade to black from the colours on screen. The game stays as it is\nuntil the screen is completely black.\n\n\nTo turn on the screen again (undo the fade to black), use the \nfade_on()\n function.\n\n\nExample program\n\n\nPROGRAM example_fade_off;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write (0, 0, 0, 0, \nPress [SPACE] to fade off and fade on the screen.\n);\n    LOOP\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n\n        fade_off(); // We turn off the screen\n\n        fade_on();\n    END\nEND\n\n\n\n\nIn this example, a screen appears, and after that, the program waits for the\nspace bar to be pressed to turn off and turn on the screen.\n\n\nThe \nfade()\n function can do this without stopping the program\nor at different speeds, as well as creating more advanced palette effects.\n\n\n\n\nSee: \nfade()\n - \nfade_on()", 
            "title": "fade_off()"
        }, 
        {
            "location": "/fade_off()/#description", 
            "text": "Creates a fade to black from the colours on screen. The game stays as it is\nuntil the screen is completely black.  To turn on the screen again (undo the fade to black), use the  fade_on()  function.", 
            "title": "Description"
        }, 
        {
            "location": "/fade_off()/#example-program", 
            "text": "PROGRAM example_fade_off;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write (0, 0, 0, 0,  Press [SPACE] to fade off and fade on the screen. );\n    LOOP\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n\n        fade_off(); // We turn off the screen\n\n        fade_on();\n    END\nEND  In this example, a screen appears, and after that, the program waits for the\nspace bar to be pressed to turn off and turn on the screen.  The  fade()  function can do this without stopping the program\nor at different speeds, as well as creating more advanced palette effects.   See:  fade()  -  fade_on()", 
            "title": "Example program"
        }, 
        {
            "location": "/fade_on()/", 
            "text": "fade_on()\n\n\nDescription\n\n\nCreates a fade up of the colours on the screen to their natural saturation (100%).\n\n\nIn the successive \nFRAME\n statements of the game, the colours will recover their\nvisibility until they can be seen perfectly.\n\n\nTo turn off the screen (to do a fade to black) use the \nfade_off()\n function.\n\n\nExample program\n\n\nPROGRAM example_fade_off;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write (0, 0, 0, 0, \nPress [SPACE] to fade off and fade on the screen.\n);\n    LOOP\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n        fade_off();\n\n        fade_on(); // The screen is faded on\n\n    END\nEND\n\n\n\n\nIn this example, a screen appears, and after that, the program waits for the\nspace bar to be pressed to turn off and turn on the screen.\n\n\nThe \nfade()\n function can do this without stopping the program\nor at different speeds, as well as creating more advanced palette effects.\n\n\n\n\nEvery game automatically executes a \nfade_on()\n at the beginning\nof execution.\n\n\n\n\nSee: \nfade()\n - \nfade_off()", 
            "title": "fade_on()"
        }, 
        {
            "location": "/fade_on()/#description", 
            "text": "Creates a fade up of the colours on the screen to their natural saturation (100%).  In the successive  FRAME  statements of the game, the colours will recover their\nvisibility until they can be seen perfectly.  To turn off the screen (to do a fade to black) use the  fade_off()  function.", 
            "title": "Description"
        }, 
        {
            "location": "/fade_on()/#example-program", 
            "text": "PROGRAM example_fade_off;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write (0, 0, 0, 0,  Press [SPACE] to fade off and fade on the screen. );\n    LOOP\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n        fade_off();\n\n        fade_on(); // The screen is faded on\n\n    END\nEND  In this example, a screen appears, and after that, the program waits for the\nspace bar to be pressed to turn off and turn on the screen.  The  fade()  function can do this without stopping the program\nor at different speeds, as well as creating more advanced palette effects.   Every game automatically executes a  fade_on()  at the beginning\nof execution.   See:  fade()  -  fade_off()", 
            "title": "Example program"
        }, 
        {
            "location": "/fget_angle()/", 
            "text": "fget_angle(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\nReturns\n\n\nThe angle between two points.\n\n\nDescription\n\n\nReturns the angle from the \npoint 0\n (x0, y0) to the \npoint 1\n\n(x1, y1).\n\n\nRemember that the angle is specified in thousandths of a degree. The function\nalways returns a value between \n -180000\n and \n180000\n (an  angle between -180\nand 180 degrees).\n\n\nCoordinates of both points (x0, y0, x1, y1) can be any valid numeric expression.\n\n\nExample program\n\n\nPROGRAM example_fget_angle;\n\nPRIVATE\n    coord_x0, coord_y0;\n    coord_x1, coord_y1;\n    result;\n    file1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    write(0, 0, 0, 0, \nCoordinates point 1\n);\n    write(0, 0, 10, 0, \nX:\n);\n    write_int(0, 20, 10, 0, offset coord_x0);\n    write(0, 0, 20, 0, \nY:\n);\n    write_int(0, 20, 20, 0, offset coord_y0);\n    write(0, 0, 40, 0, \nCoordinates point 2\n);\n    write(0, 0, 50, 0, \nX:\n);\n    write_int(0, 20, 50, 0, offset coord_x1);\n    write(0, 0, 60, 0, \nY:\n);\n    write_int(0, 20, 60, 0, offset coord_y1);\n    write(0, 0, 80, 0, \nAngle from point 1 to point 2:\n);\n    write_int(0, 0, 90, 0, offset result);\n    write(0, 0, 200, 6, \nPress [SPACE] to get another two points.\n);\n    LOOP\n        clear_screen();\n        coord_x0=rand(0, 319);\n        coord_y0=rand(0, 199);\n        coord_x1=rand(0, 319);\n        coord_y1=rand(0, 199);\n        put(file1,200,coord_x0, coord_y0);\n        put(file1,200,coord_x1, coord_y1);\n\n        //We find the angle between two points\n        result = fget_angle(coord_x0, coord_y0, coord_x1, coord_y1);\n\n        scan_code=0;\n        WHILE (scan_code\n_space)\n            FRAME;\n        END\n    END\nEND\n\n\n\n\nIn this example, some text messages are printed on the screen, along with some \ncoordinates \nx\n and \ny\n of two points set from random values. The angle between\nthe points is then calculated with the \nfget_angle()\n function.\nEach time that the space bar is pressed the process will repeat.\n\n\nThe \nget_angle()\n function is used to obtain the \nangle between two processes\n,\ninstead of between two points.\n\n\nThe \nfget_dist()\n function is used to obtain the {distance between two\npoints}, instead of the angle.\n\n\n\n\nSee: \nUse of angles in the language\n - \nget_angle()\n - \nfget_dist()", 
            "title": "fget_angle()"
        }, 
        {
            "location": "/fget_angle()/#returns", 
            "text": "The angle between two points.", 
            "title": "Returns"
        }, 
        {
            "location": "/fget_angle()/#description", 
            "text": "Returns the angle from the  point 0  (x0, y0) to the  point 1 \n(x1, y1).  Remember that the angle is specified in thousandths of a degree. The function\nalways returns a value between   -180000  and  180000  (an  angle between -180\nand 180 degrees).  Coordinates of both points (x0, y0, x1, y1) can be any valid numeric expression.", 
            "title": "Description"
        }, 
        {
            "location": "/fget_angle()/#example-program", 
            "text": "PROGRAM example_fget_angle;\n\nPRIVATE\n    coord_x0, coord_y0;\n    coord_x1, coord_y1;\n    result;\n    file1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    write(0, 0, 0, 0,  Coordinates point 1 );\n    write(0, 0, 10, 0,  X: );\n    write_int(0, 20, 10, 0, offset coord_x0);\n    write(0, 0, 20, 0,  Y: );\n    write_int(0, 20, 20, 0, offset coord_y0);\n    write(0, 0, 40, 0,  Coordinates point 2 );\n    write(0, 0, 50, 0,  X: );\n    write_int(0, 20, 50, 0, offset coord_x1);\n    write(0, 0, 60, 0,  Y: );\n    write_int(0, 20, 60, 0, offset coord_y1);\n    write(0, 0, 80, 0,  Angle from point 1 to point 2: );\n    write_int(0, 0, 90, 0, offset result);\n    write(0, 0, 200, 6,  Press [SPACE] to get another two points. );\n    LOOP\n        clear_screen();\n        coord_x0=rand(0, 319);\n        coord_y0=rand(0, 199);\n        coord_x1=rand(0, 319);\n        coord_y1=rand(0, 199);\n        put(file1,200,coord_x0, coord_y0);\n        put(file1,200,coord_x1, coord_y1);\n\n        //We find the angle between two points\n        result = fget_angle(coord_x0, coord_y0, coord_x1, coord_y1);\n\n        scan_code=0;\n        WHILE (scan_code _space)\n            FRAME;\n        END\n    END\nEND  In this example, some text messages are printed on the screen, along with some \ncoordinates  x  and  y  of two points set from random values. The angle between\nthe points is then calculated with the  fget_angle()  function.\nEach time that the space bar is pressed the process will repeat.  The  get_angle()  function is used to obtain the  angle between two processes ,\ninstead of between two points.  The  fget_dist()  function is used to obtain the {distance between two\npoints}, instead of the angle.   See:  Use of angles in the language  -  get_angle()  -  fget_dist()", 
            "title": "Example program"
        }, 
        {
            "location": "/fget_dist()/", 
            "text": "fget_dist(\nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\nReturns\n\n\nThe distance between two points.\n\n\nDescription\n\n\nReturns the distance between \npoint 0\n (x0, y0) and \npoint 1\n\n(x1, y1).\n\n\nCoordinates of both points (x0, y0, x1, y1) can be specified by any\nvalid numeric expression.\n\n\nExample program\n\n\nPROGRAM example_fget_dist;\n\nPRIVATE\n    coord_x0, coord_y0;\n    coord_x1, coord_y1;\n    result;\n    file1;\n\nBEGIN\n\n    file1=load_fpg(\nhelp/help.fpg\n);\n    write(0, 0, 0, 0, \nPoint 1 Co-ordinates\n);\n    write(0, 0, 10, 0, \nX:\n);\n    write_int(0, 20, 10, 0, offset coord_x0);\n    write(0, 0, 20, 0, \nY:\n);\n    write_int(0, 20, 20, 0, offset coord_y0);\n    write(0, 0, 40, 0, \nPoint 2 Co-ordinates\n);\n    write(0, 0, 50, 0, \nX:\n);\n    write_int(0, 20, 50, 0, offset coord_x1);\n    write(0, 0, 60, 0, \nY:\n);\n    write_int(0, 20, 60, 0, offset coord_y1);\n    write(0, 0, 80, 0, \nDistance between point 1 and point 2\n);\n    write_int(0, 0, 90, 0, offset result);\n    write(0, 0, 200, 6, \nPress [SPACE] to find another distance.\n);\n    LOOP\n        clear_screen();\n        coord_x0=rand(0, 319);\n        coord_y0=rand(0, 199);\n        coord_x1=rand(0, 319);\n        coord_y1=rand(0, 199);\n\n        put(file1,200,coord_x0, coord_y0);\n        put(file1,200,coord_x1, coord_y1);\n\n        //Find the distance between the two points\n        result = fget_dist(coord_x0, coord_y0, coord_x1, coord_y1);\n\n        scan_code=0;\n        WHILE (scan_code\n_space)\n            FRAME;\n        END\n    END\nEND\n\n\n\n\nIn this example, the program sets the 2 sets of co-ordinates to random values,\nand then obtains the distance between them with the \nfget_dist()\n function.\nEach time that the space bar is pressed, the process is repeated.\n\n\nThe \nget_dist()\n function is used to obtain the {distance from one process\nto another}, instead of from one point to another.\n\n\nThe \nfget_angle()\n function is used to obtain the {angle between two\npoints}, instead of the distance.\n\n\n\n\nThis function could be used to detect collisions between processes, but of course,\nyou would normally use the \ncollision()\n function which detects when two processes \nhave their graphics overlapping.\n\n\nAn example of this is when a process exists within a Mode 7 window (See \nstart_mode7()\n)\nthe \ncollision()\n function can't be used, so the distance between the\nprocesses must be obtained (normally with \nget_dist()\n) to check if they collide\n(if their distance is smaller than a specified one).\n\n\n\n\nSee: \nget_dist\n - \nfget_angle\n - \ncollision()", 
            "title": "fget_dist()"
        }, 
        {
            "location": "/fget_dist()/#returns", 
            "text": "The distance between two points.", 
            "title": "Returns"
        }, 
        {
            "location": "/fget_dist()/#description", 
            "text": "Returns the distance between  point 0  (x0, y0) and  point 1 \n(x1, y1).  Coordinates of both points (x0, y0, x1, y1) can be specified by any\nvalid numeric expression.", 
            "title": "Description"
        }, 
        {
            "location": "/fget_dist()/#example-program", 
            "text": "PROGRAM example_fget_dist;\n\nPRIVATE\n    coord_x0, coord_y0;\n    coord_x1, coord_y1;\n    result;\n    file1;\n\nBEGIN\n\n    file1=load_fpg( help/help.fpg );\n    write(0, 0, 0, 0,  Point 1 Co-ordinates );\n    write(0, 0, 10, 0,  X: );\n    write_int(0, 20, 10, 0, offset coord_x0);\n    write(0, 0, 20, 0,  Y: );\n    write_int(0, 20, 20, 0, offset coord_y0);\n    write(0, 0, 40, 0,  Point 2 Co-ordinates );\n    write(0, 0, 50, 0,  X: );\n    write_int(0, 20, 50, 0, offset coord_x1);\n    write(0, 0, 60, 0,  Y: );\n    write_int(0, 20, 60, 0, offset coord_y1);\n    write(0, 0, 80, 0,  Distance between point 1 and point 2 );\n    write_int(0, 0, 90, 0, offset result);\n    write(0, 0, 200, 6,  Press [SPACE] to find another distance. );\n    LOOP\n        clear_screen();\n        coord_x0=rand(0, 319);\n        coord_y0=rand(0, 199);\n        coord_x1=rand(0, 319);\n        coord_y1=rand(0, 199);\n\n        put(file1,200,coord_x0, coord_y0);\n        put(file1,200,coord_x1, coord_y1);\n\n        //Find the distance between the two points\n        result = fget_dist(coord_x0, coord_y0, coord_x1, coord_y1);\n\n        scan_code=0;\n        WHILE (scan_code _space)\n            FRAME;\n        END\n    END\nEND  In this example, the program sets the 2 sets of co-ordinates to random values,\nand then obtains the distance between them with the  fget_dist()  function.\nEach time that the space bar is pressed, the process is repeated.  The  get_dist()  function is used to obtain the {distance from one process\nto another}, instead of from one point to another.  The  fget_angle()  function is used to obtain the {angle between two\npoints}, instead of the distance.   This function could be used to detect collisions between processes, but of course,\nyou would normally use the  collision()  function which detects when two processes \nhave their graphics overlapping.  An example of this is when a process exists within a Mode 7 window (See  start_mode7() )\nthe  collision()  function can't be used, so the distance between the\nprocesses must be obtained (normally with  get_dist() ) to check if they collide\n(if their distance is smaller than a specified one).   See:  get_dist  -  fget_angle  -  collision()", 
            "title": "Example program"
        }, 
        {
            "location": "/frame_fli()/", 
            "text": "frame_fli()\n\n\nReturns\n\n\nTrue\n if the animation continues and \nfalse\n if it has finished.\n\n\nDescription\n\n\nShows the next image of an animation \nFLI/FLC\n that was started with the \nstart_fli()\n\nfunction. This function returns \n0\n (false) if the animation has finished.\n\n\nIt is only possible to run one \nFLI/FLC\n animation at a time. It is not possible to\nhave two animations playing at the same time.\n\n\nThe next frame of animation will be seen in the next \nFRAME\n of the game, \nbut if a loop is created without a \nFRAME\n statement, the animation\nwill not be seen.\n\n\nExample program\n\n\nPROGRAM example_frame_fli;\nBEGIN\n    start_fli(\nhelp/help.fli\n, 0, 0);\n    LOOP\n\n        frame_fli(); // Show the next frame of animation\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, the animation \nFLI/FLC\n is loaded and then played repeatedly\nwith the \nframe_fli()\n function.\n\n\n\n\nSee: \nstart_fli()\n - \nreset_fli()\n - \nend_fli()", 
            "title": "frame_fli()"
        }, 
        {
            "location": "/frame_fli()/#returns", 
            "text": "True  if the animation continues and  false  if it has finished.", 
            "title": "Returns"
        }, 
        {
            "location": "/frame_fli()/#description", 
            "text": "Shows the next image of an animation  FLI/FLC  that was started with the  start_fli() \nfunction. This function returns  0  (false) if the animation has finished.  It is only possible to run one  FLI/FLC  animation at a time. It is not possible to\nhave two animations playing at the same time.  The next frame of animation will be seen in the next  FRAME  of the game, \nbut if a loop is created without a  FRAME  statement, the animation\nwill not be seen.", 
            "title": "Description"
        }, 
        {
            "location": "/frame_fli()/#example-program", 
            "text": "PROGRAM example_frame_fli;\nBEGIN\n    start_fli( help/help.fli , 0, 0);\n    LOOP\n\n        frame_fli(); // Show the next frame of animation\n\n        FRAME;\n    END\nEND  In the example, the animation  FLI/FLC  is loaded and then played repeatedly\nwith the  frame_fli()  function.   See:  start_fli()  -  reset_fli()  -  end_fli()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_angle()/", 
            "text": "get_angle(\nidentifier code\n)\n\n\nReturns\n\n\nThe angle to other process\n\n\nDescription\n\n\nReturns the angle from the current process (the one which called this function)\nto the process which has the \nidentifier code\n.\n\n\nSee \nWays to obtain the identifier code\n, for further information.\n\n\nRemember that angle is specified in thousandths of a degree. The function\nwill always return a value between\n -180000\n and \n180000\n (an angle between -180 and\n180 degrees).\n\n\nExample program\n\n\nPROGRAM example_get_angle;\n\nPRIVATE\n    resulting_angle;\n    process_id;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    graph=100;\n    x=160;\n    y=100;\n\n    process_id = mobile_object(80, 50, 101);\n\n    write(0, 160, 200, 7, \nUse the cursors to move the triangle.\n);\n    write(0, 0, 0, 0, \nAngle from the ball to the triangle:\n);\n    write_int(0, 0, 10, 0, offset resulting_angle);\n    LOOP\n\n        // We find the angle between the two processes\n        resulting_angle = get_angle(process_id);\n\n        FRAME;\n    END\nEND\n\nPROCESS mobile_object(x, y, graph);\nBEGIN\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n        IF (key(_up)) advance(4); END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, a ball is displayed in the centre of the screen. A \nmobile_object\n\nprocess is created, and its \nidentifier code\n is stored in the \nprocess_id\n\nvariable. This process can be controlled with the cursor keys.\n\n\nIn the main loop of the program, the angle between the two processes is calculated and\nshown on screen continuously.\n\n\nThe \nfget_angle()\n function is used to obtain the {angle between two\npoints}, instead of between two processes. \n\n\nFor Example, if the \nidentifier code\n of the process refers to a variable \nid2\n,\nthen a function call of:\n\n\n**get_angle(id2)**\n\n\n\nWould be equivalent to:\n\n\n**fget_angle(x, y, id2.x, id2.y)**\n\n\n\nThe \nget_dist()\n function is used to obtain the \ndistance to the other process\n\ninstead of the angle.\n\n\n\n\nSee: \nUse of angles in the language\n - \nfget_angle()\n - \nget_dist()", 
            "title": "get_angle()"
        }, 
        {
            "location": "/get_angle()/#returns", 
            "text": "The angle to other process", 
            "title": "Returns"
        }, 
        {
            "location": "/get_angle()/#description", 
            "text": "Returns the angle from the current process (the one which called this function)\nto the process which has the  identifier code .  See  Ways to obtain the identifier code , for further information.  Remember that angle is specified in thousandths of a degree. The function\nwill always return a value between  -180000  and  180000  (an angle between -180 and\n180 degrees).", 
            "title": "Description"
        }, 
        {
            "location": "/get_angle()/#example-program", 
            "text": "PROGRAM example_get_angle;\n\nPRIVATE\n    resulting_angle;\n    process_id;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    graph=100;\n    x=160;\n    y=100;\n\n    process_id = mobile_object(80, 50, 101);\n\n    write(0, 160, 200, 7,  Use the cursors to move the triangle. );\n    write(0, 0, 0, 0,  Angle from the ball to the triangle: );\n    write_int(0, 0, 10, 0, offset resulting_angle);\n    LOOP\n\n        // We find the angle between the two processes\n        resulting_angle = get_angle(process_id);\n\n        FRAME;\n    END\nEND\n\nPROCESS mobile_object(x, y, graph);\nBEGIN\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n        IF (key(_up)) advance(4); END\n        FRAME;\n    END\nEND  In this example, a ball is displayed in the centre of the screen. A  mobile_object \nprocess is created, and its  identifier code  is stored in the  process_id \nvariable. This process can be controlled with the cursor keys.  In the main loop of the program, the angle between the two processes is calculated and\nshown on screen continuously.  The  fget_angle()  function is used to obtain the {angle between two\npoints}, instead of between two processes.   For Example, if the  identifier code  of the process refers to a variable  id2 ,\nthen a function call of:  **get_angle(id2)**  Would be equivalent to:  **fget_angle(x, y, id2.x, id2.y)**  The  get_dist()  function is used to obtain the  distance to the other process \ninstead of the angle.   See:  Use of angles in the language  -  fget_angle()  -  get_dist()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_dist()/", 
            "text": "get_dist(\nidentifier code\n)\n\n\nReturns\n\n\nThe distance to the other process.\n\n\nDescription\n\n\nReturns the distance from the current process (the one which called this function) to\nthe process which has the \nidentifier code\n.\n\n\nSee \nways to obtain the identifier code\n, for further information.\n\n\nIf the process has defined its local variable \nresolution\n then it is important\nthat the process for which the distance we wish to obtain has the \nresolution\n\nlocal variable set to the same value. If both processes have the coordinates in hundredths\ninstead of whole amounts (with \nresolution\n=100), then the distance between both\nwill be given in hundredths too, but if the value of this variable is different between\nprocesses, then the result of the \nget_dist()\n function will not make sense.\n\n\nExample program\n\n\nPROGRAM example_get_dist;\n\nPRIVATE\n    resulting_distance;\n    process_id;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    graph=100;\n    x=160;\n    y=100;\n\n    process_id = mobile_object(80, 50, 101);\n\n    write(0, 160, 200, 7, \nUse the cursors to move the triangle.\n);\n    write(0, 0, 0, 0, \nDistance from the ball to the triangle:\n);\n    write_int(0, 0, 10, 0, offset resulting_distance);\n    LOOP\n\n        // We find the distance between the two processes\n        resulting_distance = get_dist(process_id);\n\n        FRAME;\n    END\nEND\n\nPROCESS mobile_object(x, y, graph)\nBEGIN\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n        IF (key(_up)) advance(4); END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, a ball is displayed in the centre of the screen. A \nmobile_object\n\nprocess is created, and its \nidentifier code\n is stored in the \nprocess_id\n\nvariable. This process can be controlled with the cursor keys.\n\n\nIn the main loop of the program, the distance between the two processes is calculated and\nupdated on screen continuously.\n\n\nThe function \nfget_dist()\n is used to obtain the {distance between two\npoints}, instead of between two processes. If the \nidentifier code\n\nof the process is contained, for example, in a variable denominated \nid2\n, then\nthe call to the function:\n\n\n**get_dist(id2)**\n\n\n\nWill be equivalent to:\n\n\n**fget_dist(x, y, id2.x, id2.y)**\n\n\n\nTo obtain the distance from the coordinates (x, y) of the current process up to the\ncoordinates (x, y) of the process for which its \nidentifier code\n is \nid2\n.\n\n\nThe function \nget_angle()\n is used to obtain the \nangle to the process\n\ninstead of the distance.\n\n\n\n\nThis function can be used to detect collisions between processes, though of course,\nthe \ncollision()\n function is normally used which detects when two processes \ngraphics overlap.\n\n\nAn example of this is when a process exists within a Mode 7 window (See \nstart_mode7()\n)\nthe \ncollision()\n function can't be used, so the distance between the\nprocesses must be obtained (normally with \nget_dist()\n) to check if they collide\n(if their distance is smaller than a specified one).\n\n\n\n\nSee: \nfget_dist()\n - \nget_angle()\n - \nget_distx()\n - \nget_disty()", 
            "title": "get_dist()"
        }, 
        {
            "location": "/get_dist()/#returns", 
            "text": "The distance to the other process.", 
            "title": "Returns"
        }, 
        {
            "location": "/get_dist()/#description", 
            "text": "Returns the distance from the current process (the one which called this function) to\nthe process which has the  identifier code .  See  ways to obtain the identifier code , for further information.  If the process has defined its local variable  resolution  then it is important\nthat the process for which the distance we wish to obtain has the  resolution \nlocal variable set to the same value. If both processes have the coordinates in hundredths\ninstead of whole amounts (with  resolution =100), then the distance between both\nwill be given in hundredths too, but if the value of this variable is different between\nprocesses, then the result of the  get_dist()  function will not make sense.", 
            "title": "Description"
        }, 
        {
            "location": "/get_dist()/#example-program", 
            "text": "PROGRAM example_get_dist;\n\nPRIVATE\n    resulting_distance;\n    process_id;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    graph=100;\n    x=160;\n    y=100;\n\n    process_id = mobile_object(80, 50, 101);\n\n    write(0, 160, 200, 7,  Use the cursors to move the triangle. );\n    write(0, 0, 0, 0,  Distance from the ball to the triangle: );\n    write_int(0, 0, 10, 0, offset resulting_distance);\n    LOOP\n\n        // We find the distance between the two processes\n        resulting_distance = get_dist(process_id);\n\n        FRAME;\n    END\nEND\n\nPROCESS mobile_object(x, y, graph)\nBEGIN\n    LOOP\n        IF (key(_right)) angle-=10000; END\n        IF (key(_left)) angle+=10000; END\n        IF (key(_up)) advance(4); END\n        FRAME;\n    END\nEND  In this example, a ball is displayed in the centre of the screen. A  mobile_object \nprocess is created, and its  identifier code  is stored in the  process_id \nvariable. This process can be controlled with the cursor keys.  In the main loop of the program, the distance between the two processes is calculated and\nupdated on screen continuously.  The function  fget_dist()  is used to obtain the {distance between two\npoints}, instead of between two processes. If the  identifier code \nof the process is contained, for example, in a variable denominated  id2 , then\nthe call to the function:  **get_dist(id2)**  Will be equivalent to:  **fget_dist(x, y, id2.x, id2.y)**  To obtain the distance from the coordinates (x, y) of the current process up to the\ncoordinates (x, y) of the process for which its  identifier code  is  id2 .  The function  get_angle()  is used to obtain the  angle to the process \ninstead of the distance.   This function can be used to detect collisions between processes, though of course,\nthe  collision()  function is normally used which detects when two processes \ngraphics overlap.  An example of this is when a process exists within a Mode 7 window (See  start_mode7() )\nthe  collision()  function can't be used, so the distance between the\nprocesses must be obtained (normally with  get_dist() ) to check if they collide\n(if their distance is smaller than a specified one).   See:  fget_dist()  -  get_angle()  -  get_distx()  -  get_disty()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_distx()/", 
            "text": "get_distx(\nangle\n,\n \ndistance\n)\n\n\nReturns\n\n\nThe horizontal distance towards the vector (angle, distance).\n\n\nDescription\n\n\nReturns the horizontal distance (in the \nx\n axis) from the angle and \ndistance\n (over this angle) passed as parameters.\nIt returns the distance that the vector moves horizontally (along the x-axis), made by the\nangle and \nlength\n (distance or module of the vector) indicated.\n\n\nKeep in mind that the angle is specified in thousandths of a degree and\ndistance can be specified by any valid numeric expression.\n\n\nThe function used to calculate the vertical distance, instead of the\nhorizontal one is \nget_disty()\n.\n\n\nExample program\n\n\nPROGRAM example_get_distx;\n\nGLOBAL\n    distance;\n    horizontal_distance;\n    vertical_distance;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 3);\n    write(0, 160, 200, 7, \nUse the cursors to move the triangle.\n);\n    write(0, 0, 0, 0, \nHorizontal distance:\n);\n    write_int(0, 0, 10, 0, offset horizontal_distance);\n    graph=101;\n    LOOP\n        IF (key(_up)) distance+=2; END\n        IF (key(_down)) distance-=2; END\n        IF (key(_right)) angle-=2000; END\n        IF (key(_left)) angle+=2000; END\n\n        // We calculate the horizontal distance\n        horizontal_distance= get_distx(angle, distance);\n\n        vertical_distance = get_disty(angle, distance);\n        x=160+horizontal_distance;\n        y=100+vertical_distance;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a circular graphic is placed on screen, then a triangle process is shown, whose angle and distance can be controlled using the cursor keys.\n\n\nThe program calculates the horizontal and vertical distances to the triangle from the coordinates of the centre of the screen\n(160, 100), showing the horizontal distance in the upper left corner all the times.\n\n\n\n\nIf the aim is to advance the coordinates of the process a \ndistance\n in a specific angle, the following statements may be used:\n\n\nx+=get_distx(\nangle\n,\n \ndistance\n);\n\n\ny+=get_disty(\nangle\n,\n \ndistance\n);\n\n\nThis would be equivalent to (using the \nxadvance()\n function).\n\n\nxadvance(\nangle\n,\n \ndistance\n);\n\n\nIf the angle that you wish to move the process is the one declared in the local variable \nangle\n, then you would use the \nadvance()\n function like this:\n\n\nadvance(\ndistance\n);\n\n\n\n\nThe \nget_distx()\n function is the same as calculating the \ncosine\n of the angle and\nmultiplying it by the \ndistance\n.\n\n\n\n\nSee: \nUse of angles in the language\n - \nget_disty()\n - \nxadvance()\n - \nadvance()", 
            "title": "get_distx()"
        }, 
        {
            "location": "/get_distx()/#returns", 
            "text": "The horizontal distance towards the vector (angle, distance).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_distx()/#description", 
            "text": "Returns the horizontal distance (in the  x  axis) from the angle and  distance  (over this angle) passed as parameters.\nIt returns the distance that the vector moves horizontally (along the x-axis), made by the\nangle and  length  (distance or module of the vector) indicated.  Keep in mind that the angle is specified in thousandths of a degree and\ndistance can be specified by any valid numeric expression.  The function used to calculate the vertical distance, instead of the\nhorizontal one is  get_disty() .", 
            "title": "Description"
        }, 
        {
            "location": "/get_distx()/#example-program", 
            "text": "PROGRAM example_get_distx;\n\nGLOBAL\n    distance;\n    horizontal_distance;\n    vertical_distance;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 3);\n    write(0, 160, 200, 7,  Use the cursors to move the triangle. );\n    write(0, 0, 0, 0,  Horizontal distance: );\n    write_int(0, 0, 10, 0, offset horizontal_distance);\n    graph=101;\n    LOOP\n        IF (key(_up)) distance+=2; END\n        IF (key(_down)) distance-=2; END\n        IF (key(_right)) angle-=2000; END\n        IF (key(_left)) angle+=2000; END\n\n        // We calculate the horizontal distance\n        horizontal_distance= get_distx(angle, distance);\n\n        vertical_distance = get_disty(angle, distance);\n        x=160+horizontal_distance;\n        y=100+vertical_distance;\n        FRAME;\n    END\nEND  In the example, a circular graphic is placed on screen, then a triangle process is shown, whose angle and distance can be controlled using the cursor keys.  The program calculates the horizontal and vertical distances to the triangle from the coordinates of the centre of the screen\n(160, 100), showing the horizontal distance in the upper left corner all the times.   If the aim is to advance the coordinates of the process a  distance  in a specific angle, the following statements may be used:  x+=get_distx( angle ,   distance );  y+=get_disty( angle ,   distance );  This would be equivalent to (using the  xadvance()  function).  xadvance( angle ,   distance );  If the angle that you wish to move the process is the one declared in the local variable  angle , then you would use the  advance()  function like this:  advance( distance );   The  get_distx()  function is the same as calculating the  cosine  of the angle and\nmultiplying it by the  distance .   See:  Use of angles in the language  -  get_disty()  -  xadvance()  -  advance()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_disty()/", 
            "text": "get_disty(\nangle\n,\n \ndistance\n)\n\n\nReturns\n\n\nThe vertical distance towards the vector (angle, distance).\n\n\nDescription\n\n\nReturns the vertical distance (in the \nx\n axis) from the angle and \ndistance\n (over this angle) passed as parameters.\nIt returns the distance that the vector moves vertically (along the y-axis), made by the\nangle and \nlength\n (distance or module of the vector) indicated.\n\n\nKeep in mind that the angle is specified in thousandths of a degree and\ndistance can be specified by any valid numeric expression.\n\n\nThe function used to calculate the horizontal distance, instead of the\nvertical one is \nget_distx()\n.\n\n\nExample program\n\n\nPROGRAM example_get_disty;\n\nGLOBAL\n    distance;\n    horizontal_distance;\n    vertical_distance;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 3);\n    write(0, 160, 200, 7, \nUse the cursors to move the triangle.\n);\n    write(0, 0, 0, 0, \nVertical distance:\n);\n    write_int(0, 0, 10, 0, offset vertical_distance);\n    graph=101;\n    LOOP\n        IF (key(_up)) distance+=2; END\n        IF (key(_down)) distance-=2; END\n        IF (key(_right)) angle-=2000; END\n        IF (key(_left)) angle+=2000; END\n\n        // We calculate the horizontal distance\n        horizontal_distance= get_disty(angle, distance);\n\n        vertical_distance = get_disty(angle, distance);\n        x=160+horizontal_distance;\n        y=100+vertical_distance;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a circular graphic is placed on screen, then a triangle process is shown, whose angle and distance can be controlled using the cursor keys.\n\n\nThe program calculates the horizontal and vertical distances to the triangle from the coordinates of the centre of the screen\n(160, 100), showing the vertical distance in the upper left corner all the times.\n\n\n\n\nIf the aim is to advance the coordinates of the process a \ndistance\n in a specific angle, the following statements may be used:\n\n\nx+=get_disty(\nangle\n,\n \ndistance\n);\n\n\ny+=get_disty(\nangle\n,\n \ndistance\n);\n\n\nThis would be equivalent to (using the \nxadvance()\n function).\n\n\nxadvance(\nangle\n,\n \ndistance\n);\n\n\nIf the angle that you wish to move the process is the one declared in the local variable \nangle\n, then you would use the \nadvance()\n function like this:\n\n\nadvance(\ndistance\n);\n\n\n\n\nThe \nget_disty()\n function is the same as calculating the \nsine\n of the angle and\nmultiplying it by the \ndistance\n.\n\n\n\n\nSee: \nUse of angles in the language\n - \nget_distx()\n - \nxadvance()\n - \nadvance()", 
            "title": "get_disty()"
        }, 
        {
            "location": "/get_disty()/#returns", 
            "text": "The vertical distance towards the vector (angle, distance).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_disty()/#description", 
            "text": "Returns the vertical distance (in the  x  axis) from the angle and  distance  (over this angle) passed as parameters.\nIt returns the distance that the vector moves vertically (along the y-axis), made by the\nangle and  length  (distance or module of the vector) indicated.  Keep in mind that the angle is specified in thousandths of a degree and\ndistance can be specified by any valid numeric expression.  The function used to calculate the horizontal distance, instead of the\nvertical one is  get_distx() .", 
            "title": "Description"
        }, 
        {
            "location": "/get_disty()/#example-program", 
            "text": "PROGRAM example_get_disty;\n\nGLOBAL\n    distance;\n    horizontal_distance;\n    vertical_distance;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 3);\n    write(0, 160, 200, 7,  Use the cursors to move the triangle. );\n    write(0, 0, 0, 0,  Vertical distance: );\n    write_int(0, 0, 10, 0, offset vertical_distance);\n    graph=101;\n    LOOP\n        IF (key(_up)) distance+=2; END\n        IF (key(_down)) distance-=2; END\n        IF (key(_right)) angle-=2000; END\n        IF (key(_left)) angle+=2000; END\n\n        // We calculate the horizontal distance\n        horizontal_distance= get_disty(angle, distance);\n\n        vertical_distance = get_disty(angle, distance);\n        x=160+horizontal_distance;\n        y=100+vertical_distance;\n        FRAME;\n    END\nEND  In the example, a circular graphic is placed on screen, then a triangle process is shown, whose angle and distance can be controlled using the cursor keys.  The program calculates the horizontal and vertical distances to the triangle from the coordinates of the centre of the screen\n(160, 100), showing the vertical distance in the upper left corner all the times.   If the aim is to advance the coordinates of the process a  distance  in a specific angle, the following statements may be used:  x+=get_disty( angle ,   distance );  y+=get_disty( angle ,   distance );  This would be equivalent to (using the  xadvance()  function).  xadvance( angle ,   distance );  If the angle that you wish to move the process is the one declared in the local variable  angle , then you would use the  advance()  function like this:  advance( distance );   The  get_disty()  function is the same as calculating the  sine  of the angle and\nmultiplying it by the  distance .   See:  Use of angles in the language  -  get_distx()  -  xadvance()  -  advance()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_id()/", 
            "text": "get_id(\ntype of process\n)\n\n\nReturns\n\n\nThe \nidentifier code\n of a process or \n0\n.\n\n\nDescription\n\n\nThis function checks to see if there are any processes of the specified type.\nIf any are found, then the function will return the \nidentifier code\n of the\nfirst occurrence, and if none are found will return a 0.\n\n\nIf there are more processes of the specified type, the function \nget_id()\n\nwill return the next \nidentifier code\n for each successive call.\n\n\nOnce every \nidentifier code\n has been returned, the function\nwill return 0, until the next \nFRAME\n statement is executed, at which point\nthe function will be reset, and once again will begin to return every\n\nidentifier code\n of the specified type of process.\n\n\nIf you wish to get all of the \nidentifier codes\n of the processes of that\ntype, you should not use the \nFRAME\n statement between two successive calls to\n\nget_id()\n. If you execute a \nFRAME\n statement between calls to \nget_id()\n then\nthe function will again reset and start returning values from the first occurrence of that\ntype of process.\n\n\nA similar thing happens if you call \nget_id()\n with a different process type. Each time a new \nprocess type is called, the identifiers reset and start with the first process of that type.\n\n\nExample program\n\n\nPROGRAM example_get_id;\n\nPRIVATE\n    process_id;\n    counter;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    FROM counter=1 TO 20;\n        my_process(rand(0, 319), rand(0, 199), 101);\n    END\n    LOOP\n        FROM counter=1 TO 20;\n\n            // Get the Processes ID\n            process_id = get_id(TYPE my_process);\n\n            // Change the processes LOCAL angle variable using the ID\n            process_id.angle+=rand(-5000, 5000);\n        END\n        FRAME;\n    END\nEND\n\nPROCESS my_process(x, y, graph);\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, after having loaded the file with graphics and set the background screen, 20 \nmovable_process\n type processes are\ncreated with their positions randomly chosen and with a triangle-shaped graphic.\n\n\nThese processes will only execute \nFRAME\n statements inside a loop, in order to be displayed.\n\n\nFrom the main program, the identifiers of the \nmovable_process\n type processes are taken with the \nget_id()\n function (storing them in the \nprocess_identifier\n variable) and using them to modify their angle (their \nangle\n local variable).                                                             \n\nOn having the \nidentifying code\n of a process, it is possible to consult or modify its local variables (like \nangle\n in this example) or else, to send signals to the process with the \nsignal()\n function.\n\n\n\n\nThe \ncollision()\n function is used to obtain the \nidentifier codes\n\nof processes of a determined type that collide with the current process.\n\n\n\n\nSee: \nWays to obtain the identifier code\n - \nTypes of processes\n - \nIdentifier codes", 
            "title": "get_id()"
        }, 
        {
            "location": "/get_id()/#returns", 
            "text": "The  identifier code  of a process or  0 .", 
            "title": "Returns"
        }, 
        {
            "location": "/get_id()/#description", 
            "text": "This function checks to see if there are any processes of the specified type.\nIf any are found, then the function will return the  identifier code  of the\nfirst occurrence, and if none are found will return a 0.  If there are more processes of the specified type, the function  get_id() \nwill return the next  identifier code  for each successive call.  Once every  identifier code  has been returned, the function\nwill return 0, until the next  FRAME  statement is executed, at which point\nthe function will be reset, and once again will begin to return every identifier code  of the specified type of process.  If you wish to get all of the  identifier codes  of the processes of that\ntype, you should not use the  FRAME  statement between two successive calls to get_id() . If you execute a  FRAME  statement between calls to  get_id()  then\nthe function will again reset and start returning values from the first occurrence of that\ntype of process.  A similar thing happens if you call  get_id()  with a different process type. Each time a new \nprocess type is called, the identifiers reset and start with the first process of that type.", 
            "title": "Description"
        }, 
        {
            "location": "/get_id()/#example-program", 
            "text": "PROGRAM example_get_id;\n\nPRIVATE\n    process_id;\n    counter;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    FROM counter=1 TO 20;\n        my_process(rand(0, 319), rand(0, 199), 101);\n    END\n    LOOP\n        FROM counter=1 TO 20;\n\n            // Get the Processes ID\n            process_id = get_id(TYPE my_process);\n\n            // Change the processes LOCAL angle variable using the ID\n            process_id.angle+=rand(-5000, 5000);\n        END\n        FRAME;\n    END\nEND\n\nPROCESS my_process(x, y, graph);\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND  In the example, after having loaded the file with graphics and set the background screen, 20  movable_process  type processes are\ncreated with their positions randomly chosen and with a triangle-shaped graphic.  These processes will only execute  FRAME  statements inside a loop, in order to be displayed.  From the main program, the identifiers of the  movable_process  type processes are taken with the  get_id()  function (storing them in the  process_identifier  variable) and using them to modify their angle (their  angle  local variable).                                                              \nOn having the  identifying code  of a process, it is possible to consult or modify its local variables (like  angle  in this example) or else, to send signals to the process with the  signal()  function.   The  collision()  function is used to obtain the  identifier codes \nof processes of a determined type that collide with the current process.   See:  Ways to obtain the identifier code  -  Types of processes  -  Identifier codes", 
            "title": "Example program"
        }, 
        {
            "location": "/get_joy_button()/", 
            "text": "get_joy_button(\nbutton number\n)\n\n\nReturns\n\n\nTrue\n (1) if the button is pressed or \nFalse\n (0) if it isn't\n\n\nDescription\n\n\nThis function requires the joystick number button (from 0 to 3) as a parameter, and returns \ntrue\n (an odd numerical value) if it is pressed at that moment.\n\n\nIf the button is not pressed, the function returns \nfalse\n\n(an even numeric value).\n\n\nSome joysticks only have two buttons, and this case they will be mapped to button\nnumbers 0 and 1. On computers that have two joysticks connected, the second joystick\nwill have the buttons numbered 2 and 3.\n\n\nExample program\n\n\nPROGRAM example_get_joy_button;\n\nPRIVATE\n    counter;\n    buttons[3];\n\nBEGIN\n    write(0, 160, 200, 7,\n Press the buttons of the joystick.\n);\n    write(0, 0, 0, 0, \nButtons (0..3):\n);\n    write_int(0, 100, 0, 0, offset buttons[0]);\n    write_int(0, 120, 0, 0, offset buttons[1]);\n    write_int(0, 140, 0, 0, offset buttons[2]);\n    write_int(0, 160, 0, 0, offset buttons[3]);\n    LOOP\n        FROM counter=0 TO 3;\n\n            // We take the value of the joystick button\n            buttons[counter] = get_joy_button(counter);\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nAn explanatory message is displayed in the lower part of the screen and \nthe condition of the four possible buttons is displayed in the upper part of the screen; \nafter that, the program stays inside of a loop updating the state of the four buttons\ncontinuously using the \nget_joy_button()\n function.\n\n\n\n\nThere are other ways to read the joystick. The easiest is to use\nthe \njoy\n structure, because in there are four variables that are\ncontinuously updated with the status of the joystick buttons.\n\n\n\n\nSee: \nget_joy_position()\n - \nJoy Structure", 
            "title": "get_joy_button()"
        }, 
        {
            "location": "/get_joy_button()/#returns", 
            "text": "True  (1) if the button is pressed or  False  (0) if it isn't", 
            "title": "Returns"
        }, 
        {
            "location": "/get_joy_button()/#description", 
            "text": "This function requires the joystick number button (from 0 to 3) as a parameter, and returns  true  (an odd numerical value) if it is pressed at that moment.  If the button is not pressed, the function returns  false \n(an even numeric value).  Some joysticks only have two buttons, and this case they will be mapped to button\nnumbers 0 and 1. On computers that have two joysticks connected, the second joystick\nwill have the buttons numbered 2 and 3.", 
            "title": "Description"
        }, 
        {
            "location": "/get_joy_button()/#example-program", 
            "text": "PROGRAM example_get_joy_button;\n\nPRIVATE\n    counter;\n    buttons[3];\n\nBEGIN\n    write(0, 160, 200, 7,  Press the buttons of the joystick. );\n    write(0, 0, 0, 0,  Buttons (0..3): );\n    write_int(0, 100, 0, 0, offset buttons[0]);\n    write_int(0, 120, 0, 0, offset buttons[1]);\n    write_int(0, 140, 0, 0, offset buttons[2]);\n    write_int(0, 160, 0, 0, offset buttons[3]);\n    LOOP\n        FROM counter=0 TO 3;\n\n            // We take the value of the joystick button\n            buttons[counter] = get_joy_button(counter);\n\n        END\n        FRAME;\n    END\nEND  An explanatory message is displayed in the lower part of the screen and \nthe condition of the four possible buttons is displayed in the upper part of the screen; \nafter that, the program stays inside of a loop updating the state of the four buttons\ncontinuously using the  get_joy_button()  function.   There are other ways to read the joystick. The easiest is to use\nthe  joy  structure, because in there are four variables that are\ncontinuously updated with the status of the joystick buttons.   See:  get_joy_position()  -  Joy Structure", 
            "title": "Example program"
        }, 
        {
            "location": "/get_joy_position()/", 
            "text": "get_joy_position(\naxis number\n)\n\n\nReturns\n\n\nThe position of the joystick axis\n\n\nDescription\n\n\nThis function returns the coordinate in which is found the indicated axis\n(with a number from \n0\n to \n3\n) of the analogic joystick.\n\n\nAxis \n0\n - Axis \nX\n main.\n\n\nAxis \n1\n - Axis \nY\n main.\n\n\nAxis \n2\n - Axis \nX\n secondary.\n\n\nAxis \n3\n - Axis \nY\n secondary.\n\n\nThe coordinate of the joystick can change due to the type of joystick and\ncomputer in which it is played, in all cases it is a number which changes between\n\n4\n and \n200\n, more or less.\n\n\nThe axes \nmain\n and \nsecondary\n can be integrated in just one joystick\nin some cases (flight joysticks with a \nhat\n, \npedals\n, etc.). In computers\nwith two joysticks connected, the main axis will be the joystick 1 and the\nsecondary axis will be the joystick 2.\n\n\nExample program\n\n\nPROGRAM example_get_joy_position;\n\nPRIVATE\n    joystick_axis[3];\n    counter;\n\nBEGIN\n    write (0, 160, 200, 7, \nMove the joystick\n);\n    write (0, 0, 0, 0, \nCoordinate X main.\n);\n    write_int(0, 0, 10, 0, offset joystick_axis[0]);\n    write (0, 0, 40, 0, \nCoordinate \n main.\n);\n    write_int(0, 0, 50, 0, offset joystick_axis[1]);\n    write (0, 0, 80, 0, \nCoordinate X secondary.\n);\n    write_int(0, 0, 90, 0, offset joystick_axis[2]);\n    write (0, 0, 120, 0, \nCoordinate \n secondary.\n);\n    write_int(0, 0, 130, 0, offset joystick_axis[3]);\n    LOOP\n        FROM counter=0 TO 3;\n\n            // We take the value of the joystick axis\n            joystick_axis[counter] = get_joy_position(counter);\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nInformation is printed on the screen, then the program is put into a continuous loop.\nThe screen updates with the state of each  joystick position, stored in the joystick_axis[]\narray, and updated using the get_joy_position() function.\n\n\n\n\nThere are other ways to read the joystick. The easiest is to use\nthe \njoy\n structure when analogue reading of the joystick (its coordinates)\nis not required. This tells you the simple directions of the joystick, like the centre,\nto the right, down, etc.\n\n\n\n\nSee: \nget_joy_button()\n - \njoy structure", 
            "title": "get_joy_position()"
        }, 
        {
            "location": "/get_joy_position()/#returns", 
            "text": "The position of the joystick axis", 
            "title": "Returns"
        }, 
        {
            "location": "/get_joy_position()/#description", 
            "text": "This function returns the coordinate in which is found the indicated axis\n(with a number from  0  to  3 ) of the analogic joystick.  Axis  0  - Axis  X  main.  Axis  1  - Axis  Y  main.  Axis  2  - Axis  X  secondary.  Axis  3  - Axis  Y  secondary.  The coordinate of the joystick can change due to the type of joystick and\ncomputer in which it is played, in all cases it is a number which changes between 4  and  200 , more or less.  The axes  main  and  secondary  can be integrated in just one joystick\nin some cases (flight joysticks with a  hat ,  pedals , etc.). In computers\nwith two joysticks connected, the main axis will be the joystick 1 and the\nsecondary axis will be the joystick 2.", 
            "title": "Description"
        }, 
        {
            "location": "/get_joy_position()/#example-program", 
            "text": "PROGRAM example_get_joy_position;\n\nPRIVATE\n    joystick_axis[3];\n    counter;\n\nBEGIN\n    write (0, 160, 200, 7,  Move the joystick );\n    write (0, 0, 0, 0,  Coordinate X main. );\n    write_int(0, 0, 10, 0, offset joystick_axis[0]);\n    write (0, 0, 40, 0,  Coordinate   main. );\n    write_int(0, 0, 50, 0, offset joystick_axis[1]);\n    write (0, 0, 80, 0,  Coordinate X secondary. );\n    write_int(0, 0, 90, 0, offset joystick_axis[2]);\n    write (0, 0, 120, 0,  Coordinate   secondary. );\n    write_int(0, 0, 130, 0, offset joystick_axis[3]);\n    LOOP\n        FROM counter=0 TO 3;\n\n            // We take the value of the joystick axis\n            joystick_axis[counter] = get_joy_position(counter);\n\n        END\n        FRAME;\n    END\nEND  Information is printed on the screen, then the program is put into a continuous loop.\nThe screen updates with the state of each  joystick position, stored in the joystick_axis[]\narray, and updated using the get_joy_position() function.   There are other ways to read the joystick. The easiest is to use\nthe  joy  structure when analogue reading of the joystick (its coordinates)\nis not required. This tells you the simple directions of the joystick, like the centre,\nto the right, down, etc.   See:  get_joy_button()  -  joy structure", 
            "title": "Example program"
        }, 
        {
            "location": "/get_pixel()/", 
            "text": "get_pixel(\nx\n,\n \ny\n)\n\n\nReturns\n\n\nThe colour value of the pixel (0..255).\n\n\nDescription\n\n\nReturns the colour of the \nbackground\n at the screen coordinates that are\nspecified in the parameters.\n\n\nThe number returned is a palette index from the active palette\nbetween 0 and 255, because the palettes have 256 colours.\n\n\nThe point refers to only the \nbackground\n from the picture, without taking notice\nof the graphics of the processes, texts, scroll regions, etc.\nOnly the images placed on screen by the functions \nput()\n,\nxput()\n, \n\nput_pixel()\n \n \nput_screen()\n will be read.\n\n\nExample program\n\n\nPROGRAM example_get_pixel;\n\nPRIVATE\n    pixel_colour;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 2);\n    mouse.graph=200;\n    write (0, 0, 190, 0, \nColour of the background pixel:\n);\n    write_int(0, 256, 190, 0, offset pixel_colour);\n    LOOP\n\n        // We take the colour of the point of the background\n        pixel_colour = get_pixel(mouse.x, mouse.y);\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, the \nput_screen\n function is used to display an image on screen,\nrepresenting a group of squares in different colours, and a mouse pointer displayed as a cross.\n\n\nIn the lower part of the screen a message is displayed, along with a variable that is updated\nfrom the \nget_pixel()\n command.\n\n\nBy using the mouse, you can obtain the colour of any pixel on the screen.\n\n\n\n\nSee: \nput_pixel()\n - \nmap_get_pixel()\n - \nmap_put_pixel()\n - \nget_point()", 
            "title": "get_pixel()"
        }, 
        {
            "location": "/get_pixel()/#returns", 
            "text": "The colour value of the pixel (0..255).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_pixel()/#description", 
            "text": "Returns the colour of the  background  at the screen coordinates that are\nspecified in the parameters.  The number returned is a palette index from the active palette\nbetween 0 and 255, because the palettes have 256 colours.  The point refers to only the  background  from the picture, without taking notice\nof the graphics of the processes, texts, scroll regions, etc.\nOnly the images placed on screen by the functions  put() , xput() ,  put_pixel()     put_screen()  will be read.", 
            "title": "Description"
        }, 
        {
            "location": "/get_pixel()/#example-program", 
            "text": "PROGRAM example_get_pixel;\n\nPRIVATE\n    pixel_colour;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 2);\n    mouse.graph=200;\n    write (0, 0, 190, 0,  Colour of the background pixel: );\n    write_int(0, 256, 190, 0, offset pixel_colour);\n    LOOP\n\n        // We take the colour of the point of the background\n        pixel_colour = get_pixel(mouse.x, mouse.y);\n\n        FRAME;\n    END\nEND  In this example, the  put_screen  function is used to display an image on screen,\nrepresenting a group of squares in different colours, and a mouse pointer displayed as a cross.  In the lower part of the screen a message is displayed, along with a variable that is updated\nfrom the  get_pixel()  command.  By using the mouse, you can obtain the colour of any pixel on the screen.   See:  put_pixel()  -  map_get_pixel()  -  map_put_pixel()  -  get_point()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_point()/", 
            "text": "get_point(\nfile\n,\n \ngraphic\n,\n \nnumber\n,\n \nOFFSET x\n,\n \nOFFSET y\n)\n\n\nReturns\n\n\nThe position of the checkpoint (placed into the variables which \noffset\n is\ndeclared in the last two parameters).\n\n\nDescription\n\n\nThis function will place the coordinate values of a map point into the variable you specify\nfrom an indicated graphic.\n\n\nA \ncheckpoint\n is a point that can be defined in the graphic editor\n(draw tool), in the checkpoints function.\n\n\nThe function needs the \naddress\n (which is obtained with the \noffset\n operator)\nin memory \nof two variables\n in which the \nx\n and \ny\n values of the checkpoint will\nbe stored.\n\n\nGraphics loaded with the \nload_map()\n or \nload_pcx()\n functions\n(or created with \nnew_map()\n) will be used as if they were from the first\nfile (the one with the code 0).\n\n\nExample Program\n\n\nPROGRAM example_get_point;\n\nGLOBAL\n    file1;\n    point=1;\n    x_point;\n    y_point;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 4);\n    graph=101;\n    LOOP\n        IF (fget_dist(x, y, x_point, y_point)\n6)\n            IF (point++==50) point=1; END\n        END\n\n        // Store the checkpoint coordinate values in x_point and y_point\n        get_point(file1, 4,point, offset x_point, offset y_point);\n\n        angle=fget_angle(x, y, x_point, y_point);\n        advance(6);\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, an image of a circuit is displayed on the screen. On this map there are\n50 \ncheckpoints\n defined {from 1 to 50) in the circuit.\n\n\nThe main process appears as a triangle that travels throughout the circuit.\n\n\nThe number of the checkpoint is stored in the local variable \npoint\n\nwhich at the beginning is set to 1.\n\n\nThe coordinates of each checkpoint, obtained with the \nget_point()\n function,\nare saved in the \nx_point\n and \ny_point\n variables and are used to make the process\nmove to that position with the \nfget_angle()\n functions (to obtain the local \nangle\n\nvariable) and \nadvance()\n (to advance 6 points in that direction).\n\n\nThe distance to the next checkpoint is checked using the \nfget_dist()\n function,\nif that point number is detected as being less than 6 pixels away, then\nthe triangle is directed onto the next point.\nWhen point number 50 is reached it will reset back to point 1.\n\n\n\n\nThis function returns the exact coordinates that the checkpoints were placed\ninside the graphic, without regard to how the graphic is displayed (zoomed,rotated,etc).\nTo obtain the position of a checkpoint in an graphic that is zoomed or rotated,\nand relative to the coordinates of screen (and not of the original graphic) you must use the \n\nget_real_point()\n function.\n\n\n\n\nSee: \nCheckpoints\n - \nget_real_point()\n - \nget_pixel()", 
            "title": "get_point()"
        }, 
        {
            "location": "/get_point()/#returns", 
            "text": "The position of the checkpoint (placed into the variables which  offset  is\ndeclared in the last two parameters).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_point()/#description", 
            "text": "This function will place the coordinate values of a map point into the variable you specify\nfrom an indicated graphic.  A  checkpoint  is a point that can be defined in the graphic editor\n(draw tool), in the checkpoints function.  The function needs the  address  (which is obtained with the  offset  operator)\nin memory  of two variables  in which the  x  and  y  values of the checkpoint will\nbe stored.  Graphics loaded with the  load_map()  or  load_pcx()  functions\n(or created with  new_map() ) will be used as if they were from the first\nfile (the one with the code 0).", 
            "title": "Description"
        }, 
        {
            "location": "/get_point()/#example-program", 
            "text": "PROGRAM example_get_point;\n\nGLOBAL\n    file1;\n    point=1;\n    x_point;\n    y_point;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    put_screen(0, 4);\n    graph=101;\n    LOOP\n        IF (fget_dist(x, y, x_point, y_point) 6)\n            IF (point++==50) point=1; END\n        END\n\n        // Store the checkpoint coordinate values in x_point and y_point\n        get_point(file1, 4,point, offset x_point, offset y_point);\n\n        angle=fget_angle(x, y, x_point, y_point);\n        advance(6);\n        FRAME;\n    END\nEND  In this example, an image of a circuit is displayed on the screen. On this map there are\n50  checkpoints  defined {from 1 to 50) in the circuit.  The main process appears as a triangle that travels throughout the circuit.  The number of the checkpoint is stored in the local variable  point \nwhich at the beginning is set to 1.  The coordinates of each checkpoint, obtained with the  get_point()  function,\nare saved in the  x_point  and  y_point  variables and are used to make the process\nmove to that position with the  fget_angle()  functions (to obtain the local  angle \nvariable) and  advance()  (to advance 6 points in that direction).  The distance to the next checkpoint is checked using the  fget_dist()  function,\nif that point number is detected as being less than 6 pixels away, then\nthe triangle is directed onto the next point.\nWhen point number 50 is reached it will reset back to point 1.   This function returns the exact coordinates that the checkpoints were placed\ninside the graphic, without regard to how the graphic is displayed (zoomed,rotated,etc).\nTo obtain the position of a checkpoint in an graphic that is zoomed or rotated,\nand relative to the coordinates of screen (and not of the original graphic) you must use the  get_real_point()  function.   See:  Checkpoints  -  get_real_point()  -  get_pixel()", 
            "title": "Example Program"
        }, 
        {
            "location": "/get_real_point()/", 
            "text": "get_real_point(\nnumber\n,\n \nOFFSET x\n,\n \nOFFSET y\n)\n\n\nReturns\n\n\nSets the coordinates of the checkpoint to the variables which\n\noffset\n indicated as the two last parameters.\n\n\nDescription\n\n\nThis function returns where a checkpoint of the main processes graphic\nis at a particular moment in the coordinates system used by\nthe process (See local variable \nctype\n), evaluating the\noriginal location of the point, the current coordinates of the\nprocess, its size, angle, etc.\n\n\nA \ncheckpoint\n is a point that can be defined in the graphics \neditor (drawing tool), in the options given to the function.\n\n\nThe function needs the \naddress\n (which is obtained with the \noffset\n operator)\nin memory \nof two variables\n in which the \nx\n and \ny\n values of the checkpoint will\nbe stored.\n\n\nGraphics loaded with the \nload_map()\n or \nload_pcx()\n functions\n(or created with \nnew_map()\n) will be used as if they were from the first\nfile (the one with the code 0).\n\n\nExample program\n\n\nPROGRAM example_get_real_point;\n\nPRIVATE\n    point;\n    x_point;\n    y_point;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    graph=4;\n    x=160;\n    y=100;\n    LOOP\n        FROM point=1 TO 50;\n\n            // We take the coordinates where there at this moment the checkpoint is\n            get_real_point(point, offset x_point, offset y_point);\n\n            cross(x_point, y_point, 200);\n        END\n        angle+=1000;\n        FRAME;\n    END\nEND\n\nPROCESS cross(x, y, graph);\nBEGIN\n    FRAME;\nEND\n\n\n\n\nIn the example a circuit that rotates on the screen is defined as the graphic of the \nmain process . This graphic has 50 defined \ncheckpoints\n numbered from 1 to 50.\n\n\nThe program stays inside of a loop, rotates this graphic\nwith the angle command,and creating 50 processes\nof a cross type, one for each of the 50 checkpoints of the graphic.\n\n\nYou can check how the relative position of two points doesn't change\nthough the graphic of the circuit rotates.\n\n\n\n\nThis function is usually used to locate some important key points of a graphic.\nFor example, in a process in which the graphic is a man with a gun that can\nbe escalated, rotated or that has some animations, a checkpoint could be defined\nin the cannon of the gun to know at each moment where the bullets must go the case\nof gun being fired.\n\n\nIf the original graphic was inside of a scroll region \n(See\nstart_scroll()\n) the given coordinates will be relative to\nto the scroll region.\n\n\n\n\nThe \nget_point()\n function returns the position where a checkpoint of\nthe graphic was placed initially, instead of its current position\nlike \nget_real_point()\n.\n\n\n\n\nSee: \nCheckpoints\n - \nget_point()\n - \nget_pixel()", 
            "title": "get_real_point()"
        }, 
        {
            "location": "/get_real_point()/#returns", 
            "text": "Sets the coordinates of the checkpoint to the variables which offset  indicated as the two last parameters.", 
            "title": "Returns"
        }, 
        {
            "location": "/get_real_point()/#description", 
            "text": "This function returns where a checkpoint of the main processes graphic\nis at a particular moment in the coordinates system used by\nthe process (See local variable  ctype ), evaluating the\noriginal location of the point, the current coordinates of the\nprocess, its size, angle, etc.  A  checkpoint  is a point that can be defined in the graphics \neditor (drawing tool), in the options given to the function.  The function needs the  address  (which is obtained with the  offset  operator)\nin memory  of two variables  in which the  x  and  y  values of the checkpoint will\nbe stored.  Graphics loaded with the  load_map()  or  load_pcx()  functions\n(or created with  new_map() ) will be used as if they were from the first\nfile (the one with the code 0).", 
            "title": "Description"
        }, 
        {
            "location": "/get_real_point()/#example-program", 
            "text": "PROGRAM example_get_real_point;\n\nPRIVATE\n    point;\n    x_point;\n    y_point;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    graph=4;\n    x=160;\n    y=100;\n    LOOP\n        FROM point=1 TO 50;\n\n            // We take the coordinates where there at this moment the checkpoint is\n            get_real_point(point, offset x_point, offset y_point);\n\n            cross(x_point, y_point, 200);\n        END\n        angle+=1000;\n        FRAME;\n    END\nEND\n\nPROCESS cross(x, y, graph);\nBEGIN\n    FRAME;\nEND  In the example a circuit that rotates on the screen is defined as the graphic of the \nmain process . This graphic has 50 defined  checkpoints  numbered from 1 to 50.  The program stays inside of a loop, rotates this graphic\nwith the angle command,and creating 50 processes\nof a cross type, one for each of the 50 checkpoints of the graphic.  You can check how the relative position of two points doesn't change\nthough the graphic of the circuit rotates.   This function is usually used to locate some important key points of a graphic.\nFor example, in a process in which the graphic is a man with a gun that can\nbe escalated, rotated or that has some animations, a checkpoint could be defined\nin the cannon of the gun to know at each moment where the bullets must go the case\nof gun being fired.  If the original graphic was inside of a scroll region \n(See start_scroll() ) the given coordinates will be relative to\nto the scroll region.   The  get_point()  function returns the position where a checkpoint of\nthe graphic was placed initially, instead of its current position\nlike  get_real_point() .   See:  Checkpoints  -  get_point()  -  get_pixel()", 
            "title": "Example program"
        }, 
        {
            "location": "/graphic_info()/", 
            "text": "graphic_info(\nfile\n,\n \ngraphic\n,\n \ninformation\n)\n\n\nReturns\n\n\nThe information that was requested about the graphic.\n\n\nDescription\n\n\nIt returns the information of a \ngraphic\n for in a \nfile\n that was requested.\n\n\nInformation:\n\n\nThe returned value will depend on the third parameter \ninformation\n that is passed\nto the function as follows:\n\n\ng_wide\n - The \noriginal width\n of the graphic\n\ng_height\n - The \noriginal height\n of the graphic.\n\ng_x_center\n - The (x coordinate} of the centre of the graphic.\n\ng_y_center\n - The \ny coordinate\n of the centre of the graphic.\n\n\nGraphics loaded with the \nload_map()\n or \nload_pcx()\n functions\n(or created with \nnew_map()\n) will be treated as if they were loaded from the first\nfile (code 0).\n\n\nExample program\n\n\nPROGRAM example_graphic_info;\n\nPRIVATE\n    file1;\n    myheight;\n    mywidth;\n    x_centre;\n    y_centre;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    put_screen(file1, 1);\n    graph=100;\n    x=160;\n    y=100;\n\n    // We take the information about the height of the graphic\n    myheight = graphic_info(file1, 100, g_height);\n\n    // We take the information about the width of the graphic\n    mywidth = graphic_info(file1, 100, g_wide);\n\n    // We take the information about the coordinate x of the centre of the graphic\n    x_centre = graphic_info(file1, 100, g_x_center);\n\n    // We take the information about the coordinate \n of the centre of the graphic\n    y_centre = graphic_info(file1, 100, g_y_center);\n\n    write(0, 0, 0, 0, \nHeight of the graphic:\n);\n    write_int(0, 0, 10, 0, offset myheight);\n    write(0, 0, 20, 0, \nWidth of the graphic:\n);\n    write_int(0, 0, 30, 0, offset mywidth);\n    write(0, 0, 40, 0, \nHorizontal centre of the graphic:\n);\n    write_int(0, 0, 50, 0, offset x_centre);\n    write(0, 0, 60, 0, \nVertical centre of the graphic:\n);\n    write_int(0, 0, 70, 0, offset y_centre);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, the program fetches the information about graphic number 100 in the\n\nhelp.fpg\n file, which is a ball of 32 pixels square and has a centre of (16, 16).\n\n\nTo obtain this information, it makes 4 calls to the \ngraphic_info()\n function, each\ntime passing a different (\ninformation\n) argument (g_wide, g_height, etc) to get the\nrequired values.\n\n\n\n\nSee: \ng_width\n - \ng_height\n - \ng_x_center\n - \ng_y_center", 
            "title": "graphic_info()"
        }, 
        {
            "location": "/graphic_info()/#returns", 
            "text": "The information that was requested about the graphic.", 
            "title": "Returns"
        }, 
        {
            "location": "/graphic_info()/#description", 
            "text": "It returns the information of a  graphic  for in a  file  that was requested.  Information:  The returned value will depend on the third parameter  information  that is passed\nto the function as follows:  g_wide  - The  original width  of the graphic g_height  - The  original height  of the graphic. g_x_center  - The (x coordinate} of the centre of the graphic. g_y_center  - The  y coordinate  of the centre of the graphic.  Graphics loaded with the  load_map()  or  load_pcx()  functions\n(or created with  new_map() ) will be treated as if they were loaded from the first\nfile (code 0).", 
            "title": "Description"
        }, 
        {
            "location": "/graphic_info()/#example-program", 
            "text": "PROGRAM example_graphic_info;\n\nPRIVATE\n    file1;\n    myheight;\n    mywidth;\n    x_centre;\n    y_centre;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    put_screen(file1, 1);\n    graph=100;\n    x=160;\n    y=100;\n\n    // We take the information about the height of the graphic\n    myheight = graphic_info(file1, 100, g_height);\n\n    // We take the information about the width of the graphic\n    mywidth = graphic_info(file1, 100, g_wide);\n\n    // We take the information about the coordinate x of the centre of the graphic\n    x_centre = graphic_info(file1, 100, g_x_center);\n\n    // We take the information about the coordinate   of the centre of the graphic\n    y_centre = graphic_info(file1, 100, g_y_center);\n\n    write(0, 0, 0, 0,  Height of the graphic: );\n    write_int(0, 0, 10, 0, offset myheight);\n    write(0, 0, 20, 0,  Width of the graphic: );\n    write_int(0, 0, 30, 0, offset mywidth);\n    write(0, 0, 40, 0,  Horizontal centre of the graphic: );\n    write_int(0, 0, 50, 0, offset x_centre);\n    write(0, 0, 60, 0,  Vertical centre of the graphic: );\n    write_int(0, 0, 70, 0, offset y_centre);\n    LOOP\n        FRAME;\n    END\nEND  In this example, the program fetches the information about graphic number 100 in the help.fpg  file, which is a ball of 32 pixels square and has a centre of (16, 16).  To obtain this information, it makes 4 calls to the  graphic_info()  function, each\ntime passing a different ( information ) argument (g_wide, g_height, etc) to get the\nrequired values.   See:  g_width  -  g_height  -  g_x_center  -  g_y_center", 
            "title": "Example program"
        }, 
        {
            "location": "/is_playing_cd()/", 
            "text": "is_playing_cd()\n\n\nReturns\n\n\nTrue\n (1) if the CD is playing, or \nfalse\n (0) if it isn't.\n\n\nDescription\n\n\nThis function is used to determine if the CD is playing a track.\n\n\nReturns \nTrue\n (an odd number) if the CD is playing, or \nFalse\n (an even number) if\nno track is playing.\n\n\nNormally this is used to play a song in a continuous loop as shown in this example.\n\n\nExample program\n\n\nPROGRAM example_is_playing_cd;\nBEGIN\n    play_cd(1, 0);\n    LOOP\n\n        IF (NOT is_playing_cd()) // Checks if the song has finished\n\n            play_cd(1, 0);\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example (which you need to have an audio \nCompact disk\n inserted in your \nCD-ROM\n drive),\nThe \nplay_cd()\n function is used to play the first song of the CD.\n\n\nIn a loop, a check is made to see if the song has finished so it can\nrestart it.\n\n\n\n\nThe volume of the cd-audio can be controlled with the\n\nsetup\n structure and the \nset_volume()\n function.\n\n\n\n\nSee: \nplay_cd()\n - \nstop_cd()\n - \nset_volume()\n - \nSetup structure", 
            "title": "is_playing_cd()"
        }, 
        {
            "location": "/is_playing_cd()/#returns", 
            "text": "True  (1) if the CD is playing, or  false  (0) if it isn't.", 
            "title": "Returns"
        }, 
        {
            "location": "/is_playing_cd()/#description", 
            "text": "This function is used to determine if the CD is playing a track.  Returns  True  (an odd number) if the CD is playing, or  False  (an even number) if\nno track is playing.  Normally this is used to play a song in a continuous loop as shown in this example.", 
            "title": "Description"
        }, 
        {
            "location": "/is_playing_cd()/#example-program", 
            "text": "PROGRAM example_is_playing_cd;\nBEGIN\n    play_cd(1, 0);\n    LOOP\n\n        IF (NOT is_playing_cd()) // Checks if the song has finished\n\n            play_cd(1, 0);\n        END\n        FRAME;\n    END\nEND  In this example (which you need to have an audio  Compact disk  inserted in your  CD-ROM  drive),\nThe  play_cd()  function is used to play the first song of the CD.  In a loop, a check is made to see if the song has finished so it can\nrestart it.   The volume of the cd-audio can be controlled with the setup  structure and the  set_volume()  function.   See:  play_cd()  -  stop_cd()  -  set_volume()  -  Setup structure", 
            "title": "Example program"
        }, 
        {
            "location": "/key()/", 
            "text": "key(\nkey code\n)\n\n\nReturns\n\n\nTrue\n (1) if the key is pressed and \nfalse\n (0) if it is not.\n\n\nDescription\n\n\nReturns \ntrue\n (an odd number) if the key (indicated as the \nkey code\n parameter)\nis pressed, and returns \nfalse\n if not.\n\n\nThe parameter is usually specified by the key name proceeded by the \n_\n symbol.\nFor example, to read the [\nA\n] key, the command used would be \nkey(_a)\n.\n\n\nView the \nkey codes\n to see the complete list of keytable codes that\ncan be used as the parameter of the \nkey()\n function.\n\n\nExample program\n\n\nPROGRAM example_key;\nBEGIN\n    LOOP\n        delete_text(all_text);\n\n        IF (key(_space)) // Check if the space bar is being pressed\n\n            write(0, 0, 0, 0, \nYou are pressing the [SPACE] key.\n);\n        ELSE\n            write(0, 0, 0, 0, \nYou are not pressing the [SPACE] key.\n);\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, a message is displayed, dependant on whether the \nSPACE\n key is being pressed\nor not.\n\n\n\n\nThere are three predefined global variables that can be used \nto control the keytable. These are:\n\n\nscan_code\n - Gets the Code of the last key that has been pressed. This\nis a numeric value that corresponds directly with the constants\nof \nkey codes\n used as parameters of the \nkey()\n function.\n\n\nascii\n - the ASCII code of the last key pressed.\n\n\nshift_state\n - Variable that indicates a number in the function for the \nspecial keys (shift, alt, control, ...) which are pressed at that moment.\n\n\n\n\nSee: \nkey codes\n - \nscan_code\n - \nascii\n - \nshift_state", 
            "title": "key()"
        }, 
        {
            "location": "/key()/#returns", 
            "text": "True  (1) if the key is pressed and  false  (0) if it is not.", 
            "title": "Returns"
        }, 
        {
            "location": "/key()/#description", 
            "text": "Returns  true  (an odd number) if the key (indicated as the  key code  parameter)\nis pressed, and returns  false  if not.  The parameter is usually specified by the key name proceeded by the  _  symbol.\nFor example, to read the [ A ] key, the command used would be  key(_a) .  View the  key codes  to see the complete list of keytable codes that\ncan be used as the parameter of the  key()  function.", 
            "title": "Description"
        }, 
        {
            "location": "/key()/#example-program", 
            "text": "PROGRAM example_key;\nBEGIN\n    LOOP\n        delete_text(all_text);\n\n        IF (key(_space)) // Check if the space bar is being pressed\n\n            write(0, 0, 0, 0,  You are pressing the [SPACE] key. );\n        ELSE\n            write(0, 0, 0, 0,  You are not pressing the [SPACE] key. );\n        END\n        FRAME;\n    END\nEND  In this example, a message is displayed, dependant on whether the  SPACE  key is being pressed\nor not.   There are three predefined global variables that can be used \nto control the keytable. These are:  scan_code  - Gets the Code of the last key that has been pressed. This\nis a numeric value that corresponds directly with the constants\nof  key codes  used as parameters of the  key()  function.  ascii  - the ASCII code of the last key pressed.  shift_state  - Variable that indicates a number in the function for the \nspecial keys (shift, alt, control, ...) which are pressed at that moment.   See:  key codes  -  scan_code  -  ascii  -  shift_state", 
            "title": "Example program"
        }, 
        {
            "location": "/let_me_alone()/", 
            "text": "let_me_alone()\n\n\nDescription\n\n\nSends a \ns_kill\n signal to every process (except the one that called\nthis function) to stop processing.\n\n\nThis function is normally called from the main process when a game has finished, \nto eliminate every process (shots,enemies, etc.) that still remain active \nand recover the control of the program.\n\n\nA call to \nlet_me_alone()\n could always  be swapped for a group of calls to the \n\nsignal()\n function with the \ns_kill\n signal, but to do this\nyou need to know the types of the processes that you wish to eliminate\nor their \nidentifier codes\n.\n\n\nExample program\n\n\nPROGRAM example_let_me_alone;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    ball (160, 100, 100);\n    write (0, 160, 0, 1, \nPress [SPACE] to eliminate the process\n);\n    WHILE (NOT key (_space))\n        FRAME;\n    END\n\n    let_me_alone(); // The other processes are eliminated\n\n    LOOP\n        FRAME;\n    END\nEND\n\nPROCESS ball(x, y, graph)\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example a \nball\n process is created, and the program waits for the space bar to\nbe pressed. At this point, the \nlet_me_alone()\n function is called, which eliminates\nevery process except the main one, which kills the ball process.\n\n\n\n\nIf you wish to check the processes that are active in a program at any given\nmoment, the debugger may be accessed by pressing the [\nF12\n] key.\n\n\n\n\nThe \nexit()\n function is used to finish a program instantly, returning\nto the operating system.\n\n\n\n\nSee: \nexit()\n - \nsignal()", 
            "title": "let_me_alone()"
        }, 
        {
            "location": "/let_me_alone()/#description", 
            "text": "Sends a  s_kill  signal to every process (except the one that called\nthis function) to stop processing.  This function is normally called from the main process when a game has finished, \nto eliminate every process (shots,enemies, etc.) that still remain active \nand recover the control of the program.  A call to  let_me_alone()  could always  be swapped for a group of calls to the  signal()  function with the  s_kill  signal, but to do this\nyou need to know the types of the processes that you wish to eliminate\nor their  identifier codes .", 
            "title": "Description"
        }, 
        {
            "location": "/let_me_alone()/#example-program", 
            "text": "PROGRAM example_let_me_alone;\nBEGIN\n    load_fpg( help/help.fpg );\n    ball (160, 100, 100);\n    write (0, 160, 0, 1,  Press [SPACE] to eliminate the process );\n    WHILE (NOT key (_space))\n        FRAME;\n    END\n\n    let_me_alone(); // The other processes are eliminated\n\n    LOOP\n        FRAME;\n    END\nEND\n\nPROCESS ball(x, y, graph)\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND  In this example a  ball  process is created, and the program waits for the space bar to\nbe pressed. At this point, the  let_me_alone()  function is called, which eliminates\nevery process except the main one, which kills the ball process.   If you wish to check the processes that are active in a program at any given\nmoment, the debugger may be accessed by pressing the [ F12 ] key.   The  exit()  function is used to finish a program instantly, returning\nto the operating system.   See:  exit()  -  signal()", 
            "title": "Example program"
        }, 
        {
            "location": "/load()/", 
            "text": "load(\nname of the file\n,\n \nOFFSET data\n)\n\n\nDescription\n\n\nLoads the raw data from a file into the computer memory.\n\n\nTo do this, the function requires the \nname of the file\n and the address\nof the data within the program, this can be a variable, array or structure\nand can be obtained by using the \nOFFSET\n) operator.\n\n\nThe address of the data must be the same as was used to save the data using the\n\nsave()\n function.\n\n\nThe name of the file can be any legal MS-DOS 8:3 filename (the same limitations as fpg\nand PRG filenames).\n\n\nIt is important that the file you wish to read data from exists, as an\nerror will occur if you try to load a nonexistent file (even if this can be ignored,\ncontinuing the program's execution).\n\n\nExample program\n\n\nPROGRAM example_load;\n\nPRIVATE\n    table[9];\n    counter;\n\nBEGIN\n    write (0, 0, 0, 0, \nPress [ENTER] to delete the data from memory.\n);\n    write (0, 0, 10, 0, \nPress [SPACE] to load the data from disk.\n);\n    write (0, 0, 30, 0, \nCurrent values of the data:\n);\n    FROM counter=0 TO 9;\n        table[counter]=rand(0, 100);\n        write_int(0, 0, 40+(counter*10), 0, offset table[counter]);\n    END\n    save(\nhelp.dat\n, offset table, sizeof(table));\n    LOOP\n        IF (key(_enter))\n            FROM counter=0 TO 9;\n                table[counter]=0;\n            END\n        END\n        IF (key(_space))\n\n            load(\nhelp.dat\n, offset table); // The disk data are loaded\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, an array of 10 values are created, and filled with random values.\nThis array is then saved to disk using the \nsave()\n function.\n\n\nWhen the ENTER key is pressed, the values in the array are reset to 0.\n\n\nWhen the SPACE key is pressed, the values are recovered into the array using\nthe \nload()\n function.\n\n\n\n\nSee: \nsave()\n - \nsizeof()", 
            "title": "load()"
        }, 
        {
            "location": "/load()/#description", 
            "text": "Loads the raw data from a file into the computer memory.  To do this, the function requires the  name of the file  and the address\nof the data within the program, this can be a variable, array or structure\nand can be obtained by using the  OFFSET ) operator.  The address of the data must be the same as was used to save the data using the save()  function.  The name of the file can be any legal MS-DOS 8:3 filename (the same limitations as fpg\nand PRG filenames).  It is important that the file you wish to read data from exists, as an\nerror will occur if you try to load a nonexistent file (even if this can be ignored,\ncontinuing the program's execution).", 
            "title": "Description"
        }, 
        {
            "location": "/load()/#example-program", 
            "text": "PROGRAM example_load;\n\nPRIVATE\n    table[9];\n    counter;\n\nBEGIN\n    write (0, 0, 0, 0,  Press [ENTER] to delete the data from memory. );\n    write (0, 0, 10, 0,  Press [SPACE] to load the data from disk. );\n    write (0, 0, 30, 0,  Current values of the data: );\n    FROM counter=0 TO 9;\n        table[counter]=rand(0, 100);\n        write_int(0, 0, 40+(counter*10), 0, offset table[counter]);\n    END\n    save( help.dat , offset table, sizeof(table));\n    LOOP\n        IF (key(_enter))\n            FROM counter=0 TO 9;\n                table[counter]=0;\n            END\n        END\n        IF (key(_space))\n\n            load( help.dat , offset table); // The disk data are loaded\n\n        END\n        FRAME;\n    END\nEND  In this example, an array of 10 values are created, and filled with random values.\nThis array is then saved to disk using the  save()  function.  When the ENTER key is pressed, the values in the array are reset to 0.  When the SPACE key is pressed, the values are recovered into the array using\nthe  load()  function.   See:  save()  -  sizeof()", 
            "title": "Example program"
        }, 
        {
            "location": "/load_fnt()/", 
            "text": "load_fnt(\nname of the file\n)\n\n\nReturns\n\n\nThe \ncode\n of the loaded font.\n\n\nDescription\n\n\nLoads a font file (*.FNT) from the disk.\n\n\nThe function returns the \nfont code\n that can be used by the\n\nwrite()\n and \nwrite_int()\n functions to write to the screen.\n\n\nThe path can be specified with the font. However, it is not necessary to do so if the\nfile resides in the same directory as the executable or the default font directory (\n\\FNT\n).\n\n\nThe new font must have the same palette as the game is currently using for it to be\ndisplayed correctly. Otherwise, the colours may appear incorrectly.\n\n\nExample program\n\n\nPROGRAM example_load_fnt;\n\nPRIVATE\n    font1;\n\nBEGIN\n\n    font1=load_fnt(\nhelp/help.fnt\n); // The font for the text is loaded\n\n    write(0, 160, 0, 1, \nText written with the system font.\n);\n    write(font1, 160, 10, 1, \nFONT LOADED FROM DISK\n);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, a font is loaded with the \nload_fnt()\n function and then two messages\nare written with different fonts. The first one with the system font, and the\nsecond one loaded from the \nhelp.fnt\n file.\n\n\n\n\nTo unload the font from memory (freeing up the space that the font occupies), the\n\nunload_fnt()\n function must be called, using the \nfont code\n as the parameter.\n\n\nIt is not necessary\n to unload the font unless you need the space to load other\ngraphics or fonts, since the system will automatically free up the font when the\nprogram has terminated.\n\n\n\n\nSee: \nunload_fnt()\n - \nwrite()\n - \nwrite_int()\n - \nload_pal()", 
            "title": "load_fnt()"
        }, 
        {
            "location": "/load_fnt()/#returns", 
            "text": "The  code  of the loaded font.", 
            "title": "Returns"
        }, 
        {
            "location": "/load_fnt()/#description", 
            "text": "Loads a font file (*.FNT) from the disk.  The function returns the  font code  that can be used by the write()  and  write_int()  functions to write to the screen.  The path can be specified with the font. However, it is not necessary to do so if the\nfile resides in the same directory as the executable or the default font directory ( \\FNT ).  The new font must have the same palette as the game is currently using for it to be\ndisplayed correctly. Otherwise, the colours may appear incorrectly.", 
            "title": "Description"
        }, 
        {
            "location": "/load_fnt()/#example-program", 
            "text": "PROGRAM example_load_fnt;\n\nPRIVATE\n    font1;\n\nBEGIN\n\n    font1=load_fnt( help/help.fnt ); // The font for the text is loaded\n\n    write(0, 160, 0, 1,  Text written with the system font. );\n    write(font1, 160, 10, 1,  FONT LOADED FROM DISK );\n    LOOP\n        FRAME;\n    END\nEND  In this example, a font is loaded with the  load_fnt()  function and then two messages\nare written with different fonts. The first one with the system font, and the\nsecond one loaded from the  help.fnt  file.   To unload the font from memory (freeing up the space that the font occupies), the unload_fnt()  function must be called, using the  font code  as the parameter.  It is not necessary  to unload the font unless you need the space to load other\ngraphics or fonts, since the system will automatically free up the font when the\nprogram has terminated.   See:  unload_fnt()  -  write()  -  write_int()  -  load_pal()", 
            "title": "Example program"
        }, 
        {
            "location": "/load_fpg()/", 
            "text": "load_fpg(\nname of the file\n)\n\n\nReturns\n\n\nThe \ncode\n of the fpg file that was loaded.\n\n\nDescription\n\n\nLoads an \n*.FPG\n file from disk.\n\n\nAn FPG file may contain anywhere from 0 to 999 graphic images. Every image in\nin the file will have a numeric code, this is the \ngraphic code\n (a number that ranges from\n\n1\n to \n999\n) that is used to identify the graphic inside the file.\n\n\nIt is possible to load as many graphics \nFPG\n files as necessary, as long as there is available\nmemory (this function has to be called several times to load several files).\n\n\nThe function returns the \nfile code\n that can be used by many functions that require a graphic.\nFor that, it is necessary to indicate the \nfile code\n in which the graphic is and the\n\ngraphics code\n inside the file.\n\n\nThe path can be specified with the graphics file. However, it is not necessary to do so if the\nfile resides in the same directory as the executable or the default \nFPG\n directory (\n\\FPG\n).\n\n\n\n\nWhen different files have been loaded, take into account that if they have different palettes,\nevery palette has to be activated previously with the \nload_pal()\n function, indicating\nthe (FPG) file name as a parameter before using its graphics.\n\n\nExample program\n\n\nPROGRAM example_load_fpg;\n\nPRIVATE\n    file1;\n\nBEGIN\n\n    file1 = load_fpg(\nhelp/help.fpg\n); // The graphics' file is loaded\n\n    put_screen(file1, 1); // We use graphic 1 of the file\n    write(0, 160, 0, 1, \nGraphics' file successfully loaded\n);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, the \nFPG\n file that is going to be used in the program is loaded using\nthe \nload_fpg()\n function. Then, graphic number 1 is put as a screen background\n(with the \nput_screen()\n function).\n\n\n\n\nTo unload the graphics file (\nFPG\n) from memory (freeing up the space that the graphics file\noccupies), the \nunload_fpg()\n function must be called, using the \nfile code\n\nas the parameter.\n\n\nIt is not necessary\n to unload file unless you need the space to load other\ngraphics or fonts, since the system will automatically unload the file when the\nprogram has terminated.\n\n\n\n\nSee: \nunload_fpg()\n - \nload_map/pcx()\n - \nload_pal()\n - \nfile", 
            "title": "load_fpg()"
        }, 
        {
            "location": "/load_fpg()/#returns", 
            "text": "The  code  of the fpg file that was loaded.", 
            "title": "Returns"
        }, 
        {
            "location": "/load_fpg()/#description", 
            "text": "Loads an  *.FPG  file from disk.  An FPG file may contain anywhere from 0 to 999 graphic images. Every image in\nin the file will have a numeric code, this is the  graphic code  (a number that ranges from 1  to  999 ) that is used to identify the graphic inside the file.  It is possible to load as many graphics  FPG  files as necessary, as long as there is available\nmemory (this function has to be called several times to load several files).  The function returns the  file code  that can be used by many functions that require a graphic.\nFor that, it is necessary to indicate the  file code  in which the graphic is and the graphics code  inside the file.  The path can be specified with the graphics file. However, it is not necessary to do so if the\nfile resides in the same directory as the executable or the default  FPG  directory ( \\FPG ).   When different files have been loaded, take into account that if they have different palettes,\nevery palette has to be activated previously with the  load_pal()  function, indicating\nthe (FPG) file name as a parameter before using its graphics.", 
            "title": "Description"
        }, 
        {
            "location": "/load_fpg()/#example-program", 
            "text": "PROGRAM example_load_fpg;\n\nPRIVATE\n    file1;\n\nBEGIN\n\n    file1 = load_fpg( help/help.fpg ); // The graphics' file is loaded\n\n    put_screen(file1, 1); // We use graphic 1 of the file\n    write(0, 160, 0, 1,  Graphics' file successfully loaded );\n    LOOP\n        FRAME;\n    END\nEND  In this example, the  FPG  file that is going to be used in the program is loaded using\nthe  load_fpg()  function. Then, graphic number 1 is put as a screen background\n(with the  put_screen()  function).   To unload the graphics file ( FPG ) from memory (freeing up the space that the graphics file\noccupies), the  unload_fpg()  function must be called, using the  file code \nas the parameter.  It is not necessary  to unload file unless you need the space to load other\ngraphics or fonts, since the system will automatically unload the file when the\nprogram has terminated.   See:  unload_fpg()  -  load_map/pcx()  -  load_pal()  -  file", 
            "title": "Example program"
        }, 
        {
            "location": "/load_pal()/", 
            "text": "load_pal(\nname of the file\n)\n\n\nDescription\n\n\nLoads a colour palette from disk (from a PAL, FPG, MAP or FNT file) defining the\n\n256 colours\n displayed on the screen.\n\n\nFrom that moment, the game will be seen with the colours set indicated by that palette.\n\n\nIf when the palette was loaded, the program had already another one assigned, a fading\nof the screen colours to black will be carried out. Then, the new\ncolour palette will gradually appear in the following frames of the game.\n\n\nThe file path may be specified with the palette, although this is not necessary if the\nfile is in the same directory as the executable, or in the default directory (depending on\nfile type) (\n\\PAL, \\FPG, \\MAP or \\FNT\n).\n\n\nThe program will automatically read the palette of the first of these types of files loaded\nin the program, even if the \nload_pal()\n function is not used. Then, this function will be\nused when the program uses several different palettes to change from one to another.\n\n\nExample program\n\n\nPROGRAM example_load_pal;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write(0, 160, 0, 1, \nPress [SPACE] to load a different palette.\n);\n    write(0, 160, 10, 1, \nPress [ENTER] to load the original palette.\n);\n    LOOP\n        IF (key(_space))\n\n            load_pal(\nhelp/help.pal\n); // The palette of a .pal file is loaded\n\n        END\n        IF (key(_enter))\n\n            load_pal(\nhelp/help.fpg\n);  // The palette of a .fpg file is loaded\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, a graphics file is loaded (\nFPG\n) and an image is placed on the background,\nalong with the necessary text messages.\n\n\nThe main program is a small loop, testing for the space and enter keys. When a key is pressed,\na palette is loaded. The \nhelp2.pal\n file is loaded when the spacebar is pressed, and the\noriginal palette is loaded (from the \nhelp.fpg\n file) when the ENTER key is pressed.\n\n\n\n\nA palette can not be unloaded from the computer's memory, since only one palette can be loaded\nat any time.\n\n\n\n\nSee: \nload_map/pcx()\n - \nload_fpg()\n - \nload_fnt()", 
            "title": "load_pal()"
        }, 
        {
            "location": "/load_pal()/#description", 
            "text": "Loads a colour palette from disk (from a PAL, FPG, MAP or FNT file) defining the 256 colours  displayed on the screen.  From that moment, the game will be seen with the colours set indicated by that palette.  If when the palette was loaded, the program had already another one assigned, a fading\nof the screen colours to black will be carried out. Then, the new\ncolour palette will gradually appear in the following frames of the game.  The file path may be specified with the palette, although this is not necessary if the\nfile is in the same directory as the executable, or in the default directory (depending on\nfile type) ( \\PAL, \\FPG, \\MAP or \\FNT ).  The program will automatically read the palette of the first of these types of files loaded\nin the program, even if the  load_pal()  function is not used. Then, this function will be\nused when the program uses several different palettes to change from one to another.", 
            "title": "Description"
        }, 
        {
            "location": "/load_pal()/#example-program", 
            "text": "PROGRAM example_load_pal;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write(0, 160, 0, 1,  Press [SPACE] to load a different palette. );\n    write(0, 160, 10, 1,  Press [ENTER] to load the original palette. );\n    LOOP\n        IF (key(_space))\n\n            load_pal( help/help.pal ); // The palette of a .pal file is loaded\n\n        END\n        IF (key(_enter))\n\n            load_pal( help/help.fpg );  // The palette of a .fpg file is loaded\n\n        END\n        FRAME;\n    END\nEND  In this example, a graphics file is loaded ( FPG ) and an image is placed on the background,\nalong with the necessary text messages.  The main program is a small loop, testing for the space and enter keys. When a key is pressed,\na palette is loaded. The  help2.pal  file is loaded when the spacebar is pressed, and the\noriginal palette is loaded (from the  help.fpg  file) when the ENTER key is pressed.   A palette can not be unloaded from the computer's memory, since only one palette can be loaded\nat any time.   See:  load_map/pcx()  -  load_fpg()  -  load_fnt()", 
            "title": "Example program"
        }, 
        {
            "location": "/load_pcm()_forward_slash_load_wav()/", 
            "text": "load_pcm(\nname of the file\n,\n \nloop\n)\n\n\nload_wav(\nname of the file\n,\n \nloop\n)\n\n\nReturns\n\n\nThe \nsound code\n loaded.\n\n\nDescription\n\n\nLoads a PCM or WAV sound effect from disk. The filename must be specified as the first\nparameter, and the second parameter \nloop\n replaced by either a \n1\n if the sound must\nindefinitely be repeated (looped), or \n0\n if it should played only once (this \nrefers to the sound when played using the \nsound()\n function).\n\n\nThe function returns the \nsound code\n that is required by the \nsound()\n function to\nplay the sound through a channel.\n\n\nThe path can be specified with the sound file. However, it is not necessary to do so if the\nfile resides in the same directory as the executable or the default sounds directory (\n\\PCM\n or \n\\WAV\n).\n\n\nExample program\n\n\nPROGRAM example_load_pcm;\n\nPRIVATE\n    id_sound;\n\nBEGIN\n\n    id_sound = load_pcm(\nhelp/help.pcm\n, 0); // Loads a sound of the hard disk\n\n    write(0, 160, 0, 1, \nPress [SPACE] to play the sound.\n);\n    LOOP\n        IF (scan_code==_space)\n            sound(id_sound, 100, 256);\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, a sound is loaded with the \nload_pcm()\n function. Then,\nevery time the spacebar is pressed, that sound is played using the \nsound()\n\nfunction.\n\n\n\n\nThe \nunload_pcm()\n and \nunload_wav()\n functions allow us to free up the computer's\nmemory occupied by the sound when it is not going to be used any longer. For that, you require\nthe \nsound code\n in order to know which sound we want to unload from the memory.\n\n\nIt is not necessary to unload the sound from memory\n before finishing the program,\nsince the system will do it automatically.\n\n\n\n\nSee: \nunload_pcm/wav()\n - \nsound()\n - \nchange_sound()\n - \nSetup structure", 
            "title": "load_pcm() / load_wav()"
        }, 
        {
            "location": "/load_pcm()_forward_slash_load_wav()/#returns", 
            "text": "The  sound code  loaded.", 
            "title": "Returns"
        }, 
        {
            "location": "/load_pcm()_forward_slash_load_wav()/#description", 
            "text": "Loads a PCM or WAV sound effect from disk. The filename must be specified as the first\nparameter, and the second parameter  loop  replaced by either a  1  if the sound must\nindefinitely be repeated (looped), or  0  if it should played only once (this \nrefers to the sound when played using the  sound()  function).  The function returns the  sound code  that is required by the  sound()  function to\nplay the sound through a channel.  The path can be specified with the sound file. However, it is not necessary to do so if the\nfile resides in the same directory as the executable or the default sounds directory ( \\PCM  or  \\WAV ).", 
            "title": "Description"
        }, 
        {
            "location": "/load_pcm()_forward_slash_load_wav()/#example-program", 
            "text": "PROGRAM example_load_pcm;\n\nPRIVATE\n    id_sound;\n\nBEGIN\n\n    id_sound = load_pcm( help/help.pcm , 0); // Loads a sound of the hard disk\n\n    write(0, 160, 0, 1,  Press [SPACE] to play the sound. );\n    LOOP\n        IF (scan_code==_space)\n            sound(id_sound, 100, 256);\n        END\n        FRAME;\n    END\nEND  In this example, a sound is loaded with the  load_pcm()  function. Then,\nevery time the spacebar is pressed, that sound is played using the  sound() \nfunction.   The  unload_pcm()  and  unload_wav()  functions allow us to free up the computer's\nmemory occupied by the sound when it is not going to be used any longer. For that, you require\nthe  sound code  in order to know which sound we want to unload from the memory.  It is not necessary to unload the sound from memory  before finishing the program,\nsince the system will do it automatically.   See:  unload_pcm/wav()  -  sound()  -  change_sound()  -  Setup structure", 
            "title": "Example program"
        }, 
        {
            "location": "/map_block_copy()/", 
            "text": "map_block_copy(\nfile\n,\n \ndestination graphic\n,\n \nx destination\n,\n \ny destination\n,\n\n                 \norigin graphic\n,\n \nx\n,\n \ny\n,\n \nwidth\n,\n \nhigh\n)\n\n\nDescription\n\n\nThe \nmap_block_copy()\n function allows us to transfer a rectangular block from a graphic to another one.\n\n\nThe graphic from which the rectangular region is taken is called the \norigin graphic\n and\nthe graphic in which the block will be copied to is called the \ndestination graphic\n.\n\n\nThe parameters are the following ones, in order:\n\n\nfile\n - Both graphics must come from the same graphics file \nFPG\n. The \nfile code\n must be\nspecified as first parameter (see \nload_fpg()\n). The graphics loaded with the\n\nload_map()\n or \nload_pcx()\n functions (or created with \nnew_map()\n function)\nwill be used as if they were from the first file (file code 0).\n\n\ndestination graphic\n - \ngraphic code\n in which the block is going to be put.\n\n\nx destination\n, \ny destination\n - \nx\n and \ny\n coordinates at which the copied block is\nto be placed inside the destination graphic.\n\n\norigin graphic\n - \ngraphic code\n from which the copied block is going to be taken.\n\n\nx\n, \ny\n - \nstarting\n coordinates of the block inside the origin graphic.\n\n\nwidth\n, \nheight\n - \ndimensions\n of the block that is going to be copied.\n\n\nThis function will modify the indicated graphic, but only the copy that has been loaded\ninto memory. The original graphic that is stored in the \nFPG\n, \nMAP\n or (PCX) files on disk\n\nwill remain unchanged\n. If you wish to recover the original graphics, then you must unload\nthe graphic (with \nunload_fpg()\n, \nunload_map()\n or \nunload_pcx()\n)\nand then, load it in again to obtain the unchanged version.\n\n\nExample program\n\n\nPROGRAM example_map_block_copy;\n\nPRIVATE\n    x_destination, y_destination;\n    x_origin, y_origin;\n    map_width, map_height;\n    file1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    graph=1;\n    x=160;\n    y=100;\n    LOOP\n        x_destination=rand(0, 320);\n        y_destination=rand(0, 200);\n        map_width=rand(1, 32);\n        map_height=rand(1, 32);\n        x_origin=rand(0, 32-map_width);\n        y_origin=rand(0, 32-map_height);\n\n        map_block_copy(file1, 1, x_destination, y_destination, 100, x_origin, y_origin, map_width, map_height);\n\n        FRAME;\n        angle+=1000;\n    END\nEND\n\n\n\n\nIn this example, an \nFPG\n graphics file is loaded, and a graph (graphic number 1) is placed in\nthe centre of the screen and continuously rotated. Within the main loop, a ball graphic\n(graphic number 100) is copied inside the destination graphic (number 1)\nat some randomly chosen coordinates.\n\n\n\n\nWhen a graphic is put inside another one that is being used as a scroll region's background,\nit will not automatically appear on screen unless the \nrefresh_scroll()\n function is used.\n\n\n\n\nSee: \nmap_xput()\n - \nmap_put()\n - \nmap_put_pixel()", 
            "title": "map_block_copy()"
        }, 
        {
            "location": "/map_block_copy()/#description", 
            "text": "The  map_block_copy()  function allows us to transfer a rectangular block from a graphic to another one.  The graphic from which the rectangular region is taken is called the  origin graphic  and\nthe graphic in which the block will be copied to is called the  destination graphic .  The parameters are the following ones, in order:  file  - Both graphics must come from the same graphics file  FPG . The  file code  must be\nspecified as first parameter (see  load_fpg() ). The graphics loaded with the load_map()  or  load_pcx()  functions (or created with  new_map()  function)\nwill be used as if they were from the first file (file code 0).  destination graphic  -  graphic code  in which the block is going to be put.  x destination ,  y destination  -  x  and  y  coordinates at which the copied block is\nto be placed inside the destination graphic.  origin graphic  -  graphic code  from which the copied block is going to be taken.  x ,  y  -  starting  coordinates of the block inside the origin graphic.  width ,  height  -  dimensions  of the block that is going to be copied.  This function will modify the indicated graphic, but only the copy that has been loaded\ninto memory. The original graphic that is stored in the  FPG ,  MAP  or (PCX) files on disk will remain unchanged . If you wish to recover the original graphics, then you must unload\nthe graphic (with  unload_fpg() ,  unload_map()  or  unload_pcx() )\nand then, load it in again to obtain the unchanged version.", 
            "title": "Description"
        }, 
        {
            "location": "/map_block_copy()/#example-program", 
            "text": "PROGRAM example_map_block_copy;\n\nPRIVATE\n    x_destination, y_destination;\n    x_origin, y_origin;\n    map_width, map_height;\n    file1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    graph=1;\n    x=160;\n    y=100;\n    LOOP\n        x_destination=rand(0, 320);\n        y_destination=rand(0, 200);\n        map_width=rand(1, 32);\n        map_height=rand(1, 32);\n        x_origin=rand(0, 32-map_width);\n        y_origin=rand(0, 32-map_height);\n\n        map_block_copy(file1, 1, x_destination, y_destination, 100, x_origin, y_origin, map_width, map_height);\n\n        FRAME;\n        angle+=1000;\n    END\nEND  In this example, an  FPG  graphics file is loaded, and a graph (graphic number 1) is placed in\nthe centre of the screen and continuously rotated. Within the main loop, a ball graphic\n(graphic number 100) is copied inside the destination graphic (number 1)\nat some randomly chosen coordinates.   When a graphic is put inside another one that is being used as a scroll region's background,\nit will not automatically appear on screen unless the  refresh_scroll()  function is used.   See:  map_xput()  -  map_put()  -  map_put_pixel()", 
            "title": "Example program"
        }, 
        {
            "location": "/map_get_pixel()/", 
            "text": "map_get_pixel(\nfile\n,\n \ngraphic\n,\n \nx\n,\n \ny\n)\n\n\nReturns\n\n\nThe colour of the point (0..255).\n\n\nDescription\n\n\nThis function allows us to obtain the colour of a graphic's specific pixel.\nFor this, the \nfile code\n in which the graphic is stored, the \ngraphic code\n\ninside the file and the \nx\n and \ny\n coordinates of the graphic where you wish to\nobtain the colour are needed to be passed as parameters.\n\n\nGraphics loaded with the \nload_map()\n or \nload_pcx()\n functions\n(or created with \nnew_map()\n function) are treated as if they were loaded from\nthe first \nFPG\n file (code 0).\n\n\nExample program\n\n\nPROGRAM example_map_get_pixel;\n\nPRIVATE\n    file1;\n    figure;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 7);\n    mouse.graph=200;\n    write(0, 0, 0, 0, \nFIGURE:\n);\n    write_int(0, 42, 0, 0, offset figure);\n    LOOP\n\n        // We take the colour of the bitmap's pixel\n        figure = map_get_pixel(file1, 8, mouse.x, mouse.y);\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, 6 different geometrical figures are drawn on the screen in the same colour.\nThe mouse graphic is defined as a little cross.\n\n\nThe image displayed on screen directly corresponds to another graphic (graphic number 8\nin the \nFPG\n file), which has the same figures but every one is in a different colour\n(the first one of colour 1, the second one of colour 2, etc.).\n\n\nIn the main loop, the \nmap_get_pixel()\n function is used to get a colour from graph 8, at the\nmouse's x and y coordinates.\n\n\nThis value will be shown in the upper left corner of the screen and when the mouse is over\none of the shapes, will show a value from 1 to 6.\n\n\n\n\nThis function is normally used to detect zones inside a graphic.\nThis technique is called using \nhardness maps\n and allows us to use two different graphics, one\nwith the picture and the second with the zones to detect, painted using colours.\n\n\n\n\nSee: \nget_pixel()\n - \nmap_put_pixel()", 
            "title": "map_get_pixel()"
        }, 
        {
            "location": "/map_get_pixel()/#returns", 
            "text": "The colour of the point (0..255).", 
            "title": "Returns"
        }, 
        {
            "location": "/map_get_pixel()/#description", 
            "text": "This function allows us to obtain the colour of a graphic's specific pixel.\nFor this, the  file code  in which the graphic is stored, the  graphic code \ninside the file and the  x  and  y  coordinates of the graphic where you wish to\nobtain the colour are needed to be passed as parameters.  Graphics loaded with the  load_map()  or  load_pcx()  functions\n(or created with  new_map()  function) are treated as if they were loaded from\nthe first  FPG  file (code 0).", 
            "title": "Description"
        }, 
        {
            "location": "/map_get_pixel()/#example-program", 
            "text": "PROGRAM example_map_get_pixel;\n\nPRIVATE\n    file1;\n    figure;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    put_screen(0, 7);\n    mouse.graph=200;\n    write(0, 0, 0, 0,  FIGURE: );\n    write_int(0, 42, 0, 0, offset figure);\n    LOOP\n\n        // We take the colour of the bitmap's pixel\n        figure = map_get_pixel(file1, 8, mouse.x, mouse.y);\n\n        FRAME;\n    END\nEND  In this example, 6 different geometrical figures are drawn on the screen in the same colour.\nThe mouse graphic is defined as a little cross.  The image displayed on screen directly corresponds to another graphic (graphic number 8\nin the  FPG  file), which has the same figures but every one is in a different colour\n(the first one of colour 1, the second one of colour 2, etc.).  In the main loop, the  map_get_pixel()  function is used to get a colour from graph 8, at the\nmouse's x and y coordinates.  This value will be shown in the upper left corner of the screen and when the mouse is over\none of the shapes, will show a value from 1 to 6.   This function is normally used to detect zones inside a graphic.\nThis technique is called using  hardness maps  and allows us to use two different graphics, one\nwith the picture and the second with the zones to detect, painted using colours.   See:  get_pixel()  -  map_put_pixel()", 
            "title": "Example program"
        }, 
        {
            "location": "/map_put()/", 
            "text": "map_put(\nfile\n,\n \ndestination graphic\n,\n \norigin graphic\n,\n \nx\n,\n \ny\n)\n\n\nDescription\n\n\nPuts a graphic inside another one. The graphic that is going to be copied is called \norigin graphic\n\nand the graphic in which the \norigin graphic\n is to be copied is called the \ndestination graphic\n.\nThe function allows us to copy a graphic (origin) inside another one (destination).\n\n\nBoth graphics must be in the same \nFPG\n file. The parameters are as follows, in order:\n\n\nfile\n - The \nfile code\n of the \nFPG\n file that contains both graphics. Graphics\nloaded with the \nload_map()\n or \nload_pcx()\n function (or created with \nnew_map()\n\nfunction) will be used as if they were loaded from the first file (code 0).\n\n\ndestination graphic\n - \ncode of the graphic\n inside which the other one is going to be copied.\n\n\norigin graphic\n - \ncode of the graphic\n that is going to be copied into the destination.\n\n\nx\n, \ny\n - \ncoordinates inside the destination graphic\n where the origin graphic is going to be copied.\nThe centre (or \ncontrol point\n number 0) of the origin graphic will be located at these\ncoordinates.\n\n\nThis function will modify the \ndestination graphic\n, but only the copy of it in memory. The original graphic\nthat is stored in the \nFPG\n or \nMAP\n files on the disk \nwill remain unchanged\n.\n\n\nIf you wish to recover the original unchanged graphic you should unload the file from memory (using\n\nunload_fpg()\n \nunload_map()\n or \nunload_pcx()\n functions) and then load it back again.\n\n\nExample program\n\n\nPROGRAM example_map_put;\n\nPRIVATE\n    x_destination;\n    y_destination;\n    file1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    graph=1;\n    x=160;\n    y=100;\n    LOOP\n        x_destination=rand(0, 320);\n        y_destination=rand(0, 200);\n\n        map_put(file1, 1, 100, x_destination, y_destination);\n\n        angle+=1000;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, graphic number 1 is put at the centre of the screen.\n\n\nIn every step of the main loop, this graphic rotates and a graphic number 100 (a ball) is put\ninside the graphic 1 (the central graphic) with the \nmap_put()\n function.\n\n\n\n\nThe \nmap_xput()\n function is a version a little more complex than the \nmap_put()\n\nfunction, but with much more utilities. Thus, the latter allows us, moreover, to put rotated,\nscaled, mirror and transparent graphics.\n\n\nThe \nmap_block_copy()\n function must be used to put a part of a graphic (instead of the\nfull graphic) inside another one.\n\n\n\n\nNote When the \nmap_put()\n function (or any other similar) is used to modify a graphic that\n\n\nis being used as background of a \nscroll\n window, it is possible that the graphic you have put\ndoes not immediately appear on screen. To solve this problem, you must use the \nrefresh_scroll()\n function.\n\n\n\n\nSee: \nmap_xput()\n - \nmap_put_pixel()\n - \nrefresh_scroll()\n - \nmap_block_copy()", 
            "title": "map_put()"
        }, 
        {
            "location": "/map_put()/#description", 
            "text": "Puts a graphic inside another one. The graphic that is going to be copied is called  origin graphic \nand the graphic in which the  origin graphic  is to be copied is called the  destination graphic .\nThe function allows us to copy a graphic (origin) inside another one (destination).  Both graphics must be in the same  FPG  file. The parameters are as follows, in order:  file  - The  file code  of the  FPG  file that contains both graphics. Graphics\nloaded with the  load_map()  or  load_pcx()  function (or created with  new_map() \nfunction) will be used as if they were loaded from the first file (code 0).  destination graphic  -  code of the graphic  inside which the other one is going to be copied.  origin graphic  -  code of the graphic  that is going to be copied into the destination.  x ,  y  -  coordinates inside the destination graphic  where the origin graphic is going to be copied.\nThe centre (or  control point  number 0) of the origin graphic will be located at these\ncoordinates.  This function will modify the  destination graphic , but only the copy of it in memory. The original graphic\nthat is stored in the  FPG  or  MAP  files on the disk  will remain unchanged .  If you wish to recover the original unchanged graphic you should unload the file from memory (using unload_fpg()   unload_map()  or  unload_pcx()  functions) and then load it back again.", 
            "title": "Description"
        }, 
        {
            "location": "/map_put()/#example-program", 
            "text": "PROGRAM example_map_put;\n\nPRIVATE\n    x_destination;\n    y_destination;\n    file1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    graph=1;\n    x=160;\n    y=100;\n    LOOP\n        x_destination=rand(0, 320);\n        y_destination=rand(0, 200);\n\n        map_put(file1, 1, 100, x_destination, y_destination);\n\n        angle+=1000;\n        FRAME;\n    END\nEND  In the example, graphic number 1 is put at the centre of the screen.  In every step of the main loop, this graphic rotates and a graphic number 100 (a ball) is put\ninside the graphic 1 (the central graphic) with the  map_put()  function.   The  map_xput()  function is a version a little more complex than the  map_put() \nfunction, but with much more utilities. Thus, the latter allows us, moreover, to put rotated,\nscaled, mirror and transparent graphics.  The  map_block_copy()  function must be used to put a part of a graphic (instead of the\nfull graphic) inside another one.", 
            "title": "Example program"
        }, 
        {
            "location": "/map_put()/#note-when-the-map_put-function-or-any-other-similar-is-used-to-modify-a-graphic-that", 
            "text": "is being used as background of a  scroll  window, it is possible that the graphic you have put\ndoes not immediately appear on screen. To solve this problem, you must use the  refresh_scroll()  function.   See:  map_xput()  -  map_put_pixel()  -  refresh_scroll()  -  map_block_copy()", 
            "title": "Note When the map_put() function (or any other similar) is used to modify a graphic that"
        }, 
        {
            "location": "/map_put_pixel()/", 
            "text": "map_put_pixel(\nfile\n,\n \ngraphic\n,\n \nx\n,\n \ny\n,\n \ncolour\n)\n\n\nDescription\n\n\nAllows us to modify the colour of a specific pixel of a graphic.\nFor that, the \nfile code\n where the graphic is stored, the \ngraphic's code\n inside the file\nand the (\nx\n, \ny\n) coordinates of the pixel whose \ncolour\n is intended to set are required.\n\n\nThe graphics loaded with the \nload_map()\n or \nload_pcx()\n\n(or created with \nnew_map()\n) function will be used as if they belonged to the first\nfile (the file with the code 0).\n\n\nThis function will modify the indicated graphic, but only its copy that has been loaded\nin the computer's memory. The original graphic, that is stored in the \nFPG\n or \nMAP\n files\nof the disk, \nwill remain unchangeable\n.\nFor that, if at a specific moment of the game the aim is to recover the original state of\nthe graphic, it will be necessary to unload it from the memory (with \nunload_fpg()\n,\n\nunload_map()\n or \nunload_pcx()\n functions) and then, load it again.\n\n\nExample program\n\n\nPROGRAM example_map_put_pixel;\nPRIVATE\n    file1;\n    coord_x;\n    coord_y;\n    colour;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    graph=5;\n    x=160;\n    y=100;\n    size=180;\n    LOOP\n        coord_x=rand(0, 199);\n        coord_y=rand(0, 199);\n        colour=rand(0, 15);\n\n        // Points are placed in the graphic number 5 of the file1\n        map_put_pixel(file1, 5, coord_x, coord_y, colour);\n\n        angle+=2000;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, graphic number 5 is put at the centre of the screen, continuously\nrotating. This graphic is a completely black background. For that reason, nothing\nwill initially be seen on screen.\n\n\nBut then, in every step of the loop, pixels of a colour randomly chosen between 0\nand 15 (greys) are put in this graphic, at a pair of coordinates randomly chosen too.\n\n\nThese pixels are put using the \nmap_put_pixel()\n function.\n\n\nNotice how it seems that there are more and more pixels rotating on screen, when\nthe only thing that really rotates is graphic number 5.\n\n\n\n\nThe \nmap_put()\n or \nmap_xput()\n functions may be used to put a full\ngraphic inside another one (and not only at one pixel). The \nmap_block_copy()\n\nfunction may be used to put just a part of a graphic inside another one.\n\n\n\n\nNote When the \nmap_put_pixel()\n function is used to put a pixel in a graphic that\n\n\nis being used as background of a \nscroll\n window, it is possible that this pixel does\nnot immediately appear on screen. To solve this problem, you must use the \nrefresh_scroll()\n\nfunction.\n\n\n\n\nSee: \nmap_put()\n - \nmap_xput()\n - \nrefresh_scroll()\n - \nmap_block_copy()", 
            "title": "map_put_pixel()"
        }, 
        {
            "location": "/map_put_pixel()/#description", 
            "text": "Allows us to modify the colour of a specific pixel of a graphic.\nFor that, the  file code  where the graphic is stored, the  graphic's code  inside the file\nand the ( x ,  y ) coordinates of the pixel whose  colour  is intended to set are required.  The graphics loaded with the  load_map()  or  load_pcx() \n(or created with  new_map() ) function will be used as if they belonged to the first\nfile (the file with the code 0).  This function will modify the indicated graphic, but only its copy that has been loaded\nin the computer's memory. The original graphic, that is stored in the  FPG  or  MAP  files\nof the disk,  will remain unchangeable .\nFor that, if at a specific moment of the game the aim is to recover the original state of\nthe graphic, it will be necessary to unload it from the memory (with  unload_fpg() , unload_map()  or  unload_pcx()  functions) and then, load it again.", 
            "title": "Description"
        }, 
        {
            "location": "/map_put_pixel()/#example-program", 
            "text": "PROGRAM example_map_put_pixel;\nPRIVATE\n    file1;\n    coord_x;\n    coord_y;\n    colour;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    graph=5;\n    x=160;\n    y=100;\n    size=180;\n    LOOP\n        coord_x=rand(0, 199);\n        coord_y=rand(0, 199);\n        colour=rand(0, 15);\n\n        // Points are placed in the graphic number 5 of the file1\n        map_put_pixel(file1, 5, coord_x, coord_y, colour);\n\n        angle+=2000;\n        FRAME;\n    END\nEND  In the example, graphic number 5 is put at the centre of the screen, continuously\nrotating. This graphic is a completely black background. For that reason, nothing\nwill initially be seen on screen.  But then, in every step of the loop, pixels of a colour randomly chosen between 0\nand 15 (greys) are put in this graphic, at a pair of coordinates randomly chosen too.  These pixels are put using the  map_put_pixel()  function.  Notice how it seems that there are more and more pixels rotating on screen, when\nthe only thing that really rotates is graphic number 5.   The  map_put()  or  map_xput()  functions may be used to put a full\ngraphic inside another one (and not only at one pixel). The  map_block_copy() \nfunction may be used to put just a part of a graphic inside another one.", 
            "title": "Example program"
        }, 
        {
            "location": "/map_put_pixel()/#note-when-the-map_put_pixel-function-is-used-to-put-a-pixel-in-a-graphic-that", 
            "text": "is being used as background of a  scroll  window, it is possible that this pixel does\nnot immediately appear on screen. To solve this problem, you must use the  refresh_scroll() \nfunction.   See:  map_put()  -  map_xput()  -  refresh_scroll()  -  map_block_copy()", 
            "title": "Note When the map_put_pixel() function is used to put a pixel in a graphic that"
        }, 
        {
            "location": "/map_xput()/", 
            "text": "map_xput(\nfile\n,\n \ngraphic destination\n,\n \ngraphic origin\n,\n \nx\n,\n \ny\n,\n\n           \nangle\n,\n \nsize\n,\n \nflags\n)\n\n\nDescription\n\n\nExtended version of the function \nmap_put()\n.\n\n\nPuts a graphic inside another one. The graphic that is going to be copied is called\n\norigin graphic\n and the \ndestination graphic\n is that inside which the origin will\nbe copied. This function allows us to copy a graphic (origin) inside\nanother one (destination).\n\n\nBoth graphics must be in the same file. The parameters are the following ones, in order:\n\n\nfile\n - \nfile code\n with the graphics library that contains both graphics. The\ngraphics loaded with the \nload_map()\n or \nload_pcx()\n\n(or created with \nnew_map()\n) function will be used as if they belonged to\nthe first file (the file with the code 0).\n\n\ndestination graphic\n - \ncode of the graphic\n inside which the other one is going to be put.\n\n\norigin graphic\n - \ncode of the graphic\n that is going to be copied in the destination.\n\n\nx\n, \ny\n - coordinates inside the destination graphic where the aim is to put the\norigin graphic. The origin graphic is going to be copied at these coordinates, from\nits upper left corner.\n\n\nangle\n - angle (in degree thousandths) in which the origin graphic is going to be\ncopied; the normal angle is \n0\n.\n\n\nsize\n - size (in percentages) in which the original graphic is going to  be copied\n(the normal size is \n100\n).\n\n\nflags\n - Indicates the mirrors and transparencies with which the original graphic will\nbe copied in the destination; the values are the following ones:\n\n\n0\n-Normal graphic.\n\n\n1\n-Horizontal mirror.\n\n\n2\n-vertical mirror.\n\n\n3\n-Horizontal and vertical mirror (180\n).\n\n\n4\n-Transparent graphic.\n\n\n5\n-Horizontal transparencies and mirror.\n\n\n6\n-vertical transparencies and mirror.\n\n\n7\n-Transparencies, horizontal and vertical mirror.\n\n\nThis function will modify the indicated graphic, but only its copy that has been loaded\nin the computer's memory. The original graphic, that is stored in the \nFPG\n or \nMAP\n or\n(PCX) files of the disk, \nwill remain unchangeable\n.\nFor that, if at a specific moment of the game the aim is to recover the original state\nof the graphic, it will be necessary to unload it from the memory (with \nunload_fpg()\n,\n\nunload_map()\n or \nunload_pcx()\n) and then, load it again.\n\n\nExample program\n\n\nPROGRAM example_map_xput;\nPRIVATE\n    x_destination;\n    y_destination;\n    file1;\n    angle1;\n    size1;\n    flags1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    graph=1;\n    x=160;\n    y=100;\n    LOOP\n        x_destination=rand(0, 319);\n        y_destination=rand(0, 199);\n        angle1=rand(-pi, pi);\n        size1=rand(10, 200);\n        flags1=rand(0, 7);\n\n        map_xput(file1, 1, 101, x_destination, y_destination, angle1, size1, flags1);\n\n        angle+=2000;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, graphic 1 is put at the centre of the screen,\ncontinuously rotating (this graphic is a decorative background in grey tonalities).\n\n\nIn every step of the loop, a triangle-shaped graphic (with number 100) will be put inside\ngraphic 1. This new graphic will be put with coordinates,\nangle, size and flags (see \nflags\n variable) randomly chosen.\n\n\nNotice how brown triangles with different applied effects are continuously appearing in\nthe background graphic.\n\n\n\n\nThe \nmap_xput()\n function is a version a little more complex than the \nmap_put()\n\nfunction, which is easier to use when it is not required to put rotated, scaled, mirror\nand transparent graphics.\n\n\nThe \nmap_block_copy()\n function must be used to put a part of a graphic (instead of\nthe full graphic) inside another one.\n\n\n\n\nNote When the \nmap_put()\n function (or any other similar) is used to modify a graphic\n\n\nthat is being used as background of a \nscroll\n window, it is possible that the graphic you\nhave put does not immediately appear on screen. To solve this problem, you must use the\n\nrefresh_scroll()\n function.\n\n\n\n\nSee: \nmap_put()\n - \nmap_put_pixel()\n - \nrefresh_scroll()\n - \nmap_block_copy()", 
            "title": "map_xput()"
        }, 
        {
            "location": "/map_xput()/#description", 
            "text": "Extended version of the function  map_put() .  Puts a graphic inside another one. The graphic that is going to be copied is called origin graphic  and the  destination graphic  is that inside which the origin will\nbe copied. This function allows us to copy a graphic (origin) inside\nanother one (destination).  Both graphics must be in the same file. The parameters are the following ones, in order:  file  -  file code  with the graphics library that contains both graphics. The\ngraphics loaded with the  load_map()  or  load_pcx() \n(or created with  new_map() ) function will be used as if they belonged to\nthe first file (the file with the code 0).  destination graphic  -  code of the graphic  inside which the other one is going to be put.  origin graphic  -  code of the graphic  that is going to be copied in the destination.  x ,  y  - coordinates inside the destination graphic where the aim is to put the\norigin graphic. The origin graphic is going to be copied at these coordinates, from\nits upper left corner.  angle  - angle (in degree thousandths) in which the origin graphic is going to be\ncopied; the normal angle is  0 .  size  - size (in percentages) in which the original graphic is going to  be copied\n(the normal size is  100 ).  flags  - Indicates the mirrors and transparencies with which the original graphic will\nbe copied in the destination; the values are the following ones:  0 -Normal graphic.  1 -Horizontal mirror.  2 -vertical mirror.  3 -Horizontal and vertical mirror (180 ).  4 -Transparent graphic.  5 -Horizontal transparencies and mirror.  6 -vertical transparencies and mirror.  7 -Transparencies, horizontal and vertical mirror.  This function will modify the indicated graphic, but only its copy that has been loaded\nin the computer's memory. The original graphic, that is stored in the  FPG  or  MAP  or\n(PCX) files of the disk,  will remain unchangeable .\nFor that, if at a specific moment of the game the aim is to recover the original state\nof the graphic, it will be necessary to unload it from the memory (with  unload_fpg() , unload_map()  or  unload_pcx() ) and then, load it again.", 
            "title": "Description"
        }, 
        {
            "location": "/map_xput()/#example-program", 
            "text": "PROGRAM example_map_xput;\nPRIVATE\n    x_destination;\n    y_destination;\n    file1;\n    angle1;\n    size1;\n    flags1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    graph=1;\n    x=160;\n    y=100;\n    LOOP\n        x_destination=rand(0, 319);\n        y_destination=rand(0, 199);\n        angle1=rand(-pi, pi);\n        size1=rand(10, 200);\n        flags1=rand(0, 7);\n\n        map_xput(file1, 1, 101, x_destination, y_destination, angle1, size1, flags1);\n\n        angle+=2000;\n        FRAME;\n    END\nEND  In the example, graphic 1 is put at the centre of the screen,\ncontinuously rotating (this graphic is a decorative background in grey tonalities).  In every step of the loop, a triangle-shaped graphic (with number 100) will be put inside\ngraphic 1. This new graphic will be put with coordinates,\nangle, size and flags (see  flags  variable) randomly chosen.  Notice how brown triangles with different applied effects are continuously appearing in\nthe background graphic.   The  map_xput()  function is a version a little more complex than the  map_put() \nfunction, which is easier to use when it is not required to put rotated, scaled, mirror\nand transparent graphics.  The  map_block_copy()  function must be used to put a part of a graphic (instead of\nthe full graphic) inside another one.", 
            "title": "Example program"
        }, 
        {
            "location": "/map_xput()/#note-when-the-map_put-function-or-any-other-similar-is-used-to-modify-a-graphic", 
            "text": "that is being used as background of a  scroll  window, it is possible that the graphic you\nhave put does not immediately appear on screen. To solve this problem, you must use the refresh_scroll()  function.   See:  map_put()  -  map_put_pixel()  -  refresh_scroll()  -  map_block_copy()", 
            "title": "Note When the map_put() function (or any other similar) is used to modify a graphic"
        }, 
        {
            "location": "/move_scroll()/", 
            "text": "move_scroll(\nnumber of scroll\n)\n\n\nDescription\n\n\nForces to scroll automatically and immediately. This function is rather advanced and,\nfor that reason, it could be difficult to understand its purpose.\n\n\nAs a parameter, the function requires the \nscroll number\n from 0 to 9 that was indicated\nin the \nstart_scroll()\n function as first parameter when the scroll started.\n\n\nThis function is used when a scroll region is automatically controlled, as the \ncamera\n\nfield of the \nscroll structure\n corresponding to the identifier of a process has been defined.\n\n\nThe purpose is to force the (\nx0\n, \ny0\n, \nx1\n and \ny1\n) values of that structure to be\nupdated. If this function is not used, these values won't be updated until the following game's frame.\n\n\nThis means that when a scroll is automatically controlled and another process needs\nto know the value of the coordinates of that scroll before the next frame (normally\nto be located in a position in keeping with the background movement), do as follows:\n\n\n1\n - The scroll starts with \nstart_scroll()\n.\n\n\n2\n - The process that will be used as camera is created and its \nidentifying code\n\nis put in the \ncamera\n field of the \nscroll structure\n.\n\n\n3\n - A very high priority must be set for this process, for it to run before the rest\nof the processes (putting in its \npriority\n local variable a positive whole value\nlike, for instance, 100).\n\n\n4\n - The \nmove_scroll()\n function will be called just before the \nFRAME\n statement\nof the process' loop used as camera.\n\n\nThus, you will guarantee the previous execution of this process and, just at the end, the\nupdating of the values (\nx0\n, \ny0\n, \nx1\n and \ny1\n) of the\n\nscroll structure\n, so the rest of the processes may use these variables already updated.\n\n\nThe most widespread use of this function is when you want to have more than two backgrounds\nin a scroll window. For that, a series of processes simulating a third or fourth plane are\ncreated. The position of their coordinates will depend on the exact position of the scroll\nin every frame. A program doing so is shown below.\n\n\nExample program\n\n\nPROGRAM example_move_scroll;\n\nPRIVATE\n    file1;\n    counter;\n\nBEGIN\n    set_fps(100, 0);\n    file1=load_fpg(\nhelp/help.fpg\n);\n    start_scroll(0, file1, 103, 102, 0, 15);\n    scroll.camera=id;\n    priority=100;\n\n    write(0, 160, 0, 1, \nUse the right and left cursors to move\n);\n    graph=101;\n    ctype=c_scroll;\n    LOOP\n        if (key(_right))\n            x+=2;\n            flags=0;\n        END\n        if (key(_left))\n            x-=2;\n            flags=1;\n        END\n\n        move_scroll(0); // Updates the scroll structure[]\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis example starts a scroll at full screen with two planes. Then, it moves a triangle to the\nright and left with the cursors. This process will function as a scroll camera, automatically\nfocusing the vision on it (by putting \nscroll.camera=\nid\n;\n).\n\n\nBut, at the same time, it creates a total of 40 processes (from -2000 to 2000, every 100 pixels)\nwith the picture of a vertical band with moving colours as if they were a third scroll plane\n(processes of the type \nmovable_process\n).\n\n\nFor that, it is important that their \nz\n coordinate is greater than the rest of the processes\n(\nz=100;\n) and that the priority of the process that controls the camera is higher than\n(\npriority=100;\n) and that the latter uses the \nmove_scroll()\n function before every frame (\nFRAME;\n).\n\n\nThe processes simulated by the third plane (\nmovable_process\n), place their \nx\n coordinate\nat a point depending on the \nscroll's x\n and its original position.\n\n\nThe difference lies in the fact that, if \nmove_scroll()\n had not been used, the processes,\nby using the \nscroll.x0\n variable without being updated, would move with a certain slowness\nthat detracted from the credibility  of the game.\n\n\n\n\nSee: \nstart_scroll()\n - \nScroll structure\n - \nPriority\n - \nZ", 
            "title": "move_scroll()"
        }, 
        {
            "location": "/move_scroll()/#description", 
            "text": "Forces to scroll automatically and immediately. This function is rather advanced and,\nfor that reason, it could be difficult to understand its purpose.  As a parameter, the function requires the  scroll number  from 0 to 9 that was indicated\nin the  start_scroll()  function as first parameter when the scroll started.  This function is used when a scroll region is automatically controlled, as the  camera \nfield of the  scroll structure  corresponding to the identifier of a process has been defined.  The purpose is to force the ( x0 ,  y0 ,  x1  and  y1 ) values of that structure to be\nupdated. If this function is not used, these values won't be updated until the following game's frame.  This means that when a scroll is automatically controlled and another process needs\nto know the value of the coordinates of that scroll before the next frame (normally\nto be located in a position in keeping with the background movement), do as follows:  1  - The scroll starts with  start_scroll() .  2  - The process that will be used as camera is created and its  identifying code \nis put in the  camera  field of the  scroll structure .  3  - A very high priority must be set for this process, for it to run before the rest\nof the processes (putting in its  priority  local variable a positive whole value\nlike, for instance, 100).  4  - The  move_scroll()  function will be called just before the  FRAME  statement\nof the process' loop used as camera.  Thus, you will guarantee the previous execution of this process and, just at the end, the\nupdating of the values ( x0 ,  y0 ,  x1  and  y1 ) of the scroll structure , so the rest of the processes may use these variables already updated.  The most widespread use of this function is when you want to have more than two backgrounds\nin a scroll window. For that, a series of processes simulating a third or fourth plane are\ncreated. The position of their coordinates will depend on the exact position of the scroll\nin every frame. A program doing so is shown below.", 
            "title": "Description"
        }, 
        {
            "location": "/move_scroll()/#example-program", 
            "text": "PROGRAM example_move_scroll;\n\nPRIVATE\n    file1;\n    counter;\n\nBEGIN\n    set_fps(100, 0);\n    file1=load_fpg( help/help.fpg );\n    start_scroll(0, file1, 103, 102, 0, 15);\n    scroll.camera=id;\n    priority=100;\n\n    write(0, 160, 0, 1,  Use the right and left cursors to move );\n    graph=101;\n    ctype=c_scroll;\n    LOOP\n        if (key(_right))\n            x+=2;\n            flags=0;\n        END\n        if (key(_left))\n            x-=2;\n            flags=1;\n        END\n\n        move_scroll(0); // Updates the scroll structure[]\n\n        FRAME;\n    END\nEND  This example starts a scroll at full screen with two planes. Then, it moves a triangle to the\nright and left with the cursors. This process will function as a scroll camera, automatically\nfocusing the vision on it (by putting  scroll.camera= id ; ).  But, at the same time, it creates a total of 40 processes (from -2000 to 2000, every 100 pixels)\nwith the picture of a vertical band with moving colours as if they were a third scroll plane\n(processes of the type  movable_process ).  For that, it is important that their  z  coordinate is greater than the rest of the processes\n( z=100; ) and that the priority of the process that controls the camera is higher than\n( priority=100; ) and that the latter uses the  move_scroll()  function before every frame ( FRAME; ).  The processes simulated by the third plane ( movable_process ), place their  x  coordinate\nat a point depending on the  scroll's x  and its original position.  The difference lies in the fact that, if  move_scroll()  had not been used, the processes,\nby using the  scroll.x0  variable without being updated, would move with a certain slowness\nthat detracted from the credibility  of the game.   See:  start_scroll()  -  Scroll structure  -  Priority  -  Z", 
            "title": "Example program"
        }, 
        {
            "location": "/move_text()/", 
            "text": "move_text(\ntext identifier\n,\n \nx\n,\n \ny\n)\n\n\nDescription\n\n\nMoves a text towards other screen coordinates. The \n text identifier\n and the (\nx\n, \ny\n)\nscreen coordinates towards which the text must be moved are specified as parameters. The\nidentifier of the text is a numeric code returned by the \nwrite()\n and \nwrite_int()\n\nfunctions when they are required to write a text.\n\n\nThe \ncentreing code\n specified in the \nwrite()\n or \nwrite_int()\n functions will\nremain when this function is used.\n\n\nThe specified coordinates always dealt with the screen and may be inside it or out from it.\nIt is necessary to use the \ntext_z\n global variable to modify the {z coordinate of the\ntexts} (the depth plane in which they appear).\n\n\nExample program\n\n\nPROGRAM example_move_text;\n\nPRIVATE\n    id_text1;\n    id_text2;\n    coord_x;\n    coord_y;\n    angle1;\n\nBEGIN\n    id_text1=write(0, 160, 100, 4, \nMOVING TEXT\n);\n    id_text2=write(0, 160, 100, 4, \nMOVE THE MOUSE\n);\n    LOOP\n        coord_x=160+get_distx(angle1, 100);\n        coord_y=100+get_disty(angle1, 90);\n\n        // We move the texts\n        move_text(id_text1, coord_x, coord_y);\n        move_text(id_text2, mouse.x, mouse.y);\n\n        angle1+=1000;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, two texts are displayed at the centre of the screen with the \nwrite()\n\nfunction. This function returns the identifiers of those texts, that are stored in the \nid_text1\n\nand \nid_text2\n variables.\n\n\nIn every step of the loop, the first text moves along a circular path obtained by increasing an angle\n(\nangle1\n) and using the \nget_distx()\n and \nget_disty()\n functions. The second text will be\nplaced at the coordinates of the mouse pointer.\n\n\nBoth texts move in every frame with the \nmove_text()\n function.\n\n\n\n\nTo delete a text definitively, the \ntext identifier\n is also required, and the \ndelete_text()\n\nfunction must be used for that.\n\n\n\n\nSee: \nwrite()\n - \nwrite_int()\n - \ndelete_text()", 
            "title": "move_text()"
        }, 
        {
            "location": "/move_text()/#description", 
            "text": "Moves a text towards other screen coordinates. The   text identifier  and the ( x ,  y )\nscreen coordinates towards which the text must be moved are specified as parameters. The\nidentifier of the text is a numeric code returned by the  write()  and  write_int() \nfunctions when they are required to write a text.  The  centreing code  specified in the  write()  or  write_int()  functions will\nremain when this function is used.  The specified coordinates always dealt with the screen and may be inside it or out from it.\nIt is necessary to use the  text_z  global variable to modify the {z coordinate of the\ntexts} (the depth plane in which they appear).", 
            "title": "Description"
        }, 
        {
            "location": "/move_text()/#example-program", 
            "text": "PROGRAM example_move_text;\n\nPRIVATE\n    id_text1;\n    id_text2;\n    coord_x;\n    coord_y;\n    angle1;\n\nBEGIN\n    id_text1=write(0, 160, 100, 4,  MOVING TEXT );\n    id_text2=write(0, 160, 100, 4,  MOVE THE MOUSE );\n    LOOP\n        coord_x=160+get_distx(angle1, 100);\n        coord_y=100+get_disty(angle1, 90);\n\n        // We move the texts\n        move_text(id_text1, coord_x, coord_y);\n        move_text(id_text2, mouse.x, mouse.y);\n\n        angle1+=1000;\n        FRAME;\n    END\nEND  In the example, two texts are displayed at the centre of the screen with the  write() \nfunction. This function returns the identifiers of those texts, that are stored in the  id_text1 \nand  id_text2  variables.  In every step of the loop, the first text moves along a circular path obtained by increasing an angle\n( angle1 ) and using the  get_distx()  and  get_disty()  functions. The second text will be\nplaced at the coordinates of the mouse pointer.  Both texts move in every frame with the  move_text()  function.   To delete a text definitively, the  text identifier  is also required, and the  delete_text() \nfunction must be used for that.   See:  write()  -  write_int()  -  delete_text()", 
            "title": "Example program"
        }, 
        {
            "location": "/near_angle()/", 
            "text": "near_angle(\nangle\n,\n \nfinal angle\n,\n \nincrement\n)\n\n\nReturns\n\n\nA new angle nearer to the final angle.\n\n\nDescription\n\n\nBrings an angle nearer another one at the given increment. The function returns the new angle.\n\n\nIt is used when the aim is that an angle (\nangle\n) gradually varies\nuntil it becomes another angle (\nfinal angle\n). For that, the  function needs the original angle,\nthe \nfinal angle\n and the angular \nincrement\n that is going to be added to or subtracted from the\noriginal angle.\n\n\nKeep in mind that all the angles are specified in degree thousandths. The angular \nincrement\n\nis but a small angle (such as one degree (\n1000\n) or five (\n5000\n).\n\n\nExample program\n\n\nPROGRAM example_near_angle;\n\nPRIVATE\n    angle2;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    mouse.graph=200;\n    graph=101;\n    write(0, 160, 200, 7, \nMove the mouse cursor\n);\n    LOOP\n        angle2=fget_angle(x, y, mouse.x, mouse.y);\n\n        // Brings the current angle closer to the final one in 10 degrees at the most\n        angle = near_angle(angle, angle2, 10000);\n\n        advance(6);\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, the mouse cursor is defined as a little cross that can be moved by the user.\n\n\nThe main program defines its graphic as a triangle (\ngraph=101;\n)\nthat, in every loop's iteration, obtains the angle towards the mouse cursor with the \nfget_angle()\n\nfunction. Then, it modifies its angle\nto move 10 degrees (10000) at the most towards the cursor angle, using the \nnear_angle()\n function.\nFinally, it advances 6 points\nin that direction by using the \nadvance()\n function.\n\n\nNotice how the triangle continuously pursues the mouse cursor without making any abrupt turn (bigger\nthan 10 degrees).\n\n\n\n\nSee: \nUse of the angles in the language\n - \nangle\n - \nget_angle()\n - \nfget_angle()", 
            "title": "near_angle()"
        }, 
        {
            "location": "/near_angle()/#returns", 
            "text": "A new angle nearer to the final angle.", 
            "title": "Returns"
        }, 
        {
            "location": "/near_angle()/#description", 
            "text": "Brings an angle nearer another one at the given increment. The function returns the new angle.  It is used when the aim is that an angle ( angle ) gradually varies\nuntil it becomes another angle ( final angle ). For that, the  function needs the original angle,\nthe  final angle  and the angular  increment  that is going to be added to or subtracted from the\noriginal angle.  Keep in mind that all the angles are specified in degree thousandths. The angular  increment \nis but a small angle (such as one degree ( 1000 ) or five ( 5000 ).", 
            "title": "Description"
        }, 
        {
            "location": "/near_angle()/#example-program", 
            "text": "PROGRAM example_near_angle;\n\nPRIVATE\n    angle2;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    mouse.graph=200;\n    graph=101;\n    write(0, 160, 200, 7,  Move the mouse cursor );\n    LOOP\n        angle2=fget_angle(x, y, mouse.x, mouse.y);\n\n        // Brings the current angle closer to the final one in 10 degrees at the most\n        angle = near_angle(angle, angle2, 10000);\n\n        advance(6);\n        FRAME;\n    END\nEND  In the example, the mouse cursor is defined as a little cross that can be moved by the user.  The main program defines its graphic as a triangle ( graph=101; )\nthat, in every loop's iteration, obtains the angle towards the mouse cursor with the  fget_angle() \nfunction. Then, it modifies its angle\nto move 10 degrees (10000) at the most towards the cursor angle, using the  near_angle()  function.\nFinally, it advances 6 points\nin that direction by using the  advance()  function.  Notice how the triangle continuously pursues the mouse cursor without making any abrupt turn (bigger\nthan 10 degrees).   See:  Use of the angles in the language  -  angle  -  get_angle()  -  fget_angle()", 
            "title": "Example program"
        }, 
        {
            "location": "/out_region()/", 
            "text": "out_region(\nidentifier code\n,\n \nnumber of region\n)\n\n\nReturns\n\n\nTrue\n if the process is outside of the region or \nFalse\n in the opposite case.\n\n\nDescription\n\n\nThis function determines whether a process is out of a screen region. For that, the function\nrequires the \nidentifying code\n of the process and a region number.\n\n\nThe screen regions can be defined with the \ndefine_region()\n function and they are simply\nrectangular zones of screen.\n\n\nRegion number \n0\n can not be defined, as it will always be equivalent to the entire screen.\nTherefore, if \n0\n is specified as a second parameter, this function determines whether a process\nis out of the screen (if it is not seen).\n\n\nIn case that the process' graphic is out of the specified region, the function returns \nTrue\n\n(an odd number). Otherwise, if the graphic is seen in that region, even partially, the function\nreturns \nFalse\n (any even number).\n\n\nThe process whose \nidentifying code\n is indicated must have its graphic correctly defined\n(normally in its \ngraph\n variable). Otherwise, the system will produce an error,\nsince it is not possible to calculate the dimensions of a graphic if the process lacks it.\n\n\nExample program\n\n\nPROGRAM example_out_region;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    y=100;\n    x=160;\n    graph=101;\n    LOOP\n        advance(8);\n\n        IF (out_region(id, 0)) // Check for off screen\n\n            x=160;\n            y=100;\n            angle=rand(-pi, pi);\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a background graphic is put and the main program creates a triangle-shaped\ngraphic at the centre of the screen with an angle randomly chosen.\n\n\nIn every step of the loop, the triangle advances and it is checked whether it is still present on\nthe screen (region 0) with the \nout_region()\n function. If so, it is put once again at the centre\nof the screen with another angle, also randomly chosen.\n\n\n\n\nSee: \ndefine_region()\n - \nregion\n - \ncodes identifiers", 
            "title": "out_region()"
        }, 
        {
            "location": "/out_region()/#returns", 
            "text": "True  if the process is outside of the region or  False  in the opposite case.", 
            "title": "Returns"
        }, 
        {
            "location": "/out_region()/#description", 
            "text": "This function determines whether a process is out of a screen region. For that, the function\nrequires the  identifying code  of the process and a region number.  The screen regions can be defined with the  define_region()  function and they are simply\nrectangular zones of screen.  Region number  0  can not be defined, as it will always be equivalent to the entire screen.\nTherefore, if  0  is specified as a second parameter, this function determines whether a process\nis out of the screen (if it is not seen).  In case that the process' graphic is out of the specified region, the function returns  True \n(an odd number). Otherwise, if the graphic is seen in that region, even partially, the function\nreturns  False  (any even number).  The process whose  identifying code  is indicated must have its graphic correctly defined\n(normally in its  graph  variable). Otherwise, the system will produce an error,\nsince it is not possible to calculate the dimensions of a graphic if the process lacks it.", 
            "title": "Description"
        }, 
        {
            "location": "/out_region()/#example-program", 
            "text": "PROGRAM example_out_region;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    y=100;\n    x=160;\n    graph=101;\n    LOOP\n        advance(8);\n\n        IF (out_region(id, 0)) // Check for off screen\n\n            x=160;\n            y=100;\n            angle=rand(-pi, pi);\n        END\n        FRAME;\n    END\nEND  In the example, a background graphic is put and the main program creates a triangle-shaped\ngraphic at the centre of the screen with an angle randomly chosen.  In every step of the loop, the triangle advances and it is checked whether it is still present on\nthe screen (region 0) with the  out_region()  function. If so, it is put once again at the centre\nof the screen with another angle, also randomly chosen.   See:  define_region()  -  region  -  codes identifiers", 
            "title": "Example program"
        }, 
        {
            "location": "/play_cd()/", 
            "text": "play_cd(\nnumber of track\n,\n \nmode\n)\n\n\nDescription\n\n\nStarts playing a cd-audio track. The track number (from 1 to the number of songs contained on the cd)\nmust be indicated. The way to do it is as follows:\n\n\nMode.\n\n\n0\n - Play the song and then stop.\n\n\n1\n - Play this song and then the following ones.\n\n\nExample program\n\n\nPROGRAM example_play_cd;\nBEGIN\n    write(0, 160, 0, 1, \nPress [SPACE] to turn the CD on.\n);\n    LOOP\n        IF (scan_code==_space)\n\n            play_cd(1, 1); // It plays the 1st. song followed by all remaining tracks.\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the previous example (for which it is necessary to have a music \nCompact disc\n inside\nthe \nCD-ROM\n device) an information message is displayed and in every iteration of the loop\nit is checked whether the spacebar was pressed to play the first song with the \nplay_cd()\n function.\n\n\n\n\nTo have a song indefinitely playing, a loop must be implemented, using \nthe \nis_playing_cd()\n function to determine when the song is over.\n\n\nThe cd-audio reproduction volume can be controlled with the \nsetup\n structure and the\n\nset_volume()\n function.\n\n\n\n\nSee: \nis_playing_cd()\n - \nstop_cd()\n - \nset_volume()\n - \nSetup structure", 
            "title": "play_cd()"
        }, 
        {
            "location": "/play_cd()/#description", 
            "text": "Starts playing a cd-audio track. The track number (from 1 to the number of songs contained on the cd)\nmust be indicated. The way to do it is as follows:  Mode.  0  - Play the song and then stop.  1  - Play this song and then the following ones.", 
            "title": "Description"
        }, 
        {
            "location": "/play_cd()/#example-program", 
            "text": "PROGRAM example_play_cd;\nBEGIN\n    write(0, 160, 0, 1,  Press [SPACE] to turn the CD on. );\n    LOOP\n        IF (scan_code==_space)\n\n            play_cd(1, 1); // It plays the 1st. song followed by all remaining tracks.\n\n        END\n        FRAME;\n    END\nEND  In the previous example (for which it is necessary to have a music  Compact disc  inside\nthe  CD-ROM  device) an information message is displayed and in every iteration of the loop\nit is checked whether the spacebar was pressed to play the first song with the  play_cd()  function.   To have a song indefinitely playing, a loop must be implemented, using \nthe  is_playing_cd()  function to determine when the song is over.  The cd-audio reproduction volume can be controlled with the  setup  structure and the set_volume()  function.   See:  is_playing_cd()  -  stop_cd()  -  set_volume()  -  Setup structure", 
            "title": "Example program"
        }, 
        {
            "location": "/pow()/", 
            "text": "pow(\nexpression\n,\n \nexpression\n)\n\n\nReturns\n\n\nThe first expression \nraised\n to the second.\n\n\nDescription\n\n\nCalculates the result when the first expression is raised to the second one.\n\n\nFor instance, \npow(3, 2)\n will return \n9\n, which is \n3\n squared, \n3\n, or \n3*3\n.\n\n\nExample program\n\n\nPROGRAM example_pow;\nGLOBAL\n    values[15];\n    n;\nBEGIN\n    FROM n=0 TO 15;\n        values[n]=rand(-100, 100);\n        write_int(0, 0, n*10, 0, offset values[n]);\n    END\n    write(0, 0, 192, 0, \nPress [SPACE] to square these numbers\n);\n    LOOP\n        IF (scan_code==_space)\n            FROM n=0 TO 15;\n\n                values[n] = pow(values[n], 2); // Square the values (value\u00b2 or value ^ 2)\n\n            END\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nThis program will display a list of numbers randomly chosen between -100 and 100 on the screen.\nWhen the spacebar is pressed, these numbers will square.\n\n\nTake into account that in the language \nit is only possible to use integers within the\n\n(\nmin_int\n ... \nmax_int\n) \nrange\n. Therefore, when the result of the function exceeds\nthis range, \nincorrect results will be shown\n. In this case, the system won't produce an error,\nso care must be taken.\n\n\n\n\nSee: \nExpression", 
            "title": "pow()"
        }, 
        {
            "location": "/pow()/#returns", 
            "text": "The first expression  raised  to the second.", 
            "title": "Returns"
        }, 
        {
            "location": "/pow()/#description", 
            "text": "Calculates the result when the first expression is raised to the second one.  For instance,  pow(3, 2)  will return  9 , which is  3  squared,  3 , or  3*3 .", 
            "title": "Description"
        }, 
        {
            "location": "/pow()/#example-program", 
            "text": "PROGRAM example_pow;\nGLOBAL\n    values[15];\n    n;\nBEGIN\n    FROM n=0 TO 15;\n        values[n]=rand(-100, 100);\n        write_int(0, 0, n*10, 0, offset values[n]);\n    END\n    write(0, 0, 192, 0,  Press [SPACE] to square these numbers );\n    LOOP\n        IF (scan_code==_space)\n            FROM n=0 TO 15;\n\n                values[n] = pow(values[n], 2); // Square the values (value\u00b2 or value ^ 2)\n\n            END\n        END\n        FRAME;\n    END\nEND  This program will display a list of numbers randomly chosen between -100 and 100 on the screen.\nWhen the spacebar is pressed, these numbers will square.  Take into account that in the language  it is only possible to use integers within the \n( min_int  ...  max_int )  range . Therefore, when the result of the function exceeds\nthis range,  incorrect results will be shown . In this case, the system won't produce an error,\nso care must be taken.   See:  Expression", 
            "title": "Example program"
        }, 
        {
            "location": "/put()/", 
            "text": "put(\nfile\n,\n \ngraphic\n,\n \nx\n,\n \ny\n)\n\n\nDescription\n\n\nPuts a graphic in the screen background. The function requires the \nfile code\n in which\nthe graphic is stored, the \ngraphic code\n inside the same file and the (\nx\n, \ny\n) coordinates at\nwhich the graphic is intended to be put.\n\n\nThe graphics loaded with the \nload_map()\n or \nload_pcx()\n\n(or created with \nnew_map()\n) function will be used as if they belonged to the first file\n(the file with the code 0).\n\n\nIf the centre graphic was not specified (setting its \ncontrol point\n\nnumber 0 from the painting tool), the coordinates will be referred to the position on the screen in\nwhich the graphic \ncentre\n will be located.\n\n\nThe graphics displayed on the screen background like this will be within the game's display\n\nunder all the processes, scroll regions, texts, etc.\n\n\nIf the aim is to have a graphic over some others, it must be \ncreated as a new process\n and\nits \nz\n variable must be established, indicating the priority of its display.\n\n\nThe \nclear_screen()\n function must be used to clear the screen background.\n\n\nExample program\n\n\nPROGRAM example_put;\n\nPRIVATE\n    file1;\n    coord_x;\n    coord_y;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    LOOP\n        coord_x=rand(0, 319);\n        coord_y=rand(0, 199);\n\n        put(file1, 100, coord_x, coord_y); // The graphic 100 is \nput\n.\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, the file with the graphics is loaded and in every iteration\nof the loop graphic number 100 (a ball) is put, with the \nput()\n function, at random coordinates\n(randomly chosen with the \nrand()\n function).\n\n\n\n\nIf the graphic that is intended to be put is merely a background screen, it is easier to use the\n\nput_screen()\n function, since it does not require the screen coordinates, because it will\nautomatically centre the graphic on the screen.\n\n\n\n\nThe \nxput()\n function is a version a little more complex than the \nput()\n function, but\nwith much more utilities since, at the same time, it allows us to put rotated, scaled, mirror\nand transparent graphics.\n\n\nTo put a graphic inside another one (instead of in the screen background), the \nmap_put()\n\nor \nmap_xput()\n functions must be used.\n\n\n\n\nSee: \nput_screen()\n - \nxput()\n - \nmap_put()\n - \nmap_xput()\n - \nput_pixel()", 
            "title": "put()"
        }, 
        {
            "location": "/put()/#description", 
            "text": "Puts a graphic in the screen background. The function requires the  file code  in which\nthe graphic is stored, the  graphic code  inside the same file and the ( x ,  y ) coordinates at\nwhich the graphic is intended to be put.  The graphics loaded with the  load_map()  or  load_pcx() \n(or created with  new_map() ) function will be used as if they belonged to the first file\n(the file with the code 0).  If the centre graphic was not specified (setting its  control point \nnumber 0 from the painting tool), the coordinates will be referred to the position on the screen in\nwhich the graphic  centre  will be located.  The graphics displayed on the screen background like this will be within the game's display under all the processes, scroll regions, texts, etc.  If the aim is to have a graphic over some others, it must be  created as a new process  and\nits  z  variable must be established, indicating the priority of its display.  The  clear_screen()  function must be used to clear the screen background.", 
            "title": "Description"
        }, 
        {
            "location": "/put()/#example-program", 
            "text": "PROGRAM example_put;\n\nPRIVATE\n    file1;\n    coord_x;\n    coord_y;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    LOOP\n        coord_x=rand(0, 319);\n        coord_y=rand(0, 199);\n\n        put(file1, 100, coord_x, coord_y); // The graphic 100 is  put .\n\n        FRAME;\n    END\nEND  In the example, the file with the graphics is loaded and in every iteration\nof the loop graphic number 100 (a ball) is put, with the  put()  function, at random coordinates\n(randomly chosen with the  rand()  function).   If the graphic that is intended to be put is merely a background screen, it is easier to use the put_screen()  function, since it does not require the screen coordinates, because it will\nautomatically centre the graphic on the screen.   The  xput()  function is a version a little more complex than the  put()  function, but\nwith much more utilities since, at the same time, it allows us to put rotated, scaled, mirror\nand transparent graphics.  To put a graphic inside another one (instead of in the screen background), the  map_put() \nor  map_xput()  functions must be used.   See:  put_screen()  -  xput()  -  map_put()  -  map_xput()  -  put_pixel()", 
            "title": "Example program"
        }, 
        {
            "location": "/put_pixel()/", 
            "text": "put_pixel(\nx\n,\n \ny\n,\n \ncolour\n)\n\n\nDescription\n\n\nPlots a pixel of the specified \ncolour\n at the indicated coordinates (\nx\n, \ny\n) on the background screen.\n\n\nThe pixels put with this function in the background screen will be displayed in the game {below\nall the processes, scroll regions, texts, etc.}\n\n\nIf the aim is to see a pixel over other graphics, you must create a new process, assigning the\npicture of a point (in its \ngraph\n variable) as a graphic and fixing its \nz\n variable\nwith the priority of its printing.\n\n\nTo clear the background screen, the \nclear_screen()\n function must be used.\n\n\nExample program\n\n\nPROGRAM example_put_pixel;\n\nPRIVATE\n    x_pixel;\n    y_pixel;\n    colour;\n\nBEGIN\n    LOOP\n        x_pixel=rand(0, 319);\n        y_pixel=rand(0, 199);\n        colour=rand(0, 15);\n\n        // The pixels are put in the background screen at random\n        put_pixel(x_pixel, y_pixel, colour);\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, in every step of the loop the pixels are put with the\n\nput_pixel()\n function, with coordinates and colour chosen at random with the \nrand()\n function.\n\n\n\n\nTo read the colour of a specific background screen colour, the \nget_pixel()\n function must be used, returning a number between 0 and 255 corresponding to the order of the colour inside the palette.\n\n\nThe \nput()\n function must be used to set a graphic on the screen, instead of a simple pixel.\n\n\nIt is also possible to set the colour of a pixel in a specific graphic, instead of in the background screen, by using the \nmap_put_pixel()\n function.\n\n\n\n\nSee: \nget_pixel()\n - \nput()\n - \nmap_put_pixel()\n - \nmap_get_pixel()", 
            "title": "put_pixel()"
        }, 
        {
            "location": "/put_pixel()/#description", 
            "text": "Plots a pixel of the specified  colour  at the indicated coordinates ( x ,  y ) on the background screen.  The pixels put with this function in the background screen will be displayed in the game {below\nall the processes, scroll regions, texts, etc.}  If the aim is to see a pixel over other graphics, you must create a new process, assigning the\npicture of a point (in its  graph  variable) as a graphic and fixing its  z  variable\nwith the priority of its printing.  To clear the background screen, the  clear_screen()  function must be used.", 
            "title": "Description"
        }, 
        {
            "location": "/put_pixel()/#example-program", 
            "text": "PROGRAM example_put_pixel;\n\nPRIVATE\n    x_pixel;\n    y_pixel;\n    colour;\n\nBEGIN\n    LOOP\n        x_pixel=rand(0, 319);\n        y_pixel=rand(0, 199);\n        colour=rand(0, 15);\n\n        // The pixels are put in the background screen at random\n        put_pixel(x_pixel, y_pixel, colour);\n\n        FRAME;\n    END\nEND  In the example, in every step of the loop the pixels are put with the put_pixel()  function, with coordinates and colour chosen at random with the  rand()  function.   To read the colour of a specific background screen colour, the  get_pixel()  function must be used, returning a number between 0 and 255 corresponding to the order of the colour inside the palette.  The  put()  function must be used to set a graphic on the screen, instead of a simple pixel.  It is also possible to set the colour of a pixel in a specific graphic, instead of in the background screen, by using the  map_put_pixel()  function.   See:  get_pixel()  -  put()  -  map_put_pixel()  -  map_get_pixel()", 
            "title": "Example program"
        }, 
        {
            "location": "/put_screen()/", 
            "text": "put_screen(\nfile\n,\n \ngraphic\n)\n\n\nDescription\n\n\nEstablishes the background screen. The function requires the \nfile code\n in which the graphic is, and the own \ncode of the graphic\n intended to be displayed in the background screen inside the file.\n\n\nThe graphics loaded with the \nload_map()\n or \nload_pcx()\n\n(or created with \nnew_map()\n) function will be used as if they belonged to the first file (the file with the code 0).\n\n\nThe function does not require any coordinate as a parameter since, if the graphic size (in pixels) is different from that of the screen, the former will simply be displayed centred in the latter.\n\n\nThe \nclear_screen()\n function must be used to clear the screen background.\n\n\nExample program\n\n\nPROGRAM example_put_screen;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n\n    put_screen(file1, 1); // Graphic 1 is established as background.\n\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, the graphics' file is loaded and a background graphic (contained in the file with the graphic code number 1) is set with the \nput_screen()\n function.\n\n\n\n\nIf the aim is to display a graphic on a specific part of the screen or a graphic \nthat is not centred\n, the \nput()\n may be used. Moreover, the \nxput()\n function allows us to display rotated, scaled, mirror and/or transparent graphics in any screen region.\n\n\n\n\nSee: \nput()\n - \nxput()\n - \nput_pixel()\n - \nclear_screen()", 
            "title": "put_screen()"
        }, 
        {
            "location": "/put_screen()/#description", 
            "text": "Establishes the background screen. The function requires the  file code  in which the graphic is, and the own  code of the graphic  intended to be displayed in the background screen inside the file.  The graphics loaded with the  load_map()  or  load_pcx() \n(or created with  new_map() ) function will be used as if they belonged to the first file (the file with the code 0).  The function does not require any coordinate as a parameter since, if the graphic size (in pixels) is different from that of the screen, the former will simply be displayed centred in the latter.  The  clear_screen()  function must be used to clear the screen background.", 
            "title": "Description"
        }, 
        {
            "location": "/put_screen()/#example-program", 
            "text": "PROGRAM example_put_screen;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n\n    put_screen(file1, 1); // Graphic 1 is established as background.\n\n    LOOP\n        FRAME;\n    END\nEND  In the example, the graphics' file is loaded and a background graphic (contained in the file with the graphic code number 1) is set with the  put_screen()  function.   If the aim is to display a graphic on a specific part of the screen or a graphic  that is not centred , the  put()  may be used. Moreover, the  xput()  function allows us to display rotated, scaled, mirror and/or transparent graphics in any screen region.   See:  put()  -  xput()  -  put_pixel()  -  clear_screen()", 
            "title": "Example program"
        }, 
        {
            "location": "/rand()/", 
            "text": "rand(\nminimum value\n,\n \nmaximum value\n)\n\n\nReturns\n\n\nA random numeric value.\n\n\nDescription\n\n\nReturns a random number (chosen at random) between the \nminimum value\n and the \nmaximum value\n, both included.\n\n\nThis function is normally used to set all the parameters intended to be varied in a game when it is restarted. For instance, the coordinates of an enemy may be initialised with random numbers, so it may appear in a different position in every game.\n\n\nThis function has another utility. Thus, if we want that an action does not always occur, but that it has a certain probability to occur, we normally use a statement of the following type:\n\n\nIF (rand(0, 100)\n25)\n\n\n ** // Action ...**\n\n\n\nEND\n\n\nIn this case, the \naction\n will take place, on average, 25 per cent of the times the \nIF\n statement would be executed. The reason for that is that, on obtaining a random number between 0 and 100, this number would be less than 25 in a fourth of times, approximately.\n\n\nExample program\n\n\nPROGRAM example_rand;\n\nPRIVATE\n    table[15];\n    counter;\n\nBEGIN\n    write (0, 0, 192, 0, \nPress [SPACE] to calculate random values.\n);\n    FROM counter=0 TO 15;\n        write_int(0, 0, counter*10, 0, offset table[counter]);\n    END\n    LOOP\n        IF (scan_code==_space)\n            FROM counter=0 TO 15;\n\n                // Random values between -100 and 100 are chosen\n                table[counter] = rand(-100, 100);\n\n            END\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a table with 16 data (from 0 to 15) is created. In every\niteration of the main loop it is checked whether the spacebar has been pressed.\nIf so, the 16 data of the table will be filled with random values between -100 and 100,\nchosen with the \nrand()\n function.\n\n\n\n\nBy default, the values returned by the \nrand()\n function will completely be different in every execution of the program. If we want to have always the same series of numbers, we may use the \nrand_seed()\n function, specifying a number behind which the series of numbers returned by the \nrand()\n function will always be predetermined.\n\n\n\n\nSee: \nrand_seed()", 
            "title": "rand()"
        }, 
        {
            "location": "/rand()/#returns", 
            "text": "A random numeric value.", 
            "title": "Returns"
        }, 
        {
            "location": "/rand()/#description", 
            "text": "Returns a random number (chosen at random) between the  minimum value  and the  maximum value , both included.  This function is normally used to set all the parameters intended to be varied in a game when it is restarted. For instance, the coordinates of an enemy may be initialised with random numbers, so it may appear in a different position in every game.  This function has another utility. Thus, if we want that an action does not always occur, but that it has a certain probability to occur, we normally use a statement of the following type:  IF (rand(0, 100) 25)   ** // Action ...**  END  In this case, the  action  will take place, on average, 25 per cent of the times the  IF  statement would be executed. The reason for that is that, on obtaining a random number between 0 and 100, this number would be less than 25 in a fourth of times, approximately.", 
            "title": "Description"
        }, 
        {
            "location": "/rand()/#example-program", 
            "text": "PROGRAM example_rand;\n\nPRIVATE\n    table[15];\n    counter;\n\nBEGIN\n    write (0, 0, 192, 0,  Press [SPACE] to calculate random values. );\n    FROM counter=0 TO 15;\n        write_int(0, 0, counter*10, 0, offset table[counter]);\n    END\n    LOOP\n        IF (scan_code==_space)\n            FROM counter=0 TO 15;\n\n                // Random values between -100 and 100 are chosen\n                table[counter] = rand(-100, 100);\n\n            END\n        END\n        FRAME;\n    END\nEND  In the example, a table with 16 data (from 0 to 15) is created. In every\niteration of the main loop it is checked whether the spacebar has been pressed.\nIf so, the 16 data of the table will be filled with random values between -100 and 100,\nchosen with the  rand()  function.   By default, the values returned by the  rand()  function will completely be different in every execution of the program. If we want to have always the same series of numbers, we may use the  rand_seed()  function, specifying a number behind which the series of numbers returned by the  rand()  function will always be predetermined.   See:  rand_seed()", 
            "title": "Example program"
        }, 
        {
            "location": "/rand_seed()/", 
            "text": "rand_seed(\nnumeric value\n)\n\n\nDescription\n\n\nThis function sets a seed for the generator of random numbers\n(the numbers generated by the \nrand()\n function).\n\n\nThe seed can be any integer within the range (\nmin_int\n ... \nmax_int\n).\nIf the seed is set, all the numbers generated by the \nrand()\n function will be\nthe same in every execution of the program.\nAfter having been established an origin seed, the \nrand()\n\nfunction will return a series of numbers predetermined for this seed.\n\n\nExample program\n\n\nPROGRAM example_rand_seed;\n\nPRIVATE\n    table[15];\n    counter;\n\nBEGIN\n    write (0, 0, 184, 0, \nPress [ENTER] to set 1234 as a seed.\n);\n    write (0, 0, 192, 0, \nPress [SPACE] to calculate random values.\n);\n    FROM counter=0 TO 15;\n        write_int(0, 0, counter*10, 0, offset table[counter]);\n    END\n    LOOP\n        IF (scan_code==_space)\n            FROM counter=0 TO 15;\n                table[counter] = rand(-100, 100);\n            END\n        END\n        IF (scan_code==_enter)\n\n            rand_seed(1234); // A seed is set to generate the random numbers.\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a table with 16 bits of data (from 0 to 15) is created. In every iteration\nof the main loop,  the data will be filled with random values from -100 and 100 (chosen with the \nrand()\n function) every time the spacebar is pressed.\n\n\nAnd when the ENTER key is pressed, then the seed of the random numbers will be defined as 1234 with the \nrand_seed()\n function.\n\n\nNotice how, every time the ENTER key is pressed and then, by pressing the space bar, the same series of random numbers (17, 94, -38, ...) is obtained. This series will be different for every possible seed.\n\n\n\n\nSee: \nrand()", 
            "title": "rand_seed()"
        }, 
        {
            "location": "/rand_seed()/#description", 
            "text": "This function sets a seed for the generator of random numbers\n(the numbers generated by the  rand()  function).  The seed can be any integer within the range ( min_int  ...  max_int ).\nIf the seed is set, all the numbers generated by the  rand()  function will be\nthe same in every execution of the program.\nAfter having been established an origin seed, the  rand() \nfunction will return a series of numbers predetermined for this seed.", 
            "title": "Description"
        }, 
        {
            "location": "/rand_seed()/#example-program", 
            "text": "PROGRAM example_rand_seed;\n\nPRIVATE\n    table[15];\n    counter;\n\nBEGIN\n    write (0, 0, 184, 0,  Press [ENTER] to set 1234 as a seed. );\n    write (0, 0, 192, 0,  Press [SPACE] to calculate random values. );\n    FROM counter=0 TO 15;\n        write_int(0, 0, counter*10, 0, offset table[counter]);\n    END\n    LOOP\n        IF (scan_code==_space)\n            FROM counter=0 TO 15;\n                table[counter] = rand(-100, 100);\n            END\n        END\n        IF (scan_code==_enter)\n\n            rand_seed(1234); // A seed is set to generate the random numbers.\n\n        END\n        FRAME;\n    END\nEND  In the example, a table with 16 bits of data (from 0 to 15) is created. In every iteration\nof the main loop,  the data will be filled with random values from -100 and 100 (chosen with the  rand()  function) every time the spacebar is pressed.  And when the ENTER key is pressed, then the seed of the random numbers will be defined as 1234 with the  rand_seed()  function.  Notice how, every time the ENTER key is pressed and then, by pressing the space bar, the same series of random numbers (17, 94, -38, ...) is obtained. This series will be different for every possible seed.   See:  rand()", 
            "title": "Example program"
        }, 
        {
            "location": "/refresh_scroll()/", 
            "text": "refresh_scroll(\nnumber of scroll\n)\n\n\nDescription\n\n\nThis function is used when a graphic that is being used as a \nbackground of a scroll region\n has been modified with the \nmap_put()\n, \nmap_xput()\n, \nmap_block_copy()\n or \nmap_put_pixel()\n functions, in order to update it.\n\n\nThe parameter required by the function is the \nscroll number\n that was specified when the scroll started with the \nstart_scroll()\n function.\n\n\nWhen a graphic that is being used as background of a scroll is modified, it is not automatically updated on the screen. On the contrary, it is necessary to call this function for that purpose.\n\n\nOnce the graphic has been modified, it will remain like this during the rest of the program execution, unless the graphic is unloaded from the memory (with \nunload_fpg()\n, \n\nunload_map()\n or \nunload_pcx()\n functions) and loaded again. In this case, the original state of the graphic will be restored.\n\n\nExample program\n\n\nPROGRAM example_refresh_scroll;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    start_scroll(0, 0, 103, 102, 0, 15);\n    scroll.camera=id;\n    write(0, 160, 192, 7, \nPress [ENTER] to put a graphic in the scroll.\n);\n    write(0, 160, 200, 7, \nPress [SPACE] to update scroll.\n);\n    LOOP\n        IF (scan_code==_enter)\n           map_put(0, 103, 100, rand(16, 48), rand(16, 48));\n        END\n        IF (scan_code==_space)\n\n            refresh_scroll(0); // We refresh the scroll 0.\n\n        END\n        x+=2;\n        y+=1;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a scroll (number 0) is created as a scroll of two planes:\nthe foreground with graphic number 103 and the background with graphic number 102.\n\n\nInside the main loop, a ball will be displayed over graphic 103 (foreground of the scroll)\nwhen the ENTER key is pressed. But it won't appear on-screen, unless we await until the\nscroll gradually appears on-screen (with graphic 103 already modified), or until the spacebar\nis pressed. In this case, the call to the \nrefresh_scroll()\n function will update the scroll\nwindow with the graphic already modified.\n\n\nIf, in the previous example, the \nrefresh_scroll()\n function had been called just after\nthe \nmap_put()\n one, the graphics displayed on the foreground would instantaneously\nappear by pressing the spacebar.\n\n\nIn the example, every time that a ball is displayed, many of them appear. The reason for\nthis is that graphic 103 used as a foreground in the scroll\nis a small graphic and it is shown on many occasions tile, to fill all the scroll zone.\n\n\n\n\nNote It can be noticed that, if the displaying graphic is at some coordinates out\n\n\nof the screen, it won't be necessary to call this function, because the parts of the\nscroll that are gradually appearing on-screen are automatically refreshed.\n\n\n\n\nSee: \nstart_scroll()\n - \nmove_scroll()\n - \nStructure scroll", 
            "title": "refresh_scroll()"
        }, 
        {
            "location": "/refresh_scroll()/#description", 
            "text": "This function is used when a graphic that is being used as a  background of a scroll region  has been modified with the  map_put() ,  map_xput() ,  map_block_copy()  or  map_put_pixel()  functions, in order to update it.  The parameter required by the function is the  scroll number  that was specified when the scroll started with the  start_scroll()  function.  When a graphic that is being used as background of a scroll is modified, it is not automatically updated on the screen. On the contrary, it is necessary to call this function for that purpose.  Once the graphic has been modified, it will remain like this during the rest of the program execution, unless the graphic is unloaded from the memory (with  unload_fpg() ,  unload_map()  or  unload_pcx()  functions) and loaded again. In this case, the original state of the graphic will be restored.", 
            "title": "Description"
        }, 
        {
            "location": "/refresh_scroll()/#example-program", 
            "text": "PROGRAM example_refresh_scroll;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    start_scroll(0, 0, 103, 102, 0, 15);\n    scroll.camera=id;\n    write(0, 160, 192, 7,  Press [ENTER] to put a graphic in the scroll. );\n    write(0, 160, 200, 7,  Press [SPACE] to update scroll. );\n    LOOP\n        IF (scan_code==_enter)\n           map_put(0, 103, 100, rand(16, 48), rand(16, 48));\n        END\n        IF (scan_code==_space)\n\n            refresh_scroll(0); // We refresh the scroll 0.\n\n        END\n        x+=2;\n        y+=1;\n        FRAME;\n    END\nEND  In the example, a scroll (number 0) is created as a scroll of two planes:\nthe foreground with graphic number 103 and the background with graphic number 102.  Inside the main loop, a ball will be displayed over graphic 103 (foreground of the scroll)\nwhen the ENTER key is pressed. But it won't appear on-screen, unless we await until the\nscroll gradually appears on-screen (with graphic 103 already modified), or until the spacebar\nis pressed. In this case, the call to the  refresh_scroll()  function will update the scroll\nwindow with the graphic already modified.  If, in the previous example, the  refresh_scroll()  function had been called just after\nthe  map_put()  one, the graphics displayed on the foreground would instantaneously\nappear by pressing the spacebar.  In the example, every time that a ball is displayed, many of them appear. The reason for\nthis is that graphic 103 used as a foreground in the scroll\nis a small graphic and it is shown on many occasions tile, to fill all the scroll zone.", 
            "title": "Example program"
        }, 
        {
            "location": "/refresh_scroll()/#note-it-can-be-noticed-that-if-the-displaying-graphic-is-at-some-coordinates-out", 
            "text": "of the screen, it won't be necessary to call this function, because the parts of the\nscroll that are gradually appearing on-screen are automatically refreshed.   See:  start_scroll()  -  move_scroll()  -  Structure scroll", 
            "title": "Note It can be noticed that, if the displaying graphic is at some coordinates out"
        }, 
        {
            "location": "/reset_fli()/", 
            "text": "reset_fli()\n\n\nDescription\n\n\nThis function \nrewinds\n an \nFLI/FLC\n animation to the beginning. This animation\nstarted with the \nstart_fli()\n function.\n\n\nAfter having called this function, the animation will entirely be displayed again\nfrom the beginning (to display every frame of the animation, you must call the \nframe_fli()\n function).\n\n\nThe utility of this function deals with the possibility of stopping an animation\nand repeating it again from the beginning, without unloading it (\nend_fli()\n) and loading it again.\n\n\nIf the aim is to perform an animation indefinitely, restarting when it is over, then\n\nit is not necessary to use this function\n, since it will automatically be done\nwith \nframe_fli()\n, if you keep on calling once the animation is over.\n\n\nOnly one animation can exist at the same time. Thus, it is not necessary to specify\nany parameter for this function.\n\n\nExample program\n\n\nPROGRAM example_reset_fli;\nBEGIN\n    start_fli(\nhelp/help.fli\n, 0, 0);\n    write(0, 160, 0, 1, \nPress [SPACE] to restart the animation.\n);\n    LOOP\n        frame_fli();\n        IF (scan_code==_space)\n\n            reset_fli(); // The animation is initialised\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, an animation is loaded with the \nstart_fli()\n function and\nthen, it is indefinitely performed with the \nframe_fli()\n function.\n\n\nIn the loop, it is checked whether the spacebar has been pressed. If so, the animation\nis reinitialised with the \nreset_fli()\n function.\n\n\n\n\nSee: \nstart_fli()\n - \nframe_fli()\n - \nend_fli()", 
            "title": "reset_fli()"
        }, 
        {
            "location": "/reset_fli()/#description", 
            "text": "This function  rewinds  an  FLI/FLC  animation to the beginning. This animation\nstarted with the  start_fli()  function.  After having called this function, the animation will entirely be displayed again\nfrom the beginning (to display every frame of the animation, you must call the  frame_fli()  function).  The utility of this function deals with the possibility of stopping an animation\nand repeating it again from the beginning, without unloading it ( end_fli() ) and loading it again.  If the aim is to perform an animation indefinitely, restarting when it is over, then it is not necessary to use this function , since it will automatically be done\nwith  frame_fli() , if you keep on calling once the animation is over.  Only one animation can exist at the same time. Thus, it is not necessary to specify\nany parameter for this function.", 
            "title": "Description"
        }, 
        {
            "location": "/reset_fli()/#example-program", 
            "text": "PROGRAM example_reset_fli;\nBEGIN\n    start_fli( help/help.fli , 0, 0);\n    write(0, 160, 0, 1,  Press [SPACE] to restart the animation. );\n    LOOP\n        frame_fli();\n        IF (scan_code==_space)\n\n            reset_fli(); // The animation is initialised\n\n        END\n        FRAME;\n    END\nEND  In the example, an animation is loaded with the  start_fli()  function and\nthen, it is indefinitely performed with the  frame_fli()  function.  In the loop, it is checked whether the spacebar has been pressed. If so, the animation\nis reinitialised with the  reset_fli()  function.   See:  start_fli()  -  frame_fli()  -  end_fli()", 
            "title": "Example program"
        }, 
        {
            "location": "/roll_palette()/", 
            "text": "roll_palette(\ninitial colour\n,\n \nnumber of colours\n,\n \nincrement\n)\n\n\nDescription\n\n\nRotates a range of palette colours. This function is used to create movement\neffects in static graphics, like the effect of flowing water.\n\n\nTo use this function, it is first necessary to create graphics that use a\nrange of consecutive colours of the original palette, in a perpetual cycle\n(for instance, colours ranging from \n0\n to \n15\n, painting something with\nthe colours 0, 1, 2, 3, ... , 14, 15, 0, 1, 2, ...).\n\n\nThen, it is necessary to take care that those colours are not used by other graphics that are going to appear on the screen at the same time, if you do not want to implement the effects on them.\n\n\nThe \nincrement\n (third parameter) is normally \n1\n to perform the rotation in a direction and\n -1\n to perform it in the opposite direction, but other values may be used to perform the colours cycle at higher speed.\n\n\nTo perform a cycle of colours from \n0\n to \n15\n, it would be necessary to specify \n0\n as \ninitial colour\n and \n16\n as \nnumber of colours\n.\n\n\nExample program\n\n\nPROGRAM example_roll_palette;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 2);\n    write(0, 160, 0, 1, \nPress [SPACE] to rotate the entire palette.\n);\n    LOOP\n        IF (scan_code==_space)\n\n            roll_palette(0, 256, 1); // The 256 colours rotate.\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a multicolour screen is put as background and, inside the program's main loop, the 256 colours of the palette will rotate every time that the spacebar is pressed.\n\n\n\n\nTo determine the palette which is going to realise the circle\nof colour, this must be loaded from an file with the function \n\nload_pal()\n.\n\n\n\n\nTo perform other palette effects without replacing some colours by other ones in cycles, the \nfade()\n function must be used. This function allows us to perform many colours fading and saturations at different speeds.\n\n\nThere are two simplified versions of this last function that allow us to carry out a fading to black (\nfade_off()\n) and undo it (\nfade_on()\n).\n\n\n\n\nSee: \nset_color()\n - \nload_pal()\n - \nfade()\n - \nfade_off()\n - \nfade_on()", 
            "title": "roll_palette()"
        }, 
        {
            "location": "/roll_palette()/#description", 
            "text": "Rotates a range of palette colours. This function is used to create movement\neffects in static graphics, like the effect of flowing water.  To use this function, it is first necessary to create graphics that use a\nrange of consecutive colours of the original palette, in a perpetual cycle\n(for instance, colours ranging from  0  to  15 , painting something with\nthe colours 0, 1, 2, 3, ... , 14, 15, 0, 1, 2, ...).  Then, it is necessary to take care that those colours are not used by other graphics that are going to appear on the screen at the same time, if you do not want to implement the effects on them.  The  increment  (third parameter) is normally  1  to perform the rotation in a direction and  -1  to perform it in the opposite direction, but other values may be used to perform the colours cycle at higher speed.  To perform a cycle of colours from  0  to  15 , it would be necessary to specify  0  as  initial colour  and  16  as  number of colours .", 
            "title": "Description"
        }, 
        {
            "location": "/roll_palette()/#example-program", 
            "text": "PROGRAM example_roll_palette;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 2);\n    write(0, 160, 0, 1,  Press [SPACE] to rotate the entire palette. );\n    LOOP\n        IF (scan_code==_space)\n\n            roll_palette(0, 256, 1); // The 256 colours rotate.\n\n        END\n        FRAME;\n    END\nEND  In the example, a multicolour screen is put as background and, inside the program's main loop, the 256 colours of the palette will rotate every time that the spacebar is pressed.   To determine the palette which is going to realise the circle\nof colour, this must be loaded from an file with the function  load_pal() .   To perform other palette effects without replacing some colours by other ones in cycles, the  fade()  function must be used. This function allows us to perform many colours fading and saturations at different speeds.  There are two simplified versions of this last function that allow us to carry out a fading to black ( fade_off() ) and undo it ( fade_on() ).   See:  set_color()  -  load_pal()  -  fade()  -  fade_off()  -  fade_on()", 
            "title": "Example program"
        }, 
        {
            "location": "/save()/", 
            "text": "save(\nname of the file\n,\n \nOFFSET data\n,\n \nsizeof(data)\n)\n\n\nDescription\n\n\nSaves a data block from the program memory to a file in the disk, to recover it later, when it is required, with the \nload()\n function.\n\n\nFor that, the function requires the \nfile name\n, the offset (inside\nthe computer memory) of the variable, table or structure stored in\nthe disk (the variable offset is obtained with \nOFFSET\n\n\nvariable name\n) and the number of memory positions that this variable occupies (which may be obtained with \nsizeof\n(\nfile name\n)\n).\n\n\nIt is possible to save several data (variables, tables or structures) if they have consecutively been defined inside the same section (\nGLOBAL\n, \nLOCAL\n or \nPRIVATE\n). In this case, the \nOFFSET\n of the first variable must be indicated as a \nsecond parameter\n, and the addition of the \nsizeof()\n of all the data must be indicated as a \nthird parameter\n.\n\n\nIt is not necessary to specify a path together with the file name.\n\n\nExample program\n\n\nPROGRAM example_load;\n\nPRIVATE\n    table[9];\n    counter;\n\nBEGIN\n    write (0, 0, 0, 0, \nPress [ENTER] to reset the data.\n);\n    write (0, 0, 10, 0, \nPress [SPACE] to load the disk data\n);\n    write (0, 0, 30, 0, \nCurrent values of the data:\n);\n    FROM counter=0 TO 9;\n        table[counter]=rand(0, 100);\n        write_int(0, 0, 40+(counter*10), 0, offset table[counter]);\n    END\n\n    save(\nhelp/help.dat\n, offset table, sizeof(table)); // The file is saved.\n\n    LOOP\n        IF (key(_enter))\n            FROM counter=0 TO 9;\n                table[counter]=0;\n            END\n        END\n        IF (key(_space))\n            load(\nhelp/help.dat\n, offset table);\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nAt the beginning of the example, a table of 10 positions (from 0 to 9) is created with random values. This table is saved in the disk with the \nsave()\n function.\n\n\nWhen the ENTER key is pressed, the table values are reset (the 10 positions are put at 0).\n\n\nWhen the spacebar is pressed, the table's values stored in the disk are loaded with the \nload()\n function.\n\n\n\n\nTo save the \ntable[9]\n and the \ncounter\n variable in the same file, the \nsave()\n function should have been called in the following way:\n\n\nsave(\nhelp/help.dat\n, offset table, sizeof(table)+sizeof(counter));\n\n\nDo not vary the load statement (\nload(\nhelp.dat\n, offset table);\n), as it does not require the number of data.\n\n\nThe value returned by \nsizeof()\n for any variable (like \ncounter\n)\nwill always be 1. For a table, this function returns the number of positions that it has. Then, considering that 11 data (10 of the table and 1 of the variable) are going to be saved, the statement to save them could be as follows:\n\n\n{save(\nhelp/help.dat\n, offset table, 11);\n\n\n\n\nSee: \nload()\n - \nOFFSET\n - \nsizeof()", 
            "title": "save()"
        }, 
        {
            "location": "/save()/#description", 
            "text": "Saves a data block from the program memory to a file in the disk, to recover it later, when it is required, with the  load()  function.  For that, the function requires the  file name , the offset (inside\nthe computer memory) of the variable, table or structure stored in\nthe disk (the variable offset is obtained with  OFFSET  variable name ) and the number of memory positions that this variable occupies (which may be obtained with  sizeof ( file name ) ).  It is possible to save several data (variables, tables or structures) if they have consecutively been defined inside the same section ( GLOBAL ,  LOCAL  or  PRIVATE ). In this case, the  OFFSET  of the first variable must be indicated as a  second parameter , and the addition of the  sizeof()  of all the data must be indicated as a  third parameter .  It is not necessary to specify a path together with the file name.", 
            "title": "Description"
        }, 
        {
            "location": "/save()/#example-program", 
            "text": "PROGRAM example_load;\n\nPRIVATE\n    table[9];\n    counter;\n\nBEGIN\n    write (0, 0, 0, 0,  Press [ENTER] to reset the data. );\n    write (0, 0, 10, 0,  Press [SPACE] to load the disk data );\n    write (0, 0, 30, 0,  Current values of the data: );\n    FROM counter=0 TO 9;\n        table[counter]=rand(0, 100);\n        write_int(0, 0, 40+(counter*10), 0, offset table[counter]);\n    END\n\n    save( help/help.dat , offset table, sizeof(table)); // The file is saved.\n\n    LOOP\n        IF (key(_enter))\n            FROM counter=0 TO 9;\n                table[counter]=0;\n            END\n        END\n        IF (key(_space))\n            load( help/help.dat , offset table);\n        END\n        FRAME;\n    END\nEND  At the beginning of the example, a table of 10 positions (from 0 to 9) is created with random values. This table is saved in the disk with the  save()  function.  When the ENTER key is pressed, the table values are reset (the 10 positions are put at 0).  When the spacebar is pressed, the table's values stored in the disk are loaded with the  load()  function.   To save the  table[9]  and the  counter  variable in the same file, the  save()  function should have been called in the following way:  save( help/help.dat , offset table, sizeof(table)+sizeof(counter));  Do not vary the load statement ( load( help.dat , offset table); ), as it does not require the number of data.  The value returned by  sizeof()  for any variable (like  counter )\nwill always be 1. For a table, this function returns the number of positions that it has. Then, considering that 11 data (10 of the table and 1 of the variable) are going to be saved, the statement to save them could be as follows:  {save( help/help.dat , offset table, 11);   See:  load()  -  OFFSET  -  sizeof()", 
            "title": "Example program"
        }, 
        {
            "location": "/set_fps()/", 
            "text": "set_fps(\nnumber of frames per second\n,\n \nnumber of allowed jumps\n)\n\n\nDescription\n\n\nThis function regulates the speed of the game; it defines how many frames per second will be\ndisplayed during the game.\n\n\nBy default, the display will be regulated at 18 frames per second, which means\nthat if a process moves a pixel per every (\nFRAME\n),\nit will move on-screen at a speed of 18 pixels per second.\n\n\nThis function may establish the number of Frames Per Second (\nFPS\n) from a minimum of \n4\n to a maximum of \n200\n; in general, no more than\n24 frames per second are necessary to obtain a fluid and slight movement.\n\n\nThe second parameter, \nmaximum number of allowed omissions\n, is referred to how the program must preferably work when it is executed on a computer fast enough to calculate the required number of frames per second. It works as follows.\n\n\nNumber of allowed omissions.\n\n\n0\n - The game will go at a slower speed when it is executed on a computer that is too slow\nto keep the required frame rate - It will only display the frames per second that the computer\nhas had time to calculate.\n\n\n1\n - If the computer cannot calculate all the frames, it is allowed to occasionally\nskip a frame to try to keep the game's relative speed. The game movements will become\na little more abrupt, but faster.\n\n\n2 or more\n - The game is allowed to skip as many consecutive frames as is indicated\nin this parameter to maintain the original relative speed of the game. For instance,\nif the number of omissions is set at \n4\n and in the game a process moved one pixel\nat a time, in a very slow computer it could move four pixels at a time.\n\n\nExample program\n\n\nPROGRAM example_set_fps;\n\nPRIVATE\n    frames=24;\n    omissions=4;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    graph=1;\n    x=160;\n    y=100;\n    write(0, 0, 0, 0, \nFrames per second: Up(+) / Down(-)\n);\n    write_int(0, 0, 10, 0, offset frames);\n    write(0, 0, 20, 0, \nAllowed omissions: Right(+) / Left(-)\n);\n    write_int(0, 0, 30, 0, offset omissions);\n    write(0, 160, 200, 7, \nUse the CURSORS to change the values.\n);\n    LOOP\n\n        // The number of frames per second is chosen\n        set_fps(frames, omissions);\n\n        IF (key(_up) AND frames\n200) frames++; END\n        IF (key(_down) AND frames\n4) frames--; END\n        IF (key(_right) AND omissions\n20) omissions++; END\n        IF (key(_left) AND omissions\n0) omissions--; END\n        angle+=4000;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, the necessary messages are displayed and the main process\ncreates a graphic, which is indefinitely rotating at the centre of the screen.\n\n\nIn every step of the loop the cursor keys are detected, the number of frames per second (\nframes\n) is changed with \nup/down\n and\nthe maximum number of allowed \nomissions\n is changed with \nright/left\n.\n\n\nAt the beginning of every iteration of the loop, the speed is set with the  \nset_fps()\n function, according to the values of both variables.\n\n\n\n\nNote The global variable \nfps\n monitors the number of\n\n\nframes per second which is being reached in the program.\n\n\n\n\nSee: \nFRAME\n - \nmax_process_time\n - \nset_mode()\n - \nfps", 
            "title": "set_fps()"
        }, 
        {
            "location": "/set_fps()/#description", 
            "text": "This function regulates the speed of the game; it defines how many frames per second will be\ndisplayed during the game.  By default, the display will be regulated at 18 frames per second, which means\nthat if a process moves a pixel per every ( FRAME ),\nit will move on-screen at a speed of 18 pixels per second.  This function may establish the number of Frames Per Second ( FPS ) from a minimum of  4  to a maximum of  200 ; in general, no more than\n24 frames per second are necessary to obtain a fluid and slight movement.  The second parameter,  maximum number of allowed omissions , is referred to how the program must preferably work when it is executed on a computer fast enough to calculate the required number of frames per second. It works as follows.  Number of allowed omissions.  0  - The game will go at a slower speed when it is executed on a computer that is too slow\nto keep the required frame rate - It will only display the frames per second that the computer\nhas had time to calculate.  1  - If the computer cannot calculate all the frames, it is allowed to occasionally\nskip a frame to try to keep the game's relative speed. The game movements will become\na little more abrupt, but faster.  2 or more  - The game is allowed to skip as many consecutive frames as is indicated\nin this parameter to maintain the original relative speed of the game. For instance,\nif the number of omissions is set at  4  and in the game a process moved one pixel\nat a time, in a very slow computer it could move four pixels at a time.", 
            "title": "Description"
        }, 
        {
            "location": "/set_fps()/#example-program", 
            "text": "PROGRAM example_set_fps;\n\nPRIVATE\n    frames=24;\n    omissions=4;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    graph=1;\n    x=160;\n    y=100;\n    write(0, 0, 0, 0,  Frames per second: Up(+) / Down(-) );\n    write_int(0, 0, 10, 0, offset frames);\n    write(0, 0, 20, 0,  Allowed omissions: Right(+) / Left(-) );\n    write_int(0, 0, 30, 0, offset omissions);\n    write(0, 160, 200, 7,  Use the CURSORS to change the values. );\n    LOOP\n\n        // The number of frames per second is chosen\n        set_fps(frames, omissions);\n\n        IF (key(_up) AND frames 200) frames++; END\n        IF (key(_down) AND frames 4) frames--; END\n        IF (key(_right) AND omissions 20) omissions++; END\n        IF (key(_left) AND omissions 0) omissions--; END\n        angle+=4000;\n        FRAME;\n    END\nEND  In the example, the necessary messages are displayed and the main process\ncreates a graphic, which is indefinitely rotating at the centre of the screen.  In every step of the loop the cursor keys are detected, the number of frames per second ( frames ) is changed with  up/down  and\nthe maximum number of allowed  omissions  is changed with  right/left .  At the beginning of every iteration of the loop, the speed is set with the   set_fps()  function, according to the values of both variables.", 
            "title": "Example program"
        }, 
        {
            "location": "/set_fps()/#note-the-global-variable-fps-monitors-the-number-of", 
            "text": "frames per second which is being reached in the program.   See:  FRAME  -  max_process_time  -  set_mode()  -  fps", 
            "title": "Note The global variable fps monitors the number of"
        }, 
        {
            "location": "/set_mode()/", 
            "text": "set_mode(\nnew video mode\n)\n\n\nDescription\n\n\nEstablishes a new video mode for the game execution. The allowed videomodes that may be specified as a parameter are the following ones:\n\n\nm320x200\n  - VGA standard\n\n\nm320x240\n  - X Mode\n\n\nm320x400\n  - X Mode\n\n\nm360x240\n  - X Mode\n\n\nm360x360\n  - X Mode\n\n\nm376x282\n  - X Mode\n\n\nm640x400\n  - SVGA VESA\n\n\nm640x480\n  - SVGA VESA\n\n\nm800x600\n  - SVGA VESA\n\n\nm1024x768\n - SVGA VESA\n\n\nWhen a change of the videomode in the program is made, a fading to black (of the program's colours palette) will automatically be performed and in the following displays, the colours palette will gradually be restored. That is to say, \nset_mode()\n always performs a \nfade_off()\n just before changing the videomode and a \nfade_on()\n just after having changed it.\n\n\nBy default, all the programs start with the 320 by 200 pixel activated mode (\nset_mode(m320x200)\n).\n\n\nExample program\n\n\nPROGRAM example_set_mode;\n\nPRIVATE\n    modes[]=\n        m320x240, m640x480, m800x600, m1024x768;\n    videomode=0;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    write (0, 0, 0, 0, \nPress [SPACE] to change the videomode\n);\n    LOOP\n        IF (scan_code==_space)\n            videomode=videomode+1;\n            IF (videomode==4) videomode=0; END\n\n            set_mode(modes[videomode]);\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a screen background and an explanatory text are displayed.\n\n\nIn the iteration of the main loop, if the space bar is pressed, a new videomode will be activated with the \nset_mode()\n function.\n\n\n\n\nImportant By using the \nset_mode()\n function, all the scroll and mode 7 windows that were activated in the game, as well as all the processes displayed inside them, will be deleted.\n\n\n\n\nSee: \nset_fps()\n - \nmax_process_time\n - \nm320x200 ... m1024x768\n - \nSTRUCT video_modes", 
            "title": "set_mode()"
        }, 
        {
            "location": "/set_mode()/#description", 
            "text": "Establishes a new video mode for the game execution. The allowed videomodes that may be specified as a parameter are the following ones:  m320x200   - VGA standard  m320x240   - X Mode  m320x400   - X Mode  m360x240   - X Mode  m360x360   - X Mode  m376x282   - X Mode  m640x400   - SVGA VESA  m640x480   - SVGA VESA  m800x600   - SVGA VESA  m1024x768  - SVGA VESA  When a change of the videomode in the program is made, a fading to black (of the program's colours palette) will automatically be performed and in the following displays, the colours palette will gradually be restored. That is to say,  set_mode()  always performs a  fade_off()  just before changing the videomode and a  fade_on()  just after having changed it.  By default, all the programs start with the 320 by 200 pixel activated mode ( set_mode(m320x200) ).", 
            "title": "Description"
        }, 
        {
            "location": "/set_mode()/#example-program", 
            "text": "PROGRAM example_set_mode;\n\nPRIVATE\n    modes[]=\n        m320x240, m640x480, m800x600, m1024x768;\n    videomode=0;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    write (0, 0, 0, 0,  Press [SPACE] to change the videomode );\n    LOOP\n        IF (scan_code==_space)\n            videomode=videomode+1;\n            IF (videomode==4) videomode=0; END\n\n            set_mode(modes[videomode]);\n\n        END\n        FRAME;\n    END\nEND  In the example, a screen background and an explanatory text are displayed.  In the iteration of the main loop, if the space bar is pressed, a new videomode will be activated with the  set_mode()  function.", 
            "title": "Example program"
        }, 
        {
            "location": "/set_mode()/#important-by-using-the-set_mode-function-all-the-scroll-and-mode-7-windows-that-were-activated-in-the-game-as-well-as-all-the-processes-displayed-inside-them-will-be-deleted", 
            "text": "See:  set_fps()  -  max_process_time  -  m320x200 ... m1024x768  -  STRUCT video_modes", 
            "title": "Important By using the set_mode() function, all the scroll and mode 7 windows that were activated in the game, as well as all the processes displayed inside them, will be deleted."
        }, 
        {
            "location": "/signal()/", 
            "text": "signal(\nid\n,\n \nsignal\n)\n\n\nDescription\n\n\nSends a signal to a process (an object of the game). This function is used mainly to \ndestroy (kill) a process from other, sending it a signal \ns_kill\n.\n\n\nIf you don't know the meaning of process father, son,\n\nbrother\n, of an \norphaned\n process, etc., then see \nHierarchy of processes\n.\n\n\nIf you don't know the terms live, \ndead\n, \nslept\n, etc., referred to processes\n, then see \nProcess state\n\n\nExample:}\n\n\nPROGRAM my_game;\nPRIVATE id2;\nBEGIN\n    id2=my_process();\n    // ...\n    signal(id2, s_kill);\nEND\nPROCESS my_process()\nBEGIN\n    // ...\n    LOOP\n        FRAME;\n    END\nEND\n\n-\n\n\nThis program would create a \nmy_process\n type process and then it would delete it with the \nsignal(id2,s_kill)\n statement (id2 is a variable of the main program that contains the \nidentifying code\n of the process that is going to be deleted).\n\n\nAny process may send a signal to another one, provided that the former has the \nidentifying code\n of the latter. See:\n\n\nIdentifying codes of processes\n\n\nWays to obtain the identifying code of a process\n\n\nNevertheless, there are other \nsignal types\n that may be sent to a process,\nand they are the following ones:\n\n\ns_kill\n - Order to \nkill\n the process. The process will not appear in the following frames of the game any longer.\n\n\ns_sleep\n - Order to \nmake\n the process \ndormant\n. The process will remain paralyzed, without executing its code and without being displayed on screen (nor being detected by the rest of the processes), as if it had been killed. But the process will continue to exist in the computer's memory (see \ns_wakeup\n).\n\n\ns_freeze\n - Order to \nfreeze\n the process. The process will remain motionless without running its code. But it will continue being displayed on screen and it will be possible to detect it (in the collisions) by the rest of the processes. The process will continue to exist in the computer's memory, even if its code is not executed (see \ns_wakeup\n).\n\n\ns_wakeup\n - Order to \nwake up\n the process. It returns a \nslept\n or \nfrozen\n process to its normal state. The process will be executed and displayed again from the moment that it receives this signal normally.\nA process that has been deleted (killed) can not be returned to its normal state, since it does not exist in the computer's memory any longer.\n\n\nA process can also send these signals to itself, taking into account that the \nidentifying code\n of a process is always \nID\n (word reserved in the  language to this purpose). The statement would be as follows:\n\n\nsignal(\nid\n,\n \nsignal\n)\n\n\nSelf-deleting a process in this way, sending a \ns_kill\n signal to itself, will not instantaneously destroy the process, but in the following (\nFRAME\n) display. The \nRETURN\n statement can be used to immediately delete a process.\n\n\nAll the signals sent to processes will be implemented just before the next display of the game\n, in the next \nFRAME\n of the game (not instantaneously).\n\n\nTogether with these four signals, there are other four signals that directly correspond to the previous ones. They are: \ns_kill_tree\n, \ns_sleep_tree\n, \ns_freeze_tree\n and \ns_wakeup_tree\n.\n\n\nThese signals are sent not only to the indicated process, but also \nto all the processes that it has created\n. That is to say, if a \ns_kill_tree\n signal is sent to a process, the latter and all its descendants (sons, grandsons, ...) will be deleted as well as all the processes created by it and the processes created by the latter.\n\n\nAn exception to these last four signals is when there is an \norphan process\n, a process whose father (the process that called it) is already dead. The orphan processes will not receive the signal when it is sent to a process from which they are descended as, on having disappeared their father, it won't be able to send the signal to the processes it created.\n\n\n{#9999,Example program\n\n\nPROGRAM example_signal;\nPRIVATE\n    id_text;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write(0, 0, 0, 0, \n1 - create the process\n);\n    write(0, 0, 10, 0, \n2 - kill the process\n);\n    write(0, 0, 20, 0, \n3 - sleep the process\n);\n    write(0, 0, 30, 0, \n4 - freeze the process\n);\n    write(0, 0, 40, 0, \n5 - wake up the process\n);\n    id_text=write(0, 0, 190, 0, \nThere is no process\n);\n    LOOP\n        IF (key(_1) AND NOT son)\n            delete_text(id_text);\n            my_process();\n            id_text=write(0, 0, 190, 0, \nProcess alive\n);\n        END\n        IF (key(_2) AND son)\n            delete_text(id_text);\n            signal(son, s_kill);\n            id_text=write(0, 0, 190, 0, \nThere is no process\n);\n        END\n        IF (key(_3) AND son)\n            delete_text(id_text);\n            signal(son, s_sleep);\n            id_text=write(0, 0, 190, 0, \nProcess slept\n);\n        END\n        IF (key(_4) AND son)\n            delete_text(id_text);\n            signal(son, s_freeze);\n            id_text=write(0, 0, 190, 0, \nProcess frozen\n);\n        END\n        IF (key(_5) AND son)\n            delete_text(id_text);\n            signal(son, s_wakeup);\n            id_text=write(0, 0, 190, 0, \nProcess alive\n);\n        END\n        FRAME;\n    END\nEND\n\nPROCESS my_process()\nBEGIN\n    graph=100;\n    LOOP\n        x=160+get_distx(angle, 140);\n        y=100+get_disty(angle, 80);\n        angle+=5000;\n        FRAME;\n    END\nEND\n\n\n\n\nWith the \n1\n key, this program will create a process (\nmy_process\n) that rolls around the screen; with the keys from \n2\n to \n5\n, different signals will be sent to this process, by using this function. The \nidentifying code\n\nof \nmy_process\n is located in the \nson\n local variable of the main program by default.\n\n\nWhen a process is created, the system defines the \nson\n variable of the father with the \nidentifying code\n of the son, and the \nfather\n variable of the son with the identifying code of the father.\n\n\n\n\nsignal(\nTYPE\n \nname of the process\n,\n \nsignal\n)\n\n\nDescription\n\n\nThis second meaning of the \nsignal\n function is similar to the previous one, with the exception that, instead of sending a signal to a process from its \nidentifying code\n, it allows us to send a signal {to all the processes\nof a specific type} or to them and their descendants, when the used signals are\nof the type \ns_kill_tree\n (see: \nTypes of processes\n).\n\n\nFor instance, if several processes of the \nenemy\n type exist or may exist in a game, and the aim is to freeze these processes (without freezing their descendants), the following statement will be used:\n\n\nsignal(TYPE enemy, s_freeze);\n\n\nAs it can be noticed, it is necessary to have the \nidentifying code\n of a specific process in order to send a signal to it. To delete a group of processes, it is necessary either that they are of the same kind, that this group is made up of a process and its descendants, or that all their identifiers are known ( in order to send them the signal one by one).\n\n\nIt is possible to send a signal to a type of processes, even if no process of this type is being executed in the game. But if a signal is sent to a process that has already been killed, with its \nidentifying code\n (first meaning of the \nsignal\n statement), there is a risk that the \nidentifying code\n is now used by another process, which is going to receive the signal. This happens, for instance, when the aim is to kill a process that has already been killed, as it is possible that another different one is being killed.\n\n\n\n\nNote If the aim is to delete all the processes except the current one, the \nlet_me_alone()\n function may be used. This function sends a \ns_kill\n signal  to all the processes, except the one that executed this function.\n\n\n\n\nSee: \nlet_me_alone()\n - \nIdentifier codes\n - \nTypes of processes", 
            "title": "signal()"
        }, 
        {
            "location": "/signal()/#description", 
            "text": "Sends a signal to a process (an object of the game). This function is used mainly to \ndestroy (kill) a process from other, sending it a signal  s_kill .  If you don't know the meaning of process father, son, brother , of an  orphaned  process, etc., then see  Hierarchy of processes .  If you don't know the terms live,  dead ,  slept , etc., referred to processes\n, then see  Process state", 
            "title": "Description"
        }, 
        {
            "location": "/signal()/#example", 
            "text": "PROGRAM my_game;\nPRIVATE id2;\nBEGIN\n    id2=my_process();\n    // ...\n    signal(id2, s_kill);\nEND\nPROCESS my_process()\nBEGIN\n    // ...\n    LOOP\n        FRAME;\n    END\nEND -  This program would create a  my_process  type process and then it would delete it with the  signal(id2,s_kill)  statement (id2 is a variable of the main program that contains the  identifying code  of the process that is going to be deleted).  Any process may send a signal to another one, provided that the former has the  identifying code  of the latter. See:  Identifying codes of processes  Ways to obtain the identifying code of a process  Nevertheless, there are other  signal types  that may be sent to a process,\nand they are the following ones:  s_kill  - Order to  kill  the process. The process will not appear in the following frames of the game any longer.  s_sleep  - Order to  make  the process  dormant . The process will remain paralyzed, without executing its code and without being displayed on screen (nor being detected by the rest of the processes), as if it had been killed. But the process will continue to exist in the computer's memory (see  s_wakeup ).  s_freeze  - Order to  freeze  the process. The process will remain motionless without running its code. But it will continue being displayed on screen and it will be possible to detect it (in the collisions) by the rest of the processes. The process will continue to exist in the computer's memory, even if its code is not executed (see  s_wakeup ).  s_wakeup  - Order to  wake up  the process. It returns a  slept  or  frozen  process to its normal state. The process will be executed and displayed again from the moment that it receives this signal normally.\nA process that has been deleted (killed) can not be returned to its normal state, since it does not exist in the computer's memory any longer.  A process can also send these signals to itself, taking into account that the  identifying code  of a process is always  ID  (word reserved in the  language to this purpose). The statement would be as follows:  signal( id ,   signal )  Self-deleting a process in this way, sending a  s_kill  signal to itself, will not instantaneously destroy the process, but in the following ( FRAME ) display. The  RETURN  statement can be used to immediately delete a process.  All the signals sent to processes will be implemented just before the next display of the game , in the next  FRAME  of the game (not instantaneously).  Together with these four signals, there are other four signals that directly correspond to the previous ones. They are:  s_kill_tree ,  s_sleep_tree ,  s_freeze_tree  and  s_wakeup_tree .  These signals are sent not only to the indicated process, but also  to all the processes that it has created . That is to say, if a  s_kill_tree  signal is sent to a process, the latter and all its descendants (sons, grandsons, ...) will be deleted as well as all the processes created by it and the processes created by the latter.  An exception to these last four signals is when there is an  orphan process , a process whose father (the process that called it) is already dead. The orphan processes will not receive the signal when it is sent to a process from which they are descended as, on having disappeared their father, it won't be able to send the signal to the processes it created.  {#9999,Example program  PROGRAM example_signal;\nPRIVATE\n    id_text;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write(0, 0, 0, 0,  1 - create the process );\n    write(0, 0, 10, 0,  2 - kill the process );\n    write(0, 0, 20, 0,  3 - sleep the process );\n    write(0, 0, 30, 0,  4 - freeze the process );\n    write(0, 0, 40, 0,  5 - wake up the process );\n    id_text=write(0, 0, 190, 0,  There is no process );\n    LOOP\n        IF (key(_1) AND NOT son)\n            delete_text(id_text);\n            my_process();\n            id_text=write(0, 0, 190, 0,  Process alive );\n        END\n        IF (key(_2) AND son)\n            delete_text(id_text);\n            signal(son, s_kill);\n            id_text=write(0, 0, 190, 0,  There is no process );\n        END\n        IF (key(_3) AND son)\n            delete_text(id_text);\n            signal(son, s_sleep);\n            id_text=write(0, 0, 190, 0,  Process slept );\n        END\n        IF (key(_4) AND son)\n            delete_text(id_text);\n            signal(son, s_freeze);\n            id_text=write(0, 0, 190, 0,  Process frozen );\n        END\n        IF (key(_5) AND son)\n            delete_text(id_text);\n            signal(son, s_wakeup);\n            id_text=write(0, 0, 190, 0,  Process alive );\n        END\n        FRAME;\n    END\nEND\n\nPROCESS my_process()\nBEGIN\n    graph=100;\n    LOOP\n        x=160+get_distx(angle, 140);\n        y=100+get_disty(angle, 80);\n        angle+=5000;\n        FRAME;\n    END\nEND  With the  1  key, this program will create a process ( my_process ) that rolls around the screen; with the keys from  2  to  5 , different signals will be sent to this process, by using this function. The  identifying code \nof  my_process  is located in the  son  local variable of the main program by default.  When a process is created, the system defines the  son  variable of the father with the  identifying code  of the son, and the  father  variable of the son with the identifying code of the father.   signal( TYPE   name of the process ,   signal )", 
            "title": "Example:}"
        }, 
        {
            "location": "/signal()/#description_1", 
            "text": "This second meaning of the  signal  function is similar to the previous one, with the exception that, instead of sending a signal to a process from its  identifying code , it allows us to send a signal {to all the processes\nof a specific type} or to them and their descendants, when the used signals are\nof the type  s_kill_tree  (see:  Types of processes ).  For instance, if several processes of the  enemy  type exist or may exist in a game, and the aim is to freeze these processes (without freezing their descendants), the following statement will be used:  signal(TYPE enemy, s_freeze);  As it can be noticed, it is necessary to have the  identifying code  of a specific process in order to send a signal to it. To delete a group of processes, it is necessary either that they are of the same kind, that this group is made up of a process and its descendants, or that all their identifiers are known ( in order to send them the signal one by one).  It is possible to send a signal to a type of processes, even if no process of this type is being executed in the game. But if a signal is sent to a process that has already been killed, with its  identifying code  (first meaning of the  signal  statement), there is a risk that the  identifying code  is now used by another process, which is going to receive the signal. This happens, for instance, when the aim is to kill a process that has already been killed, as it is possible that another different one is being killed.", 
            "title": "Description"
        }, 
        {
            "location": "/signal()/#note-if-the-aim-is-to-delete-all-the-processes-except-the-current-one-the-let_me_alone-function-may-be-used-this-function-sends-a-s_kill-signal-to-all-the-processes-except-the-one-that-executed-this-function", 
            "text": "See:  let_me_alone()  -  Identifier codes  -  Types of processes", 
            "title": "Note If the aim is to delete all the processes except the current one, the let_me_alone() function may be used. This function sends a s_kill signal  to all the processes, except the one that executed this function."
        }, 
        {
            "location": "/sound()/", 
            "text": "sound(\ncode of the sound\n,\n \nvolume\n,\n \nfrequency\n)\n\n\nReturns\n\n\nThe \nchannel number\n through which the sound is played.\n\n\nDescription\n\n\nPlays the effect whose \nsound code\n is specified as first parameter.\nAt first, the sound must have been loaded from a PCM file with the\n\nload_pcm()\n or \nload_wav()\n functions. This function returns the \nsound code\n corresponding to this effect.\n\n\nAs a second parameter, it is necessary to specify the \nvolume\n at which the sound is intended to be reproduced, taking into account that \n0\n is the minimum volume, and \n256\n the maximum volume.\n\n\nAs third parameter, you must specify the \nfrequency\n (speed) at which the sound is intended to be reproduced, being \n256\n the standard frequency that will reproduce the original sound. With lesser values, the sound will be reproduced with more accentuated bass. On the contrary, with higher frequency values, it will be reproduced with more accentuated treble.\n\n\nThe function returns the \nchannel number\n that can be used by the\n\nstop_sound()\n function to stop the sound and by the \nchange_sound()\n function to modify its volume or frequency.\n\n\nThere are 16 sound channels. Thus, up to 16 sounds may simultaneously be played.\n\n\nExample program\n\n\nPROGRAM example_sound;\n\nPRIVATE\n    volume=128;        // Average value (0..256)\n    frequency=256;     // Average value (0..512)\n    id_sound, channels;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write(0, 0, 0, 0, \nVolume: Up(+) / Down(-)\n);\n    write_int(0, 0, 10, 0, offset volume);\n    write(0, 0, 20, 0, \nFrequency: Right(+) / Left(-)\n);\n    write_int(0, 0, 30, 0, offset frequency);\n    write(0, 160, 180, 1, \nPress [SPACE] to play the sound.\n);\n    write(0, 160, 190, 1, \nUse the cursors to change the values.\n);\n\n    id_sound = load_pcm(\nhelp/help.pcm\n, 0);\n\n    LOOP\n        IF (scan_code==_space)\n\n            // Plays it\n            channels = sound(id_sound, volume, frequency);\n\n        END\n        IF (key(_up) AND volume\n256) volume++; END\n        IF (key(_down) AND volume\n0) volume--; END\n        IF (key(_right) AND frequency\n512) frequency++; END\n        IF (key(_left) AND frequency\n0) frequency--; END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a background screen and an explanatory text are displayed,\nand a sound is loaded with the \nload_pcm()\n function. This function returns the \nidentifier of the sound\n, that is stored in the \nid_sound\n variable.\n\n\nIn the main loop, at every keystroke of the spacebar, the sound is played with the \nsound()\n function with the parameters defined in the \nvolume\n and \nfrequency\n variables.\n\n\nThese values can be manipulated with the cursors keys, in order to understand better how it works.\n\n\nThe \nchannel number\n returned by \nsound()\n, that is stored in the \nchannel\n variable, could have been used to modify the sound with \nchange_sound()\n\nor to stop it with \nstop_sound()\n.\n\n\n\n\nSee: \nload_pcm/wav()\n - \nchange_sound()\n - \nstop_sound()", 
            "title": "sound()"
        }, 
        {
            "location": "/sound()/#returns", 
            "text": "The  channel number  through which the sound is played.", 
            "title": "Returns"
        }, 
        {
            "location": "/sound()/#description", 
            "text": "Plays the effect whose  sound code  is specified as first parameter.\nAt first, the sound must have been loaded from a PCM file with the load_pcm()  or  load_wav()  functions. This function returns the  sound code  corresponding to this effect.  As a second parameter, it is necessary to specify the  volume  at which the sound is intended to be reproduced, taking into account that  0  is the minimum volume, and  256  the maximum volume.  As third parameter, you must specify the  frequency  (speed) at which the sound is intended to be reproduced, being  256  the standard frequency that will reproduce the original sound. With lesser values, the sound will be reproduced with more accentuated bass. On the contrary, with higher frequency values, it will be reproduced with more accentuated treble.  The function returns the  channel number  that can be used by the stop_sound()  function to stop the sound and by the  change_sound()  function to modify its volume or frequency.  There are 16 sound channels. Thus, up to 16 sounds may simultaneously be played.", 
            "title": "Description"
        }, 
        {
            "location": "/sound()/#example-program", 
            "text": "PROGRAM example_sound;\n\nPRIVATE\n    volume=128;        // Average value (0..256)\n    frequency=256;     // Average value (0..512)\n    id_sound, channels;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write(0, 0, 0, 0,  Volume: Up(+) / Down(-) );\n    write_int(0, 0, 10, 0, offset volume);\n    write(0, 0, 20, 0,  Frequency: Right(+) / Left(-) );\n    write_int(0, 0, 30, 0, offset frequency);\n    write(0, 160, 180, 1,  Press [SPACE] to play the sound. );\n    write(0, 160, 190, 1,  Use the cursors to change the values. );\n\n    id_sound = load_pcm( help/help.pcm , 0);\n\n    LOOP\n        IF (scan_code==_space)\n\n            // Plays it\n            channels = sound(id_sound, volume, frequency);\n\n        END\n        IF (key(_up) AND volume 256) volume++; END\n        IF (key(_down) AND volume 0) volume--; END\n        IF (key(_right) AND frequency 512) frequency++; END\n        IF (key(_left) AND frequency 0) frequency--; END\n        FRAME;\n    END\nEND  In the example, a background screen and an explanatory text are displayed,\nand a sound is loaded with the  load_pcm()  function. This function returns the  identifier of the sound , that is stored in the  id_sound  variable.  In the main loop, at every keystroke of the spacebar, the sound is played with the  sound()  function with the parameters defined in the  volume  and  frequency  variables.  These values can be manipulated with the cursors keys, in order to understand better how it works.  The  channel number  returned by  sound() , that is stored in the  channel  variable, could have been used to modify the sound with  change_sound() \nor to stop it with  stop_sound() .   See:  load_pcm/wav()  -  change_sound()  -  stop_sound()", 
            "title": "Example program"
        }, 
        {
            "location": "/sqrt()/", 
            "text": "sqrt(\nexpression\n)\n\n\nReturns\n\n\nThe entire square root of the expression.\n\n\nDescription\n\n\nCalculates the square root of the expression passed as a parameter, \ntruncated to an integer\n.\n\n\nFor instance, as a result, \nsqrt(10)\n will return \n3\n and not \n3.1623\n, which is the real value (approximately) of the square root of ten.\n\n\nExample program\n\n\nPROGRAM example_sqrt;\n\nGLOBAL\n    values[15];\n    n;\n\nBEGIN\n    FROM n=0 to 15;\n        values[n]=rand(0, 100000);\n        write_int(0, 0, n*10, 0, offset values[n]);\n    END\n    write(0, 0, 192, 0, \nPress [SPACE] to calculate its square root\n);\n    LOOP\n        IF (scan_code==_space)\n            FROM n=0 TO 15;\n\n                values[n] = sqrt(values[n]);\n\n            END\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nThis program will display a list of randomly chosen values on-screen. When the spacebar is pressed, the program will apply the \nsqrt()\n function to all these values, calculating their square root.\n\n\n\n\nSee: \nExpression", 
            "title": "sqrt()"
        }, 
        {
            "location": "/sqrt()/#returns", 
            "text": "The entire square root of the expression.", 
            "title": "Returns"
        }, 
        {
            "location": "/sqrt()/#description", 
            "text": "Calculates the square root of the expression passed as a parameter,  truncated to an integer .  For instance, as a result,  sqrt(10)  will return  3  and not  3.1623 , which is the real value (approximately) of the square root of ten.", 
            "title": "Description"
        }, 
        {
            "location": "/sqrt()/#example-program", 
            "text": "PROGRAM example_sqrt;\n\nGLOBAL\n    values[15];\n    n;\n\nBEGIN\n    FROM n=0 to 15;\n        values[n]=rand(0, 100000);\n        write_int(0, 0, n*10, 0, offset values[n]);\n    END\n    write(0, 0, 192, 0,  Press [SPACE] to calculate its square root );\n    LOOP\n        IF (scan_code==_space)\n            FROM n=0 TO 15;\n\n                values[n] = sqrt(values[n]);\n\n            END\n        END\n        FRAME;\n    END\nEND  This program will display a list of randomly chosen values on-screen. When the spacebar is pressed, the program will apply the  sqrt()  function to all these values, calculating their square root.   See:  Expression", 
            "title": "Example program"
        }, 
        {
            "location": "/start_fli()/", 
            "text": "start_fli(\nname of the file\n,\n \nx\n,\n \ny\n)\n\n\nReturns\n\n\nThe animation's number of frames.\n\n\nDescription\n\n\nStarts a \nFLI/FLC\n animation contained in the specified \nfile\n, in the\ncoordinates (\nx\n, \ny\n) (the upper left coordinate of the display window\nmust be specified).\n\n\nThe path can be specified in the \nfile name\n. The path is not necessary if the file is in the DIV Games Studio directory or in a subdirectory whose name coincides with file extension (for instance, \nfli\\anima.fli\n).\n\n\nThe screen must hold the whole animation. That is to say, if the animation\noccupies the whole screen, the videomode must be fixed at first with the\n\nset_mode()\n function, starting then the animation at the (0, 0) coordinate with the \nstart_fli()\n function.\n\n\nFor your information, the function returns the number of frames that the whole animation comprises.\n\n\nThe system will automatically activate the colour palettes that the \nFLI/FLC\n animation could have. This can cause problems dealing with the representation\nof other graphics or fonts of the program, if they had been drawn with a different palette.\n\n\nIf the aim is to combine other graphics with animation on-screen, the latter must have just one colour palette (which is normally called \npalette low FLI/FLC\n)\nand the graphics must have been drawn with that same palette.\n\n\nOnce the animation has started, its frames will gradually be shown with respective calls to \nframe_fli()\n.\n\n\nIt is possible to have but one active animation at every time\n. Therefore, after having started an animation with \nstart_fli()\n and having been displayed with \nframe_fli()\n, this animation must finish with the \nend_fli()\n function before starting another different animation.\n\n\nExample program:}\n\n\nPROGRAM example_start_fli;\nBEGIN\n\n\nstart_fli(\nquot;help/help.fli\nquot;, 0, 0); // An animation begins.\n\nLOOP\n    frame_fli();\n    FRAME;\nEND\n\n\n\nEND\n\n-\n\n\nIn the example an animation which is inside of the file \nhelp/help.fli\n begins with\nthe function \nstart_fli()\n in the coordinates (0, 0) and the animation\nis played indefinitely.\n\n\n\n\nThe \nframe_fli()\n function, used to show every frame, will return 0 when the animation is over. Therefore, to show the animation just one time you should have done as follows:\n\n\n{#9999,Example program\n\n\nPROGRAM example_start_fli;\n\nPRIVATE\n    fli_frames;\n\nBEGIN\n    start_fli(\nhelp/help.fli\n, 0, 0);\n    REPEAT\n        fli_frames=frame_fli();\n        FRAME;\n    UNTIL (fli_frames==0);\n    end_fli();\nEND\n\n\n\n\nThe \nreset_fli()\n function allows us \nto rewind\n the animation, so that the \nframe_fli()\n function continues to execute it from the beginning.\n\n\n\n\nSee: \nend_fli()\n - \nreset_fli()\n - \nframe_fli()", 
            "title": "start_fli()"
        }, 
        {
            "location": "/start_fli()/#returns", 
            "text": "The animation's number of frames.", 
            "title": "Returns"
        }, 
        {
            "location": "/start_fli()/#description", 
            "text": "Starts a  FLI/FLC  animation contained in the specified  file , in the\ncoordinates ( x ,  y ) (the upper left coordinate of the display window\nmust be specified).  The path can be specified in the  file name . The path is not necessary if the file is in the DIV Games Studio directory or in a subdirectory whose name coincides with file extension (for instance,  fli\\anima.fli ).  The screen must hold the whole animation. That is to say, if the animation\noccupies the whole screen, the videomode must be fixed at first with the set_mode()  function, starting then the animation at the (0, 0) coordinate with the  start_fli()  function.  For your information, the function returns the number of frames that the whole animation comprises.  The system will automatically activate the colour palettes that the  FLI/FLC  animation could have. This can cause problems dealing with the representation\nof other graphics or fonts of the program, if they had been drawn with a different palette.  If the aim is to combine other graphics with animation on-screen, the latter must have just one colour palette (which is normally called  palette low FLI/FLC )\nand the graphics must have been drawn with that same palette.  Once the animation has started, its frames will gradually be shown with respective calls to  frame_fli() .  It is possible to have but one active animation at every time . Therefore, after having started an animation with  start_fli()  and having been displayed with  frame_fli() , this animation must finish with the  end_fli()  function before starting another different animation.", 
            "title": "Description"
        }, 
        {
            "location": "/start_fli()/#example-program", 
            "text": "PROGRAM example_start_fli;\nBEGIN  start_fli( quot;help/help.fli quot;, 0, 0); // An animation begins.\n\nLOOP\n    frame_fli();\n    FRAME;\nEND  END -  In the example an animation which is inside of the file  help/help.fli  begins with\nthe function  start_fli()  in the coordinates (0, 0) and the animation\nis played indefinitely.   The  frame_fli()  function, used to show every frame, will return 0 when the animation is over. Therefore, to show the animation just one time you should have done as follows:  {#9999,Example program  PROGRAM example_start_fli;\n\nPRIVATE\n    fli_frames;\n\nBEGIN\n    start_fli( help/help.fli , 0, 0);\n    REPEAT\n        fli_frames=frame_fli();\n        FRAME;\n    UNTIL (fli_frames==0);\n    end_fli();\nEND  The  reset_fli()  function allows us  to rewind  the animation, so that the  frame_fli()  function continues to execute it from the beginning.   See:  end_fli()  -  reset_fli()  -  frame_fli()", 
            "title": "Example program:}"
        }, 
        {
            "location": "/start_mode7()/", 
            "text": "start_mode7(\nnumber of m7\n,\n \nfile\n,\n \ngraphic\n,\n \nexterior graphic\n,\n\n              \nnumber of region\n,\n \nheight of the horizon\n)\n\n\nDescription\n\n\nThis is an advanced function whose use requires special skill of its user.\n\n\nCreates a mode-7 display window. That is to say, it displays a \nthree-dimensional\n graphic in a folded plane. In order to obtain this effect, this function will be called with the following parameters:\n\n\nm7 number\n - Up to 10 mode-7 windows can be created on-screen,\nnumbered from \n0\n to \n9\n. If the aim is to create but one, the best thing to do is to define window number \n0\n. This number will be necessary later to modify the window parameters, as the system will need to know which one of the possible \n10\n mode-7 windows is intended to modify.\n\n\nfile\n - The graphics intended to be folded in the window must be in a file whose \nfile code\n must be specified here, as a second parameter of the function. The graphics loaded with the\nload_map()\n or \nload_pcx()\n (or created with \nnew_map()\n) function will be used as if they belonged to the first file (the file with the code 0).\n\n\ngraphic\n - The third parameter must be the main \ncode of the graphic\n\nwhich is going to be brought down in the window and must belong to the file\npreviously indicated.\n\n\nexternal graphic\n - Here, it is possible to indicate either a \n0\n, if the aim is not to see any graphic beyond the graphic folded in the perspective, or a \ngraphic code\n of the same file that will be shown in the perspective beyond the \nmain graphic\n, until it gets the horizon. The height and width of this graphic must be powers of two, not higher than \n8192\n (these powers of two are: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 \n 8192). For instance, it can be a 64 pixel width by 32 pixel height graphic. This graphic will also be shown folded.\n\n\nregion number\n - Here, the rectangular screen region in which the mode-7 is going to be shown, will be indicated. If \n0\n is indicated as a region number,\nthis region will be shown on the whole screen. The rest of regions must previously be defined with the \ndefine_region()\n function (a \nregion\n is but a rectangular zone of the screen).\n\n\nHeight of the horizon\n - The last parameter to indicate will be the distance, in pixels, from the upper part of the window, where the horizon line is intended to be put. If the camera is placed above the folded plane, then nothing will be displayed above the horizon line (this space is normally filled with another  scroll or mode-7 window). Otherwise, if the camera is placed below the plane, then nothing will be shown below this horizon line. \n\n\n\n\nBesides the call to the function, some values of the\n \nglobal structure m7\n \nmust be initialised\n \nfor the correct window's working\n.\nThis is a structure of 10 records (one for every possible mode-7 window)\nand every record has the following fields:\n\n\ncamera\n   - \nIdentifying code\n of the camera\n\n\nheight\n   - Height of the camera\n\n\ndistance\n - Distance of the camera\n\n\nhorizon\n  - Height of the horizon\n\n\nfocus\n    - Focus of vision\n\n\nz\n        - Depth plane\n\n\ncolour\n    - Exterior colour\n\n\nImportant In order to activate the mode 7 window it is \nindispensable\n  to start the \ncamera\n field as, without this field, the window can not determine from where the folded plane must  \nbe seen\n.\n\n\nThe camera will be placed in the folded plane, at the indicated \ndistance\n of the process whose \nidentifying code\n has been set in \ncamera\n, orientated at its angle itself (the one indicated by its \nangle\n local variable). The height at which the camera is located with respect to the bottom will be that indicated in the \nheight\n field.\n\n\nSee the help about the \nm7 structure\n for further information about these issues, or about how to access them.\n\n\n\n\nExample program\n\n\nPROGRAM example_start_mode7;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n\n    start_mode7(0, file1, 4, 0, 0, 64);\n\n    m7.height = 64;\n    m7.distance = 32;\n    m7.color = 162;\n    m7.camera = id;\n\n    write(0, 160, 0, 1, \nUse the cursors to move\n);\n    LOOP\n        IF (key(_right)) angle-=8000; END\n        IF (key(_left)) angle+=8000; END\n        IF (key(_up)) advance(6); END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, the graphics file is loaded and then, a three-dimensional mode 7 is created with the \nstart_mode7()\n function. This function is passed the following parameters:\n\n\n0\n - Number of mode 7 window (the first one, as just one window of this kind will be created).\n\n\nfile1\n - Code of the file from which the graphics must be taken. This is the code of the \nhelp.fpg\n file, that was loaded with the \nload_fpg()\n function.\n\n\n4\n - Code of the main graphic to fold inside the mode 7. To see this graphic, the file must be loaded with the \nFiles menu\n. Thus, it is possible to observe which one is the graphic with \ncode 4\n\n\n0\n - Code of the secondary graphic. A 0 indicates that no secondary (external) graphic will appear in the mode 7, so the external graphic will be displayed in the colour indicated by the \nm7[0].colour\n variable. In order to observe the effect of putting an \nexternal graphic\n, this parameter can be replaced, for instance, by  \n100\n (that is the code of a 32 by 32 pixel brown ball stored in the \nhelp.fpg\n file).\n\n\n0\n - Region number of the screen on which the mode 7 must be \nplaced\n.\nA 0 indicates that it must be placed on the entire screen.\n\n\n64\n - Height of the horizon. This last parameter indicates that the horizon line will be placed at 64 pixels from the upper part of the window.\n\n\nAfter having called the \nstart_mode7()\n function, the program defines the following values of the \nglobal structure m7\n:\n\n\nm7.height=64;\n - To show that the camera must be placed at 64 pixels from the bottom.\n\n\nm7.distance=32;\n - To show that the camera must be placed at 32 pixels behind the camera process.\n\n\nm7.colour=162;\n - To indicate that the external part must be displayed in colour number 162 of the palette.\n\n\nm7.camera=\nid\n;\n - To indicate that the current process will be the camera process.\n\n\nThe camera will be placed 32 pixels behind the main process, at 64 pixels height, orientated at the angle indicated by its \nangle\n variable.\n\n\nAfter these initialisations, the sample program will remain in a loop that simply controls the \nangle\n of the main process with the cursors. This angle will be that of the camera and, when the \nup cursor\n key is pressed, the \nadvance()\n function will be called for the main process (and, consequently, the mode 7 camera) to advance 6 pixels.\n\n\n\n\nHow to visualise processes graphics in mode 7.\n---------------------------------------\n\n\nTo create a process whose graphic is displayed in the mode 7, its \nctype\n local variable must be defined as \nc_m7\n (\ntype of coordinate\n\nas \nmode 7 coordinate\n), which will be done with the following statement:\n\n\nctype=c_m7;\n\n\nAfter this, the process will be displayed in the mode 7 with its graphic (\ngraph\n) scaled depending on the distance at which it is. The process must only modify its \nx\n and \ny\n variables to move through the folded plane.\n\n\n\n\nWhen a process belongs to the mode-7 (the value c_m7 has been assigned to its local variable\n \nctype\n):\n \n\n\n\n\n\n\nIts \nx\n and \ny\n variables will  be referred to the folded main graphic's point above which the process graphic will be placed.\n\n\n\n\n\n\nIts \nz\n variable will lose its effect, as the graphics will appear in strict order of depth. This variable will only be useful to indicate display priorities in graphics exactly placed in the same depth plane.\n\n\n\n\n\n\nThe process will automatically be deleted when the mode 7 window, to which the process belongs, is deleted with the \nstop_mode7()\n function,\nor when the videomode is changed with the \nset_mode()\n function as, by doing so, the mode 7 windows will also be deleted.\n\n\n\n\n\n\n\n\nIf there were several \nmode 7\n windows, the process would be displayed in all of them by default. If the process had to be displayed just in one of them, its \ncnumber\n local variable should be then defined. For instance, if there were 6 mode 7 windows (from number 0 to number 5) and the aim was to display a process only in windows 0 and 2, the following statement should be included in it:\n\n\ncnumber=c_0+c_2;\n\n\n\n\nFor a process to have several graphics (several views), depending on the\nangle from which it is observed, its graphic must be defined with the \nxgraph\n local variable (instead of the \ngraph\n variable).\nTo define this variable, it is necessary, at first, to create a table (of any name), first indicating the graphic's \nnumber of views\n and then the \ngraphics codes\n for these views, starting with \nangle 0\n and in an anticlockwise direction. For instance:\n\n\nGLOBAL\n\n\n**views_car[]=4, 100, 101, 102, 103;**\n\n\n\nThe table \nviews_car\n would define 4 views: graphic 100 for angles\nnear 0 degrees, graphic 101 for angles near 90 degrees,\ngraphic 102 for angles near 180 degrees, etc.\n\n\nAnd then, the \nxgraph\n variable must be initialised in the process code with the following statement:\n\n\nxgraph=OFFSET views_car;\n\n\nTo get an example about what we have just seen, examine some of the DIV Games Studio's sample games that use this technique. Thus, read the comments about these programs (for instance, see \nSpeed for dummies\n).\n\n\n\n\nSee: \nstop_mode7()\n - \nStructure m7", 
            "title": "start_mode7()"
        }, 
        {
            "location": "/start_mode7()/#description", 
            "text": "This is an advanced function whose use requires special skill of its user.  Creates a mode-7 display window. That is to say, it displays a  three-dimensional  graphic in a folded plane. In order to obtain this effect, this function will be called with the following parameters:  m7 number  - Up to 10 mode-7 windows can be created on-screen,\nnumbered from  0  to  9 . If the aim is to create but one, the best thing to do is to define window number  0 . This number will be necessary later to modify the window parameters, as the system will need to know which one of the possible  10  mode-7 windows is intended to modify.  file  - The graphics intended to be folded in the window must be in a file whose  file code  must be specified here, as a second parameter of the function. The graphics loaded with the load_map()  or  load_pcx()  (or created with  new_map() ) function will be used as if they belonged to the first file (the file with the code 0).  graphic  - The third parameter must be the main  code of the graphic \nwhich is going to be brought down in the window and must belong to the file\npreviously indicated.  external graphic  - Here, it is possible to indicate either a  0 , if the aim is not to see any graphic beyond the graphic folded in the perspective, or a  graphic code  of the same file that will be shown in the perspective beyond the  main graphic , until it gets the horizon. The height and width of this graphic must be powers of two, not higher than  8192  (these powers of two are: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096   8192). For instance, it can be a 64 pixel width by 32 pixel height graphic. This graphic will also be shown folded.  region number  - Here, the rectangular screen region in which the mode-7 is going to be shown, will be indicated. If  0  is indicated as a region number,\nthis region will be shown on the whole screen. The rest of regions must previously be defined with the  define_region()  function (a  region  is but a rectangular zone of the screen).  Height of the horizon  - The last parameter to indicate will be the distance, in pixels, from the upper part of the window, where the horizon line is intended to be put. If the camera is placed above the folded plane, then nothing will be displayed above the horizon line (this space is normally filled with another  scroll or mode-7 window). Otherwise, if the camera is placed below the plane, then nothing will be shown below this horizon line.    Besides the call to the function, some values of the   global structure m7   must be initialised   for the correct window's working .\nThis is a structure of 10 records (one for every possible mode-7 window)\nand every record has the following fields:  camera    -  Identifying code  of the camera  height    - Height of the camera  distance  - Distance of the camera  horizon   - Height of the horizon  focus     - Focus of vision  z         - Depth plane  colour     - Exterior colour", 
            "title": "Description"
        }, 
        {
            "location": "/start_mode7()/#important-in-order-to-activate-the-mode-7-window-it-is-indispensable-to-start-the-camera-field-as-without-this-field-the-window-can-not-determine-from-where-the-folded-plane-must-be-seen", 
            "text": "The camera will be placed in the folded plane, at the indicated  distance  of the process whose  identifying code  has been set in  camera , orientated at its angle itself (the one indicated by its  angle  local variable). The height at which the camera is located with respect to the bottom will be that indicated in the  height  field.  See the help about the  m7 structure  for further information about these issues, or about how to access them.", 
            "title": "Important In order to activate the mode 7 window it is indispensable  to start the camera field as, without this field, the window can not determine from where the folded plane must  be seen."
        }, 
        {
            "location": "/start_mode7()/#example-program", 
            "text": "PROGRAM example_start_mode7;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n\n    start_mode7(0, file1, 4, 0, 0, 64);\n\n    m7.height = 64;\n    m7.distance = 32;\n    m7.color = 162;\n    m7.camera = id;\n\n    write(0, 160, 0, 1,  Use the cursors to move );\n    LOOP\n        IF (key(_right)) angle-=8000; END\n        IF (key(_left)) angle+=8000; END\n        IF (key(_up)) advance(6); END\n        FRAME;\n    END\nEND  In the example, the graphics file is loaded and then, a three-dimensional mode 7 is created with the  start_mode7()  function. This function is passed the following parameters:  0  - Number of mode 7 window (the first one, as just one window of this kind will be created).  file1  - Code of the file from which the graphics must be taken. This is the code of the  help.fpg  file, that was loaded with the  load_fpg()  function.  4  - Code of the main graphic to fold inside the mode 7. To see this graphic, the file must be loaded with the  Files menu . Thus, it is possible to observe which one is the graphic with  code 4  0  - Code of the secondary graphic. A 0 indicates that no secondary (external) graphic will appear in the mode 7, so the external graphic will be displayed in the colour indicated by the  m7[0].colour  variable. In order to observe the effect of putting an  external graphic , this parameter can be replaced, for instance, by   100  (that is the code of a 32 by 32 pixel brown ball stored in the  help.fpg  file).  0  - Region number of the screen on which the mode 7 must be  placed .\nA 0 indicates that it must be placed on the entire screen.  64  - Height of the horizon. This last parameter indicates that the horizon line will be placed at 64 pixels from the upper part of the window.  After having called the  start_mode7()  function, the program defines the following values of the  global structure m7 :  m7.height=64;  - To show that the camera must be placed at 64 pixels from the bottom.  m7.distance=32;  - To show that the camera must be placed at 32 pixels behind the camera process.  m7.colour=162;  - To indicate that the external part must be displayed in colour number 162 of the palette.  m7.camera= id ;  - To indicate that the current process will be the camera process.  The camera will be placed 32 pixels behind the main process, at 64 pixels height, orientated at the angle indicated by its  angle  variable.  After these initialisations, the sample program will remain in a loop that simply controls the  angle  of the main process with the cursors. This angle will be that of the camera and, when the  up cursor  key is pressed, the  advance()  function will be called for the main process (and, consequently, the mode 7 camera) to advance 6 pixels.   How to visualise processes graphics in mode 7. ---------------------------------------  To create a process whose graphic is displayed in the mode 7, its  ctype  local variable must be defined as  c_m7  ( type of coordinate \nas  mode 7 coordinate ), which will be done with the following statement:  ctype=c_m7;  After this, the process will be displayed in the mode 7 with its graphic ( graph ) scaled depending on the distance at which it is. The process must only modify its  x  and  y  variables to move through the folded plane.   When a process belongs to the mode-7 (the value c_m7 has been assigned to its local variable   ctype ):      Its  x  and  y  variables will  be referred to the folded main graphic's point above which the process graphic will be placed.    Its  z  variable will lose its effect, as the graphics will appear in strict order of depth. This variable will only be useful to indicate display priorities in graphics exactly placed in the same depth plane.    The process will automatically be deleted when the mode 7 window, to which the process belongs, is deleted with the  stop_mode7()  function,\nor when the videomode is changed with the  set_mode()  function as, by doing so, the mode 7 windows will also be deleted.     If there were several  mode 7  windows, the process would be displayed in all of them by default. If the process had to be displayed just in one of them, its  cnumber  local variable should be then defined. For instance, if there were 6 mode 7 windows (from number 0 to number 5) and the aim was to display a process only in windows 0 and 2, the following statement should be included in it:  cnumber=c_0+c_2;   For a process to have several graphics (several views), depending on the\nangle from which it is observed, its graphic must be defined with the  xgraph  local variable (instead of the  graph  variable).\nTo define this variable, it is necessary, at first, to create a table (of any name), first indicating the graphic's  number of views  and then the  graphics codes  for these views, starting with  angle 0  and in an anticlockwise direction. For instance:  GLOBAL  **views_car[]=4, 100, 101, 102, 103;**  The table  views_car  would define 4 views: graphic 100 for angles\nnear 0 degrees, graphic 101 for angles near 90 degrees,\ngraphic 102 for angles near 180 degrees, etc.  And then, the  xgraph  variable must be initialised in the process code with the following statement:  xgraph=OFFSET views_car;  To get an example about what we have just seen, examine some of the DIV Games Studio's sample games that use this technique. Thus, read the comments about these programs (for instance, see  Speed for dummies ).   See:  stop_mode7()  -  Structure m7", 
            "title": "Example program"
        }, 
        {
            "location": "/start_scroll()/", 
            "text": "start_scroll(\nnumber of scroll\n,\n \nfile\n,\n \ngraphic\n,\n \nbackground graphic\n,\n\n               \nnumber of region\n,\n \nindicator of blocking\n)\n\n\nDescription\n\n\nThis function has a certain complexity, requiring a special skill of the user, who (should have previously programmed) to use it.\n\n\nCreates a scroll window, in which it will perform a view against a background graphic. That is to say, by using a graphic bigger than the display window as a game background, a part of this graphic can be showed and shifted in any direction.\n\n\nTo obtain this effect, this function will be called with the following parameters:\n\n\nscroll number\n - Up to 10 scroll windows can be created on screen,\nnumbered from \n0\n to \n9\n. If the aim is to create only one, the best thing is to define window number \n0\n. This name will later be necessary to modify the parameters of the window, as the system will need to know which one of the \n10\n possible scroll windows is intended to change.\n\n\nfile\n - The graphics that are intended to be shown as a background in that window must be in a file whose \nfile code\n must be specified here, as a second parameter of the function. The graphics loaded with the\n\nload_map()\n or \nload_pcx()\n (or created with \nnew_map()\n) \nfunctions will be used as if they belonged to the first file (the file with the code 0).\n\n\ngraphic\n - The third parameter must be the \ncode of the\n main \ngraphic\n that is going to be displayed as a background in the window and that must belong to the file previously indicated. This graphic\nis normally the main window of the game on which the action will be developed. It is a graphic bigger than the display window, that will be shifted in one or several directions and on which the graphics of the game will be placed.\n\n\nThe scroll window will be initially placed with the \ncontrol point\n\nnumber \n0\n of this graphic in the upper left corner, when this point has been defined in the \ngraphic editor\n.\n\n\nbackground graphic\n - Here, \n0\n will be indicated if the aim is to obtain a single scroll plane (a single background graphic), or another \ngraphic code\n if it is intended that it appears as scroll background (deeper),\nbehind the foreground. In order to see this background plane, it is indispensable that the \nmain graphic\n (foreground) has parts painted in colour number 0 of the palette, as these transparent zones will allow us to see the \nbackground graphic\n through them.\n\n\nregion number\n - The rectangular screen region in which the scroll is going to be shown will be here indicated. If \n0\n is indicated as a region number,\nit will be shown on full screen. The rest of regions must previously be defined with the \ndefine_region()\n function (a \nregion\n is but a rectangular zone of the screen).\n\n\nlocking indicator\n - A value defining whether each of the two scroll planes is horizontally and vertically cyclical will be here indicated. For instance,\na plane is horizontally cyclical when, on leaving the picture on the right, the picture appears on the left. To obtain this value, the following quantities must be added:\n\n\n + 1\n - If the foreground is horizontally cyclical.\n\n\n + 2\n - If the foreground is vertically cyclical.\n\n\n + 4\n - If the background is horizontally cyclical.\n\n\n + 8\n - If the background is vertically cyclical.\n\n\nThis means that \n0\n if none of the two planes must be cyclical, \n15\n (\n1\n+\n2\n+\n4\n+\n8\n)\nif both planes must be cyclical in both axes, \n12\n (\n4\n+\n8\n) if only the background must be cyclical, etc.\n\n\nWhen a (foreground or background) graphic is smaller than the display window,\nthe system will force it to have a cyclical scroll plane. Otherwise, the scroll window could not be completely filled, without \ncyclically\n repeating\nthe graphic (tile).\n\n\n\n\nBesides the call to the function, some values of the\n \nscroll global structure\n \nmust be initialised\n \nfor the correct working of the window\n.\nThis is a structure of 10 records (one for each possible scroll window)\nand every record has the following fields:\n\n\nx0, y0\n  - Foreground coordinates\n\n\nx1, y1\n  - Background coordinates\n\n\nz\n       - Depth plane\n\n\ncamera\n  - \nidentifying code\n of the camera\n\n\nratio\n   - Background's relative speed\n\n\nspeed\n   - Foreground's maximum speed\n\n\nregion1\n - First screen region\n\n\nregion2\n - Second screen region\n\n\nThere are two ways to program the movement of the scroll windows:\n\n\n\n\n\n\nManually, modifying in each frame of the game the fields \nx0\n, \ny0\n,\n\nx1\n and \ny1\n of this structure (the scroll planes' coordinates).\n\n\n\n\n\n\nAutomatically, for what the \nidentifying code\n of a process is needed in the field \ncamera\n of this structure. From then, the system will be in charge of following the graphic of this process in the scroll window.\n\n\n\n\n\n\nSee the help about the \nscroll structure\n either for further information about these fields, or to know how to access them.\n\n\n\n\nExample of AUTOMATIC scroll:}\n\n\nPROGRAM example_start_scroll;\n\n\nPRIVATE\n    file1;\n\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n\n\nstart_scroll(0, file1, 103, 102, 0, 15);\n\nscroll.camera=id;\n\nctype=c_scroll;\ngraph=100;\nwrite(0, 160, 0, 1, \nquot;Use the cursors to move the ball\nquot;);\nLOOP\n    IF (key(_right)) x+=2; END\n    IF (key(_left)) x-=2; END\n    IF (key(_down)) y+=2; END\n    IF (key(_up)) y-=2; END\n    FRAME;\nEND\n\n\n\nEND\n\n-\n\n\nIn the example, the graphics file is loaded and then, a scroll window is created with the \nstart_scroll()\n function. The latter is passed the following parameters:\n\n\n0\n - Number of scroll window (the first one, as only a window of this kind will be created).\n\n\nfile1\n - Code of the file from which the graphics must be taken. This is the code of the file \nhelp.fpg\n loaded with the \nload_fpg()\n function.\n\n\n103\n - Code of the main graphic (foreground) of the scroll. In order to see this graphic, the file must be loaded with the \nFiles menu\n, being then possible to observe which is the graphic with \ncode 103\n.\n\n\n102\n - Code of the secondary graphic (background). This graphic will be shown in the scroll window \nbehind\n the main graphic.\n\n\n0\n - Number of the screen's region in which the scroll must \nbe placed\n. 0 indicates that it must be put on the entire screen.\n\n\n15\n - Lock indicator; 15 (1+2+4+8) indicates that the foreground as well as the background will be cyclical in both axes (horizontal and vertical).\n\n\nAfter having called the \nstart_scroll()\n function, the program defines the field \ncamera\n of the \nscroll structure\n, assigning the \nidentifying code\n\nof the main process to it (with the \nscroll.camera=\nid\n;\n statement). Thus, the scroll becomes \nautomatic\n, following the graphic of the main process from that moment.\n\n\nThe program continues to define its \ntype of coordinate\n as a \nscroll coordinate\n (with the \nctype=c_scroll;\n statement), defining its graphic as number 100, that is a brown ball (with \ngraph=100;\n), and displaying a message. Then, it will stay in a loop in which the coordinates of this process (the \nx\n and \ny\n variables) may vary with the cursor keys.\n\n\n\n\n{#9999,Example of scroll MANUAL\n\n\nPROGRAM example_start_scroll;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n\n    start_scroll(0, file1, 103, 102, 0, 15);\n\n    write(0, 160, 0, 1, \nUse the cursors to move the scroll\n);\n    LOOP\n        IF (key(_right))\n            scroll.x0+=2;\n            scroll.x1+=1;\n        END\n        IF (key(_left))\n            scroll.x0-=2;\n            scroll.x1-=1;\n        END\n        IF (key(_down))\n            scroll.y0+=2;\n            scroll.y1+=1;\n        END\n        IF (key(_up))\n            scroll.y0-=2;\n            scroll.y1-=1;\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example the file of graphics is loaded and then a scroll window\nis created with the function \nstart_scroll()\n. The same parameters of the previous\nexample are given to this last one.\n\n\nAfter this, the program will stay in a loop inside of which, when the cursor\n\nkeys are detected, the fields \nx0\n, \ny0\n, \nx1\n and \ny1\n of the \n\nglobal scroll structure\n will change, and these define the coordinates of\nthe two scroll planes (\nx0\n, \ny0\n for the first plane and \nx1\n, \ny1\n\nfor the second).\n\n\nIt can be seen the difference between both methods; this last one, as it hasn't\nbeginning the field \ncamera\n of the structure, will be able to manipulate\nthe coordinates of both planes.\n\n\n\n\nHow to visualise the process graphics in the scroll\n---------------------------------------\n\n\nTo create a process which graphic is seen in the scroll window, its local\nvariable \nctype\n must be defined as \nc_scroll\n (\ncoordinate of type\n\nas \ncoordinate of scroll\n), what will be done with the following statement:\n\n\nctype=c_scroll;\n\n\nOnce this is done, the process will be seen in the scroll with its graphic\n(defined in the local variable \ngraph\n). The process just must modify\nits variables \nx\n and \ny\n to move over the scroll.\n\n\n\n\nIn the example, the graphics file is loaded and then, a scroll window is created with the \nstart_scroll()\n window. The latter is passed exactly the same parameters as in the previous example.\n\n\nAfter that, the program will stay inside a loop in which, on detecting the cursor keys, the fields \nx0\n, \ny0\n, \nx1\n and \ny1\n of the \nscroll global structure\n will vary. These fields define the coordinates of the two planes of the scroll (\nx0\n, \ny0\n are the coordinates of the foreground and \nx1\n, \ny1\n those of the background).\n\n\nThe difference between both methods can be noticed. The latter can directly manipulate the coordinates of both planes, as it has not initialised the field \ncamera\n of the structure.\n\n\n\n\nHow to display processes' graphics in the scroll.\n---------------------------------------\n\n\nIn order to create a process whose graphic is displayed in the scroll window, it is necessary to define its \nctype\n local variable as \nc_scroll\n (\ntype of coordinate\n as \nscroll coordinate\n), which will be done with the following statement:\n\n\nctype=c_scroll;\n\n\nAfter that, the process will be displayed in the scroll with its graphic (defined in the \ngraph\n local variable). The process must modified only its \nx\n and \ny\n variables to scroll.\n\n\n\n\n{When a process belongs to the scroll (assigning the value c_scroll to its\nlocal variable} \nctype\n):\n\n\n\n\n\n\nIts \nx\n and \ny\n variables will be referred to the point of the foreground's graphic on which the graphic of the process will be placed.\n\n\n\n\n\n\nIts \nz\n variable will be now referred to the \nvariables z\n of the\nprocesses that also belong to the same scroll window. This means that\neach time that a scroll window is displayed, all the graphics that belong to it (ranged by their \nz\n) will be displayed just after it. Then, the processes that \ndon't belong to that scroll window\n will continue to be displayed.\n\n\n\n\n\n\nThe process will be automatically eliminated when the scroll window to which the process belongs is eliminated with the \nstop_scroll()\n function.\nOr when the videomode is changed with the \nset_mode()\n function as, on doing so, the scroll windows will be also eliminated.\n\n\n\n\n\n\n\n\nIf there were several \nscroll\n windows, the process would be displayed by default in all of them. If it had to be displayed only in some of them, its \ncnumber\n local variable should be defined. For instance, if there were 6 scroll windows (numbered from 0 to 5) and the aim was to display a process only in windows 0 and 2, the following statement should be included in it:\n\n\ncnumber=c_0+c_2;\n\n\nIn order to observe an example of what it has been said, the best thing is to examine some of the sample games of DIV Games Studio that use this technique. Thus, the reader is directly referred to the comments of these programs (for instance, see the example \nHelioball\n).\n\n\n\n\nSee: \nstop_scroll()\n - \nrefresh_scroll()\n - \nmove_scroll()\n - \nScroll structure", 
            "title": "start_scroll()"
        }, 
        {
            "location": "/start_scroll()/#description", 
            "text": "This function has a certain complexity, requiring a special skill of the user, who (should have previously programmed) to use it.  Creates a scroll window, in which it will perform a view against a background graphic. That is to say, by using a graphic bigger than the display window as a game background, a part of this graphic can be showed and shifted in any direction.  To obtain this effect, this function will be called with the following parameters:  scroll number  - Up to 10 scroll windows can be created on screen,\nnumbered from  0  to  9 . If the aim is to create only one, the best thing is to define window number  0 . This name will later be necessary to modify the parameters of the window, as the system will need to know which one of the  10  possible scroll windows is intended to change.  file  - The graphics that are intended to be shown as a background in that window must be in a file whose  file code  must be specified here, as a second parameter of the function. The graphics loaded with the load_map()  or  load_pcx()  (or created with  new_map() ) \nfunctions will be used as if they belonged to the first file (the file with the code 0).  graphic  - The third parameter must be the  code of the  main  graphic  that is going to be displayed as a background in the window and that must belong to the file previously indicated. This graphic\nis normally the main window of the game on which the action will be developed. It is a graphic bigger than the display window, that will be shifted in one or several directions and on which the graphics of the game will be placed.  The scroll window will be initially placed with the  control point \nnumber  0  of this graphic in the upper left corner, when this point has been defined in the  graphic editor .  background graphic  - Here,  0  will be indicated if the aim is to obtain a single scroll plane (a single background graphic), or another  graphic code  if it is intended that it appears as scroll background (deeper),\nbehind the foreground. In order to see this background plane, it is indispensable that the  main graphic  (foreground) has parts painted in colour number 0 of the palette, as these transparent zones will allow us to see the  background graphic  through them.  region number  - The rectangular screen region in which the scroll is going to be shown will be here indicated. If  0  is indicated as a region number,\nit will be shown on full screen. The rest of regions must previously be defined with the  define_region()  function (a  region  is but a rectangular zone of the screen).  locking indicator  - A value defining whether each of the two scroll planes is horizontally and vertically cyclical will be here indicated. For instance,\na plane is horizontally cyclical when, on leaving the picture on the right, the picture appears on the left. To obtain this value, the following quantities must be added:   + 1  - If the foreground is horizontally cyclical.   + 2  - If the foreground is vertically cyclical.   + 4  - If the background is horizontally cyclical.   + 8  - If the background is vertically cyclical.  This means that  0  if none of the two planes must be cyclical,  15  ( 1 + 2 + 4 + 8 )\nif both planes must be cyclical in both axes,  12  ( 4 + 8 ) if only the background must be cyclical, etc.  When a (foreground or background) graphic is smaller than the display window,\nthe system will force it to have a cyclical scroll plane. Otherwise, the scroll window could not be completely filled, without  cyclically  repeating\nthe graphic (tile).   Besides the call to the function, some values of the   scroll global structure   must be initialised   for the correct working of the window .\nThis is a structure of 10 records (one for each possible scroll window)\nand every record has the following fields:  x0, y0   - Foreground coordinates  x1, y1   - Background coordinates  z        - Depth plane  camera   -  identifying code  of the camera  ratio    - Background's relative speed  speed    - Foreground's maximum speed  region1  - First screen region  region2  - Second screen region  There are two ways to program the movement of the scroll windows:    Manually, modifying in each frame of the game the fields  x0 ,  y0 , x1  and  y1  of this structure (the scroll planes' coordinates).    Automatically, for what the  identifying code  of a process is needed in the field  camera  of this structure. From then, the system will be in charge of following the graphic of this process in the scroll window.    See the help about the  scroll structure  either for further information about these fields, or to know how to access them.", 
            "title": "Description"
        }, 
        {
            "location": "/start_scroll()/#example-of-automatic-scroll", 
            "text": "PROGRAM example_start_scroll;  PRIVATE\n    file1;  BEGIN\n    file1=load_fpg( help/help.fpg );  start_scroll(0, file1, 103, 102, 0, 15);\n\nscroll.camera=id;\n\nctype=c_scroll;\ngraph=100;\nwrite(0, 160, 0, 1,  quot;Use the cursors to move the ball quot;);\nLOOP\n    IF (key(_right)) x+=2; END\n    IF (key(_left)) x-=2; END\n    IF (key(_down)) y+=2; END\n    IF (key(_up)) y-=2; END\n    FRAME;\nEND  END -  In the example, the graphics file is loaded and then, a scroll window is created with the  start_scroll()  function. The latter is passed the following parameters:  0  - Number of scroll window (the first one, as only a window of this kind will be created).  file1  - Code of the file from which the graphics must be taken. This is the code of the file  help.fpg  loaded with the  load_fpg()  function.  103  - Code of the main graphic (foreground) of the scroll. In order to see this graphic, the file must be loaded with the  Files menu , being then possible to observe which is the graphic with  code 103 .  102  - Code of the secondary graphic (background). This graphic will be shown in the scroll window  behind  the main graphic.  0  - Number of the screen's region in which the scroll must  be placed . 0 indicates that it must be put on the entire screen.  15  - Lock indicator; 15 (1+2+4+8) indicates that the foreground as well as the background will be cyclical in both axes (horizontal and vertical).  After having called the  start_scroll()  function, the program defines the field  camera  of the  scroll structure , assigning the  identifying code \nof the main process to it (with the  scroll.camera= id ;  statement). Thus, the scroll becomes  automatic , following the graphic of the main process from that moment.  The program continues to define its  type of coordinate  as a  scroll coordinate  (with the  ctype=c_scroll;  statement), defining its graphic as number 100, that is a brown ball (with  graph=100; ), and displaying a message. Then, it will stay in a loop in which the coordinates of this process (the  x  and  y  variables) may vary with the cursor keys.   {#9999,Example of scroll MANUAL  PROGRAM example_start_scroll;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n\n    start_scroll(0, file1, 103, 102, 0, 15);\n\n    write(0, 160, 0, 1,  Use the cursors to move the scroll );\n    LOOP\n        IF (key(_right))\n            scroll.x0+=2;\n            scroll.x1+=1;\n        END\n        IF (key(_left))\n            scroll.x0-=2;\n            scroll.x1-=1;\n        END\n        IF (key(_down))\n            scroll.y0+=2;\n            scroll.y1+=1;\n        END\n        IF (key(_up))\n            scroll.y0-=2;\n            scroll.y1-=1;\n        END\n        FRAME;\n    END\nEND  In the example the file of graphics is loaded and then a scroll window\nis created with the function  start_scroll() . The same parameters of the previous\nexample are given to this last one.  After this, the program will stay in a loop inside of which, when the cursor \nkeys are detected, the fields  x0 ,  y0 ,  x1  and  y1  of the  global scroll structure  will change, and these define the coordinates of\nthe two scroll planes ( x0 ,  y0  for the first plane and  x1 ,  y1 \nfor the second).  It can be seen the difference between both methods; this last one, as it hasn't\nbeginning the field  camera  of the structure, will be able to manipulate\nthe coordinates of both planes.   How to visualise the process graphics in the scroll ---------------------------------------  To create a process which graphic is seen in the scroll window, its local\nvariable  ctype  must be defined as  c_scroll  ( coordinate of type \nas  coordinate of scroll ), what will be done with the following statement:  ctype=c_scroll;  Once this is done, the process will be seen in the scroll with its graphic\n(defined in the local variable  graph ). The process just must modify\nits variables  x  and  y  to move over the scroll.   In the example, the graphics file is loaded and then, a scroll window is created with the  start_scroll()  window. The latter is passed exactly the same parameters as in the previous example.  After that, the program will stay inside a loop in which, on detecting the cursor keys, the fields  x0 ,  y0 ,  x1  and  y1  of the  scroll global structure  will vary. These fields define the coordinates of the two planes of the scroll ( x0 ,  y0  are the coordinates of the foreground and  x1 ,  y1  those of the background).  The difference between both methods can be noticed. The latter can directly manipulate the coordinates of both planes, as it has not initialised the field  camera  of the structure.   How to display processes' graphics in the scroll. ---------------------------------------  In order to create a process whose graphic is displayed in the scroll window, it is necessary to define its  ctype  local variable as  c_scroll  ( type of coordinate  as  scroll coordinate ), which will be done with the following statement:  ctype=c_scroll;  After that, the process will be displayed in the scroll with its graphic (defined in the  graph  local variable). The process must modified only its  x  and  y  variables to scroll.   {When a process belongs to the scroll (assigning the value c_scroll to its\nlocal variable}  ctype ):    Its  x  and  y  variables will be referred to the point of the foreground's graphic on which the graphic of the process will be placed.    Its  z  variable will be now referred to the  variables z  of the\nprocesses that also belong to the same scroll window. This means that\neach time that a scroll window is displayed, all the graphics that belong to it (ranged by their  z ) will be displayed just after it. Then, the processes that  don't belong to that scroll window  will continue to be displayed.    The process will be automatically eliminated when the scroll window to which the process belongs is eliminated with the  stop_scroll()  function.\nOr when the videomode is changed with the  set_mode()  function as, on doing so, the scroll windows will be also eliminated.     If there were several  scroll  windows, the process would be displayed by default in all of them. If it had to be displayed only in some of them, its  cnumber  local variable should be defined. For instance, if there were 6 scroll windows (numbered from 0 to 5) and the aim was to display a process only in windows 0 and 2, the following statement should be included in it:  cnumber=c_0+c_2;  In order to observe an example of what it has been said, the best thing is to examine some of the sample games of DIV Games Studio that use this technique. Thus, the reader is directly referred to the comments of these programs (for instance, see the example  Helioball ).   See:  stop_scroll()  -  refresh_scroll()  -  move_scroll()  -  Scroll structure", 
            "title": "Example of AUTOMATIC scroll:}"
        }, 
        {
            "location": "/stop_cd()/", 
            "text": "stop_cd()\n\n\nDescription\n\n\nStops the CD-Audio reproduction, stopping the song which were playing.\nThe songs are reproduced with the function \nplay_cd()\n.\n\n\nExample program\n\n\nPROGRAM example_stop_cd;\nBEGIN\n    write(0, 160, 0, 1, \nPress [ENTER] to turn on the CD.\n);\n    write(0, 160, 10, 1, \nPress [SPACE] to stop the CD.\n);\n    LOOP\n        IF (scan_code==_space)\n\n            stop_cd(); // Para el CD\n\n        END\n        IF (scan_code==_enter)\n            play_cd(2, 0);\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example are placed the necessary messages. In each step of the\nloop, if the space bar is pressed, the CD will be stopped with the\nfunction \nstop_cd()\n.\n\n\nIf the ENTER key is pressed, it will be turned on with the function\n\nplay_cd()\n.\n\n\nThe volume of reproduction of cd-audio can be controlled with the\n\nsetup\n structure and the function \nset_volume()\n.\n\n\n\n\nSee: \nplay_cd()\n - \nis_play_cd()\n - \nset_volume()\n - \nsetup structure", 
            "title": "stop_cd()"
        }, 
        {
            "location": "/stop_cd()/#description", 
            "text": "Stops the CD-Audio reproduction, stopping the song which were playing.\nThe songs are reproduced with the function  play_cd() .", 
            "title": "Description"
        }, 
        {
            "location": "/stop_cd()/#example-program", 
            "text": "PROGRAM example_stop_cd;\nBEGIN\n    write(0, 160, 0, 1,  Press [ENTER] to turn on the CD. );\n    write(0, 160, 10, 1,  Press [SPACE] to stop the CD. );\n    LOOP\n        IF (scan_code==_space)\n\n            stop_cd(); // Para el CD\n\n        END\n        IF (scan_code==_enter)\n            play_cd(2, 0);\n        END\n        FRAME;\n    END\nEND  In the example are placed the necessary messages. In each step of the\nloop, if the space bar is pressed, the CD will be stopped with the\nfunction  stop_cd() .  If the ENTER key is pressed, it will be turned on with the function play_cd() .  The volume of reproduction of cd-audio can be controlled with the setup  structure and the function  set_volume() .   See:  play_cd()  -  is_play_cd()  -  set_volume()  -  setup structure", 
            "title": "Example program"
        }, 
        {
            "location": "/stop_mode7()/", 
            "text": "stop_mode7(\nnumber of m7\n)\n\n\nDescription\n\n\nEliminates the mode 7 window which number (from 0 to 9) is given as parameter.\nThis \nnumber of m7\n is the one indicated as first parameter in the function\n\nstart_mode7()\n, is necessary due to that can be up to 10 different mode 7\nwindows, and the system needs to know which of them is ending.\n\n\nWhen a mode 7 window is eliminated, every process which belongs exclusively to\nthis window will die automatically, so, every process which has its\nvariable \nctype\n with the value \nc_m7\n and they are not being \nseen in any other mode 7 window.\n\n\nImportant When the video mode is changed with the function \nset_mode()\n\n\nevery mode 7 window (and its processes) will be eliminated, without being in this\ncase, necessary to use this function (\nstop_mode7()\n).\n\n\nExample program\n\n\nPROGRAM example_stop_mode7;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    write(0, 160, 0, 1, \nPress [ENTER] to start the mode 7 display.\n);\n    write(0, 160, 10, 1, \nPress [SPACE] to stop the mode 7 display.\n);\n    write(0, 160, 190, 1, \nUse the mouse to move the mode 7 display.\n);\n    angle=90000;\n    LOOP\n        IF (scan_code==_space)\n\n            stop_mode7(0); // The mode 7 is stopped\n\n        END\n        IF (scan_code==_enter)\n            start_mode7(0, 0, 4, 0, 0, 64);\n            m7.camera=id;\n        END\n        x=mouse.x;\n        y=mouse.y;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example a file of graphics is loaded, and the instructions of the program\nappear on screen, after this, the coordinates of the main process, which will be\nthe camera of the mode 7, will be controlled with the mouse (through the\nstatements \nx=mouse.x;\n and \ny=mouse.y\n).\n\n\nWhen the ENTER key is pressed, a mode 7 window is created with a graphic\nof a circle, controlled by the main process.\n\n\nWhen the space bar is pressed, the function \nstop_mode7()\n will be called,\neliminating this window of the mode 7 visualisation.\n\n\n\n\nTo Create a mode 7 window is a bit complex procedure and requires to\nbegin some parameters, as in this case the camera, some of them required\nby the function \nstart_mode7()\n and other variables in the global\nstructure \nm7\n (as the variable \nm7.camera\n used in the example).\n\n\n\n\nSee: \nstart_mode7()\n - \nm7 structure", 
            "title": "stop_mode7()"
        }, 
        {
            "location": "/stop_mode7()/#description", 
            "text": "Eliminates the mode 7 window which number (from 0 to 9) is given as parameter.\nThis  number of m7  is the one indicated as first parameter in the function start_mode7() , is necessary due to that can be up to 10 different mode 7\nwindows, and the system needs to know which of them is ending.  When a mode 7 window is eliminated, every process which belongs exclusively to\nthis window will die automatically, so, every process which has its\nvariable  ctype  with the value  c_m7  and they are not being \nseen in any other mode 7 window.", 
            "title": "Description"
        }, 
        {
            "location": "/stop_mode7()/#important-when-the-video-mode-is-changed-with-the-function-set_mode", 
            "text": "every mode 7 window (and its processes) will be eliminated, without being in this\ncase, necessary to use this function ( stop_mode7() ).", 
            "title": "Important When the video mode is changed with the function set_mode()"
        }, 
        {
            "location": "/stop_mode7()/#example-program", 
            "text": "PROGRAM example_stop_mode7;\nBEGIN\n    load_fpg( help/help.fpg );\n    write(0, 160, 0, 1,  Press [ENTER] to start the mode 7 display. );\n    write(0, 160, 10, 1,  Press [SPACE] to stop the mode 7 display. );\n    write(0, 160, 190, 1,  Use the mouse to move the mode 7 display. );\n    angle=90000;\n    LOOP\n        IF (scan_code==_space)\n\n            stop_mode7(0); // The mode 7 is stopped\n\n        END\n        IF (scan_code==_enter)\n            start_mode7(0, 0, 4, 0, 0, 64);\n            m7.camera=id;\n        END\n        x=mouse.x;\n        y=mouse.y;\n        FRAME;\n    END\nEND  In the example a file of graphics is loaded, and the instructions of the program\nappear on screen, after this, the coordinates of the main process, which will be\nthe camera of the mode 7, will be controlled with the mouse (through the\nstatements  x=mouse.x;  and  y=mouse.y ).  When the ENTER key is pressed, a mode 7 window is created with a graphic\nof a circle, controlled by the main process.  When the space bar is pressed, the function  stop_mode7()  will be called,\neliminating this window of the mode 7 visualisation.   To Create a mode 7 window is a bit complex procedure and requires to\nbegin some parameters, as in this case the camera, some of them required\nby the function  start_mode7()  and other variables in the global\nstructure  m7  (as the variable  m7.camera  used in the example).   See:  start_mode7()  -  m7 structure", 
            "title": "Example program"
        }, 
        {
            "location": "/stop_scroll()/", 
            "text": "stop_scroll(\nnumber of scroll\n)\n\n\nDescription\n\n\nEliminates the scroll window which number (from 0 to 9) is given as parameter.\nThis \nnumber of scroll\n is the one indicated as first parameter in the function\n\nstart_scroll()\n and it is necessary due to can be up to 10 different scroll\nwindows, and the system needs to know which one is ending.\n\n\nWhen a scroll window is eliminated, every process which belongs exclusively to this\nwindow will die automatically, so, every process which has its\nvariable \nctype\n with the value \nc_scroll\n and they are not being \nseen in any other scroll window.\n\n\nImportant When the video mode is changed with the function \nset_mode()\n\n\nevery scroll window (and its processes) will be eliminated, without being in this\ncase, necessary to use this function (\nstop_scroll()\n).\n\n\nExample program\n\n\nPROGRAM example_stop_scroll;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    write(0, 160, 0, 1, \nPress [ENTER] to activate the scroll window.\n);\n    write(0, 160, 10, 1, \nPress [SPACE] to end the scroll.\n);\n    LOOP\n        IF (scan_code==_space)\n\n            stop_scroll(0); // The scroll is quit.\n\n        END\n        IF (scan_code==_enter)\n            start_scroll(0, 0, 103, 102, 0, 15);\n        END\n        scroll.x0+=1;\n        scroll.y0+=1;\n        scroll.x1-=1;\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example a file of graphics is loaded and the instructions of the program\nappear on screen.\n\n\nWhen the ENTER key is pressed, a scroll window will be created and when the\nspace bar is pressed, the function \nstop_scroll()\n is called, eliminating\nthis scroll window.\n\n\nInside of the main loop, the coordinates of the scroll are accessed, being contained\nin the \nglobal scroll structure\n to move manually the scroll window\n(\nscroll.x0+=1; ...\n).\n\n\n\n\nTo create a scroll window is a bit complex procedure and requires to start some\nparameters, some of them, required by the function \nstart_scroll()\n \nand other contained in the \nglobal scroll structure\n\n(as the variable \nscroll.x0\n used in the example).\n\n\n\n\nSee: \nstart_scroll()\n - \nscroll structure", 
            "title": "stop_scroll()"
        }, 
        {
            "location": "/stop_scroll()/#description", 
            "text": "Eliminates the scroll window which number (from 0 to 9) is given as parameter.\nThis  number of scroll  is the one indicated as first parameter in the function start_scroll()  and it is necessary due to can be up to 10 different scroll\nwindows, and the system needs to know which one is ending.  When a scroll window is eliminated, every process which belongs exclusively to this\nwindow will die automatically, so, every process which has its\nvariable  ctype  with the value  c_scroll  and they are not being \nseen in any other scroll window.", 
            "title": "Description"
        }, 
        {
            "location": "/stop_scroll()/#important-when-the-video-mode-is-changed-with-the-function-set_mode", 
            "text": "every scroll window (and its processes) will be eliminated, without being in this\ncase, necessary to use this function ( stop_scroll() ).", 
            "title": "Important When the video mode is changed with the function set_mode()"
        }, 
        {
            "location": "/stop_scroll()/#example-program", 
            "text": "PROGRAM example_stop_scroll;\nBEGIN\n    load_fpg( help/help.fpg );\n    write(0, 160, 0, 1,  Press [ENTER] to activate the scroll window. );\n    write(0, 160, 10, 1,  Press [SPACE] to end the scroll. );\n    LOOP\n        IF (scan_code==_space)\n\n            stop_scroll(0); // The scroll is quit.\n\n        END\n        IF (scan_code==_enter)\n            start_scroll(0, 0, 103, 102, 0, 15);\n        END\n        scroll.x0+=1;\n        scroll.y0+=1;\n        scroll.x1-=1;\n        FRAME;\n    END\nEND  In the example a file of graphics is loaded and the instructions of the program\nappear on screen.  When the ENTER key is pressed, a scroll window will be created and when the\nspace bar is pressed, the function  stop_scroll()  is called, eliminating\nthis scroll window.  Inside of the main loop, the coordinates of the scroll are accessed, being contained\nin the  global scroll structure  to move manually the scroll window\n( scroll.x0+=1; ... ).   To create a scroll window is a bit complex procedure and requires to start some\nparameters, some of them, required by the function  start_scroll()  \nand other contained in the  global scroll structure \n(as the variable  scroll.x0  used in the example).   See:  start_scroll()  -  scroll structure", 
            "title": "Example program"
        }, 
        {
            "location": "/stop_sound()/", 
            "text": "stop_sound(\nchannel number\n)\n\n\nDescription\n\n\nStops the sound that is being played through the channel, passed as a parameter.\n\n\nThe required \nchannel number\n is the value returned by the \nsound()\n function when the reproduction of a sound effect starts.\n\n\nThere are 16 sound channels. Thus, up to 16 sounds may simultaneously be played.\n\n\nExample program\n\n\nPROGRAM example_stop_sound;\n\nPRIVATE\n    id_sound;\n    channels;\n    playing=FALSE;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    write(0, 160, 0, 1, \nPress [SPACE] to start the reproduction.\n);\n    write(0, 160, 10, 1, \nPress [ENTER] to stop the sound channel.\n);\n    id_sound = load_pcm(\nhelp/help.pcm\n, 1);\n    LOOP\n        IF (scan_code==_space AND NOT playing)\n            channels = sound(id_sound, 128, 256);\n            playing=TRUE;\n        END\n        IF (scan_code==_enter)\n\n            stop_sound(channels); // The sounds stops playing\n\n            playing=FALSE;\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a background graphic is put and the necessary messages are displayed. At the same time, the sound effect stored in the \nhelp.pcm\n file is loaded with the \nload_pcm()\n function, that returns the sound identifier that is stored in the \nid_sound\n variable. Notice that, in this example, \n1\n is passed to this function as a second parameter. That is done to indicate that the loaded sound effect must indefinitely be repeated every time it is initialised (stressing thus the effect of the \nstop_sound()\n function).\n\n\nIn every step of the loop, it is checked whether the spacebar is pressed. In this case, the reproduction of the sound effect will start with the \nsound()\n function, which will return the channel number that will be stored in the \nchannel\n variable.\n\n\nIf the ENTER key is pressed, the sound will be stopped with the \nstop_sound()\n function.\n\n\n\n\nTo gradually stop a sound, turning its volume down little by little, several calls to the \nchange_sound()\n function must be made to slightly reduce the channel volume until it reaches level 0. Then, the \nstop_sound()\n can be called to definitively stop the sound.\n\n\n\n\nSee: \nsound()\n - \nchange_sound()\n - \nload_pcm/wav()\n - \nunload_pcm/wav()", 
            "title": "stop_sound()"
        }, 
        {
            "location": "/stop_sound()/#description", 
            "text": "Stops the sound that is being played through the channel, passed as a parameter.  The required  channel number  is the value returned by the  sound()  function when the reproduction of a sound effect starts.  There are 16 sound channels. Thus, up to 16 sounds may simultaneously be played.", 
            "title": "Description"
        }, 
        {
            "location": "/stop_sound()/#example-program", 
            "text": "PROGRAM example_stop_sound;\n\nPRIVATE\n    id_sound;\n    channels;\n    playing=FALSE;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    write(0, 160, 0, 1,  Press [SPACE] to start the reproduction. );\n    write(0, 160, 10, 1,  Press [ENTER] to stop the sound channel. );\n    id_sound = load_pcm( help/help.pcm , 1);\n    LOOP\n        IF (scan_code==_space AND NOT playing)\n            channels = sound(id_sound, 128, 256);\n            playing=TRUE;\n        END\n        IF (scan_code==_enter)\n\n            stop_sound(channels); // The sounds stops playing\n\n            playing=FALSE;\n        END\n        FRAME;\n    END\nEND  In the example, a background graphic is put and the necessary messages are displayed. At the same time, the sound effect stored in the  help.pcm  file is loaded with the  load_pcm()  function, that returns the sound identifier that is stored in the  id_sound  variable. Notice that, in this example,  1  is passed to this function as a second parameter. That is done to indicate that the loaded sound effect must indefinitely be repeated every time it is initialised (stressing thus the effect of the  stop_sound()  function).  In every step of the loop, it is checked whether the spacebar is pressed. In this case, the reproduction of the sound effect will start with the  sound()  function, which will return the channel number that will be stored in the  channel  variable.  If the ENTER key is pressed, the sound will be stopped with the  stop_sound()  function.   To gradually stop a sound, turning its volume down little by little, several calls to the  change_sound()  function must be made to slightly reduce the channel volume until it reaches level 0. Then, the  stop_sound()  can be called to definitively stop the sound.   See:  sound()  -  change_sound()  -  load_pcm/wav()  -  unload_pcm/wav()", 
            "title": "Example program"
        }, 
        {
            "location": "/system()/", 
            "text": "system(\nexternal command\n)\n\n\nDescription\n\n\nExecutes the operative system's command passed as a parameter.\n\n\nExample program\n\n\nPROGRAM example_system;\nBEGIN\n    write(0, 160, 0, 1, \nPress [SPACE] to execute a DIR.\n);\n    LOOP\n        IF (scan_code==_space)\n\n            system(\ndir\n); // A command of MS-DOS is executed.\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, after the display of a text, you enter inside the main loop in which the \nDIR\n command of the MS-DOS operative system will be executed every time the spacebar is pressed.\n\n\n\n\nOne of the utilities of this command is, for instance, to delete a temporary file that has been created in the program, calling the command of the\nsystem \nDEL \nfile name\n.\n\n\n\n\nNote The system can be blocked depending of the executed commands. In these cases you must reset the computer. There is no guarantee dealing with this function running, due to the multiple incompatibilities that can appear between the external commands and the manager of internal processes of DIV Games Studio.\n\n\n\n\nsystem(\nCOMMAND.COM\n)\n\n\nDescription\n\n\nExecutes a session of the MS-DOS operative system from the program itself.\nOn typing EXIT from it, you will return to the program at the point in which this statement was executed.\n\n\n\n\nSee: \nexit()", 
            "title": "system()"
        }, 
        {
            "location": "/system()/#description", 
            "text": "Executes the operative system's command passed as a parameter.", 
            "title": "Description"
        }, 
        {
            "location": "/system()/#example-program", 
            "text": "PROGRAM example_system;\nBEGIN\n    write(0, 160, 0, 1,  Press [SPACE] to execute a DIR. );\n    LOOP\n        IF (scan_code==_space)\n\n            system( dir ); // A command of MS-DOS is executed.\n\n        END\n        FRAME;\n    END\nEND  In the example, after the display of a text, you enter inside the main loop in which the  DIR  command of the MS-DOS operative system will be executed every time the spacebar is pressed.   One of the utilities of this command is, for instance, to delete a temporary file that has been created in the program, calling the command of the\nsystem  DEL  file name .", 
            "title": "Example program"
        }, 
        {
            "location": "/system()/#note-the-system-can-be-blocked-depending-of-the-executed-commands-in-these-cases-you-must-reset-the-computer-there-is-no-guarantee-dealing-with-this-function-running-due-to-the-multiple-incompatibilities-that-can-appear-between-the-external-commands-and-the-manager-of-internal-processes-of-div-games-studio", 
            "text": "system( COMMAND.COM )", 
            "title": "Note The system can be blocked depending of the executed commands. In these cases you must reset the computer. There is no guarantee dealing with this function running, due to the multiple incompatibilities that can appear between the external commands and the manager of internal processes of DIV Games Studio."
        }, 
        {
            "location": "/system()/#description_1", 
            "text": "Executes a session of the MS-DOS operative system from the program itself.\nOn typing EXIT from it, you will return to the program at the point in which this statement was executed.   See:  exit()", 
            "title": "Description"
        }, 
        {
            "location": "/unload_fpg()/", 
            "text": "unload_fpg(\nfile code\n)\n\n\nDescription\n\n\nUnloads the graphics file whose code is passed as parameter from the memory. This \nfile code\n is the value returned by the \nload_fpg()\n function when a new graphics file is loaded in the memory.\n\n\nAfter having unloaded a graphics' file, \nmuch care must be taken\n not to go on using in the program any graphic that was in that file. Otherwise, the program could become blocked.\n\n\nIt is not necessary to unload the file from the memory\n before finishing the program, as the system will do it automatically.\n\n\nTherefore, a file must be unloaded from the memory only when it is not going to be used for a while and when the aim is to free up space occupied in the computer's memory in order to load other resources (other graphics files, sounds, fonts, etc.).\n\n\nExample program\n\n\nPROGRAM example_unload_fpg;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    put_screen(file1, 1);\n    write(0, 160, 0, 1, \nPress [ENTER] to unload the file and finish\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_fpg(file1); // The file is loaded.\n\nEND\n\n\n\n\nThe example loads the graphics file contained in the \nhelp.fpg\n file\nwith the \nload_fpg()\n function, storing the \nfile code\n in the\n\nfile1\n private variable.\n\n\nThe program will remain in a loop until the ENTER key is pressed. At that moment, the file will be unloaded from the memory with \nunload_fpg()\n\nand the program will finish.\n\n\n\n\nThe graphics individually loaded with the \nload_map()\n or \nload_pcx()\n (or created with \nnew_map()\n) functions will not be unloaded when file number 0 (with code 0) is loaded , even if they were used as if they belonged to it. These graphics will have to be unloaded by using the \nunload_map()\n or \nunload_pcx()\n functions.\n\n\n\n\nSee: \nload_fpg()\n - \nload_map/pcx()\n - \nunload_map/pcx ()", 
            "title": "unload_fpg()"
        }, 
        {
            "location": "/unload_fpg()/#description", 
            "text": "Unloads the graphics file whose code is passed as parameter from the memory. This  file code  is the value returned by the  load_fpg()  function when a new graphics file is loaded in the memory.  After having unloaded a graphics' file,  much care must be taken  not to go on using in the program any graphic that was in that file. Otherwise, the program could become blocked.  It is not necessary to unload the file from the memory  before finishing the program, as the system will do it automatically.  Therefore, a file must be unloaded from the memory only when it is not going to be used for a while and when the aim is to free up space occupied in the computer's memory in order to load other resources (other graphics files, sounds, fonts, etc.).", 
            "title": "Description"
        }, 
        {
            "location": "/unload_fpg()/#example-program", 
            "text": "PROGRAM example_unload_fpg;\n\nPRIVATE\n    file1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    put_screen(file1, 1);\n    write(0, 160, 0, 1,  Press [ENTER] to unload the file and finish );\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_fpg(file1); // The file is loaded.\n\nEND  The example loads the graphics file contained in the  help.fpg  file\nwith the  load_fpg()  function, storing the  file code  in the file1  private variable.  The program will remain in a loop until the ENTER key is pressed. At that moment, the file will be unloaded from the memory with  unload_fpg() \nand the program will finish.   The graphics individually loaded with the  load_map()  or  load_pcx()  (or created with  new_map() ) functions will not be unloaded when file number 0 (with code 0) is loaded , even if they were used as if they belonged to it. These graphics will have to be unloaded by using the  unload_map()  or  unload_pcx()  functions.   See:  load_fpg()  -  load_map/pcx()  -  unload_map/pcx ()", 
            "title": "Example program"
        }, 
        {
            "location": "/unload_pcm()_forward_slash_unload_wav()/", 
            "text": "unload_pcm(\nsound code\n)\n\n\nunload_wav(\ncode of the sound\n)\n\n\nDescription\n\n\nUnloads the sound whose code is passed as a parameter from the memory.\nThis \nsound code\n is the value returned by the \nload_pcm()\n or \nload_wav()\n function when a new sound effect is loaded in the memory.\n\n\nAfter having unloaded a sound effect, \nmuch care must be taken\n not to go on using in the program this effect (its code) for the \nsound()\n or \nunload_pcm()\n functions. Otherwise, the program could become blocked.\n\n\nIt is not necessary to unload the sound from the memory\n before finishing the program, as the system will do it automatically.\n\n\nTherefore, a sound must be unloaded from the memory only when it is not going to be used for a while and when the aim is to free up space occupied in the computer's memory to load other resources (other graphics files, sounds, fonts, etc.), which will be logical just with sound effects of a certain length, in other words big enough so as to be worth freeing up the space they occupy.\n\n\nExample program\n\n\nPROGRAM example_unload_pcm;\n\nPRIVATE\n    sound1;\n\nBEGIN\n    sound1=load_pcm(\nhelp/help.pcm\n,0);\n    write(0, 160, 0, 1, \nPress [ENTER] to unload the sound and finish\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_pcm(sound1); // The sound is unloaded.\n\nEND\n\n\n\n\nThe example loads the sound effect stored in the \nhelp.pcm\n file\nwith the \nload_pcm()\n function, storing the \nsound code\n in the\n\nsound1\n private variable.\n\n\nThe program will remain in a loop until the ENTER key is pressed. At that moment, the file will be unloaded from the memory with \nunload_pcm()\n and the program will finish.\n\n\n\n\nThe \nstop_sound()\n function must be used to stop a sound effect, but keeping it in the memory in order to be played again when desired.\n\n\n\n\nSee: \nload_pcm/wav()\n - \nsound()\n - \nchange_sound()\n - \nstop_sound()", 
            "title": "unload_pcm() / unload_wav()"
        }, 
        {
            "location": "/unload_pcm()_forward_slash_unload_wav()/#description", 
            "text": "Unloads the sound whose code is passed as a parameter from the memory.\nThis  sound code  is the value returned by the  load_pcm()  or  load_wav()  function when a new sound effect is loaded in the memory.  After having unloaded a sound effect,  much care must be taken  not to go on using in the program this effect (its code) for the  sound()  or  unload_pcm()  functions. Otherwise, the program could become blocked.  It is not necessary to unload the sound from the memory  before finishing the program, as the system will do it automatically.  Therefore, a sound must be unloaded from the memory only when it is not going to be used for a while and when the aim is to free up space occupied in the computer's memory to load other resources (other graphics files, sounds, fonts, etc.), which will be logical just with sound effects of a certain length, in other words big enough so as to be worth freeing up the space they occupy.", 
            "title": "Description"
        }, 
        {
            "location": "/unload_pcm()_forward_slash_unload_wav()/#example-program", 
            "text": "PROGRAM example_unload_pcm;\n\nPRIVATE\n    sound1;\n\nBEGIN\n    sound1=load_pcm( help/help.pcm ,0);\n    write(0, 160, 0, 1,  Press [ENTER] to unload the sound and finish );\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_pcm(sound1); // The sound is unloaded.\n\nEND  The example loads the sound effect stored in the  help.pcm  file\nwith the  load_pcm()  function, storing the  sound code  in the sound1  private variable.  The program will remain in a loop until the ENTER key is pressed. At that moment, the file will be unloaded from the memory with  unload_pcm()  and the program will finish.   The  stop_sound()  function must be used to stop a sound effect, but keeping it in the memory in order to be played again when desired.   See:  load_pcm/wav()  -  sound()  -  change_sound()  -  stop_sound()", 
            "title": "Example program"
        }, 
        {
            "location": "/write()/", 
            "text": "write(\nfont\n,\n \nx\n,\n \ny\n,\n \ncentreing code\n,\n \ntext\n)\n\n\nReturns\n\n\nThe identifying code of the text that has been written.\n\n\nDescription\n\n\nThis function is used to show an alphanumeric text on-screen. For that, it requires the following parameters:\n\n\nfont\n - The \nfont code\n or \ntype of letter\n that is going to be used.\nHere, you must put either 0 when the aim is to use the system's font\n(white, small font, 6 by 8 pixels), or the \nfont code\n returned by the \nload_fnt()\n function when a new font is loaded in the program.\n\n\nx\n, \ny\n - The coordinates referred to the screen in which the text is going to be displayed, first in the horizontal axis and then in the vertical one.\n\n\ncentreing code\n - This code determines the position of the text specified by the previous coordinates. Its values are:\n\n\n0\n-Up left \n1\n-Up \n2\n-Up right\n\n\n3\n-Left        \n4\n-centre \n5\n-Right\n\n\n6\n-Down left  \n7\n-Down  \n8\n-Down right\n\n\nFor example, if a text is written at the 160, 0 coordinates and with the centreing code 1 (Up), then the text will c entre in the column 160 and it will be displayed from line 0 downwards. Or, if the aim is to have a text in the upper left corner, it must be displayed at the 0, 0 coordinates and with centreing code 0 (Up left).\n\n\ntext\n - The text to be written as a literal (a text in inverted commas) will be specified as last parameter (see the \nliterals' specifying symbols\n).\n\n\n\n\nThe displayed text will remain on-screen until it is deleted with the \ndelete_text()\n function, that requires as parameter the \nidentifying code\n returned by \nwrite()\n.\n\n\nThe \nwrite_int()\n function must be used to display the numeric value of a variable (such as the score of the player).\n\n\nThe texts will remain unchangeable on screen even if graphics are displayed on it or processes' graphics pass before or behind them.\n\n\nExample program\n\n\nPROGRAM example_write;\n\nPRIVATE\n    font1;\n\nBEGIN\n    font1 = load_fnt(\nhelp/help.fnt\n);\n\n    write(0, 160, 100, 4, \nSample text with the system font.\n);\n    write(font1, 0, 0, 0, \nLEFT UP\n);\n    write(font1, 320, 200, 8, \nRIGHT DOWN\n);\n\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn the previous example, the font contained in the \nhelp.fnt\n file is loaded\nwith the \nload_fnt()\n function (whose font code is stored in the \nfont1\n variable), and then three texts are written:\n\n\nThe first one with the system font (0), being placed at the 160, 100 coordinates\n(screen centre) the \ncentre\n of the text (centreing code 4).\n\n\nThe second one with the loaded font (whose \nfont identifier\n is stored in the \nfont1\n variable), being placed at the 0, 0 coordinates the\nupper left corner of the text (centreing code 0).\n\n\nAnd finally, the third text, also with the loaded font, being placed at the 320, 200 coordinates the lower right corner of the text (centreing code 8).\n\n\nAfter that, the program will indefinitely remain expecting inside a loop.\n\n\n\n\nThe depth plane in which the written texts appear is controlled through the \ntext_z\n global variable, that is useful to regulate which graphics must be seen above the texts and which ones must be seen below them.\n\n\nThen, it will be possible to move the texts towards another position if necessary, by using the \nmove_text()\n function, which also requires the \nidentifying code\n returned by \nwrite()\n as parameter.\n\n\n\n\nWhen fonts loaded from \nfiles FNT\n are used, the colours palette used to generate these fonts must be activated (see \nload_pal()\n). Otherwise, the colours may appear changed, and the text will be incorrectly displayed.\n\n\n\n\nSee: \nwrite_int()\n - \nmove_text()\n - \ndelete_text()\n - \nload_fnt()\n - \ntext_z", 
            "title": "write()"
        }, 
        {
            "location": "/write()/#returns", 
            "text": "The identifying code of the text that has been written.", 
            "title": "Returns"
        }, 
        {
            "location": "/write()/#description", 
            "text": "This function is used to show an alphanumeric text on-screen. For that, it requires the following parameters:  font  - The  font code  or  type of letter  that is going to be used.\nHere, you must put either 0 when the aim is to use the system's font\n(white, small font, 6 by 8 pixels), or the  font code  returned by the  load_fnt()  function when a new font is loaded in the program.  x ,  y  - The coordinates referred to the screen in which the text is going to be displayed, first in the horizontal axis and then in the vertical one.  centreing code  - This code determines the position of the text specified by the previous coordinates. Its values are:  0 -Up left  1 -Up  2 -Up right  3 -Left         4 -centre  5 -Right  6 -Down left   7 -Down   8 -Down right  For example, if a text is written at the 160, 0 coordinates and with the centreing code 1 (Up), then the text will c entre in the column 160 and it will be displayed from line 0 downwards. Or, if the aim is to have a text in the upper left corner, it must be displayed at the 0, 0 coordinates and with centreing code 0 (Up left).  text  - The text to be written as a literal (a text in inverted commas) will be specified as last parameter (see the  literals' specifying symbols ).   The displayed text will remain on-screen until it is deleted with the  delete_text()  function, that requires as parameter the  identifying code  returned by  write() .  The  write_int()  function must be used to display the numeric value of a variable (such as the score of the player).  The texts will remain unchangeable on screen even if graphics are displayed on it or processes' graphics pass before or behind them.", 
            "title": "Description"
        }, 
        {
            "location": "/write()/#example-program", 
            "text": "PROGRAM example_write;\n\nPRIVATE\n    font1;\n\nBEGIN\n    font1 = load_fnt( help/help.fnt );\n\n    write(0, 160, 100, 4,  Sample text with the system font. );\n    write(font1, 0, 0, 0,  LEFT UP );\n    write(font1, 320, 200, 8,  RIGHT DOWN );\n\n    LOOP\n        FRAME;\n    END\nEND  In the previous example, the font contained in the  help.fnt  file is loaded\nwith the  load_fnt()  function (whose font code is stored in the  font1  variable), and then three texts are written:  The first one with the system font (0), being placed at the 160, 100 coordinates\n(screen centre) the  centre  of the text (centreing code 4).  The second one with the loaded font (whose  font identifier  is stored in the  font1  variable), being placed at the 0, 0 coordinates the\nupper left corner of the text (centreing code 0).  And finally, the third text, also with the loaded font, being placed at the 320, 200 coordinates the lower right corner of the text (centreing code 8).  After that, the program will indefinitely remain expecting inside a loop.   The depth plane in which the written texts appear is controlled through the  text_z  global variable, that is useful to regulate which graphics must be seen above the texts and which ones must be seen below them.  Then, it will be possible to move the texts towards another position if necessary, by using the  move_text()  function, which also requires the  identifying code  returned by  write()  as parameter.   When fonts loaded from  files FNT  are used, the colours palette used to generate these fonts must be activated (see  load_pal() ). Otherwise, the colours may appear changed, and the text will be incorrectly displayed.   See:  write_int()  -  move_text()  -  delete_text()  -  load_fnt()  -  text_z", 
            "title": "Example program"
        }, 
        {
            "location": "/write_int()/", 
            "text": "write_int(\nfont\n,\n \nx\n,\n \ny\n,\n \ncentreing code\n,\n \nOFFSET variable\n)\n\n\nReturns\n\n\nThe identifying code of the text that has been written.\n\n\nDescription\n\n\nThis function is used to show the numeric value of a variable. For that, it requires the following parameters:\n\n\nfont\n - The \nfont code\n or \ntype of letter\n that is going to be used.\nHere, it is necessary to put either 0 when the aim is to use the system's font\n(white, small font, 6 by 8 pixels), or the \nfont code\n returned by the \nload_fnt()\n function when a new font is loaded in the program.\n\n\nx\n, \ny\n - The coordinates referred to the screen in which the numeric value is going to be displayed, first in the horizontal axis and then in the vertical one.\n\n\ncentreing code\n - This code determines the position of the numeric value specified by the previous coordinates. Its values are:\n\n\n0\n-Up left     \n1\n-Up     \n2\n-Up right\n\n\n3\n-Left        \n4\n-centre     \n5\n-Right\n\n\n6\n-Down left      \n7\n-Down      \n8\n-Down right\n\n\nFor example, if a numeric value is written at the 160, 0 coordinates and with the centreing code 1 (Up), then the numeric value will be centred in the column 160 and it will be displayed from line 0 downwards. Or, if the aim is to have a numeric value in the upper left corner, it must be displayed at the 0, 0 coordinates and with centreing code 0 (Up left).\n\n\nOFFSET variable\n - The offset inside the computer's memory of the variable whose value is intended to be displayed, must be specified as last parameter (the offset of the data is obtained with the \nOFFSET\n operator).\n\n\n\n\nThe displayed numeric value will remain on-screen until it is deleted with the \ndelete_text()\n function, that requires as parameter the \nidentifying code\n returned by \nwrite_int()\n.\n\n\nImportant During the time that the value of the variable appears on screen, this value will automatically be updated every time the variable is modified. For that, new calls to \nwrite_int()\n are not necessary.\n\n\nThe \nwrite()\n function must be used to display any kind of alphanumeric text (a fixed text).\n\n\nThe texts will remain unchangeable on screen even if graphics are displayed on it or processes graphics pass before or behind them.\n\n\nExample program\n\n\nPROGRAM example_write_int;\n\nPRIVATE\n    variable;\n\nBEGIN\n    write(0, 160, 190, 1, \nPress [SPACE] to change the value of the variable.\n);\n\n    write_int(0, 160, 100, 4, OFFSET variable); // A variable is displayed.\n\n    LOOP\n        IF (scan_code==_space) variable=rand(-100, 100); END\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a text is displayed by using \nwrite()\n and the value of a variable with the \nwrite_int()\n function. This last function is passed the following\nparameters:\n\n\n0\n - As \nfont\n (0 is the system font).\n\n\n0, 10\n - As screen coordinates.\n\n\n0\n - As centreing code (Up/Left).\n\n\nOFFSET variable\n - As the offset of the variable in the memory.\n\n\nIn every step of the loop, if the spacebar is pressed, the value of the variable is changed, assigning it one randomly chosen with the \nrand()\n function.\n\n\n\n\nThe depth plane in which the written texts appear is controlled through the \ntext_z\n global variable, that is useful to regulate which graphics must be seen above the texts and which ones must be seen below them.\n\n\nThen, it will be possible to move the texts towards another position if necessary, by using the \nmove_text()\n function, which also requires the \nidentifying code\n returned by \nwrite()\n as parameter.\n\n\n\n\nWhen fonts loaded from \nfiles FNT\n are used, the colour palette used to generate these fonts must be activated (see \nload_pal()\n). Otherwise, the colours may appear changed, being the text incorrectly displayed.\n\n\n\n\nWarning\n\n\nIt is not possible to display an expression, as it is shown below:\n\n\nwrite_int(0, 0, 0, 0, offset variable + 1);\n\n\nTo display the value of the variable plus 1. That is to say, if the aim was to display this value, it would be necessary either to add 1 to the variable or to create another variable, assigning it the value of the original variable plus 1, for\ninstance:\n\n\nvariable2 = variable + 1;\n\n\nwrite_int(0, 0, 0, 0, offset variable2);\n\n\nIn this case, you should take into account that you had to update the value of the \nvariable2\n at least once per every \nFRAME\n of the game, as by changing \nvariable\n the value of \nvariable2\n will not automatically be updated unless the \nvariable2 = variable + 1;\n statement is again executed.\n\n\n\n\nSee: \nwrite()\n - \nmove_text()\n - \ndelete_text()\n - \nload_fnt()\n - \ntext_z", 
            "title": "write_int()"
        }, 
        {
            "location": "/write_int()/#returns", 
            "text": "The identifying code of the text that has been written.", 
            "title": "Returns"
        }, 
        {
            "location": "/write_int()/#description", 
            "text": "This function is used to show the numeric value of a variable. For that, it requires the following parameters:  font  - The  font code  or  type of letter  that is going to be used.\nHere, it is necessary to put either 0 when the aim is to use the system's font\n(white, small font, 6 by 8 pixels), or the  font code  returned by the  load_fnt()  function when a new font is loaded in the program.  x ,  y  - The coordinates referred to the screen in which the numeric value is going to be displayed, first in the horizontal axis and then in the vertical one.  centreing code  - This code determines the position of the numeric value specified by the previous coordinates. Its values are:  0 -Up left      1 -Up      2 -Up right  3 -Left         4 -centre      5 -Right  6 -Down left       7 -Down       8 -Down right  For example, if a numeric value is written at the 160, 0 coordinates and with the centreing code 1 (Up), then the numeric value will be centred in the column 160 and it will be displayed from line 0 downwards. Or, if the aim is to have a numeric value in the upper left corner, it must be displayed at the 0, 0 coordinates and with centreing code 0 (Up left).  OFFSET variable  - The offset inside the computer's memory of the variable whose value is intended to be displayed, must be specified as last parameter (the offset of the data is obtained with the  OFFSET  operator).   The displayed numeric value will remain on-screen until it is deleted with the  delete_text()  function, that requires as parameter the  identifying code  returned by  write_int() .", 
            "title": "Description"
        }, 
        {
            "location": "/write_int()/#important-during-the-time-that-the-value-of-the-variable-appears-on-screen-this-value-will-automatically-be-updated-every-time-the-variable-is-modified-for-that-new-calls-to-write_int-are-not-necessary", 
            "text": "The  write()  function must be used to display any kind of alphanumeric text (a fixed text).  The texts will remain unchangeable on screen even if graphics are displayed on it or processes graphics pass before or behind them.", 
            "title": "Important During the time that the value of the variable appears on screen, this value will automatically be updated every time the variable is modified. For that, new calls to write_int() are not necessary."
        }, 
        {
            "location": "/write_int()/#example-program", 
            "text": "PROGRAM example_write_int;\n\nPRIVATE\n    variable;\n\nBEGIN\n    write(0, 160, 190, 1,  Press [SPACE] to change the value of the variable. );\n\n    write_int(0, 160, 100, 4, OFFSET variable); // A variable is displayed.\n\n    LOOP\n        IF (scan_code==_space) variable=rand(-100, 100); END\n        FRAME;\n    END\nEND  In the example, a text is displayed by using  write()  and the value of a variable with the  write_int()  function. This last function is passed the following\nparameters:  0  - As  font  (0 is the system font).  0, 10  - As screen coordinates.  0  - As centreing code (Up/Left).  OFFSET variable  - As the offset of the variable in the memory.  In every step of the loop, if the spacebar is pressed, the value of the variable is changed, assigning it one randomly chosen with the  rand()  function.   The depth plane in which the written texts appear is controlled through the  text_z  global variable, that is useful to regulate which graphics must be seen above the texts and which ones must be seen below them.  Then, it will be possible to move the texts towards another position if necessary, by using the  move_text()  function, which also requires the  identifying code  returned by  write()  as parameter.   When fonts loaded from  files FNT  are used, the colour palette used to generate these fonts must be activated (see  load_pal() ). Otherwise, the colours may appear changed, being the text incorrectly displayed.", 
            "title": "Example program"
        }, 
        {
            "location": "/write_int()/#warning", 
            "text": "It is not possible to display an expression, as it is shown below:  write_int(0, 0, 0, 0, offset variable + 1);  To display the value of the variable plus 1. That is to say, if the aim was to display this value, it would be necessary either to add 1 to the variable or to create another variable, assigning it the value of the original variable plus 1, for\ninstance:  variable2 = variable + 1;  write_int(0, 0, 0, 0, offset variable2);  In this case, you should take into account that you had to update the value of the  variable2  at least once per every  FRAME  of the game, as by changing  variable  the value of  variable2  will not automatically be updated unless the  variable2 = variable + 1;  statement is again executed.   See:  write()  -  move_text()  -  delete_text()  -  load_fnt()  -  text_z", 
            "title": "Warning"
        }, 
        {
            "location": "/xput()/", 
            "text": "xput(\nfile\n,\n \ngraphic\n,\n \nx\n,\n \ny\n,\n \nangle\n,\n \nsize\n,\n \nflags\n,\n \nregion\n)\n\n\nDescription\n\n\nAdvanced version of the \nput()\n function to put a graphic on the screen background. This function requires the following parameters, in order:\n\n\nfile\n - \nfile code\n with the graphics library that contains both graphics. The graphics loaded with the \nload_map()\n or \nload_pcx()\n(or created with \nnew_map()\n) functions will be used as if they belonged to the first file (the file with the code 0).\n\n\ngraphic\n - \ncode of the graphic\n inside the file that is going to be displayed on screen.\n\n\nx\n, \ny\n - coordinates dealing with the screen where the graphic is intended to be put. These coordinates reveal the position in which the graphic centre (or the \ncontrol point\n number 0, if it is defined) will be placed. \n\n\nangle\n - angle (in degree thousandths) in which the graphic is going to be displayed; the normal angle is \n0\n.\n\n\nsize\n - size (in percentage) in which the graphic is going to  be displayed; the normal size is \n100\n.\n\n\nflags\n - Indicates the mirrors and transparencies with which the graphic will be displayed; the possible values are the following ones:\n\n\n0\n-Normal graphic.\n\n\n1\n-Horizontal mirror.\n\n\n2\n-Vertical mirror.\n\n\n3\n-Horizontal and vertical (180\n) mirror.\n\n\n4\n-Transparent graphic.\n\n\n5\n-Horizontal transparent and mirror.\n\n\n6\n-Vertical transparent and mirror.\n\n\n7\n-Horizontal and vertical transparent, mirror.\n\n\nregion\n - Number of region (window inside the screen) in which the graphic must be displayed. This value will normally equal \n0\n to display the graphic at any position of the screen. The \ndefine_region()\n function must be used to define a region.\n\n\n\n\nThe graphics displayed in this way on the background screen will be in the game display \nbelow all the processes, scroll regions, texts, etc.\n\n\nIf the aim is that a graphic is above others, it is necessary to \ncreate it as a new process\n  and fix its \nz\n variable with the priority of its display.\n\n\nThe \nclear_screen()\n function must be used to clear the screen background.\n\n\nExample program\n\n\nPROGRAM example_put;\n\nPRIVATE\n    file1;\n    coord_x;\n    coord_y;\n    angle1;\n    size1;\n    flags1;\n\nBEGIN\n    file1=load_fpg(\nhelp/help.fpg\n);\n    LOOP\n        coord_x=rand(0, 319);\n        coord_y=rand(0, 199);\n        angle1=rand(-pi, pi);\n        size1=rand(10, 200);\n        flags1=rand(0, 7);\n\n        // The graphic 101 is put\n        xput(file1, 101, coord_x, coord_y, angle1, size1, flags1, 0);\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, the file is loaded with the graphics and, in every iteration of the loop, graphic number 101 (a triangle) is put with the \nxput()\n function at coordinates randomly chosen with the \nrand()\n function, with random angle, size and value of \nflags\n, and in region number 0 (entire screen).\n\n\n\n\nThe \nput()\n function is a simplified version of the \nxput()\n function, and it is useful when you do not want to rotate, scale, mirror or display the graphic with transparencies.\n\n\nThe \nmap_put()\n or \nmap_xput()\n functions must be used to put a graphic inside another one (instead of the screen background).\n\n\n\n\nIf the graphic intended to be put is just a screen background,\nit is easier to use the \nput_screen()\n function, as it does not require the screen coordinates because it will automatically centre the graphic on screen.\n\n\n\n\nSee: \nput()\n - \nmap_put()\n - \nmap_xput()\n - \nput_screen()", 
            "title": "xput()"
        }, 
        {
            "location": "/xput()/#description", 
            "text": "Advanced version of the  put()  function to put a graphic on the screen background. This function requires the following parameters, in order:  file  -  file code  with the graphics library that contains both graphics. The graphics loaded with the  load_map()  or  load_pcx() (or created with  new_map() ) functions will be used as if they belonged to the first file (the file with the code 0).  graphic  -  code of the graphic  inside the file that is going to be displayed on screen.  x ,  y  - coordinates dealing with the screen where the graphic is intended to be put. These coordinates reveal the position in which the graphic centre (or the  control point  number 0, if it is defined) will be placed.   angle  - angle (in degree thousandths) in which the graphic is going to be displayed; the normal angle is  0 .  size  - size (in percentage) in which the graphic is going to  be displayed; the normal size is  100 .  flags  - Indicates the mirrors and transparencies with which the graphic will be displayed; the possible values are the following ones:  0 -Normal graphic.  1 -Horizontal mirror.  2 -Vertical mirror.  3 -Horizontal and vertical (180 ) mirror.  4 -Transparent graphic.  5 -Horizontal transparent and mirror.  6 -Vertical transparent and mirror.  7 -Horizontal and vertical transparent, mirror.  region  - Number of region (window inside the screen) in which the graphic must be displayed. This value will normally equal  0  to display the graphic at any position of the screen. The  define_region()  function must be used to define a region.   The graphics displayed in this way on the background screen will be in the game display  below all the processes, scroll regions, texts, etc.  If the aim is that a graphic is above others, it is necessary to  create it as a new process   and fix its  z  variable with the priority of its display.  The  clear_screen()  function must be used to clear the screen background.", 
            "title": "Description"
        }, 
        {
            "location": "/xput()/#example-program", 
            "text": "PROGRAM example_put;\n\nPRIVATE\n    file1;\n    coord_x;\n    coord_y;\n    angle1;\n    size1;\n    flags1;\n\nBEGIN\n    file1=load_fpg( help/help.fpg );\n    LOOP\n        coord_x=rand(0, 319);\n        coord_y=rand(0, 199);\n        angle1=rand(-pi, pi);\n        size1=rand(10, 200);\n        flags1=rand(0, 7);\n\n        // The graphic 101 is put\n        xput(file1, 101, coord_x, coord_y, angle1, size1, flags1, 0);\n\n        FRAME;\n    END\nEND  In the example, the file is loaded with the graphics and, in every iteration of the loop, graphic number 101 (a triangle) is put with the  xput()  function at coordinates randomly chosen with the  rand()  function, with random angle, size and value of  flags , and in region number 0 (entire screen).   The  put()  function is a simplified version of the  xput()  function, and it is useful when you do not want to rotate, scale, mirror or display the graphic with transparencies.  The  map_put()  or  map_xput()  functions must be used to put a graphic inside another one (instead of the screen background).   If the graphic intended to be put is just a screen background,\nit is easier to use the  put_screen()  function, as it does not require the screen coordinates because it will automatically centre the graphic on screen.   See:  put()  -  map_put()  -  map_xput()  -  put_screen()", 
            "title": "Example program"
        }, 
        {
            "location": "/load_map()_forward_slash_load_pcx()/", 
            "text": "load_map(\nname of file\n)\n\n\nload_pcx(\nname of file\n)\n\n\nReturns\n\n\nThe loaded \ngraphic code\n.\n\n\nDescription\n\n\nLoads a \nMAP or PCX file\n with a graphic in the computer's memory . The function requires the file name as a parameter, in inverted commas.\n\n\nThe \ngraphic code\n is returned as return value, which is a numeric value that must be specified to use the graphic, in the \ngraph\n variable or, in general, in all the functions requiring a \ngraphic code\n among their parameters.\n\n\nIt is possible to load as many graphics as necessary. Every time one is loaded, the function will return the corresponding code (the first graphic loaded will have the code \n1000\n, the following one the code \n1001\n, etc.)\n\n\nIt is possible to specify the path to the file with the graphics' file. Nevertheless, if the file is in the directory by default (\\MAP or \\PCX), it won't be necessary.\n\n\n\n\nImportant\n\n\nWhen the \nfile code\n to which that graphic belongs is required inside a function, the code \n0\n (which is the code of the first \nfile FPG\n that is loaded in the program) must be indicated.\n\n\n\n\nWhen different graphics have been loaded, keep in mind that if they have different palettes, every one of them must previously be activated with the \nload_pal()\n function, indicating the name of the file (MAP / PCX) as a parameter, before using the graphic.\n\n\nGraphics created with different palettes can not simultaneously be used.\n\n\nExample program\n\n\nPROGRAM example_load_map;\n\nPRIVATE\n    map1;\n\nBEGIN\n\n    map1 = load_map(\nhelp/help.map\n); // A graphic map's file is loaded.\n\n    put_screen(0, map1);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example, a graphic map is loaded with the \nload_map()\n function, storing the \ngraphic code\n that returns in the \nmap1\n private variable.\n\n\nThis code is later used as a parameter of the \nput_screen()\n function\nto put the graphic on the background screen.\n\n\n\n\nThe \nunload_map()\n and \nunload_pcx()\n functions allows us to free up the computer's memory used by the graphic when it is not going to be used for a specific time. For that purpose, it also requires the \ngraphic code\n to know which is the graphic to be unloaded from the memory.\n\n\nIt is not necessary to unload the graphic from the memory\n before finishing the \nprogram, as the system will do it automatically.\n\n\n\n\nTo load several graphics all at once in a program, they must be included inside a graphics file (FPG) and loaded with the \nload_fpg()\n function.\n\n\n\n\nThe function \nnew_map()\n allows you to create a new graphic map of\nany size and colour, without loading it from an file.\n\n\n\n\nSee: \nnew_map()\n - \nunload_map/pcx()\n - \nload_fpg()\n - \nload_pal()\n - \ngraph", 
            "title": "load_map() / load_pcx()"
        }, 
        {
            "location": "/load_map()_forward_slash_load_pcx()/#returns", 
            "text": "The loaded  graphic code .", 
            "title": "Returns"
        }, 
        {
            "location": "/load_map()_forward_slash_load_pcx()/#description", 
            "text": "Loads a  MAP or PCX file  with a graphic in the computer's memory . The function requires the file name as a parameter, in inverted commas.  The  graphic code  is returned as return value, which is a numeric value that must be specified to use the graphic, in the  graph  variable or, in general, in all the functions requiring a  graphic code  among their parameters.  It is possible to load as many graphics as necessary. Every time one is loaded, the function will return the corresponding code (the first graphic loaded will have the code  1000 , the following one the code  1001 , etc.)  It is possible to specify the path to the file with the graphics' file. Nevertheless, if the file is in the directory by default (\\MAP or \\PCX), it won't be necessary.", 
            "title": "Description"
        }, 
        {
            "location": "/load_map()_forward_slash_load_pcx()/#important", 
            "text": "When the  file code  to which that graphic belongs is required inside a function, the code  0  (which is the code of the first  file FPG  that is loaded in the program) must be indicated.   When different graphics have been loaded, keep in mind that if they have different palettes, every one of them must previously be activated with the  load_pal()  function, indicating the name of the file (MAP / PCX) as a parameter, before using the graphic.  Graphics created with different palettes can not simultaneously be used.", 
            "title": "Important"
        }, 
        {
            "location": "/load_map()_forward_slash_load_pcx()/#example-program", 
            "text": "PROGRAM example_load_map;\n\nPRIVATE\n    map1;\n\nBEGIN\n\n    map1 = load_map( help/help.map ); // A graphic map's file is loaded.\n\n    put_screen(0, map1);\n    LOOP\n        FRAME;\n    END\nEND  In the example, a graphic map is loaded with the  load_map()  function, storing the  graphic code  that returns in the  map1  private variable.  This code is later used as a parameter of the  put_screen()  function\nto put the graphic on the background screen.   The  unload_map()  and  unload_pcx()  functions allows us to free up the computer's memory used by the graphic when it is not going to be used for a specific time. For that purpose, it also requires the  graphic code  to know which is the graphic to be unloaded from the memory.  It is not necessary to unload the graphic from the memory  before finishing the \nprogram, as the system will do it automatically.   To load several graphics all at once in a program, they must be included inside a graphics file (FPG) and loaded with the  load_fpg()  function.   The function  new_map()  allows you to create a new graphic map of\nany size and colour, without loading it from an file.   See:  new_map()  -  unload_map/pcx()  -  load_fpg()  -  load_pal()  -  graph", 
            "title": "Example program"
        }, 
        {
            "location": "/reset_sound()/", 
            "text": "reset_sound(\n)\n\n\nDescription\n\n\nAdvanced function, only for very expert users. Resets the sound system.\n\n\nThis function is used to activate new parameters of the sound hardware.\n\n\nThe following values of the \nsetup global structure\n must be established:\n\n\n**setup.card**\n\n**setup.port**\n\n**setup.irq**\n\n**setup.dma**\n\n**setup.dma2**\n\n\n\nThis function is normally used inside the sound setup programs (see \nsetup_program\n).\n\n\n\n\nTo activate the rest of the values of the setup structure, those referred to the \nmixer\n volume, the \nset_volume()\n function must be called. The values to establish the volume are the following ones:\n\n\n**setup.master**\n\n**setup.sound_fx**\n\n**setup.cd_audio**\n\n\n\n\n\nSee: \nset_volume()\n - \nSetup structure\n - \nsetup_program", 
            "title": "reset_sound()"
        }, 
        {
            "location": "/reset_sound()/#description", 
            "text": "Advanced function, only for very expert users. Resets the sound system.  This function is used to activate new parameters of the sound hardware.  The following values of the  setup global structure  must be established:  **setup.card**\n\n**setup.port**\n\n**setup.irq**\n\n**setup.dma**\n\n**setup.dma2**  This function is normally used inside the sound setup programs (see  setup_program ).   To activate the rest of the values of the setup structure, those referred to the  mixer  volume, the  set_volume()  function must be called. The values to establish the volume are the following ones:  **setup.master**\n\n**setup.sound_fx**\n\n**setup.cd_audio**   See:  set_volume()  -  Setup structure  -  setup_program", 
            "title": "Description"
        }, 
        {
            "location": "/unload_map()_forward_slash_unload_pcx()/", 
            "text": "unload_map(\ncode of the graphic\n)\n\n\nunload_pcx(\ncode of the graphic\n)\n\n\nDescription\n\n\nUnloads the graphic whose code is passed as a parameter from the memory.\nThis \ngraphic code\n is the value returned by the \nload_map()\n \nload_pcx()\n\nor \nnew_map()\n function by loading a new graphic stored in an \nfile MAP or PCX\n in \nthe computer's memory.\n\n\nAfter having unloaded a graphic, \nmuch care must be taken\n not to go on using this graphic in the program. Otherwise, the program would risk to become blocked.\n\n\nIt is not necessary to unload the graphic\n before finishing the \nprogram, as the system will do it automatically.\n\n\nThen, a graphic must be unloaded from the memory only when it is not going to be used for a specific time and when the aim is to free up the occupied space in the computer's memory to load other resources (other graphics files, sounds, fonts, etc.), which will make sense only with graphics of a certain size, big enough so as to be worth freeing up the space they occupy.\n\n\nExample program\n\n\nPROGRAM example_unload_map;\n\nPRIVATE\n    map1;\n\nBEGIN\n    map1=load_map(\nhelp/help.map\n);\n    put_screen(0, map1);\n    write(0, 160, 0, 1, \nPress [ENTER] to unload the graphic and finish\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_map(map1); // The graphic is unloaded.\n\nEND\n\n\n\n\nIn the example, a graphic map is loaded with the \nload_map()\n function, storing the \ngraphic code\n returned by it in the \nmap1\n private variable.\n\n\nThis code is later used as a parameter of the \nput_screen()\n function\nto put the graphic on the background screen.\n\n\nThen, the program will display a message and wait in a loop for the ENTER key to be pressed. At that moment, the graphic will be unloaded by using the \nunload_map()\n function.\n\n\n\n\nThe graphics individually loaded with the \nload_map()\n or \nload_pcx()\n(or created with the\n\nnew_map()\n) functions will not be unloaded when file number 0 (with code 0) is unloaded\nwith the \nunload_fpg()\n function, even if these graphics are used as if they belonged to it.\n\n\n\n\nSee: \nload_map/pcx()\n - \nunload_fpg()", 
            "title": "unload_map() / unload_pcx()"
        }, 
        {
            "location": "/unload_map()_forward_slash_unload_pcx()/#description", 
            "text": "Unloads the graphic whose code is passed as a parameter from the memory.\nThis  graphic code  is the value returned by the  load_map()   load_pcx() \nor  new_map()  function by loading a new graphic stored in an  file MAP or PCX  in \nthe computer's memory.  After having unloaded a graphic,  much care must be taken  not to go on using this graphic in the program. Otherwise, the program would risk to become blocked.  It is not necessary to unload the graphic  before finishing the \nprogram, as the system will do it automatically.  Then, a graphic must be unloaded from the memory only when it is not going to be used for a specific time and when the aim is to free up the occupied space in the computer's memory to load other resources (other graphics files, sounds, fonts, etc.), which will make sense only with graphics of a certain size, big enough so as to be worth freeing up the space they occupy.", 
            "title": "Description"
        }, 
        {
            "location": "/unload_map()_forward_slash_unload_pcx()/#example-program", 
            "text": "PROGRAM example_unload_map;\n\nPRIVATE\n    map1;\n\nBEGIN\n    map1=load_map( help/help.map );\n    put_screen(0, map1);\n    write(0, 160, 0, 1,  Press [ENTER] to unload the graphic and finish );\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_map(map1); // The graphic is unloaded.\n\nEND  In the example, a graphic map is loaded with the  load_map()  function, storing the  graphic code  returned by it in the  map1  private variable.  This code is later used as a parameter of the  put_screen()  function\nto put the graphic on the background screen.  Then, the program will display a message and wait in a loop for the ENTER key to be pressed. At that moment, the graphic will be unloaded by using the  unload_map()  function.   The graphics individually loaded with the  load_map()  or  load_pcx() (or created with the new_map() ) functions will not be unloaded when file number 0 (with code 0) is unloaded\nwith the  unload_fpg()  function, even if these graphics are used as if they belonged to it.   See:  load_map/pcx()  -  unload_fpg()", 
            "title": "Example program"
        }, 
        {
            "location": "/unload_fnt()/", 
            "text": "unload_fnt(\nfont code\n)\n\n\nDescription\n\n\nUnloads from the memory the \nfont\n (the \nkind of letter\n or the \nset of graphic characters\n) whose code is passed as a parameter.\n\n\nThis \nfont code\n is the value returned by the \nload_fnt()\n function by \nloading a new letter font stored in a \nfile FNT\n in the computer's memory.\n\n\nAfter having unloaded a font, \nmuch care must be taken\n not to go on using this font in the program. Otherwise, the program could crash.\n\n\nIt is not necessary to unload the font\n before finishing the \nprogram, as the system will do it automatically.\n\n\nThen, a font must be unloaded from the memory only when it is not going to be used for a specific time and when the aim is to free up the occupied space in the computer's memory to load other resources (other graphics files, sounds, fonts, etc.).  \n\n\nExample program\n\n\nPROGRAM example_unload_fnt;\n\nPRIVATE\n    font1;\n\nBEGIN\n    font1=load_fnt(\nhelp/help.fnt\n);\n    write(font1, 160, 0, 1, \nFONT LOADED FROM DISK\n);\n    write(0, 160, 190, 1, \nPress [ENTER] to unload the font and finish\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_fnt(font1); // The font is unloaded\nEND\n\n\n\n\nIn the example, the font stored in the \nhelp.fnt\n file is loaded with the \nload_fnt()\n function, storing the \nfont code\n returned by it in the \nfont1\n private variable.\n\n\nThis code is later used as a parameter of the \nwrite()\n function\nto put a text on screen with that font.\n\n\nThen, the program will wait in a loop for the ENTER key to be pressed. At that moment the font will be unloaded by using the \nunload_fnt()\n function and the program will finish.\n\n\n\n\nFont number 0, (the system font having 0 as font code),\n\ncan not be unloaded\n.\n\n\n\n\nSee: \nload_fnt()\n - \nwrite()\n - \nwrite_int()", 
            "title": "unload_fnt()"
        }, 
        {
            "location": "/unload_fnt()/#description", 
            "text": "Unloads from the memory the  font  (the  kind of letter  or the  set of graphic characters ) whose code is passed as a parameter.  This  font code  is the value returned by the  load_fnt()  function by \nloading a new letter font stored in a  file FNT  in the computer's memory.  After having unloaded a font,  much care must be taken  not to go on using this font in the program. Otherwise, the program could crash.  It is not necessary to unload the font  before finishing the \nprogram, as the system will do it automatically.  Then, a font must be unloaded from the memory only when it is not going to be used for a specific time and when the aim is to free up the occupied space in the computer's memory to load other resources (other graphics files, sounds, fonts, etc.).", 
            "title": "Description"
        }, 
        {
            "location": "/unload_fnt()/#example-program", 
            "text": "PROGRAM example_unload_fnt;\n\nPRIVATE\n    font1;\n\nBEGIN\n    font1=load_fnt( help/help.fnt );\n    write(font1, 160, 0, 1,  FONT LOADED FROM DISK );\n    write(0, 160, 190, 1,  Press [ENTER] to unload the font and finish );\n    REPEAT\n        FRAME;\n    UNTIL (key(_enter));\n\n    unload_fnt(font1); // The font is unloaded\nEND  In the example, the font stored in the  help.fnt  file is loaded with the  load_fnt()  function, storing the  font code  returned by it in the  font1  private variable.  This code is later used as a parameter of the  write()  function\nto put a text on screen with that font.  Then, the program will wait in a loop for the ENTER key to be pressed. At that moment the font will be unloaded by using the  unload_fnt()  function and the program will finish.   Font number 0, (the system font having 0 as font code), can not be unloaded .   See:  load_fnt()  -  write()  -  write_int()", 
            "title": "Example program"
        }, 
        {
            "location": "/set_volume()/", 
            "text": "set_volume(\n)\n\n\nDescription\n\n\nAdvanced function, only for very experienced users.\nAdjusts the different volume controls managed by the \nmixer\n of the system sound.\n\n\nTo adjust the volume, the following values of the \nsetup global structure\n must be set:\n\n\n**setup.master**   - General volume\n\n**setup.sound_fx** - Sound effects volume\n\n**setup.cd_audio** - CC-audio music volume\n\n\n\nThis function is normally used inside the sound setup programs (see \nsetup_program\n), or even in the rest of the programs, normally to adjust the CD_Audio music volume.\n\n\n\n\nTo activate the rest of the values of the setup structure (those referring to the sound card's parameters) the \nreset_sound()\n function must be called with the following defined values of the structure:\n\n\n**setup.card**\n\n**setup.port**\n\n**setup.irq**\n\n**setup.dma**\n\n**setup.dma2**\n\n\n\n\n\nSee: \nreset_sound()\n - \nSetup structure\n - \nsetup_program", 
            "title": "set_volume()"
        }, 
        {
            "location": "/set_volume()/#description", 
            "text": "Advanced function, only for very experienced users.\nAdjusts the different volume controls managed by the  mixer  of the system sound.  To adjust the volume, the following values of the  setup global structure  must be set:  **setup.master**   - General volume\n\n**setup.sound_fx** - Sound effects volume\n\n**setup.cd_audio** - CC-audio music volume  This function is normally used inside the sound setup programs (see  setup_program ), or even in the rest of the programs, normally to adjust the CD_Audio music volume.   To activate the rest of the values of the setup structure (those referring to the sound card's parameters) the  reset_sound()  function must be called with the following defined values of the structure:  **setup.card**\n\n**setup.port**\n\n**setup.irq**\n\n**setup.dma**\n\n**setup.dma2**   See:  reset_sound()  -  Setup structure  -  setup_program", 
            "title": "Description"
        }, 
        {
            "location": "/set_color()/", 
            "text": "set_volume(\ncolour\n,\n \nred\n,\n \ngreen\n,\n \nblue\n)\n\n\nDescription\n\n\nRedefines a colour of the palette. This function is used to modify the components\nof a colour of the game palette.\n\n\nYou must be very cautious with it, because all the graphics on the screen\nthat use this colour will be affected, to modify the colours of just one graphic\nuse the function \nconvert_palette()\n .\n\n\nThe \ncolour\n must be a number between \n0\n and \n255\n. The \ncomponents of the colour\n\nwill be specified as a number between \n0\n (minimum) and \n63\n (maximum).\n\n\nred\n   - red Component of the colour.\n\n\ngreen\n - green Component of the colour.\n\n\nblue\n  - blue Component of the colour.\n\n\nNow a program is shown which modifies randomly the colours of the palette.\n\n\nExample program\n\n\nPROGRAM example_set_colour;\nGLOBAL colour,r,g,b;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 2);\n    LOOP\n        colour=rand(1,255);\n        r=rand(0,63);\n        g=rand(0,63);\n        b=rand(0,63);\n\n        set_color(colour, r, g, b); // A colour of the palette is redefined.\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example a multicolour screen is placed as background and inside of the program \nmain loop, the component colours of the palette are modified randomly when the\nspace bar is pressed. To obtain random numbers use the function \nrand()\n.\n\n\n\n\nTo modify the entire palette, it is better to load a wholly different file palette with the\nfunction \nload_pal()\n.\n\n\n\n\nTo realise other palette effects, the function \nroll_palette()\n can be used, which \nallows you to make loops of changing colours, or the function \nfade()\n which allows you to realise\nmultiple fades and saturations of colour at different speeds.\n\n\n\n\nSee: \nroll_palette()\n - \nload_pal()\n - \nfade()\n - \nfade_off()\n - \nfade_on()", 
            "title": "set_color()"
        }, 
        {
            "location": "/set_color()/#description", 
            "text": "Redefines a colour of the palette. This function is used to modify the components\nof a colour of the game palette.  You must be very cautious with it, because all the graphics on the screen\nthat use this colour will be affected, to modify the colours of just one graphic\nuse the function  convert_palette()  .  The  colour  must be a number between  0  and  255 . The  components of the colour \nwill be specified as a number between  0  (minimum) and  63  (maximum).  red    - red Component of the colour.  green  - green Component of the colour.  blue   - blue Component of the colour.  Now a program is shown which modifies randomly the colours of the palette.", 
            "title": "Description"
        }, 
        {
            "location": "/set_color()/#example-program", 
            "text": "PROGRAM example_set_colour;\nGLOBAL colour,r,g,b;\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 2);\n    LOOP\n        colour=rand(1,255);\n        r=rand(0,63);\n        g=rand(0,63);\n        b=rand(0,63);\n\n        set_color(colour, r, g, b); // A colour of the palette is redefined.\n\n        FRAME;\n    END\nEND  In the example a multicolour screen is placed as background and inside of the program \nmain loop, the component colours of the palette are modified randomly when the\nspace bar is pressed. To obtain random numbers use the function  rand() .   To modify the entire palette, it is better to load a wholly different file palette with the\nfunction  load_pal() .   To realise other palette effects, the function  roll_palette()  can be used, which \nallows you to make loops of changing colours, or the function  fade()  which allows you to realise\nmultiple fades and saturations of colour at different speeds.   See:  roll_palette()  -  load_pal()  -  fade()  -  fade_off()  -  fade_on()", 
            "title": "Example program"
        }, 
        {
            "location": "/net_join_game()/", 
            "text": "net_join_game(\nname of the game\n,\n \nOFFSET structure\n,\n \nSIZEOF(structure)\n)\n\n\nReturns\n\n\nNumber of players in the game (0, 1, 2, ...). If there is an error, a negative\nnumber is returned, which is the error code:\n\n\n -1\n : Connection aborted by the user.\n\n\n -2\n : Can't start the connection.\n\n\n -3\n : The number of players doesn't fit.\n\n\n -4\n : There were errors of synchronisation.\n\n\nDescription\n\n\nThe net functions are of an extremely advanced level, so could be difficult to understand\nfor users with not enough experience in programming.\n\n\nFirst the predefined global structure \nnet\n must be initialised with the parameters\nthat define the type of connection which is going to be established.\n\n\nThen, a call to the function \nnet_join_game()\n will be enough to create a new game or to join\na game (if it is already created).\n\n\nThe name of the game (a literal, as \nMyGame\n), is used to differentiate a game from other games\nrunning at the same time on one local net. \n\n\nFrom that moment, every computer connected to the game will send and receive data from \nthe others automatically, through the net structure, indicated by the parameters.\n\n\nThe structure of data.\n\n\nThis must be a global structure of the program with as many registers as players\nthat are connected at the same time.\n\n\nIn the fields of the structure the sent data can be read and written to; each player\nmust input their values in their own register. The number which corresponds\nto the total number of players is returned by this function.\n\n\nThe system will automatically send their register values to the other players, and the registers\nof the others players to them.\n\n\nThe predefined structure net\n\n\nIn this structure are established the parameters which define the type of connection. The fields\nof this structure are :\n\n\nnet.device\n - Type of Connection Port  (1-IPX, 2-Serial link or 3-Modem).\n\n\nnet.com\n - N\u2551 of COM Port, from 1 to 4 (just for serial and modem).\n\n\nnet.speed\n - Connection Speed (in bauds), up to 115000 (just for serial and modem).\n\n\nnet.number\n - Telephone number (just modem), for example \nnet.number=\n913040622\n;\n.\n\n\nnet.init\n - Initialising string of the modem, for example \nnet.init=\nATZ\n;\n.\n\n\nnet.mode\n - 0 or 1 depending on whether the signals are pulses or tones (only for modem).\n\n\nnet.server\n - Indicates if it is the server (just reading, can't be modified).\n\n\nnet.max_players\n - Maximum number of players, from 2 to 16 (it must be the same as the number of registers to the global structure).\n\n\nnet.num_players\n - Current number of players, from 1 to 16 (players can connect and disconnect at any moment).\n\n\nWhen the connection is made by a serial link or modem, you may only connect \n2 players\n.\n\n\n\n\nIt's important that the register number of the structure used for the data transfer\nhas as many registers as that indicated in \nnet.max_players\n.\n\n\nFor example, if a game is created and the maximum number of players is 8,\nand the information which must be given to the players is just their coordinates (x,y),\nthen it could be done as is shown in the following program (supposing a IPX connection\nfor a local net).\n\n\nExample program\n\n\nPROGRAM example_net_join_game;\n\nGLOBAL\n  STRUCT player[7] // 8 players as maximum (from 0 to 7).\n    x,y;\n  END\n\n  id_red;\n\nBEGIN\n\n  net.device=1;\n  net.max_players=8; // Here, the number of registers is indicated.\n\n  // ...\n\n  id_red=net_join_game(\nxxx\n,OFFSET player, sizeof(player));\n\n  IF (id_red\n0)\n\n    // An error has been produced ...\n\n  END\n\n  // The register of this player is \nplayer[id_red]\n\n\n  player[id_red].x=x; // I Define my fields\n  player[id_red].y=y;\n\n  FRAME; // Sending / Reception of data\n\n  // Now there are connected \nnet.num_players\n, and their data has also been passed to \n  // the other registers of the structure player[].\n\n  // ...\n\nEND\n\n\n\n\nNote Further information can be found about how to structure a game over the internet in\n\n\nthe user's manual of DIV Games Studio.\n\n\n\n\nSee: \nnet_get_games()\n - \nSTRUCT net", 
            "title": "net_join_game()"
        }, 
        {
            "location": "/net_join_game()/#returns", 
            "text": "Number of players in the game (0, 1, 2, ...). If there is an error, a negative\nnumber is returned, which is the error code:   -1  : Connection aborted by the user.   -2  : Can't start the connection.   -3  : The number of players doesn't fit.   -4  : There were errors of synchronisation.", 
            "title": "Returns"
        }, 
        {
            "location": "/net_join_game()/#description", 
            "text": "The net functions are of an extremely advanced level, so could be difficult to understand\nfor users with not enough experience in programming.  First the predefined global structure  net  must be initialised with the parameters\nthat define the type of connection which is going to be established.  Then, a call to the function  net_join_game()  will be enough to create a new game or to join\na game (if it is already created).  The name of the game (a literal, as  MyGame ), is used to differentiate a game from other games\nrunning at the same time on one local net.   From that moment, every computer connected to the game will send and receive data from \nthe others automatically, through the net structure, indicated by the parameters.  The structure of data.  This must be a global structure of the program with as many registers as players\nthat are connected at the same time.  In the fields of the structure the sent data can be read and written to; each player\nmust input their values in their own register. The number which corresponds\nto the total number of players is returned by this function.  The system will automatically send their register values to the other players, and the registers\nof the others players to them.  The predefined structure net  In this structure are established the parameters which define the type of connection. The fields\nof this structure are :  net.device  - Type of Connection Port  (1-IPX, 2-Serial link or 3-Modem).  net.com  - N\u2551 of COM Port, from 1 to 4 (just for serial and modem).  net.speed  - Connection Speed (in bauds), up to 115000 (just for serial and modem).  net.number  - Telephone number (just modem), for example  net.number= 913040622 ; .  net.init  - Initialising string of the modem, for example  net.init= ATZ ; .  net.mode  - 0 or 1 depending on whether the signals are pulses or tones (only for modem).  net.server  - Indicates if it is the server (just reading, can't be modified).  net.max_players  - Maximum number of players, from 2 to 16 (it must be the same as the number of registers to the global structure).  net.num_players  - Current number of players, from 1 to 16 (players can connect and disconnect at any moment).  When the connection is made by a serial link or modem, you may only connect  2 players .   It's important that the register number of the structure used for the data transfer\nhas as many registers as that indicated in  net.max_players .  For example, if a game is created and the maximum number of players is 8,\nand the information which must be given to the players is just their coordinates (x,y),\nthen it could be done as is shown in the following program (supposing a IPX connection\nfor a local net).", 
            "title": "Description"
        }, 
        {
            "location": "/net_join_game()/#example-program", 
            "text": "PROGRAM example_net_join_game;\n\nGLOBAL\n  STRUCT player[7] // 8 players as maximum (from 0 to 7).\n    x,y;\n  END\n\n  id_red;\n\nBEGIN\n\n  net.device=1;\n  net.max_players=8; // Here, the number of registers is indicated.\n\n  // ...\n\n  id_red=net_join_game( xxx ,OFFSET player, sizeof(player));\n\n  IF (id_red 0)\n\n    // An error has been produced ...\n\n  END\n\n  // The register of this player is  player[id_red] \n\n  player[id_red].x=x; // I Define my fields\n  player[id_red].y=y;\n\n  FRAME; // Sending / Reception of data\n\n  // Now there are connected  net.num_players , and their data has also been passed to \n  // the other registers of the structure player[].\n\n  // ...\n\nEND", 
            "title": "Example program"
        }, 
        {
            "location": "/net_join_game()/#note-further-information-can-be-found-about-how-to-structure-a-game-over-the-internet-in", 
            "text": "the user's manual of DIV Games Studio.   See:  net_get_games()  -  STRUCT net", 
            "title": "Note Further information can be found about how to structure a game over the internet in"
        }, 
        {
            "location": "/net_get_games()/", 
            "text": "net_get_games()\n\n\nReturns\n\n\nActivated games of this game currently running.\n\n\nDescription\n\n\nreturns the number of live games currently being played of a particular game\n(to connections over local net).\nThis function is used to see if there is any live game at a determined moment.\n\n\nTo establish a connection, the function \nnet_join_game()\n is used, to create\na game or to connect to them.\n\n\nExample program\n\n\nPROGRAM example_net_get_games;\n\nGLOBAL\n  n;  // Active games.\n\nBEGIN\n  net.device=1; // set device to local LAN\n  // ...\n\n  n=net_get_games();\n\n  IF (n\n0)\n    // ...\n  END\n\n  //...\n\nEND\n\n\n\n\nJust is useful to IPX connections, it has no meaning in serial link or modem connections\n\n(because in these cases there can be just one game).\n\n\n\n\nSee: \nnet_join_game()\n - \n,STRUCT net", 
            "title": "net_get_games()"
        }, 
        {
            "location": "/net_get_games()/#returns", 
            "text": "Activated games of this game currently running.", 
            "title": "Returns"
        }, 
        {
            "location": "/net_get_games()/#description", 
            "text": "returns the number of live games currently being played of a particular game\n(to connections over local net).\nThis function is used to see if there is any live game at a determined moment.  To establish a connection, the function  net_join_game()  is used, to create\na game or to connect to them.", 
            "title": "Description"
        }, 
        {
            "location": "/net_get_games()/#example-program", 
            "text": "PROGRAM example_net_get_games;\n\nGLOBAL\n  n;  // Active games.\n\nBEGIN\n  net.device=1; // set device to local LAN\n  // ...\n\n  n=net_get_games();\n\n  IF (n 0)\n    // ...\n  END\n\n  //...\n\nEND  Just is useful to IPX connections, it has no meaning in serial link or modem connections \n(because in these cases there can be just one game).   See:  net_join_game()  -  ,STRUCT net", 
            "title": "Example program"
        }, 
        {
            "location": "/stop_mode8()/", 
            "text": "stop_mode8(\nnumber of m8\n)\n\n\nDescription\n\n\nEliminates the mode 8 window which number (from 0 to 9) is given as the parameter.\nThis \nnumber of m8\n is the one indicated as the first parameter in the function\n\nstart_mode8()\n, it is necessary to define the mode 8 window number as there \ncan be up to 10 different mode 8 windows, and the system needs to know which of them \nis being terminated.\n\n\n\n\nNote To create a mode 8 window is an advanced procedure and requires\n\n\nsome parameters to be set, as in this case the camera, some of them required\nby the function \nstart_mode8()\n and others are contained in the\n\nglobal m8 structure\n (such as the variable \nm8.camera\n).\n\n\n\n\nExample program\n\n\nPROGRAM example_stop_mode8;\n\nBEGIN\n  load_fpg(\nhelp/WLD_VIEW.FPG\n);\n  load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  go_to_flag(0);\n  write(0,0,0,0,\nPress ESC to finish ...\n);\n  REPEAT\n      FRAME;\n  UNTIL (key(_esc));\n\n  stop_mode8(0); // Eliminates the region number 0 of mode 8\n\nEND\n\n\n\n\nThis program shows an initiation example of a mode 8 region,\nloading the map contained in the file \nwld_view.prg\n, and starting a\nregion (the number \n0\n) with \nstart_mode8()\n function.\n\n\nThis program waits in a loop until it detects the \nESC\n key has been pressed,\nat which point it leaves the loop and then eliminates this region with the \nstop_mode8(0)\n function.\n\n\n\n\nSee: \nstart_mode8()\n - \n1411,STRUCT m8\n - \nload_wld()", 
            "title": "stop_mode8()"
        }, 
        {
            "location": "/stop_mode8()/#description", 
            "text": "Eliminates the mode 8 window which number (from 0 to 9) is given as the parameter.\nThis  number of m8  is the one indicated as the first parameter in the function start_mode8() , it is necessary to define the mode 8 window number as there \ncan be up to 10 different mode 8 windows, and the system needs to know which of them \nis being terminated.", 
            "title": "Description"
        }, 
        {
            "location": "/stop_mode8()/#note-to-create-a-mode-8-window-is-an-advanced-procedure-and-requires", 
            "text": "some parameters to be set, as in this case the camera, some of them required\nby the function  start_mode8()  and others are contained in the global m8 structure  (such as the variable  m8.camera ).", 
            "title": "Note To create a mode 8 window is an advanced procedure and requires"
        }, 
        {
            "location": "/stop_mode8()/#example-program", 
            "text": "PROGRAM example_stop_mode8;\n\nBEGIN\n  load_fpg( help/WLD_VIEW.FPG );\n  load_wld( help/WLD_VIEW.WLD ,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  go_to_flag(0);\n  write(0,0,0,0, Press ESC to finish ... );\n  REPEAT\n      FRAME;\n  UNTIL (key(_esc));\n\n  stop_mode8(0); // Eliminates the region number 0 of mode 8\n\nEND  This program shows an initiation example of a mode 8 region,\nloading the map contained in the file  wld_view.prg , and starting a\nregion (the number  0 ) with  start_mode8()  function.  This program waits in a loop until it detects the  ESC  key has been pressed,\nat which point it leaves the loop and then eliminates this region with the  stop_mode8(0)  function.   See:  start_mode8()  -  1411,STRUCT m8  -  load_wld()", 
            "title": "Example program"
        }, 
        {
            "location": "/xadvance()/", 
            "text": "xadvance(\nangle\n,\n \ndistance\n)\n\n\nDescription\n\n\nAdvances the process \nthe indicated angle\n as many points as \nthe indicated distance\n shows as parameter.\n\n\nThis function is equivalent to the function \nadvance()\n, if the \nangle\n is used as its first\nparameter.\n\n\nThe distance can be a negative number too, so the graphic of the process\nwill advance  (its coordinates \nx\n and \ny\n) in the opposite direction\nto this angle.\n\n\nExample program\n\n\nPROGRAM example_xadvance;\n\nPRIVATE\n  angle2;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    graph=101;\n    x=160;\n    y=100;\n    write(0, 0, 0, 0, \nUse the cursors to change the direction.\n);\n    LOOP\n        angle+=5000;\n        IF (key(_right)) angle2-=10000; END\n        IF (key(_left)) angle2+=10000; END\n\n        xadvance(angle2,4); // We advance the process to points\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis example will draw a triangle on screen which will rotate in the selected direction\nchosen with the cursors, independent of the orientation of the graphic on the screen\n(of visible angle). The program advances 5 degrees per frame in the direction\nselected by the cursors. \n\n\nRemember that the angle is specified in thousandths of a degree.\n\n\n\n\nSee: \nUse of the angles in the language\n - \nadvance()\n - \nget_distx()\n - \nget_disty()", 
            "title": "xadvance()"
        }, 
        {
            "location": "/xadvance()/#description", 
            "text": "Advances the process  the indicated angle  as many points as  the indicated distance  shows as parameter.  This function is equivalent to the function  advance() , if the  angle  is used as its first\nparameter.  The distance can be a negative number too, so the graphic of the process\nwill advance  (its coordinates  x  and  y ) in the opposite direction\nto this angle.", 
            "title": "Description"
        }, 
        {
            "location": "/xadvance()/#example-program", 
            "text": "PROGRAM example_xadvance;\n\nPRIVATE\n  angle2;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    graph=101;\n    x=160;\n    y=100;\n    write(0, 0, 0, 0,  Use the cursors to change the direction. );\n    LOOP\n        angle+=5000;\n        IF (key(_right)) angle2-=10000; END\n        IF (key(_left)) angle2+=10000; END\n\n        xadvance(angle2,4); // We advance the process to points\n\n        FRAME;\n    END\nEND  This example will draw a triangle on screen which will rotate in the selected direction\nchosen with the cursors, independent of the orientation of the graphic on the screen\n(of visible angle). The program advances 5 degrees per frame in the direction\nselected by the cursors.   Remember that the angle is specified in thousandths of a degree.   See:  Use of the angles in the language  -  advance()  -  get_distx()  -  get_disty()", 
            "title": "Example program"
        }, 
        {
            "location": "/char()/", 
            "text": "char(\nliteral\n)\n\n\nReturns\n\n\nThe \nASCII\n value of the (first) character contained in the literal parameter.\n\n\nDescription\n\n\nThis function \nchar()\n is used to obtain the ordinal value of a character.\n\n\nExample program\n\n\nPROGRAM example_char;\nPRIVATE value;\nBEGIN\n  // ..\n  value=\nA\n;       // The address of the literal \nA\n is assigned in memory.\n  // ..\n  value=char(\nA\n); // The ASCII value of \nA\n is assigned (65 in decimal).\n  // ..\nEND\n\n\n\n\nIn a program, the literals (texts between quotation marks) are translated as the\nmemory address which they have been allocated. To assign to one variable\na character (its ordinal value), instead of the address of the string,\nuse this function.\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "char()"
        }, 
        {
            "location": "/char()/#returns", 
            "text": "The  ASCII  value of the (first) character contained in the literal parameter.", 
            "title": "Returns"
        }, 
        {
            "location": "/char()/#description", 
            "text": "This function  char()  is used to obtain the ordinal value of a character.", 
            "title": "Description"
        }, 
        {
            "location": "/char()/#example-program", 
            "text": "PROGRAM example_char;\nPRIVATE value;\nBEGIN\n  // ..\n  value= A ;       // The address of the literal  A  is assigned in memory.\n  // ..\n  value=char( A ); // The ASCII value of  A  is assigned (65 in decimal).\n  // ..\nEND  In a program, the literals (texts between quotation marks) are translated as the\nmemory address which they have been allocated. To assign to one variable\na character (its ordinal value), instead of the address of the string,\nuse this function.  See:  strcpy()  -  strcat()  -  strlen()  -  strcmp()  -  strchr() \n-  strstr()  -  strset()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/path_find()/", 
            "text": "path_find(\nmode\n,\n \nfile\n,\n \ngraphic\n,\n \nsquare size\n,\n \nx\n,\n \ny\n, \nOFFSET structure\n,\n \nsizeof(structure)\n)\n\n\nReturns\n\n\nNumber of route points, or 0 if it doesn't find any.\n\n\nDescription\n\n\nFinds a route from the current coordinates of the process to a determined\npoint, dodging the defined obstacles in a searching map\n(in the user's manual, can be found information about these maps).\n\n\nThe mode.\n\n\nDefines the type of route searching mode, depending on the \nmode\n indicated\nas first parameter of the function.\n\n\n0\n - Searching less precise and faster.\n\n\n1\n - Searching more precise, but slower.\n\n\nThe searching map.\n\n\nThe \nfile\n and \ngraphic\n codes, are related to the searching map. This\nis a simplified version of the real scenario, where the free zones appear as\na \nblack colour\n(the number 0 of the palette) and the obstacles appear as a \n\nwhite colour\n shape.\n\n\nThe \nsquare size\n indicates the reduction factor of the searching map,\nhow much the width and height of the map must be multiplied to be shown \nat real size. For example, if a searching map of 160x100 is generated for\na 320x200 screen, the square size will be 2.\n\n\nThe route points.\n\n\nNow must be indicated the coordinates \nx\n and \ny\n where the process must\ngo (the origin is taken as the initial coordinates of the process which\nexecutes the function \npath_find()\n).\n\n\nThis function returns a group of structure points, which are the\npoints that form the route from the origin to the destination point.\n\n\nTo do this, a structure must be declared which contains two fields (x,y),\nand as many registers as points that comprise the calculated route.\n\n\nThe two last parameters of the function contain, the address (\nOFFSET\n) of\nthis structure and its size (\nSIZEOF()\n), so the coordinates contained in this \nstructure can be passed back to the function as the results.\n\n\n\n\nExample program\n\n\nPROGRAM example_path_find;\n\nGLOBAL\n    num_points;\n    STRUCT points[100]\n      x,y;\n    END\n    index;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 7);\n    graph=200;\n    mouse.graph=200;\n    LOOP\n\n        // Obtains the route to the mouse's coordinates\n\n        num_points=path_find(0,0,201,2,mouse.x,mouse.y,OFFSET points,sizeof(points));\n\n        // If a route was obtained, it shows the route and advances to the destination\n\n        IF (num_points\n0)\n            FOR (index=0;index\nnum_points-1;index++)\n                draw(1,24,15,0,points[index].x,points[index].y,points[index+1].x,points[index+1].y);\n            END\n            IF (fget_dist(x,y,points[0].x,points[0].y)\n4)\n                xadvance(fget_angle(x,y,points[0].x,points[0].y),4);\n            ELSE\n                x=points[0].x;\n                y=points[0].y;\n            END\n            draw(1,24,15,0,x,y,points[0].x,points[0].y);\n        END\n\n        FRAME;\n        delete_draw(all_drawing);\n    END\nEND\n\n\n\n\nIn this example the \ngraphic number 7\n of the file \nhelp.fpg\n is used as the\nscenario, and the \ngraphic number 201\n of the same file as its \nsearching map\n.\n\n\nThe square size of the searching map is \n2\n\n\nThe main process is continuously finding a route to the mouse cursor\nwith the function \npath_find()\n.\n\n\nThe different segments of this route are shown with lines using the\nfunction \ndraw()\n, and the coordinates are incremented\nwith the function \nxadvance()\n.\n\n\nTo obtain the distance and the angle to the next point of the route the \nfunctions \nfget_dist()\n and \nfget_angle()\n are used.\n\n\n\n\nTo see if it's possible to go directly in a straight line between two points (without\npassing through any obstacle) the function \npath_line()\n can be used.\n\n\nThe function \npath_free()\n determines if a particular point of the map\nis an obstacle or if it is a free point (accessible).\n\n\n\n\nSee: \npath_line()\n - \npath_free()", 
            "title": "path_find()"
        }, 
        {
            "location": "/path_find()/#returns", 
            "text": "Number of route points, or 0 if it doesn't find any.", 
            "title": "Returns"
        }, 
        {
            "location": "/path_find()/#description", 
            "text": "Finds a route from the current coordinates of the process to a determined\npoint, dodging the defined obstacles in a searching map\n(in the user's manual, can be found information about these maps).  The mode.  Defines the type of route searching mode, depending on the  mode  indicated\nas first parameter of the function.  0  - Searching less precise and faster.  1  - Searching more precise, but slower.  The searching map.  The  file  and  graphic  codes, are related to the searching map. This\nis a simplified version of the real scenario, where the free zones appear as\na  black colour (the number 0 of the palette) and the obstacles appear as a  white colour  shape.  The  square size  indicates the reduction factor of the searching map,\nhow much the width and height of the map must be multiplied to be shown \nat real size. For example, if a searching map of 160x100 is generated for\na 320x200 screen, the square size will be 2.  The route points.  Now must be indicated the coordinates  x  and  y  where the process must\ngo (the origin is taken as the initial coordinates of the process which\nexecutes the function  path_find() ).  This function returns a group of structure points, which are the\npoints that form the route from the origin to the destination point.  To do this, a structure must be declared which contains two fields (x,y),\nand as many registers as points that comprise the calculated route.  The two last parameters of the function contain, the address ( OFFSET ) of\nthis structure and its size ( SIZEOF() ), so the coordinates contained in this \nstructure can be passed back to the function as the results.", 
            "title": "Description"
        }, 
        {
            "location": "/path_find()/#example-program", 
            "text": "PROGRAM example_path_find;\n\nGLOBAL\n    num_points;\n    STRUCT points[100]\n      x,y;\n    END\n    index;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 7);\n    graph=200;\n    mouse.graph=200;\n    LOOP\n\n        // Obtains the route to the mouse's coordinates\n\n        num_points=path_find(0,0,201,2,mouse.x,mouse.y,OFFSET points,sizeof(points));\n\n        // If a route was obtained, it shows the route and advances to the destination\n\n        IF (num_points 0)\n            FOR (index=0;index num_points-1;index++)\n                draw(1,24,15,0,points[index].x,points[index].y,points[index+1].x,points[index+1].y);\n            END\n            IF (fget_dist(x,y,points[0].x,points[0].y) 4)\n                xadvance(fget_angle(x,y,points[0].x,points[0].y),4);\n            ELSE\n                x=points[0].x;\n                y=points[0].y;\n            END\n            draw(1,24,15,0,x,y,points[0].x,points[0].y);\n        END\n\n        FRAME;\n        delete_draw(all_drawing);\n    END\nEND  In this example the  graphic number 7  of the file  help.fpg  is used as the\nscenario, and the  graphic number 201  of the same file as its  searching map .  The square size of the searching map is  2  The main process is continuously finding a route to the mouse cursor\nwith the function  path_find() .  The different segments of this route are shown with lines using the\nfunction  draw() , and the coordinates are incremented\nwith the function  xadvance() .  To obtain the distance and the angle to the next point of the route the \nfunctions  fget_dist()  and  fget_angle()  are used.   To see if it's possible to go directly in a straight line between two points (without\npassing through any obstacle) the function  path_line()  can be used.  The function  path_free()  determines if a particular point of the map\nis an obstacle or if it is a free point (accessible).   See:  path_line()  -  path_free()", 
            "title": "Example program"
        }, 
        {
            "location": "/path_line()/", 
            "text": "path_line(\nfile\n,\n \ngraphic\n,\n \nsquare size\n,\n \nx\n,\n \ny\n)\n\n\nReturns\n\n\nTrue (1)\n, if it is possible to go from one point to another without\ngoing through any obstacle, or \nfalse (0)\n if not.\n\n\nDescription\n\n\nIt determines if, inside of a searching map, you can go in a straight line up to a point\n(starting from the current coordinates of the process), without passing through any \nobstacle of the searching map (in the user's handbook you can find information about\nthese maps).\n\n\nIn case of wanting to obtain a path between two points that dodges all the obstacles ,\nuse the function \npath_find()\n, and to see if the destination point\nis inside of an obstacle, use the function \npath_free()\n.\n\n\nThe searching map.\n\n\nThe \nfile\n and \ngraphic\n codes, are related to the searching map. This\nis a simplified version of the real scenario, where the free zones appear as\na \nblack colour\n(the number 0 of the palette) and the obstacles appear as a \n\nwhite colour\n shape.\n\n\nThe \nsquare size\n indicates the reduction factor of the searching map,\nhow much the width and height of the map must be multiplied to be shown \nat real size. For example, if a searching map of 160x100 is generated for\na 320x200 screen, the square size will be 2.\n\n\nThe route points.\n\n\nNow must be indicated the coordinates \nx\n and \ny\n where the process must\ngo (the origin is taken as the initial coordinates of the process which\nexecutes the function \npath_find()\n).\n\n\n\n\nExample program\n\n\nPROGRAM example_path_line;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 7);\n    graph=200;\n    mouse.graph=200;\n    LOOP\n\n        // It checks if you can go in a straight line to the mouse\n\n        IF (path_line(0,201,2,mouse.x,mouse.y))\n\n            IF (fget_dist(x,y,mouse.x,mouse.y)\n4)\n                xadvance(fget_angle(x,y,mouse.x,mouse.y),4);\n                draw(1,24,15,0,x,y,mouse.x,mouse.y);\n            ELSE\n                x=mouse.x;\n                y=mouse.y;\n            END\n        END\n\n        FRAME;\n        delete_draw(all_drawing);\n    END\nEND\n\n\n\n\nIn this example the \ngraphic number 7\n of the file \nhelp.fpg\nis used as the\nscenario, and the \ngraphic number 201\n of the same file is used  as its \nsearching map\n.\n\n\nThe square size in the searching map is \n2\n.\n\n\nThe main process is continuously checking if you can go in a straight line\nto the mouse coordinates with the function \npath_line()\n. If this is\npossible, a line is traced with the function \ndraw()\n, and the process \ncoordinates advance in this direction with the function \nxadvance()\n.\n\n\nTo obtain the distance and the angle to the mouse cursor the\nfunctions \nfget_dist()\n and \nfget_angle()\n are used.\n\n\n\n\nSee: \npath_find()\n - \npath_free()", 
            "title": "path_line()"
        }, 
        {
            "location": "/path_line()/#returns", 
            "text": "True (1) , if it is possible to go from one point to another without\ngoing through any obstacle, or  false (0)  if not.", 
            "title": "Returns"
        }, 
        {
            "location": "/path_line()/#description", 
            "text": "It determines if, inside of a searching map, you can go in a straight line up to a point\n(starting from the current coordinates of the process), without passing through any \nobstacle of the searching map (in the user's handbook you can find information about\nthese maps).  In case of wanting to obtain a path between two points that dodges all the obstacles ,\nuse the function  path_find() , and to see if the destination point\nis inside of an obstacle, use the function  path_free() .  The searching map.  The  file  and  graphic  codes, are related to the searching map. This\nis a simplified version of the real scenario, where the free zones appear as\na  black colour (the number 0 of the palette) and the obstacles appear as a  white colour  shape.  The  square size  indicates the reduction factor of the searching map,\nhow much the width and height of the map must be multiplied to be shown \nat real size. For example, if a searching map of 160x100 is generated for\na 320x200 screen, the square size will be 2.  The route points.  Now must be indicated the coordinates  x  and  y  where the process must\ngo (the origin is taken as the initial coordinates of the process which\nexecutes the function  path_find() ).", 
            "title": "Description"
        }, 
        {
            "location": "/path_line()/#example-program", 
            "text": "PROGRAM example_path_line;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 7);\n    graph=200;\n    mouse.graph=200;\n    LOOP\n\n        // It checks if you can go in a straight line to the mouse\n\n        IF (path_line(0,201,2,mouse.x,mouse.y))\n\n            IF (fget_dist(x,y,mouse.x,mouse.y) 4)\n                xadvance(fget_angle(x,y,mouse.x,mouse.y),4);\n                draw(1,24,15,0,x,y,mouse.x,mouse.y);\n            ELSE\n                x=mouse.x;\n                y=mouse.y;\n            END\n        END\n\n        FRAME;\n        delete_draw(all_drawing);\n    END\nEND  In this example the  graphic number 7  of the file  help.fpg is used as the\nscenario, and the  graphic number 201  of the same file is used  as its  searching map .  The square size in the searching map is  2 .  The main process is continuously checking if you can go in a straight line\nto the mouse coordinates with the function  path_line() . If this is\npossible, a line is traced with the function  draw() , and the process \ncoordinates advance in this direction with the function  xadvance() .  To obtain the distance and the angle to the mouse cursor the\nfunctions  fget_dist()  and  fget_angle()  are used.   See:  path_find()  -  path_free()", 
            "title": "Example program"
        }, 
        {
            "location": "/path_free()/", 
            "text": "path_free(\nfile\n,\n \ngraphic\n,\n \nsquare size\n,\n \nx\n,\n \ny\n)\n\n\nReturns\n\n\nTrue (1)\n, if the point in a searching map is free (is not an obstacle), or\n\nfalse (0)\n if not.\n\n\nDescription\n\n\nDetermines if, inside of a searching map, the coordinates are placed\nin an accessible zone, not overlapping with any obstacle (in the user's manual\ncan be found information about these searching maps).\n\n\nIn case of wanting to obtain a route to dodge the obstacles between two points\nthe function \npath_find()\n must be used, and to see if it can go to a\npoint in a straight line without passing through any obstacle use the function \npath_line()\n.\n\n\nThe searching map.\n\n\nThe \nfile\n and \ngraphic\n codes, are related to the searching map. This\nis a simplified version of the real scenario, where the free zones appear as\na \nblack colour\n(the number 0 of the palette) and the obstacles appear as a \n\nwhite colour\n shape.\n\n\nThe \nsquare size\n indicates the reduction factor of the searching map,\nhow much the width and height of the map must be multiplied to be shown \nat real size. For example, if a searching map of 160x100 is generated for\na 320x200 screen, the square size will be 2.\n\n\nNow the coordinates \nx\n and \ny\n to be referenced must be indicated .\n\n\n\n\nExample program\n\n\nPROGRAM example_path_free;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 7);\n    mouse.graph=200;\n    mouse.size=400;\n    LOOP\n\n        // Checks if the mouse is in an accessible zone\n\n        IF (path_free(0,201,2,mouse.x,mouse.y))\n            mouse.angle+=5000;\n        END\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example the \ngraphic number 7\n of the file \nhelp.fpg\n is used as\nthe scenario, and the \ngraphic number 201\n of the same file as its \nsearching map\n.\nthe square size of the searching map is \n2\n\n\nThe main process is continuously checking, with the function \npath_free()\n,\nif the mouse cursor is in a free zone, or over an obstacle.\n\n\nWhen the cursor is in a free zone, out of any obstacle, the cursor graphic\nwill rotate.\n\n\n\n\nSee: \npath_find()\n - \npath_find()", 
            "title": "path_free()"
        }, 
        {
            "location": "/path_free()/#returns", 
            "text": "True (1) , if the point in a searching map is free (is not an obstacle), or false (0)  if not.", 
            "title": "Returns"
        }, 
        {
            "location": "/path_free()/#description", 
            "text": "Determines if, inside of a searching map, the coordinates are placed\nin an accessible zone, not overlapping with any obstacle (in the user's manual\ncan be found information about these searching maps).  In case of wanting to obtain a route to dodge the obstacles between two points\nthe function  path_find()  must be used, and to see if it can go to a\npoint in a straight line without passing through any obstacle use the function  path_line() .  The searching map.  The  file  and  graphic  codes, are related to the searching map. This\nis a simplified version of the real scenario, where the free zones appear as\na  black colour (the number 0 of the palette) and the obstacles appear as a  white colour  shape.  The  square size  indicates the reduction factor of the searching map,\nhow much the width and height of the map must be multiplied to be shown \nat real size. For example, if a searching map of 160x100 is generated for\na 320x200 screen, the square size will be 2.  Now the coordinates  x  and  y  to be referenced must be indicated .", 
            "title": "Description"
        }, 
        {
            "location": "/path_free()/#example-program", 
            "text": "PROGRAM example_path_free;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 7);\n    mouse.graph=200;\n    mouse.size=400;\n    LOOP\n\n        // Checks if the mouse is in an accessible zone\n\n        IF (path_free(0,201,2,mouse.x,mouse.y))\n            mouse.angle+=5000;\n        END\n\n        FRAME;\n    END\nEND  In this example the  graphic number 7  of the file  help.fpg  is used as\nthe scenario, and the  graphic number 201  of the same file as its  searching map .\nthe square size of the searching map is  2  The main process is continuously checking, with the function  path_free() ,\nif the mouse cursor is in a free zone, or over an obstacle.  When the cursor is in a free zone, out of any obstacle, the cursor graphic\nwill rotate.   See:  path_find()  -  path_find()", 
            "title": "Example program"
        }, 
        {
            "location": "/new_map()/", 
            "text": "new_map(\nwidth\n,\n \nheight\n,\n \ncentre x\n,\n \ncentre y\n,\n \ncolour\n)\n\n\nReturns\n\n\nThe \ncode of the graphic\n created.\n\n\nDescription\n\n\nCreates a new map in memory (without loading it from an file of the disk).\n\n\nTo do this, the function requires the \nwidth\n and \nheight\n (in pixels) of the map\nthat must be created, a central point (of the same) in \ncentre x\n and \ncentre y\n,\nand the colour with which the map will be initially filled (the number of the colour\ninside of the active palette, from 0 to 255).\n\n\nThis function acts similarly to the function \nload_map()\n, except that an file\ngraphic from the disk is not loaded, and the graphic created is a solid graphic of just one\ncolour.\n\n\nThe value returned is the \ncode of the graphic\n, which is a numeric value\nwhich must be specified to use the graphic, in the variable\n\ngraph\n or, in general, in every function which requires a \ncode of graphic\n\nin its parameters.\n\n\n\n\nImportant\n\n\nWhen, inside of a function, the \ncode of file\n which belongs\nto the graphic is required , you must be indicate the code \n0\n (which is the code of the\nfirst \nfile FPG\n that is loaded in the program).\n\n\n\n\nExample program\n\n\nPROGRAM example_new_map;\n\nBEGIN\n\n    // Is created a map of 16x32 points\n    // with its centre in the point (0,0)\n    // and with the colour 15 of the palette\n\n    mouse.graph = new_map(16,32,0,0,15); // Is assigned as mouse cursor\n\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\n\n    unload_map(mouse.graph); // And finally the graphic is deleted \nEND\n\n\n\n\nIn the example a map is created with the function \nnew_map()\n and is saved as \nthe \ncode of the graphic\n which is returned in the variable \nmouse.graph\n, as \nthe mouse cursor.\n\n\nPressing the \nESC\n key takes you out of the loop of the program and\nthe graphic will be deleted with the function \nunload_map()\n (exactly the same\nas if it were loaded from an file).\n\n\n\n\nThe function \nunload_map()\n frees up the computer memory used\nby the graphic when it is used no more, and due to that\nthe \ncode of the graphic\n is also required to know which graphic is the one\nthat is to be deleted from memory.\n\n\nIt is not necessary to delete the graphic from memory\n before exiting the\nprogram, because the system will do that automatically.\n\n\n\n\nSee: \nload_map/pcx()\n - \nunload_map/pcx()\n - \ngraph", 
            "title": "new_map()"
        }, 
        {
            "location": "/new_map()/#returns", 
            "text": "The  code of the graphic  created.", 
            "title": "Returns"
        }, 
        {
            "location": "/new_map()/#description", 
            "text": "Creates a new map in memory (without loading it from an file of the disk).  To do this, the function requires the  width  and  height  (in pixels) of the map\nthat must be created, a central point (of the same) in  centre x  and  centre y ,\nand the colour with which the map will be initially filled (the number of the colour\ninside of the active palette, from 0 to 255).  This function acts similarly to the function  load_map() , except that an file\ngraphic from the disk is not loaded, and the graphic created is a solid graphic of just one\ncolour.  The value returned is the  code of the graphic , which is a numeric value\nwhich must be specified to use the graphic, in the variable graph  or, in general, in every function which requires a  code of graphic \nin its parameters.", 
            "title": "Description"
        }, 
        {
            "location": "/new_map()/#important", 
            "text": "When, inside of a function, the  code of file  which belongs\nto the graphic is required , you must be indicate the code  0  (which is the code of the\nfirst  file FPG  that is loaded in the program).", 
            "title": "Important"
        }, 
        {
            "location": "/new_map()/#example-program", 
            "text": "PROGRAM example_new_map;\n\nBEGIN\n\n    // Is created a map of 16x32 points\n    // with its centre in the point (0,0)\n    // and with the colour 15 of the palette\n\n    mouse.graph = new_map(16,32,0,0,15); // Is assigned as mouse cursor\n\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\n\n    unload_map(mouse.graph); // And finally the graphic is deleted \nEND  In the example a map is created with the function  new_map()  and is saved as \nthe  code of the graphic  which is returned in the variable  mouse.graph , as \nthe mouse cursor.  Pressing the  ESC  key takes you out of the loop of the program and\nthe graphic will be deleted with the function  unload_map()  (exactly the same\nas if it were loaded from an file).   The function  unload_map()  frees up the computer memory used\nby the graphic when it is used no more, and due to that\nthe  code of the graphic  is also required to know which graphic is the one\nthat is to be deleted from memory.  It is not necessary to delete the graphic from memory  before exiting the\nprogram, because the system will do that automatically.   See:  load_map/pcx()  -  unload_map/pcx()  -  graph", 
            "title": "Example program"
        }, 
        {
            "location": "/load_wld()/", 
            "text": "load_wld(\nArchive number\n,\n \nfile\n)\n\n\nDescription\n\n\nIt loads a \nmode 8 map\n in a program. These maps are saved in the files\nwith the extension WLD, and are created with the map's 3D menu (in the user's manual\ncan be found further information on how to construct these maps).\n\n\nThe parameters required are the \nname of file\n which contains the map in\nWLD format, and the code of the \nfile\n which contains the file's textures.\nThis file with the textures of the map needs to be previously loaded in \nthe program with the function \nload_fpg()\n.\n\n\nOnce the map is loaded, a region of mode 8 screen must be initiated with\nthe function \nstart_mode8()\n. The functioning is quite similar to the mode 7\nwhich shows a graphic in a folded plane (see \nstart_mode7()\n).\n\n\nExample program\n\n\nPROGRAM example_load_wld;\n\nGLOBAL\n    fpgfile;\n\nBEGIN\n  set_mode(m640x480);\n  set_fps(70,0);\n  fpgfile = load_fpg(\nhelp/WLD_VIEW.FPG\n);\n\n  load_wld(\nhelp/WLD_VIEW.WLD\n,file); // Loads a file WLD\n\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  height=64;\n  radius=64;\n  m8.height=32;\n  go_to_flag(0);\n  LOOP\n    IF (key(_right)) angle-=5000; END\n    IF (key(_left))  angle+=5000; END\n    IF (key(_up))    advance(24); END\n    IF (key(_down))  advance(-9); END\n    IF (key(_q))     z+=16;       END\n    IF (key(_a))     z-=16;       END\n    IF (key(_w))     m8.angle+=8; END\n    IF (key(_s))     m8.angle-=8; END\n    FRAME;\n  END\nEND\n\n\n\n\nThis program shows an initiation example of a mode 8 region,\nloading the map contained in the file \nwld_view.prg\n, and whose texture is\nfound in the file \nwld_view.fpg\n.\n\n\n\n\nSee: \nstart_mode8()\n - \ngo_to_flag()\n - \nload_fpg()", 
            "title": "load_wld()"
        }, 
        {
            "location": "/load_wld()/#description", 
            "text": "It loads a  mode 8 map  in a program. These maps are saved in the files\nwith the extension WLD, and are created with the map's 3D menu (in the user's manual\ncan be found further information on how to construct these maps).  The parameters required are the  name of file  which contains the map in\nWLD format, and the code of the  file  which contains the file's textures.\nThis file with the textures of the map needs to be previously loaded in \nthe program with the function  load_fpg() .  Once the map is loaded, a region of mode 8 screen must be initiated with\nthe function  start_mode8() . The functioning is quite similar to the mode 7\nwhich shows a graphic in a folded plane (see  start_mode7() ).", 
            "title": "Description"
        }, 
        {
            "location": "/load_wld()/#example-program", 
            "text": "PROGRAM example_load_wld;\n\nGLOBAL\n    fpgfile;\n\nBEGIN\n  set_mode(m640x480);\n  set_fps(70,0);\n  fpgfile = load_fpg( help/WLD_VIEW.FPG );\n\n  load_wld( help/WLD_VIEW.WLD ,file); // Loads a file WLD\n\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  height=64;\n  radius=64;\n  m8.height=32;\n  go_to_flag(0);\n  LOOP\n    IF (key(_right)) angle-=5000; END\n    IF (key(_left))  angle+=5000; END\n    IF (key(_up))    advance(24); END\n    IF (key(_down))  advance(-9); END\n    IF (key(_q))     z+=16;       END\n    IF (key(_a))     z-=16;       END\n    IF (key(_w))     m8.angle+=8; END\n    IF (key(_s))     m8.angle-=8; END\n    FRAME;\n  END\nEND  This program shows an initiation example of a mode 8 region,\nloading the map contained in the file  wld_view.prg , and whose texture is\nfound in the file  wld_view.fpg .   See:  start_mode8()  -  go_to_flag()  -  load_fpg()", 
            "title": "Example program"
        }, 
        {
            "location": "/start_mode8()/", 
            "text": "start_mode8(\ncamera identifier\n,\n \nnumber of m8\n,\n \nnumber of region\n)\n\n\nDescription\n\n\nThis is an advanced function that requires the user to have a certain\namount of experience to use it.\n\n\nIt creates a window with a mode 8, which generates a three-dimensional map.\n\nFirst the map must be loaded with the \nload_wld()\n function\n and then,\nthe following parameters of this function need defining.\n\n\ncamera identifier\n - \nIdentifier code\n of the process\nin which the mode 8 camera will be placed, the camera will be placed\nat the coordinates \n(x,y)\n, at height \n(z)\n and looking in the indicated\ndirection  defined by \n(angle)\n (these are \nlocal data predefined\n for the\nprocess).\n\n\nnumber of m8\n - Up to 10 mode 8 windows can be created on screen, \nnumbered from \n0\n to \n9\n; if just one is created, then define this as \nnumber \n0\n. This number will be needed to modify\nthe parameters of the window, because the system needs to know which one\nof the \n10\n possible mode 8 windows you wish to modify.\n\n\nnumber of region\n - Here will be indicated the rectangular region of the screen\nwhere the mode 8 is going to be shown. If the number of the region indicated is \n0\n , \nit will be shown full screen. Other regions must be defined\npreviously with the function \ndefine_region()\n (a \nregion\n is just a\nrectangular zone of the screen).\n\n\nNote The functioning is very similar to the mode 7 which shows a folded plane\n\n\n(see \nstart_mode7()\n).\n\n\n\n\nApart from the call to the function, some values of the\n \nglobal m8 structure\n \nmust be initiated \nfor the window to function correctly\n.\nThis is a structure of 10 registers (one for each possible mode 8 window)\nand each register has the following fields:\n\n\ncamera\n   - \nIdentifier code\n of the camera\n\n\nheight\n   - Height of the camera in relation to the process\n\n\nangle\n    - Vertical angle of the camera (-128,128)\n\n\nz\n        - Plane of depth (priority of impression of the region)\n\n\nThe field \ncamera\n is \nessential\n,as that is asked as one of the calling parameters\nof the function \nstart_mode8()\n because, without this field, the window can't determine \nthe viewpoint from which the map will be initially viewed.\n\n\n\n\nExample program\n\n\nPROGRAM example_start_mode8;\n\nGLOBAL\n    fpgfile;\n\nBEGIN\n  set_mode(m640x480);\n  set_fps(70,0);\n  fpgfile = load_fpg(\nhelp/WLD_VIEW.FPG\n);\n  load_wld(\nhelp/WLD_VIEW.WLD\n,file);\n\n  start_mode8(id,0,0); // Starts a mode 8 region\n\n  ctype=c_m8;\n  height=64;\n  radius=64;\n  m8.height=32;\n  go_to_flag(0);\n  LOOP\n      IF (key(_right)) angle-=5000; END\n      IF (key(_left))  angle+=5000; END\n      IF (key(_up))    advance(24); END\n      IF (key(_down))  advance(-9); END\n      IF (key(_q))     z+=16;       END\n      IF (key(_a))     z-=16;       END\n      IF (key(_w))     m8.angle+=8; END\n      IF (key(_s))     m8.angle-=8; END\n      FRAME;\n  END\nEND\n\n\n\n\nThis program shows an initiation example of a mode 8 region, loading\nthe file \nwld_view.prg\n, and whose textures are found in the\nfile \nwld_view.fpg\n.\n\n\n\n\nTo create a process where a graphic is displayed in the mode 8 region, \nits local variable \nctype\n must be defined as well as \nc_m8\n\n(\ntype of coordinate\n as the \ncoordinate of mode 8\n).\n\n\nWhen a process is in a mode 8 region its variables \nx\n and \ny\n\nwill be related to the point inside of the map sector (WLD), and the variable\n\nz\n will indicate the height.\n\n\nIf there are several \nmode 8\n windows, the process will by default be seen \nin all of them, if the process is wanted to be seen in just some of them, the local\nvariable \ncnumber\n must be defined.\n\n\nFor a process to have many graphics (many views), depending on the\nangle from which it is going to be viewed, you must define \nthe local variable of the graphic \nxgraph\n (instead of the variable \ngraph\n).\n\n\n\n\nNote To eliminate a mode 8 region you must be use the function\n\n\nstop_mode8()\n, indicating the \nnumber of m8\n.\n\n\n\n\nSee: \nSTRUCT m8\n - \nload_wld()\n - \ngo_to_flag()\n - \nstop_mode8()", 
            "title": "start_mode8()"
        }, 
        {
            "location": "/start_mode8()/#description", 
            "text": "This is an advanced function that requires the user to have a certain\namount of experience to use it.  It creates a window with a mode 8, which generates a three-dimensional map. First the map must be loaded with the  load_wld()  function  and then,\nthe following parameters of this function need defining.  camera identifier  -  Identifier code  of the process\nin which the mode 8 camera will be placed, the camera will be placed\nat the coordinates  (x,y) , at height  (z)  and looking in the indicated\ndirection  defined by  (angle)  (these are  local data predefined  for the\nprocess).  number of m8  - Up to 10 mode 8 windows can be created on screen, \nnumbered from  0  to  9 ; if just one is created, then define this as \nnumber  0 . This number will be needed to modify\nthe parameters of the window, because the system needs to know which one\nof the  10  possible mode 8 windows you wish to modify.  number of region  - Here will be indicated the rectangular region of the screen\nwhere the mode 8 is going to be shown. If the number of the region indicated is  0  , \nit will be shown full screen. Other regions must be defined\npreviously with the function  define_region()  (a  region  is just a\nrectangular zone of the screen).", 
            "title": "Description"
        }, 
        {
            "location": "/start_mode8()/#note-the-functioning-is-very-similar-to-the-mode-7-which-shows-a-folded-plane", 
            "text": "(see  start_mode7() ).   Apart from the call to the function, some values of the   global m8 structure  \nmust be initiated  for the window to function correctly .\nThis is a structure of 10 registers (one for each possible mode 8 window)\nand each register has the following fields:  camera    -  Identifier code  of the camera  height    - Height of the camera in relation to the process  angle     - Vertical angle of the camera (-128,128)  z         - Plane of depth (priority of impression of the region)  The field  camera  is  essential ,as that is asked as one of the calling parameters\nof the function  start_mode8()  because, without this field, the window can't determine \nthe viewpoint from which the map will be initially viewed.", 
            "title": "Note The functioning is very similar to the mode 7 which shows a folded plane"
        }, 
        {
            "location": "/start_mode8()/#example-program", 
            "text": "PROGRAM example_start_mode8;\n\nGLOBAL\n    fpgfile;\n\nBEGIN\n  set_mode(m640x480);\n  set_fps(70,0);\n  fpgfile = load_fpg( help/WLD_VIEW.FPG );\n  load_wld( help/WLD_VIEW.WLD ,file);\n\n  start_mode8(id,0,0); // Starts a mode 8 region\n\n  ctype=c_m8;\n  height=64;\n  radius=64;\n  m8.height=32;\n  go_to_flag(0);\n  LOOP\n      IF (key(_right)) angle-=5000; END\n      IF (key(_left))  angle+=5000; END\n      IF (key(_up))    advance(24); END\n      IF (key(_down))  advance(-9); END\n      IF (key(_q))     z+=16;       END\n      IF (key(_a))     z-=16;       END\n      IF (key(_w))     m8.angle+=8; END\n      IF (key(_s))     m8.angle-=8; END\n      FRAME;\n  END\nEND  This program shows an initiation example of a mode 8 region, loading\nthe file  wld_view.prg , and whose textures are found in the\nfile  wld_view.fpg .   To create a process where a graphic is displayed in the mode 8 region, \nits local variable  ctype  must be defined as well as  c_m8 \n( type of coordinate  as the  coordinate of mode 8 ).  When a process is in a mode 8 region its variables  x  and  y \nwill be related to the point inside of the map sector (WLD), and the variable z  will indicate the height.  If there are several  mode 8  windows, the process will by default be seen \nin all of them, if the process is wanted to be seen in just some of them, the local\nvariable  cnumber  must be defined.  For a process to have many graphics (many views), depending on the\nangle from which it is going to be viewed, you must define \nthe local variable of the graphic  xgraph  (instead of the variable  graph ).", 
            "title": "Example program"
        }, 
        {
            "location": "/start_mode8()/#note-to-eliminate-a-mode-8-region-you-must-be-use-the-function", 
            "text": "stop_mode8() , indicating the  number of m8 .   See:  STRUCT m8  -  load_wld()  -  go_to_flag()  -  stop_mode8()", 
            "title": "Note To eliminate a mode 8 region you must be use the function"
        }, 
        {
            "location": "/go_to_flag()/", 
            "text": "go_to_flag(\nnumber of flags\n)\n\n\nDescription\n\n\nPlaces a process in a mode 8 region in a position indicated by a flag, the process\n calling  the function is the one placed in that position, \nthe only parameter needed is the \nnumber of flag\n, as a mode 8 region can\nhave more than one predefined flag position.\n\n\nAfter the function has been called, in the next \nFRAME\n the process will be placed\nat the flag coordinates. The height of the flag will always be understood\nto be the minimum height of the sector where it is going to be found.\n\n\nThe flags are placed in the editor of the three-dimensional maps, control\nof which is explained in the user's manual.\n\n\nNote This function is equivalent to giving the process the coordinates\n\n\na flag (\nx\n,\ny\n,\nz\n). \n\n\nExample program\n\n\nPROGRAM example_go_to_flag;\n\nBEGIN\n  load_fpg(\nhelp/WLD_VIEW.FPG\n);\n  load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n\n  go_to_flag(0); // Places the process camera at flag 0\n\n  LOOP\n      FRAME;\n  END\nEND\n\n\n\n\nThis example program initialises a mode 8 region, loading the map contained in the\n\nwld_view.prg\n file using the \nload_wld()\n function, and starts a region \nwith \nstart_mode8()\n.\n\n\nThen, it places the process (which acts as the camera of the window) in the\nposition indicated by the flag number 0 of the map sector.\n\n\n\n\nSee: \nstart_mode8()\n - \nSTRUCT m8\n - \nload_wld()", 
            "title": "go_to_flag()"
        }, 
        {
            "location": "/go_to_flag()/#description", 
            "text": "Places a process in a mode 8 region in a position indicated by a flag, the process\n calling  the function is the one placed in that position, \nthe only parameter needed is the  number of flag , as a mode 8 region can\nhave more than one predefined flag position.  After the function has been called, in the next  FRAME  the process will be placed\nat the flag coordinates. The height of the flag will always be understood\nto be the minimum height of the sector where it is going to be found.  The flags are placed in the editor of the three-dimensional maps, control\nof which is explained in the user's manual.", 
            "title": "Description"
        }, 
        {
            "location": "/go_to_flag()/#note-this-function-is-equivalent-to-giving-the-process-the-coordinates", 
            "text": "a flag ( x , y , z ).", 
            "title": "Note This function is equivalent to giving the process the coordinates"
        }, 
        {
            "location": "/go_to_flag()/#example-program", 
            "text": "PROGRAM example_go_to_flag;\n\nBEGIN\n  load_fpg( help/WLD_VIEW.FPG );\n  load_wld( help/WLD_VIEW.WLD ,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n\n  go_to_flag(0); // Places the process camera at flag 0\n\n  LOOP\n      FRAME;\n  END\nEND  This example program initialises a mode 8 region, loading the map contained in the wld_view.prg  file using the  load_wld()  function, and starts a region \nwith  start_mode8() .  Then, it places the process (which acts as the camera of the window) in the\nposition indicated by the flag number 0 of the map sector.   See:  start_mode8()  -  STRUCT m8  -  load_wld()", 
            "title": "Example program"
        }, 
        {
            "location": "/set_sector_height()/", 
            "text": "set_sector_height(\nnumber of sector\n,\n \nheight of the ground\n,\n \nheight of the ceiling\n)\n\n\nDescription\n\n\nModifies the height of the \nground\n or \nceiling\n of a mode 8 sector. The following\nparameters are required:\n\n\nnumber of sector\n - Number of sector of the map for which the height is wished\nto be modified. This number can be obtained from three-dimensional maps editor,\nas explained in the user's manual.\n\n\nheight of the ground\n - The new sector height of the ground must be indicated\n(a value from 0 to 4096), if \n -1\n is indicated as the parameter, \nthe current sector height of the ground will remain (useful to ascertain the\nheight of the ground).\n\n\nheight of the ceiling\n - The new sector height of the ceiling must be indicated\n(a value from 0 to 4096), if \n -1\n is indicated as the parameter, the current sector \nheight of the ceiling will remain (useful to ascertain the height of the ceiling).\n\n\nTo start a mode 8 region, the function \nstart_mode8()\n must be called.\n\n\n\n\nNote If the height of the ceiling is the same as the ground's height this\n\n\nsector won't be accessible (if this one is inside of another, it will appear as a\ncolumn). The height of the ceiling must be smaller than the height of the ground.\n\n\n\n\nExample program\n\n\nPROGRAM example_set_sector_height;\n\nGLOBAL\n    sector=255;\n    altitude;\n    angle1;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=64;\n    LOOP\n        altitude=1000+get_distx(angle1,64);\n        angle1+=5000;\n\n        set_sector_height(sector,altitude,-1);\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis small example starts a mode 8 region, loading the map\n\nwld_view.wld\n, and places it at the predetermined coordinates with\nthe function \ngo_to_flag()\n.\n\n\nThen, inside of the program main loop, the height of the ground of the\nsector \n255\n is fixed with the function \nset_sector_height()\n.\n\n\n\n\nThe function \nget_sector_height()\n allows you to find the ground\nand ceiling heights in a mode 8 sector.\n\n\n\n\nSee: \nget_sector_height()\n - \nstart_mode8()\n - \nSTRUCT m8", 
            "title": "set_sector_height()"
        }, 
        {
            "location": "/set_sector_height()/#description", 
            "text": "Modifies the height of the  ground  or  ceiling  of a mode 8 sector. The following\nparameters are required:  number of sector  - Number of sector of the map for which the height is wished\nto be modified. This number can be obtained from three-dimensional maps editor,\nas explained in the user's manual.  height of the ground  - The new sector height of the ground must be indicated\n(a value from 0 to 4096), if   -1  is indicated as the parameter, \nthe current sector height of the ground will remain (useful to ascertain the\nheight of the ground).  height of the ceiling  - The new sector height of the ceiling must be indicated\n(a value from 0 to 4096), if   -1  is indicated as the parameter, the current sector \nheight of the ceiling will remain (useful to ascertain the height of the ceiling).  To start a mode 8 region, the function  start_mode8()  must be called.", 
            "title": "Description"
        }, 
        {
            "location": "/set_sector_height()/#note-if-the-height-of-the-ceiling-is-the-same-as-the-grounds-height-this", 
            "text": "sector won't be accessible (if this one is inside of another, it will appear as a\ncolumn). The height of the ceiling must be smaller than the height of the ground.", 
            "title": "Note If the height of the ceiling is the same as the ground's height this"
        }, 
        {
            "location": "/set_sector_height()/#example-program", 
            "text": "PROGRAM example_set_sector_height;\n\nGLOBAL\n    sector=255;\n    altitude;\n    angle1;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=64;\n    LOOP\n        altitude=1000+get_distx(angle1,64);\n        angle1+=5000;\n\n        set_sector_height(sector,altitude,-1);\n\n        FRAME;\n    END\nEND  This small example starts a mode 8 region, loading the map wld_view.wld , and places it at the predetermined coordinates with\nthe function  go_to_flag() .  Then, inside of the program main loop, the height of the ground of the\nsector  255  is fixed with the function  set_sector_height() .   The function  get_sector_height()  allows you to find the ground\nand ceiling heights in a mode 8 sector.   See:  get_sector_height()  -  start_mode8()  -  STRUCT m8", 
            "title": "Example program"
        }, 
        {
            "location": "/get_sector_height()/", 
            "text": "get_sector_height(\nnumber of sector\n,\n \nOFFSET ground\n,\n \nOFFSET ceiling\n)\n\n\nReturns\n\n\nThe \nheight of the ground and ceiling\n of a mode 8 sector (in the variables which\n\noffset\n are indicated as the two last parameters).\n\n\nDescription\n\n\nThis function allows you to determine in a program, the height of the ground\nand ceiling of a determined sector, inside of a mode 8 sector.\n\n\nTo do this, the \nnumber of sector\n is required , and the \nOFFSET\n (address\nof memory) of the two variables where the result will be returned.\n\n\nThis information also can be obtained inside of the editor of three-dimensional maps\nas explained in the user's manual.\n\n\nExample program\n\n\nPROGRAM example_get_sector_height;\n\nGLOBAL\n    ceiling_height;\n    floor_height;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    // ...\n\n    // Obtain the heights of a sector\n\n    get_sector_height(255,OFFSET floor_height,OFFSET ceiling_height);\n\n    // ...\nEND\n\n\n\n\nThis small example shows how the function \nget_sector_height()\n must be called\nto obtain the heights of a sector (in this case, in the variables \nceiling_height\n\nand \nfloor_height\n these values are obtained for the sector number \n255\n).\n\n\n\n\nTo establish the height of a sector, the function \nset_sector_height()\n must\nbe used.\n\n\n\n\nSee: \nset_sector_height()\n - \nstart_mode8()\n - \nSTRUCT m8", 
            "title": "get_sector_height()"
        }, 
        {
            "location": "/get_sector_height()/#returns", 
            "text": "The  height of the ground and ceiling  of a mode 8 sector (in the variables which offset  are indicated as the two last parameters).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_sector_height()/#description", 
            "text": "This function allows you to determine in a program, the height of the ground\nand ceiling of a determined sector, inside of a mode 8 sector.  To do this, the  number of sector  is required , and the  OFFSET  (address\nof memory) of the two variables where the result will be returned.  This information also can be obtained inside of the editor of three-dimensional maps\nas explained in the user's manual.", 
            "title": "Description"
        }, 
        {
            "location": "/get_sector_height()/#example-program", 
            "text": "PROGRAM example_get_sector_height;\n\nGLOBAL\n    ceiling_height;\n    floor_height;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    // ...\n\n    // Obtain the heights of a sector\n\n    get_sector_height(255,OFFSET floor_height,OFFSET ceiling_height);\n\n    // ...\nEND  This small example shows how the function  get_sector_height()  must be called\nto obtain the heights of a sector (in this case, in the variables  ceiling_height \nand  floor_height  these values are obtained for the sector number  255 ).   To establish the height of a sector, the function  set_sector_height()  must\nbe used.   See:  set_sector_height()  -  start_mode8()  -  STRUCT m8", 
            "title": "Example program"
        }, 
        {
            "location": "/set_point_m8()/", 
            "text": "set_point_m8(\nnumber of vertex\n,\n \nx\n,\n \ny\n)\n\n\nDescription\n\n\nModifies the coordinates of a three-dimensional map's vertex on a mode 8 sector.\nThe following parameters are required:\n\n\nnumber of vertex\n - Number of vertices of the map which position is wanted to\nmodified. This number can also be obtained from the editor of the three-dimensional maps,\nas is explained in the user's manual.\n\n\nx\n, \ny\n - The new coordinates of the vertex must be defined. The\ncoordinates inside of a three-dimensional map are placed with the rank (\n0\n ..\n\n30200\n).\n\n\nTo create a mode 8 region, the function \nstart_mode8()\n must be called.\n\n\n\n\nNote This is a function which can give rise to multiple\n\n\nerrors of visibility\n. For that reason, it is not recommended for use by inexperienced users.\n\n\nThe vertices can only move \ninside of the sector\n in which they started,\n\nsector boundaries can't be crossed\n (not the vertex, nor the lines which these make) and, besides,\nall sectors which can't contain processes may not be moved.\n\n\n\n\nExample program\n\n\nPROGRAM example_set_point_m8;\n\nGLOBAL\n    position1;\n    position2;\n    angle1;\n    angle2;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=64;\n    LOOP\n        position1=3400+get_distx(angle1,150);\n        angle1+=5000;\n        position2=3400+get_distx(angle2,150);\n        angle2+=7000;\n\n        set_point_m8(1620,position1,9280); // Fixes the vertex 1620\n\n        set_point_m8(1621,position2,9456); // Fixes the vertex 1621\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis small example initialises a mode 8 region, loading the map\n\nwld_view.wld\n, and places it in the predetermined coordinates with\nthe function \ngo_to_flag()\n.\n\n\nThen, inside of the program's main loop, the position of the vertex\n\n1620\n and \n1621\n is fixed with the function \nset_point_m8()\n.\n\n\n\n\nThe function \nget_point_m8()\n allows you to find the coordinates of a vertex\nof a three-dimensional map in a mode 8 region.\n\n\n\n\nSee: \nget_point_m8()\n - \nstart_mode8()\n - \nSTRUCT m8", 
            "title": "set_point_m8()"
        }, 
        {
            "location": "/set_point_m8()/#description", 
            "text": "Modifies the coordinates of a three-dimensional map's vertex on a mode 8 sector.\nThe following parameters are required:  number of vertex  - Number of vertices of the map which position is wanted to\nmodified. This number can also be obtained from the editor of the three-dimensional maps,\nas is explained in the user's manual.  x ,  y  - The new coordinates of the vertex must be defined. The\ncoordinates inside of a three-dimensional map are placed with the rank ( 0  .. 30200 ).  To create a mode 8 region, the function  start_mode8()  must be called.", 
            "title": "Description"
        }, 
        {
            "location": "/set_point_m8()/#note-this-is-a-function-which-can-give-rise-to-multiple", 
            "text": "errors of visibility . For that reason, it is not recommended for use by inexperienced users.  The vertices can only move  inside of the sector  in which they started, sector boundaries can't be crossed  (not the vertex, nor the lines which these make) and, besides,\nall sectors which can't contain processes may not be moved.", 
            "title": "Note This is a function which can give rise to multiple"
        }, 
        {
            "location": "/set_point_m8()/#example-program", 
            "text": "PROGRAM example_set_point_m8;\n\nGLOBAL\n    position1;\n    position2;\n    angle1;\n    angle2;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=64;\n    LOOP\n        position1=3400+get_distx(angle1,150);\n        angle1+=5000;\n        position2=3400+get_distx(angle2,150);\n        angle2+=7000;\n\n        set_point_m8(1620,position1,9280); // Fixes the vertex 1620\n\n        set_point_m8(1621,position2,9456); // Fixes the vertex 1621\n\n        FRAME;\n    END\nEND  This small example initialises a mode 8 region, loading the map wld_view.wld , and places it in the predetermined coordinates with\nthe function  go_to_flag() .  Then, inside of the program's main loop, the position of the vertex 1620  and  1621  is fixed with the function  set_point_m8() .   The function  get_point_m8()  allows you to find the coordinates of a vertex\nof a three-dimensional map in a mode 8 region.   See:  get_point_m8()  -  start_mode8()  -  STRUCT m8", 
            "title": "Example program"
        }, 
        {
            "location": "/get_point_m8()/", 
            "text": "get_point_m8(\nnumber of vertex\n,\n \nOFFSET x\n,\n \nOFFSET y\n)\n\n\nReturns\n\n\nThe \ncoordinates of a vertex\n of a mode 8 map (in the variables which\n\noffset\n, indicated as the two last parameters).\n\n\nDescription\n\n\nThis function allows you to determine inside of a program, the coordinates of\na specific vertex, inside of a mode 8 region.\n\n\nTo do this, the \nnumber of vertex\n is required, and the \nOFFSET\n (pointer) \nof the two variables where the result is stored.\n\n\nThis information can also be obtained from the three-dimensional\nmaps editor, which is explained in the user's manual.\n\n\nExample program\n\n\nPROGRAM example_get_point_m8;\n\nGLOBAL\n    position_x;\n    position_y;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    // ...\n\n    // Obtains a vertex's coordinates\n\n    get_point_m8(1620,OFFSET position_x,OFFSET position_y);\n\n    // ...\nEND\n\n\n\n\nThis small example shows how the function \nget_point_m8()\n is called \nto obtain the position of a sector vertex (in this case, in the variables \nposition_x\n\nand \nposition_y\n).\n\n\n\n\nTo set or establish the positions of a vertex, the function \nset_point_m8()\n must\nbe used.\n\n\n\n\nSee: \nset_point_m8()\n - \nstart_mode8()\n - \nSTRUCT m8", 
            "title": "get_point_m8()"
        }, 
        {
            "location": "/get_point_m8()/#returns", 
            "text": "The  coordinates of a vertex  of a mode 8 map (in the variables which offset , indicated as the two last parameters).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_point_m8()/#description", 
            "text": "This function allows you to determine inside of a program, the coordinates of\na specific vertex, inside of a mode 8 region.  To do this, the  number of vertex  is required, and the  OFFSET  (pointer) \nof the two variables where the result is stored.  This information can also be obtained from the three-dimensional\nmaps editor, which is explained in the user's manual.", 
            "title": "Description"
        }, 
        {
            "location": "/get_point_m8()/#example-program", 
            "text": "PROGRAM example_get_point_m8;\n\nGLOBAL\n    position_x;\n    position_y;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    // ...\n\n    // Obtains a vertex's coordinates\n\n    get_point_m8(1620,OFFSET position_x,OFFSET position_y);\n\n    // ...\nEND  This small example shows how the function  get_point_m8()  is called \nto obtain the position of a sector vertex (in this case, in the variables  position_x \nand  position_y ).   To set or establish the positions of a vertex, the function  set_point_m8()  must\nbe used.   See:  set_point_m8()  -  start_mode8()  -  STRUCT m8", 
            "title": "Example program"
        }, 
        {
            "location": "/set_fog()/", 
            "text": "set_fog(\nInitial position\n,\n \nFinal position\n)\n\n\nDescription\n\n\nModifies the fog of a mode 8 region initiated with the function \nstart_mode8()\n,\nto do this, the following parameters are required:\n\n\nInitial position\n - Percentage or initial distance of the fog (from 0 to 100),\nin this way, the point from which the effect is applied is determined.\n\n\nFinal position\n - Percentage or final distance of the fog (from 0 to 100),\nin this way, the point from which the fog is solid/completely opaque is determined.\n\n\nNormally the position or final percentage is established as the double\nof the initial, the further apart the values are, the more slowly the fog\nwill appear.\n\n\nExample program\n\n\nPROGRAM example_set_fog;\n\nGLOBAL\n    fogpos;\n    angle1;\n\nBEGIN\n  load_fpg(\nhelp/WLD_VIEW.FPG\n);\n  load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  go_to_flag(0);\n  FRAME;\n  z+=128;\n  LOOP\n      fogpos=25+get_distx(angle1,20);\n       angle1+=5000;\n\n      set_fog(fogpos,fogpos*2); // Establishes the fog level of the mode 8\n\n      FRAME;\n  END\nEND\n\n\n\n\nThis small example shows how the function \nset_fog()\n must be called \nto modify the fog of a mode 8 region.\n\n\nThe variable \nposition\n varies from \n5\n to \n45\n (using the function\n\nget_distx()\n), this will be the initial position, the final one\nwill be fixed as double the initial one.\n\n\n\n\nNote The function \nset_env_color()\n allows you to fix the ambience colour\n\n\nor the fog colour of a mode 8 region.\n\n\n\n\nSee: \nset_env_color()\n - \nstart_mode8()\n - \nSTRUCT m8", 
            "title": "set_fog()"
        }, 
        {
            "location": "/set_fog()/#description", 
            "text": "Modifies the fog of a mode 8 region initiated with the function  start_mode8() ,\nto do this, the following parameters are required:  Initial position  - Percentage or initial distance of the fog (from 0 to 100),\nin this way, the point from which the effect is applied is determined.  Final position  - Percentage or final distance of the fog (from 0 to 100),\nin this way, the point from which the fog is solid/completely opaque is determined.  Normally the position or final percentage is established as the double\nof the initial, the further apart the values are, the more slowly the fog\nwill appear.", 
            "title": "Description"
        }, 
        {
            "location": "/set_fog()/#example-program", 
            "text": "PROGRAM example_set_fog;\n\nGLOBAL\n    fogpos;\n    angle1;\n\nBEGIN\n  load_fpg( help/WLD_VIEW.FPG );\n  load_wld( help/WLD_VIEW.WLD ,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  go_to_flag(0);\n  FRAME;\n  z+=128;\n  LOOP\n      fogpos=25+get_distx(angle1,20);\n       angle1+=5000;\n\n      set_fog(fogpos,fogpos*2); // Establishes the fog level of the mode 8\n\n      FRAME;\n  END\nEND  This small example shows how the function  set_fog()  must be called \nto modify the fog of a mode 8 region.  The variable  position  varies from  5  to  45  (using the function get_distx() ), this will be the initial position, the final one\nwill be fixed as double the initial one.", 
            "title": "Example program"
        }, 
        {
            "location": "/set_fog()/#note-the-function-set_env_color-allows-you-to-fix-the-ambience-colour", 
            "text": "or the fog colour of a mode 8 region.   See:  set_env_color()  -  start_mode8()  -  STRUCT m8", 
            "title": "Note The function set_env_color() allows you to fix the ambience colour"
        }, 
        {
            "location": "/set_sector_texture()/", 
            "text": "set_sector_texture(\nnumber of sector\n,\n \nground texture\n,\n \nceiling texture\n,\n \nluminosity\n)\n\n\nDescription\n\n\nModifies the \ntextures of ground and ceiling\n of a mode 8 sector. The following\nparameters are required:\n\n\nnumber of sector\n - Number of the map sector for which textures are to be\nmodified. This number can be obtained from the three-dimensional maps editor,\nas is explained in the user's manual of the program.\n\n\nground texture\n - The code of the new texture graphic to be used as the \n\nground texture\n of the sector (ie: the number of the graphic\ninside of the FPG which contains every texture of the mode 8 region). If a \n -1\n is\nindicated as parameter the current texture will remain (to modify just\nthe ceiling texture).\n\n\nceiling texture\n - The code of the new texture graphic to be used as the \n\nceiling texture\n of the sector (ie: the number of the graphic\ninside of the FPG which contains every texture of the mode 8). If a \n -1\n is\nindicated as parameter the current texture will remain (to modify just\nthe ground texture).\n\n\nluminosity\n - Luminosity of the texture, from \n0\n (ambience colour, which\nis normally black) up to \n15\n (texture with the original colours).\nIf a \n -1\n is indicated, the current level of luminosity in the sector will remain\nunchanged.\n\n\n\n\nNote every texture must be contained in the same file FPG,\n\n\nthis is the file which is loaded with \nload_fpg()\n function and which number is\ngiven as the parameter of the function \nload_wld()\n.\n\n\n\n\nExample program\n\n\nPROGRAM example_set_sector_texture;\n\nGLOBAL\n    texture=94;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=128;\n    m8.angle=-64;\n    LOOP\n        IF (texture++==103) texture=94; END\n\n        set_sector_texture(255,texture,-1,15);\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis small example starts a mode 8 region, loading the map\n\nwld_view.wld\n, which is placed at the predetermined coordinates with\nthe function \ngo_to_flag()\n.\n\n\nThen, inside of the program main loop, the ground texture of the sector\n\n255\n is set with the function \nset_sector_texture()\n.\n\n\n\n\nThe function \nget_sector_texture()\n allows one to find the textures\n(and luminosity) that are assigned to a mode 8 sector.\n\n\nThe function \nset_wall_texture()\n allows you to establish the texture of a wall.\n\n\n\n\nSee: \nget_sector_texture()\n - \nset_wall_texture()\n - \nset_sector_height()", 
            "title": "set_sector_texture()"
        }, 
        {
            "location": "/set_sector_texture()/#description", 
            "text": "Modifies the  textures of ground and ceiling  of a mode 8 sector. The following\nparameters are required:  number of sector  - Number of the map sector for which textures are to be\nmodified. This number can be obtained from the three-dimensional maps editor,\nas is explained in the user's manual of the program.  ground texture  - The code of the new texture graphic to be used as the  ground texture  of the sector (ie: the number of the graphic\ninside of the FPG which contains every texture of the mode 8 region). If a   -1  is\nindicated as parameter the current texture will remain (to modify just\nthe ceiling texture).  ceiling texture  - The code of the new texture graphic to be used as the  ceiling texture  of the sector (ie: the number of the graphic\ninside of the FPG which contains every texture of the mode 8). If a   -1  is\nindicated as parameter the current texture will remain (to modify just\nthe ground texture).  luminosity  - Luminosity of the texture, from  0  (ambience colour, which\nis normally black) up to  15  (texture with the original colours).\nIf a   -1  is indicated, the current level of luminosity in the sector will remain\nunchanged.", 
            "title": "Description"
        }, 
        {
            "location": "/set_sector_texture()/#note-every-texture-must-be-contained-in-the-same-file-fpg", 
            "text": "this is the file which is loaded with  load_fpg()  function and which number is\ngiven as the parameter of the function  load_wld() .", 
            "title": "Note every texture must be contained in the same file FPG,"
        }, 
        {
            "location": "/set_sector_texture()/#example-program", 
            "text": "PROGRAM example_set_sector_texture;\n\nGLOBAL\n    texture=94;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=128;\n    m8.angle=-64;\n    LOOP\n        IF (texture++==103) texture=94; END\n\n        set_sector_texture(255,texture,-1,15);\n\n        FRAME;\n    END\nEND  This small example starts a mode 8 region, loading the map wld_view.wld , which is placed at the predetermined coordinates with\nthe function  go_to_flag() .  Then, inside of the program main loop, the ground texture of the sector 255  is set with the function  set_sector_texture() .   The function  get_sector_texture()  allows one to find the textures\n(and luminosity) that are assigned to a mode 8 sector.  The function  set_wall_texture()  allows you to establish the texture of a wall.   See:  get_sector_texture()  -  set_wall_texture()  -  set_sector_height()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_sector_texture()/", 
            "text": "get_sector_texture(\nnumber of sector\n,\n \nOFFSET ground texture\n,\n \nOFFSET ceiling texture\n,\n \nOFFSET luminosity\n)\n\n\nReturns\n\n\nThe \nluminosity, and the textures of the ground and ceiling\n of a mode 8 sector\n(stored in the variables which \noffset\n are indicated as the parameters).\n\n\nDescription\n\n\nThis function allows you to determine which are the textures in a program \nfor the ground and the ceiling and/or the luminosity of a determined sector, inside of a\nmode 8 region.\n\n\nTo do this, the \nnumber of sector\n is required , and the \nOFFSET\n (pointer) for the\nvariables where the results will be stored are also required.\n\n\nExample program\n\n\nPROGRAM example_get_sector_texture;\n\nGLOBAL\n    ceiling_texture;\n    floor_texture;\n    luminosity;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    // ...\n\n    // Obtains the luminosity and textures of a sector\n\n    get_sector_texture(255,OFFSET ceiling_texture,OFFSET floor_texture,OFFSET luminosity);\n\n    // ...\nEND\n\n\n\n\nThis small example shows how the function \nget_sector_texture()\n must be called \nto obtain the textures and the luminosity of a sector (in this case, in the variables\n\nfloor_texture\n, \nceiling_texture\n and \nluminosity\n these values are obtained for the\nsector number \n255\n).\n\n\n\n\nThe function \nset_sector_texture()\n allows you to establish the textures and luminosity\nof a mode 8 sector dynamically.\n\n\nThe function \nget_wall_texture()\n allows you to find what the assigned texture of a mode 8\nwall is .\n\n\n\n\nSee: \nset_sector_texture()\n - \nget_wall_texture()", 
            "title": "get_sector_texture()"
        }, 
        {
            "location": "/get_sector_texture()/#returns", 
            "text": "The  luminosity, and the textures of the ground and ceiling  of a mode 8 sector\n(stored in the variables which  offset  are indicated as the parameters).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_sector_texture()/#description", 
            "text": "This function allows you to determine which are the textures in a program \nfor the ground and the ceiling and/or the luminosity of a determined sector, inside of a\nmode 8 region.  To do this, the  number of sector  is required , and the  OFFSET  (pointer) for the\nvariables where the results will be stored are also required.", 
            "title": "Description"
        }, 
        {
            "location": "/get_sector_texture()/#example-program", 
            "text": "PROGRAM example_get_sector_texture;\n\nGLOBAL\n    ceiling_texture;\n    floor_texture;\n    luminosity;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    // ...\n\n    // Obtains the luminosity and textures of a sector\n\n    get_sector_texture(255,OFFSET ceiling_texture,OFFSET floor_texture,OFFSET luminosity);\n\n    // ...\nEND  This small example shows how the function  get_sector_texture()  must be called \nto obtain the textures and the luminosity of a sector (in this case, in the variables floor_texture ,  ceiling_texture  and  luminosity  these values are obtained for the\nsector number  255 ).   The function  set_sector_texture()  allows you to establish the textures and luminosity\nof a mode 8 sector dynamically.  The function  get_wall_texture()  allows you to find what the assigned texture of a mode 8\nwall is .   See:  set_sector_texture()  -  get_wall_texture()", 
            "title": "Example program"
        }, 
        {
            "location": "/set_wall_texture()/", 
            "text": "set_wall_texture(\nnumber of sector\n,\n \ntexture\n,\n \nluminosity\n)\n\n\nDescription\n\n\nModifies the \nwall texture\n of a mode 8 sector. The following parameters are\nrequired:\n\n\nnumber of wall\n - Number of the wall texture required. This number can\n be obtained in the three-dimensional maps editor,\nas is explained in the user's manual of the program.\n\n\ntexture\n - The code of the graphic which is to be assigned as the new wall\ntexture (the number of the graphic inside of the FPG which contains every mode 8 texture) \nmust be indicated. If a \n -1\n is indicated as the parameter, the current texture will remain\nunchanged.\n\n\nluminosity\n - Luminosity of the texture, from \n0\n (ambience colour, which is\nnormally black) up to \n15\n (texture with the original colours).\nIf a \n -1\n is indicated, the current level of luminosity will remain unchanged.\n\n\n\n\nNote every texture must be contained in the same file FPG,\n\n\nthis is the file which is loaded with \nload_fpg()\n and which number is given\nas a parameter to the function \nload_wld()\n.\n\n\n\n\nExample program\n\n\nPROGRAM example_set_wall_texture;\n\nGLOBAL\n    texture=104;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=128;\n    LOOP\n        IF (texture++==113) texture=104; END\n\n        set_wall_texture(511,texture,15); // Modifies a wall texture\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis small example starts a mode 8 region, loading the map\n\nwld_view.wld\n, and it is placed in the predetermined coordinates with the\nfunction \ngo_to_flag()\n.\n\n\nThen, inside the program main loop, the texture of the wall number \n511\n \nis fixed with the function \nset_wall_texture()\n.\n\n\n\n\nThe function \nget_wall_texture()\n allows you to find the current texture\nof a wall.\n\n\nThe function \nset_sector_texture()\n allows you to establish the {textures of\nground and ceiling} of a mode 8 sector.\n\n\n\n\nSee: \nget_wall_texture()\n - \nset_sector_texture()\n - \nset_sector_height()", 
            "title": "set_wall_texture()"
        }, 
        {
            "location": "/set_wall_texture()/#description", 
            "text": "Modifies the  wall texture  of a mode 8 sector. The following parameters are\nrequired:  number of wall  - Number of the wall texture required. This number can\n be obtained in the three-dimensional maps editor,\nas is explained in the user's manual of the program.  texture  - The code of the graphic which is to be assigned as the new wall\ntexture (the number of the graphic inside of the FPG which contains every mode 8 texture) \nmust be indicated. If a   -1  is indicated as the parameter, the current texture will remain\nunchanged.  luminosity  - Luminosity of the texture, from  0  (ambience colour, which is\nnormally black) up to  15  (texture with the original colours).\nIf a   -1  is indicated, the current level of luminosity will remain unchanged.", 
            "title": "Description"
        }, 
        {
            "location": "/set_wall_texture()/#note-every-texture-must-be-contained-in-the-same-file-fpg", 
            "text": "this is the file which is loaded with  load_fpg()  and which number is given\nas a parameter to the function  load_wld() .", 
            "title": "Note every texture must be contained in the same file FPG,"
        }, 
        {
            "location": "/set_wall_texture()/#example-program", 
            "text": "PROGRAM example_set_wall_texture;\n\nGLOBAL\n    texture=104;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    start_mode8(id,0,0);\n    ctype=c_m8;\n    go_to_flag(1);\n    FRAME;\n    z+=128;\n    LOOP\n        IF (texture++==113) texture=104; END\n\n        set_wall_texture(511,texture,15); // Modifies a wall texture\n\n        FRAME;\n    END\nEND  This small example starts a mode 8 region, loading the map wld_view.wld , and it is placed in the predetermined coordinates with the\nfunction  go_to_flag() .  Then, inside the program main loop, the texture of the wall number  511  \nis fixed with the function  set_wall_texture() .   The function  get_wall_texture()  allows you to find the current texture\nof a wall.  The function  set_sector_texture()  allows you to establish the {textures of\nground and ceiling} of a mode 8 sector.   See:  get_wall_texture()  -  set_sector_texture()  -  set_sector_height()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_wall_texture()/", 
            "text": "get_wall_texture(\nnumber of wall\n,\n \nOFFSET texture\n,\n \nOFFSET luminosity\n)\n\n\nReturns\n\n\nThe \nluminosity and the texture\n of a mode 8 wall (in the variables\nwhich \noffset\n are indicated in the parameters).\n\n\nDescription\n\n\nThis function allows you to determine inside of a program, what the texture\nand the luminosity is of a determined wall, inside of a mode 8.\n\n\nTo do this, the \nnumber of wall\n is required, and the \nOFFSET\n (pointer)\nof the variables where the result will be stored.\n\n\nExample program\n\n\nPROGRAM example_get_wall_texture;\n\nGLOBAL\n    texture;\n    luminosity;\n\nBEGIN\n    load_fpg(\nhelp/WLD_VIEW.FPG\n);\n    load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n    // ...\n\n    // Obtains the luminosity and texture of a wall\n\n    get_wall_texture(255,OFFSET texture,OFFSET luminosity);\n\n    // ...\nEND\n\n\n\n\nThis small example shows how the function \nget_wall_texture()\n must be called \nto obtain the texture and the luminosity of a wall in a sector (in this case, the variables\n\ntexture\n and \nluminosity\n are assigned to the wall number \n255\n).\n\n\n\n\nThe function \nset_wall_texture()\n allows you to establish the texture and luminosity\nof a mode 8 wall dynamically.\n\n\nThe function \nget_sector_texture()\n lets us know which are the floor\nand ceiling textures of a mode 8 sector.\n\n\n\n\nSee: \nset_wall_texture()\n - \nget_sector_texture()", 
            "title": "get_wall_texture()"
        }, 
        {
            "location": "/get_wall_texture()/#returns", 
            "text": "The  luminosity and the texture  of a mode 8 wall (in the variables\nwhich  offset  are indicated in the parameters).", 
            "title": "Returns"
        }, 
        {
            "location": "/get_wall_texture()/#description", 
            "text": "This function allows you to determine inside of a program, what the texture\nand the luminosity is of a determined wall, inside of a mode 8.  To do this, the  number of wall  is required, and the  OFFSET  (pointer)\nof the variables where the result will be stored.", 
            "title": "Description"
        }, 
        {
            "location": "/get_wall_texture()/#example-program", 
            "text": "PROGRAM example_get_wall_texture;\n\nGLOBAL\n    texture;\n    luminosity;\n\nBEGIN\n    load_fpg( help/WLD_VIEW.FPG );\n    load_wld( help/WLD_VIEW.WLD ,0);\n    // ...\n\n    // Obtains the luminosity and texture of a wall\n\n    get_wall_texture(255,OFFSET texture,OFFSET luminosity);\n\n    // ...\nEND  This small example shows how the function  get_wall_texture()  must be called \nto obtain the texture and the luminosity of a wall in a sector (in this case, the variables texture  and  luminosity  are assigned to the wall number  255 ).   The function  set_wall_texture()  allows you to establish the texture and luminosity\nof a mode 8 wall dynamically.  The function  get_sector_texture()  lets us know which are the floor\nand ceiling textures of a mode 8 sector.   See:  set_wall_texture()  -  get_sector_texture()", 
            "title": "Example program"
        }, 
        {
            "location": "/set_env_color()/", 
            "text": "set_env_color(\n% red\n,\n \n% green\n,\n \n% blue\n)\n\n\nDescription\n\n\nModifies the colour of the ambience or fog of a mode 8 sector, to do this \nthe components \nred\n (red), \ngreen\n (green) and \nblue\n (blue) of the \nsector are required.\n\n\nThe three components must be specified as percentage, from \n0\n to \n100\n.\n\n\nBy default, the fog is set as a black colour (0,0,0), but this colour can\nbe modified to create a different ambience.\n\n\nExample program\n\n\nPROGRAM example_set_env_colour;\n\nGLOBAL\n    light;\n    angle1;\n\nBEGIN\n  load_fpg(\nhelp/WLD_VIEW.FPG\n);\n  load_wld(\nhelp/WLD_VIEW.WLD\n,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  go_to_flag(0);\n  FRAME;\n  set_fog(30,90);\n  z+=128;\n  LOOP\n      light=50+get_distx(angle1,50);\n      angle1+=5000;\n\n      set_env_color(light,light,light); // establishes the ambience colour\n\n      FRAME;\n  END\nEND\n\n\n\n\nThis small example shows how the function \nset_env_color()\n must be called \nto modify the fog colour of a mode 8 region.\n\n\nThe variable \nlight\n varies from \n0\n to \n100\n (using the function \nget_distx()\n), \nthis percentage is the same for the three components of the colour, so this will\ngradually change from \nblack\n to \nwhite\n, going through all the grey scale in between.\n\n\n\n\nNote The function \nset_fog()\n allows you to fix the density of the fog or ambience\n\n\nof a mode 8 region.\n\n\n\n\nSee: \nset_fog()\n - \nstart_mode8()\n - \nSTRUCT m8", 
            "title": "set_env_color()"
        }, 
        {
            "location": "/set_env_color()/#description", 
            "text": "Modifies the colour of the ambience or fog of a mode 8 sector, to do this \nthe components  red  (red),  green  (green) and  blue  (blue) of the \nsector are required.  The three components must be specified as percentage, from  0  to  100 .  By default, the fog is set as a black colour (0,0,0), but this colour can\nbe modified to create a different ambience.", 
            "title": "Description"
        }, 
        {
            "location": "/set_env_color()/#example-program", 
            "text": "PROGRAM example_set_env_colour;\n\nGLOBAL\n    light;\n    angle1;\n\nBEGIN\n  load_fpg( help/WLD_VIEW.FPG );\n  load_wld( help/WLD_VIEW.WLD ,0);\n  start_mode8(id,0,0);\n  ctype=c_m8;\n  go_to_flag(0);\n  FRAME;\n  set_fog(30,90);\n  z+=128;\n  LOOP\n      light=50+get_distx(angle1,50);\n      angle1+=5000;\n\n      set_env_color(light,light,light); // establishes the ambience colour\n\n      FRAME;\n  END\nEND  This small example shows how the function  set_env_color()  must be called \nto modify the fog colour of a mode 8 region.  The variable  light  varies from  0  to  100  (using the function  get_distx() ), \nthis percentage is the same for the three components of the colour, so this will\ngradually change from  black  to  white , going through all the grey scale in between.", 
            "title": "Example program"
        }, 
        {
            "location": "/set_env_color()/#note-the-function-set_fog-allows-you-to-fix-the-density-of-the-fog-or-ambience", 
            "text": "of a mode 8 region.   See:  set_fog()  -  start_mode8()  -  STRUCT m8", 
            "title": "Note The function set_fog() allows you to fix the density of the fog or ambience"
        }, 
        {
            "location": "/strcpy()/", 
            "text": "strcpy(\nstring destination\n,\n \nstring origin\n)\n\n\nReturns\n\n\nCopies a string from the origin to the string destination.\n\n\nDescription\n\n\nCopies the \nstring origin\n to the \nstring destination\n, \n(the original content of the string destination will be lost).\n\n\nThe \nstring destination\n must be a data type \nSTRING\n, of a length\nlong enough to contain the text of the \nstring origin\n.\n\n\nExample program\n\n\nPROGRAM example_strcpy;\n\nGLOBAL\n    STRING string1=\nInitial text\n;\n\nBEGIN\n    write(0,0,0,0,\nText contained in \nstring1\n:\n);\n    write(0,0,10,0,string1);\n    write(0,0,192,0,\nPress [SPACE] to copy another text in \nstring1\n);\n    LOOP\n        IF (key(_space))\n\n            strcpy(string1,\nFinal text\n); // Modifies string1\n\n        END\n        FRAME;\n   END\nEND\n\n\n\n\n\n\nWhen the length of the copied string is smaller than 1024 characters, this\nsame operation can be done with the following statement:\n(continuing with the previous example):\n\n\nstring1 = \nFinal text\n;\n\n\nWith a generic statement of \nassignation\n as the following:\n\n\nstring destination\n = \nstring origin\n ;\n\n\nThe \nstring destination\nBeing always of a data type \nSTRING\n. To join some\ntext strings together the function \nstrcat()\n must be used.\n\n\n\n\nSee: \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "strcpy()"
        }, 
        {
            "location": "/strcpy()/#returns", 
            "text": "Copies a string from the origin to the string destination.", 
            "title": "Returns"
        }, 
        {
            "location": "/strcpy()/#description", 
            "text": "Copies the  string origin  to the  string destination , \n(the original content of the string destination will be lost).  The  string destination  must be a data type  STRING , of a length\nlong enough to contain the text of the  string origin .", 
            "title": "Description"
        }, 
        {
            "location": "/strcpy()/#example-program", 
            "text": "PROGRAM example_strcpy;\n\nGLOBAL\n    STRING string1= Initial text ;\n\nBEGIN\n    write(0,0,0,0, Text contained in  string1 : );\n    write(0,0,10,0,string1);\n    write(0,0,192,0, Press [SPACE] to copy another text in  string1 );\n    LOOP\n        IF (key(_space))\n\n            strcpy(string1, Final text ); // Modifies string1\n\n        END\n        FRAME;\n   END\nEND   When the length of the copied string is smaller than 1024 characters, this\nsame operation can be done with the following statement:\n(continuing with the previous example):  string1 =  Final text ;  With a generic statement of  assignation  as the following:  string destination  =  string origin  ;  The  string destination Being always of a data type  STRING . To join some\ntext strings together the function  strcat()  must be used.   See:  strcat()  -  strlen()  -  strcmp()  -  strchr() \n-  strstr()  -  strset()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/strcat()/", 
            "text": "strcat(\nstring destination\n,\n \nstring origin\n)\n\n\nReturns\n\n\nJoins two strings together and returns the address of the string destination.\n\n\nDescription\n\n\nJoins two text strings, copying the \nstring origin\n and adding on the end of \nthe text contained in the \nstring destination\n.\n\n\nThe \nstring destination\n must be of data type \nSTRING\n, of a length\nlong enough to contain both strings.\n\n\nExample program\n\n\nPROGRAM example_strcat;\n\nGLOBAL\n    STRING string1=\nBeginning \n;\n\nBEGIN\n    write(0,0,0,0,\nText contained in \nstring1\n:\n);\n    write(0,0,10,0,string1);\n    write(0,0,192,0,\nPress [SPACE] to add a text to \nstring1\n);\n    LOOP\n        IF (key(_space))\n\n            strcat(string1,\nFinal\n); // Adds a text to string1\n\n        END\n        FRAME;\n   END\nEND\n\n\n\n\n\n\nWhen the length of the resultant string is smaller than 1024 characters, this same\noperation can be achieved with the following statement :\n(continuing with the previous example):\n\n\nstring1 = string1 + \nFinal\n;\n\n\n(or)\n\n\nstring1 += \nFinal\n;\n\n\nOr with a generic statement of \nassignation\n (or with the symbol\n\n+=\n, of operative assignation) such as the following:\n\n\nstring destination\n = \nstring destination\n + \nstring origin\n ;\n\n\n(or)\n\n\nstring destination\n += \nstring origin\n ;\n\n\nBeing always \nstring destination\n of data type \nSTRING\n.\n\n\n\n\nTo copy text strings, the function \nstrcpy()\n must be used.\n\n\nTo separate (or substrate) text strings, the function \nstrdel()\n\nmust be used.\n\n\n\n\nSee: \nstrcpy()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "strcat()"
        }, 
        {
            "location": "/strcat()/#returns", 
            "text": "Joins two strings together and returns the address of the string destination.", 
            "title": "Returns"
        }, 
        {
            "location": "/strcat()/#description", 
            "text": "Joins two text strings, copying the  string origin  and adding on the end of \nthe text contained in the  string destination .  The  string destination  must be of data type  STRING , of a length\nlong enough to contain both strings.", 
            "title": "Description"
        }, 
        {
            "location": "/strcat()/#example-program", 
            "text": "PROGRAM example_strcat;\n\nGLOBAL\n    STRING string1= Beginning  ;\n\nBEGIN\n    write(0,0,0,0, Text contained in  string1 : );\n    write(0,0,10,0,string1);\n    write(0,0,192,0, Press [SPACE] to add a text to  string1 );\n    LOOP\n        IF (key(_space))\n\n            strcat(string1, Final ); // Adds a text to string1\n\n        END\n        FRAME;\n   END\nEND   When the length of the resultant string is smaller than 1024 characters, this same\noperation can be achieved with the following statement :\n(continuing with the previous example):  string1 = string1 +  Final ;  (or)  string1 +=  Final ;  Or with a generic statement of  assignation  (or with the symbol += , of operative assignation) such as the following:  string destination  =  string destination  +  string origin  ;  (or)  string destination  +=  string origin  ;  Being always  string destination  of data type  STRING .   To copy text strings, the function  strcpy()  must be used.  To separate (or substrate) text strings, the function  strdel() \nmust be used.   See:  strcpy()  -  strlen()  -  strcmp()  -  strchr() \n-  strstr()  -  strset()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/strlen()/", 
            "text": "strlen(\ntext string\n)\n\n\nReturns\n\n\nThe length of the string, in characters (with spaces included).\n\n\nDescription\n\n\nCounts the number of characters of the text given as a parameter, or contained\ncurrently in the passed string.\n\n\nThe \ntext string\n can be a literal (text between quotation marks) or data of\nany other type.\n\n\nExample program\n\n\nPROGRAM example_strlen;\n\nGLOBAL\n    STRING string1=\nText example\n;\n    length_string1;\n\nBEGIN\n    write(0,0,0,0,\nText contained in \nstring1\n:\n);\n    write(0,0,10,0,string1);\n    write(0,0,20,0,\nLength of \nstring1\n:\n);\n\n    length_string1=strlen(string1); // calculates the length\n\n    write_int(0,0,30,0,OFFSET length_string1);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\n\n\nA character or string can be added to another string with the function \nstrcat()\n, or\nwith a statement of \nassignation\n such as the following:\n\n\nstring1+=\na\n;\n\n\nTo remove characters of a string use \nstrdel()\n, although it\nis possible to eliminate characters at the end of a string with statements\nsuch as the following:\n\n\nstring1--;\n\n\nstring1-=1;\n\n\nstring1=string1-1;\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "strlen()"
        }, 
        {
            "location": "/strlen()/#returns", 
            "text": "The length of the string, in characters (with spaces included).", 
            "title": "Returns"
        }, 
        {
            "location": "/strlen()/#description", 
            "text": "Counts the number of characters of the text given as a parameter, or contained\ncurrently in the passed string.  The  text string  can be a literal (text between quotation marks) or data of\nany other type.", 
            "title": "Description"
        }, 
        {
            "location": "/strlen()/#example-program", 
            "text": "PROGRAM example_strlen;\n\nGLOBAL\n    STRING string1= Text example ;\n    length_string1;\n\nBEGIN\n    write(0,0,0,0, Text contained in  string1 : );\n    write(0,0,10,0,string1);\n    write(0,0,20,0, Length of  string1 : );\n\n    length_string1=strlen(string1); // calculates the length\n\n    write_int(0,0,30,0,OFFSET length_string1);\n    LOOP\n        FRAME;\n    END\nEND   A character or string can be added to another string with the function  strcat() , or\nwith a statement of  assignation  such as the following:  string1+= a ;  To remove characters of a string use  strdel() , although it\nis possible to eliminate characters at the end of a string with statements\nsuch as the following:  string1--;  string1-=1;  string1=string1-1;   See:  strcpy()  -  strcat()  -  strcmp()  -  strchr() \n-  strstr()  -  strset()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/strcmp()/", 
            "text": "strcmp(\nstring1\n,\n \nstring2\n)\n\n\nReturns\n\n\n +n\n - If the first string is bigger than the second.\n\n\n  0\n - If the strings are identical.\n\n\n -n\n - If the first string is smaller than the second.\n\n\nDescription\n\n\nCompares two text strings, character per character, giving back \n0\n when\nboth strings are identical.\n\n\nExample program\n\n\nPROGRAM example_strcmp;\n\nGLOBAL\n    STRING mystring;\n\nBEGIN\n    // ...\n\n    IF (strcmp(mystring,\nabc\n)==0)\n\n        // The two strings are identical ...\n\n    END\n\n    // ...\nEND\n\n\n\n\n\n\nif the strings have less than 1024 characters, the comparison of strings can also be\ndone with the typical operators of comparison.\n\n\nFor example, the comparison of the previous example could be done with the\nfollowing statement:\n\n\nIF (mystring==\nabc\n)\n\n\n//...\n\n\nEND\n\n\nIn the same way, the symbol \n can be used to compare if the two strings\nare different, with the symbols \n or \n=\n if a string is smaller,\nor identical to another, etc.\n\n\n\n\nTo search for a string inside another (to see if it is contained in it), the \nfunction \nstrstr()\n, must be used, and to see if a string contains a specific character\nthe function \nstrchr()\n must be used.\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "strcmp()"
        }, 
        {
            "location": "/strcmp()/#returns", 
            "text": "+n  - If the first string is bigger than the second.    0  - If the strings are identical.   -n  - If the first string is smaller than the second.", 
            "title": "Returns"
        }, 
        {
            "location": "/strcmp()/#description", 
            "text": "Compares two text strings, character per character, giving back  0  when\nboth strings are identical.", 
            "title": "Description"
        }, 
        {
            "location": "/strcmp()/#example-program", 
            "text": "PROGRAM example_strcmp;\n\nGLOBAL\n    STRING mystring;\n\nBEGIN\n    // ...\n\n    IF (strcmp(mystring, abc )==0)\n\n        // The two strings are identical ...\n\n    END\n\n    // ...\nEND   if the strings have less than 1024 characters, the comparison of strings can also be\ndone with the typical operators of comparison.  For example, the comparison of the previous example could be done with the\nfollowing statement:  IF (mystring== abc )  //...  END  In the same way, the symbol   can be used to compare if the two strings\nare different, with the symbols   or  =  if a string is smaller,\nor identical to another, etc.   To search for a string inside another (to see if it is contained in it), the \nfunction  strstr() , must be used, and to see if a string contains a specific character\nthe function  strchr()  must be used.   See:  strcpy()  -  strcat()  -  strlen()  -  strchr() \n-  strstr()  -  strset()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/strchr()/", 
            "text": "strchr(\ntext string\n,\n \ncharacters\n)\n\n\nReturns\n\n\n -1\n If none of the characters were found inside of the string.\n\n\n +n\n If one of the characters was found in the position \nn\n of the string.\n\n\nDescription\n\n\nSearches for one or some \ncharacters\n in a \ntext string\n. It receives the\nstring as first parameter and, as the second, one or more characters in a \nliteral (between quotation marks).\n\n\nThis function will determine if the string contains any of the characters and,\nif so, will indicate at which position inside the string (from 0) the character appears. \nIn the character appears on more than one occasion, the function\nwill always return the first position the character occurred.\n\n\nExample program\n\n\nPROGRAM example_strchr;\n\nGLOBAL\n    STRING mystring=\nFGHIJK\n;\n    position;\n\nBEGIN\n    write(0,0,0,0,\nFirst vowel of \nmystring\n is in position:\n);\n\n    position=strchr(mystring,\nAEIOU\n);\n\n    write_int(0,0,10,0,OFFSET position);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example the function \nstrchr()\n is used to determinate the first vowel\nof \nmystring\n is the position \n3\n of the string.\n\n\n\n\nThe characters of a data of \nSTRING\n can be accessed always as if this would\nbe a table of characters. For example, to change in the data \nmystring\n of the\nprevious example, the character \nI\n for a character \n-\n the following statement\ncould be used:\n\n\nmystring[3]=char(\n-\n);\n\n\nTo convert a character, contained in a literal, in its ordinal value (ASCII)\nthe function \nchar()\n is used.\n\n\n\n\nTo determinate if a string is completely contained in another (if appears as\na substring inside of the same), the function \nstrstr()\n must be used.\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "strchr()"
        }, 
        {
            "location": "/strchr()/#returns", 
            "text": "-1  If none of the characters were found inside of the string.   +n  If one of the characters was found in the position  n  of the string.", 
            "title": "Returns"
        }, 
        {
            "location": "/strchr()/#description", 
            "text": "Searches for one or some  characters  in a  text string . It receives the\nstring as first parameter and, as the second, one or more characters in a \nliteral (between quotation marks).  This function will determine if the string contains any of the characters and,\nif so, will indicate at which position inside the string (from 0) the character appears. \nIn the character appears on more than one occasion, the function\nwill always return the first position the character occurred.", 
            "title": "Description"
        }, 
        {
            "location": "/strchr()/#example-program", 
            "text": "PROGRAM example_strchr;\n\nGLOBAL\n    STRING mystring= FGHIJK ;\n    position;\n\nBEGIN\n    write(0,0,0,0, First vowel of  mystring  is in position: );\n\n    position=strchr(mystring, AEIOU );\n\n    write_int(0,0,10,0,OFFSET position);\n    LOOP\n        FRAME;\n    END\nEND  In this example the function  strchr()  is used to determinate the first vowel\nof  mystring  is the position  3  of the string.   The characters of a data of  STRING  can be accessed always as if this would\nbe a table of characters. For example, to change in the data  mystring  of the\nprevious example, the character  I  for a character  -  the following statement\ncould be used:  mystring[3]=char( - );  To convert a character, contained in a literal, in its ordinal value (ASCII)\nthe function  char()  is used.   To determinate if a string is completely contained in another (if appears as\na substring inside of the same), the function  strstr()  must be used.   See:  strcpy()  -  strcat()  -  strlen()  -  strcmp() \n-  strstr()  -  strset()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/strstr()/", 
            "text": "strstr(\nstring of text\n,\n \nsubstring\n)\n\n\nReturns\n\n\n -1\n If the substring wasn't found inside of the string.\n\n\n +n\n If it was found in the position \nn\n of the text string.\n\n\nDescription\n\n\nSearches for the sequence of characters contained in the \nsubstring\n in a\n\ntext string\n.\n\n\nThis function will determine if a text string contains the substring (as \nHOUSE\n\ncontains \nUSE\n) and, if so, will indicate whereabouts the substring appears inside\nof the string (from 0, 1 in the previous example).\nIf the substring on more than one occasion, the function will return\nthe position where the string first occurred.\n\n\nExample program\n\n\nPROGRAM example_strstr;\n\nGLOBAL\n    STRING mystring=\nThis is an example string.\n;\n    position;\n\nBEGIN\n\n    position=strstr(mystring,\nan\n);\n\n    write_int(0,0,10,0,OFFSET position);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example the function \nstrstr()\n is used to determine where \nthe substring \nis\n is found inside \nmystring\n, it will return the position \n8\n.\n\n\n\n\nTo change from capital letters to small letters\nthe functions \nupper()\n and \nlower()\n can be used.\n\n\n\n\nTo determine if a string contains a character, the function\n\nstrchr()\n must be used, which, allows you to search for\n any character inside the specified group simultaneously.\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrset()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "strstr()"
        }, 
        {
            "location": "/strstr()/#returns", 
            "text": "-1  If the substring wasn't found inside of the string.   +n  If it was found in the position  n  of the text string.", 
            "title": "Returns"
        }, 
        {
            "location": "/strstr()/#description", 
            "text": "Searches for the sequence of characters contained in the  substring  in a text string .  This function will determine if a text string contains the substring (as  HOUSE \ncontains  USE ) and, if so, will indicate whereabouts the substring appears inside\nof the string (from 0, 1 in the previous example).\nIf the substring on more than one occasion, the function will return\nthe position where the string first occurred.", 
            "title": "Description"
        }, 
        {
            "location": "/strstr()/#example-program", 
            "text": "PROGRAM example_strstr;\n\nGLOBAL\n    STRING mystring= This is an example string. ;\n    position;\n\nBEGIN\n\n    position=strstr(mystring, an );\n\n    write_int(0,0,10,0,OFFSET position);\n    LOOP\n        FRAME;\n    END\nEND  In this example the function  strstr()  is used to determine where \nthe substring  is  is found inside  mystring , it will return the position  8 .   To change from capital letters to small letters\nthe functions  upper()  and  lower()  can be used.   To determine if a string contains a character, the function strchr()  must be used, which, allows you to search for\n any character inside the specified group simultaneously.   See:  strcpy()  -  strcat()  -  strlen()  -  strcmp()  -  strchr() \n-  strset()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/strset()/", 
            "text": "strset(\ntext string\n,\n \ncharacter\n)\n\n\nDescription\n\n\nAssigns to every position of the \nstring\n the \ncharacter\n indicated as\nthe second parameter.\n\n\nThe function can receive the \ncharacter\n in two ways; as a literal (the\ncharacter between quotation marks), or as its ordinal (its ASCII value) which must be\na value between \n0\n and \n255\n.\n\n\nThe complete string will be replaced with this character. The length of the string\ndepends on the indicated value between \n[]\n in its initiation, if the function doesn't\nknow the length of the data of type \nSTRING\n, a string of\n\n256\n characters will be created (from the position 0 to 255).\n\n\nExample program\n\n\nPROGRAM example_strset;\n\nGLOBAL\n    STRING mystring=\nThis is an example string.\n;\n\nBEGIN\n    write(0,0,0,0,\ncontent of \nmystring\n (press space to change it):\n);\n    write(0,0,10,0,mystring);\n    LOOP\n        IF (key(_space))\n\n            strset(mystring,\n*\n); // Fills up the string with \n*\n\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\n\n\nTo calculate the current length of a string, the function \nstrlen()\n will be used.\n\n\nTo delete characters from a string (from the beginning and from the end) the function\n\nstrdel()\n must be used.\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nupper()\n - \nlower()\n - \nstrdel()", 
            "title": "strset()"
        }, 
        {
            "location": "/strset()/#description", 
            "text": "Assigns to every position of the  string  the  character  indicated as\nthe second parameter.  The function can receive the  character  in two ways; as a literal (the\ncharacter between quotation marks), or as its ordinal (its ASCII value) which must be\na value between  0  and  255 .  The complete string will be replaced with this character. The length of the string\ndepends on the indicated value between  []  in its initiation, if the function doesn't\nknow the length of the data of type  STRING , a string of 256  characters will be created (from the position 0 to 255).", 
            "title": "Description"
        }, 
        {
            "location": "/strset()/#example-program", 
            "text": "PROGRAM example_strset;\n\nGLOBAL\n    STRING mystring= This is an example string. ;\n\nBEGIN\n    write(0,0,0,0, content of  mystring  (press space to change it): );\n    write(0,0,10,0,mystring);\n    LOOP\n        IF (key(_space))\n\n            strset(mystring, * ); // Fills up the string with  * \n\n        END\n        FRAME;\n    END\nEND   To calculate the current length of a string, the function  strlen()  will be used.  To delete characters from a string (from the beginning and from the end) the function strdel()  must be used.   See:  strcpy()  -  strcat()  -  strlen()  -  strcmp()  -  strchr() \n-  strstr()  -  upper()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/upper()/", 
            "text": "upper(\nstring or character\n)\n\n\nReturns\n\n\nIf a character was a small letter (lowercase), it returns the\nsame character but as a capital letter (uppercase).\n\n\nDescription\n\n\nconverts a string (or just a character) to capital letters, including the special\ncharacters, like the letter \n or the accentuated vowels.\n\n\nThis function works in one of two ways, depending on the parameter it receives:\n\n\n\n\n\n\nIf it receives a text string (or literal between quotation marks), it will convert to\ncapital letters every contained character in the string and won't return\nany significant value (just the cursor of the receipt string).\n\n\n\n\n\n\nIf it receives just one character (its ordinal value or ASCII value), it will return the\ncharacter converted into a capital letter (but just its ordinal value), and the function\nwill not change any data in memory.\n\n\n\n\n\n\nExample program\n\n\nPROGRAM example_upper;\n\nGLOBAL\n    STRING mystring=\nThis is an example string.\n;\n    STRING myletter=\na\n;\n\nBEGIN\n\n    upper(mystring); // converts a string to capital letters\n    upper(myletter);  // converts a character to capital letters\n\n    write(0,0,0,0,mystring);\n    write(0,0,10,0,OFFSET myletter);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nThis example has defined two global data (\nmystring\n and \nmyletter\n), the\nfunction \nupper()\n will be used to convert it to capital letters, and then\nit will be shown on screen.\n\n\n\n\nThis function will not modify those characters which are not small (lowercase) letters.\n\n\n\n\nThe function \nlower()\n is the opposite to \nupper()\n, because it can converts\na string (or a character) to small (lowercase) letters.\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nlower()\n - \nstrdel()", 
            "title": "upper()"
        }, 
        {
            "location": "/upper()/#returns", 
            "text": "If a character was a small letter (lowercase), it returns the\nsame character but as a capital letter (uppercase).", 
            "title": "Returns"
        }, 
        {
            "location": "/upper()/#description", 
            "text": "converts a string (or just a character) to capital letters, including the special\ncharacters, like the letter   or the accentuated vowels.  This function works in one of two ways, depending on the parameter it receives:    If it receives a text string (or literal between quotation marks), it will convert to\ncapital letters every contained character in the string and won't return\nany significant value (just the cursor of the receipt string).    If it receives just one character (its ordinal value or ASCII value), it will return the\ncharacter converted into a capital letter (but just its ordinal value), and the function\nwill not change any data in memory.", 
            "title": "Description"
        }, 
        {
            "location": "/upper()/#example-program", 
            "text": "PROGRAM example_upper;\n\nGLOBAL\n    STRING mystring= This is an example string. ;\n    STRING myletter= a ;\n\nBEGIN\n\n    upper(mystring); // converts a string to capital letters\n    upper(myletter);  // converts a character to capital letters\n\n    write(0,0,0,0,mystring);\n    write(0,0,10,0,OFFSET myletter);\n    LOOP\n        FRAME;\n    END\nEND  This example has defined two global data ( mystring  and  myletter ), the\nfunction  upper()  will be used to convert it to capital letters, and then\nit will be shown on screen.   This function will not modify those characters which are not small (lowercase) letters.   The function  lower()  is the opposite to  upper() , because it can converts\na string (or a character) to small (lowercase) letters.   See:  strcpy()  -  strcat()  -  strlen()  -  strcmp()  -  strchr() \n-  strstr()  -  strset()  -  lower()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/lower()/", 
            "text": "lower(\nstring or character\n)\n\n\nReturns\n\n\nIf a character is given to a capital letter (uppercase), it returns the\ncharacter changed to a small letter (lowercase).\n\n\nDescription\n\n\nConverts a string (or a simple character) into small letters, including the\nspecial characters, like the letter \n or the accented vowels.\n\n\nThis function can work in one of two modes, depending on the parameter given:\n\n\n\n\n\n\nIf it receives a text string (or literal between quotation marks), it will change into\nsmall letters every character contained in the string and will not return any\nsignificative value (just the cursor of the string given).\n\n\n\n\n\n\nIf it receives just a character (its ordinal value or ASCII), it will return\nthe character changed into a small letter (its ordinal value), and the\nfunction won't change any data in memory.\n\n\n\n\n\n\nExample program\n\n\nPROGRAM example_lower;\n\nGLOBAL\n    STRING mystring=\nTHIS IS AN EXAMPLE STRING\n;\n    STRING   myletter=\nA\n;\n\nBEGIN\n\n    lower(mystring); // Changes a string into small letters\n    lower(myletter);  // Changes a character into small letters\n\n    write(0,0,0,0,mystring);\n    write(0,0,10,0,OFFSET myletter);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nThis example has defined two global data (\nmystring\n and \nmyletter\n), the \nfunction \nlower()\n will be used to convert them into small letters, and\nthen will be shown on screen.\n\n\n\n\nThis function won't modify those characters which are not capital letters.\n\n\n\n\nThe function \nupper()\n is the opposite to \nlower()\n, because it changes\na string (or a character) into capital letters.\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nstrdel()", 
            "title": "lower()"
        }, 
        {
            "location": "/lower()/#returns", 
            "text": "If a character is given to a capital letter (uppercase), it returns the\ncharacter changed to a small letter (lowercase).", 
            "title": "Returns"
        }, 
        {
            "location": "/lower()/#description", 
            "text": "Converts a string (or a simple character) into small letters, including the\nspecial characters, like the letter   or the accented vowels.  This function can work in one of two modes, depending on the parameter given:    If it receives a text string (or literal between quotation marks), it will change into\nsmall letters every character contained in the string and will not return any\nsignificative value (just the cursor of the string given).    If it receives just a character (its ordinal value or ASCII), it will return\nthe character changed into a small letter (its ordinal value), and the\nfunction won't change any data in memory.", 
            "title": "Description"
        }, 
        {
            "location": "/lower()/#example-program", 
            "text": "PROGRAM example_lower;\n\nGLOBAL\n    STRING mystring= THIS IS AN EXAMPLE STRING ;\n    STRING   myletter= A ;\n\nBEGIN\n\n    lower(mystring); // Changes a string into small letters\n    lower(myletter);  // Changes a character into small letters\n\n    write(0,0,0,0,mystring);\n    write(0,0,10,0,OFFSET myletter);\n    LOOP\n        FRAME;\n    END\nEND  This example has defined two global data ( mystring  and  myletter ), the \nfunction  lower()  will be used to convert them into small letters, and\nthen will be shown on screen.   This function won't modify those characters which are not capital letters.   The function  upper()  is the opposite to  lower() , because it changes\na string (or a character) into capital letters.   See:  strcpy()  -  strcat()  -  strlen()  -  strcmp()  -  strchr() \n-  strstr()  -  strset()  -  upper()  -  strdel()", 
            "title": "Example program"
        }, 
        {
            "location": "/strdel()/", 
            "text": "strdel(\nstring of text\n,\n \ninitial subtraction\n,\n \nfinal subtraction\n)\n\n\nDescription\n\n\nThis function deletes characters from a \nstring of text\n. Characters Will be eliminated\n\ninitial subtraction\n from the beginning of the string and characters \nfinal subtraction\n\nfrom the end of it.\n\n\nTo eliminate just characters from the beginning of the string you must indicate\n\n0\n as the \nfinal subtraction\n, and to eliminate just from the end, set \n0\n as {\ninitial\nsubtraction\n}.\n\n\nExample program\n\n\nPROGRAM example_strdel;\n\nGLOBAL\n    STRING mystring=\nThis is an example string.\n;\n\nBEGIN\n\n    strdel(mystring,5,9);\n\n    write(0,0,0,0,mystring);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nThis example uses the function \nstrdel()\n to eliminate the first \n5\n\ncharacters of \nmystring\n and the last \n9\n, and then, show the resultant string\non screen (\nis an examp\n).\n\n\n\n\nNote If the quantity of characters to delete is negative (for the beginning or\n\n\nfor the end), the function will add spaces to the string.\n\n\n\n\nIt is also possible to eliminate characters from the end of a string with statements\nsuch as the following:\n\n\nstring1--;\n\n\nstring1-=1;\n\n\nstring1=string1-1;\n\n\n\n\nSee: \nstrcpy()\n - \nstrcat()\n - \nstrlen()\n - \nstrcmp()\n - \nstrchr()\n\n- \nstrstr()\n - \nstrset()\n - \nupper()\n - \nlower()", 
            "title": "strdel()"
        }, 
        {
            "location": "/strdel()/#description", 
            "text": "This function deletes characters from a  string of text . Characters Will be eliminated initial subtraction  from the beginning of the string and characters  final subtraction \nfrom the end of it.  To eliminate just characters from the beginning of the string you must indicate 0  as the  final subtraction , and to eliminate just from the end, set  0  as { initial\nsubtraction }.", 
            "title": "Description"
        }, 
        {
            "location": "/strdel()/#example-program", 
            "text": "PROGRAM example_strdel;\n\nGLOBAL\n    STRING mystring= This is an example string. ;\n\nBEGIN\n\n    strdel(mystring,5,9);\n\n    write(0,0,0,0,mystring);\n    LOOP\n        FRAME;\n    END\nEND  This example uses the function  strdel()  to eliminate the first  5 \ncharacters of  mystring  and the last  9 , and then, show the resultant string\non screen ( is an examp ).", 
            "title": "Example program"
        }, 
        {
            "location": "/strdel()/#note-if-the-quantity-of-characters-to-delete-is-negative-for-the-beginning-or", 
            "text": "for the end), the function will add spaces to the string.   It is also possible to eliminate characters from the end of a string with statements\nsuch as the following:  string1--;  string1-=1;  string1=string1-1;   See:  strcpy()  -  strcat()  -  strlen()  -  strcmp()  -  strchr() \n-  strstr()  -  strset()  -  upper()  -  lower()", 
            "title": "Note If the quantity of characters to delete is negative (for the beginning or"
        }, 
        {
            "location": "/screen_copy()/", 
            "text": "screen_copy(\nregion\n,\n \nfile\n,\n \ngraphic\n,\n \nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n)\n\n\nDescription\n\n\nCopies a screen region to a region of any graphic.\n\n\nThis is a potent function that can be very useful, because it gives\n\nfeedback\n from the computer screen, and can send an image of the screen to a graphic\n(opposite operation to the normal).\n\n\nFirst you must define the number of the rectangular \nregion\n which is going to be\ncopied from the screen (of the previous image of the program), these regions are defined\nwith the function \ndefine_region()\n. The \nregion number 0\n is always related to\nthe entire screen.\n\n\nThen, the graphic where the image is going to be transferred to must be indicated \nwith the parameters \nfile\n and \ngraphic\n (the file will be the number 0, if the\ngraphic belongs to the first FPG loaded, or if it has been loaded already).\n\n\nFinally,  \nthe zone inside of the graphic\n the image must be transferred to will be defined.\nThis will be defined as \nx\n, \ny\n, \nwidth\n and \nheight\n, related\nto the coordinates inside of the graphic (being the coordinates [0,0] its upper left\ncorner).\n\n\nExample program\n\n\nPROGRAM example_screen_copy;\n\nGLOBAL\n    angle1;\n    angle2;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    graph=2;\n    x=160;\n    y=100;\n    put(0,graph,x,y);\n    LOOP\n\n        // Copies the screen (region 0) to the graphic 2\n\n        screen_copy(0,0,2,0,0,320,200);\n\n        angle1+=1000;\n        angle2+=1971;\n        angle=get_distx(angle1,25000);\n        size=95+get_disty(angle2,30);\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example the file help.fpg is loaded, in which the \ngraphic number 2\n is\na cell of different colours, and is placed on the screen and defined as the graphic\nof the main process, which will rotate and change its size\n(depending on the \nangle\n and \nangle2\n, respectively).\n\n\nThen the function \nscreen_copy()\n is used again to send the updated\nimage of the screen to this graphic, so this effect happens.\n\n\n\n\nNote The \nsize\n of the screen region (the transferred zone) and the size of the\n\n\ngraphic region (where it's transferred) \ndoesn't have to match\n. The function\n\nscreen_copy()\n will do a \nreduction\n or \nampliation\n when needed to adjust\nthe size of the transferred zone.\n\n\n\n\nSee: \ndefine_region()\n - \nclear_screen()\n - \ngraph", 
            "title": "screen_copy()"
        }, 
        {
            "location": "/screen_copy()/#description", 
            "text": "Copies a screen region to a region of any graphic.  This is a potent function that can be very useful, because it gives feedback  from the computer screen, and can send an image of the screen to a graphic\n(opposite operation to the normal).  First you must define the number of the rectangular  region  which is going to be\ncopied from the screen (of the previous image of the program), these regions are defined\nwith the function  define_region() . The  region number 0  is always related to\nthe entire screen.  Then, the graphic where the image is going to be transferred to must be indicated \nwith the parameters  file  and  graphic  (the file will be the number 0, if the\ngraphic belongs to the first FPG loaded, or if it has been loaded already).  Finally,   the zone inside of the graphic  the image must be transferred to will be defined.\nThis will be defined as  x ,  y ,  width  and  height , related\nto the coordinates inside of the graphic (being the coordinates [0,0] its upper left\ncorner).", 
            "title": "Description"
        }, 
        {
            "location": "/screen_copy()/#example-program", 
            "text": "PROGRAM example_screen_copy;\n\nGLOBAL\n    angle1;\n    angle2;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    graph=2;\n    x=160;\n    y=100;\n    put(0,graph,x,y);\n    LOOP\n\n        // Copies the screen (region 0) to the graphic 2\n\n        screen_copy(0,0,2,0,0,320,200);\n\n        angle1+=1000;\n        angle2+=1971;\n        angle=get_distx(angle1,25000);\n        size=95+get_disty(angle2,30);\n        FRAME;\n    END\nEND  In this example the file help.fpg is loaded, in which the  graphic number 2  is\na cell of different colours, and is placed on the screen and defined as the graphic\nof the main process, which will rotate and change its size\n(depending on the  angle  and  angle2 , respectively).  Then the function  screen_copy()  is used again to send the updated\nimage of the screen to this graphic, so this effect happens.", 
            "title": "Example program"
        }, 
        {
            "location": "/screen_copy()/#note-the-size-of-the-screen-region-the-transferred-zone-and-the-size-of-the", 
            "text": "graphic region (where it's transferred)  doesn't have to match . The function screen_copy()  will do a  reduction  or  ampliation  when needed to adjust\nthe size of the transferred zone.   See:  define_region()  -  clear_screen()  -  graph", 
            "title": "Note The size of the screen region (the transferred zone) and the size of the"
        }, 
        {
            "location": "/qsort()/", 
            "text": "qsort(\nstructure name\n,\n \nfield name\n,\n \nmode\n)\n\n\nDescription\n\n\nOrders or shuffles one of the fields of a program structure .\n\n\nIt is a simple but useful function which allows the quick\nordering and shuffling of data structures.\n\n\nIts use is very simple, all is required is the \nname of the structure\n,\nthe one of the \nfield which is going to be used as index\n, and the \nordination mode\n;\none of the indicated now:\n\n\n0\n - Ascendent ordination (from min to max).\n\n\n1\n - Descendent ordination (from max to min).\n\n\n2\n - Random ordering (shuffling)\n\n\nAny of the data contained in the structure can be used as the index field, without\ndepending on if it is numeric data or a string of text (in which case it will be\nordered alphabetically)\n\n\nExample program\n\n\nPROGRAM example_qsort;\n\nGLOBAL\n\n  STRUCT mystructure[9];\n    STRING name[32];\n    points;\n    x,y;\n  END\n\nBEGIN\n\n  //...\n\n  // Orders the registers of mystructure, the one with the biggest\n  // score being placed at the beginning\n\n  qsort(mystructure,points, 1);\n\n  //...\n\nEND\n\n\n\n\nThis example shows the easy use of the function \nqsort()\n to order\na structure, that can represent any type of object inside of a\nprogram.\n\n\nIt is not necessary that the field used as index (\npoints\n in this case)\nis the first field of the structure.\n\n\n\n\nNote The shuffling of a structure requires a field which makes\n\n\ndifferences between the different registers of the same. This operation can be\nuseful to give \nrandomness\n to a program (for example, to \nmix\n or \nshuffle\n\na deck of cards).", 
            "title": "qsort()"
        }, 
        {
            "location": "/qsort()/#description", 
            "text": "Orders or shuffles one of the fields of a program structure .  It is a simple but useful function which allows the quick\nordering and shuffling of data structures.  Its use is very simple, all is required is the  name of the structure ,\nthe one of the  field which is going to be used as index , and the  ordination mode ;\none of the indicated now:  0  - Ascendent ordination (from min to max).  1  - Descendent ordination (from max to min).  2  - Random ordering (shuffling)  Any of the data contained in the structure can be used as the index field, without\ndepending on if it is numeric data or a string of text (in which case it will be\nordered alphabetically)", 
            "title": "Description"
        }, 
        {
            "location": "/qsort()/#example-program", 
            "text": "PROGRAM example_qsort;\n\nGLOBAL\n\n  STRUCT mystructure[9];\n    STRING name[32];\n    points;\n    x,y;\n  END\n\nBEGIN\n\n  //...\n\n  // Orders the registers of mystructure, the one with the biggest\n  // score being placed at the beginning\n\n  qsort(mystructure,points, 1);\n\n  //...\n\nEND  This example shows the easy use of the function  qsort()  to order\na structure, that can represent any type of object inside of a\nprogram.  It is not necessary that the field used as index ( points  in this case)\nis the first field of the structure.", 
            "title": "Example program"
        }, 
        {
            "location": "/qsort()/#note-the-shuffling-of-a-structure-requires-a-field-which-makes", 
            "text": "differences between the different registers of the same. This operation can be\nuseful to give  randomness  to a program (for example, to  mix  or  shuffle \na deck of cards).", 
            "title": "Note The shuffling of a structure requires a field which makes"
        }, 
        {
            "location": "/load_song()/", 
            "text": "load_song(\nname of file\n,\n \nreplay\n)\n\n\nReturns\n\n\nIdentifier of the loaded song, or -1 if an error occurs.\n\n\nDescription\n\n\nLoads a song from an file MOD, S3M or XM, to its later reproduction.\n\n\nThe function requires the name of the file which contains the music module,\nand if this one must be played back just once (indicating \n0\n in \nreplay\n) or\nindefinitely (indicating \n1\n).\n\n\nThese music modules can be composed with multiple shareware programs\nor freeware programs. In DIV Games Studio these music modules can be played back, in the created programs,\nbut you cannot compose new modules.\n\n\nExample program\n\n\nPROGRAM example_load_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n\n    load_song(\nhelp/help.xm\n,1); // Loads an XM module, with replay\n\n    song(id_song);\n    write(0,0,0,0,\nPress ESC to finish\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_ESC));\n    unload_song(id_song);\nEND\n\n\n\n\nThis example loads the module contained in the file \nhelp.xm\n with the\nfunction \nload_song()\n, indicating that this one must be played back indefinitely.\nThe reproduction of the file is begun with a call to the function \nsong()\n.\n\n\nTo delete a song from memory, the function \nunload_song()\n must be used.\n\n\nThe sound volume of the song can be controlled with the function \nset_volume()\n \nand the data contained in the \nsetup structure\n.\n\n\n\n\nNote With this version of DIV Games Studio comes included some files of freeware\n\n\nmusic modules in the directory \nMOD\n.\n\n\n\n\nNote To reproduce songs contained in a CD-Audio track the functions\n\n\nplay_cd()\n and \nstop_cd()\n must be used.\n\n\n\n\nSee: \nunload_song()\n - \nsong()\n - \nplay_cd()\n - \nSetup structure", 
            "title": "load_song()"
        }, 
        {
            "location": "/load_song()/#returns", 
            "text": "Identifier of the loaded song, or -1 if an error occurs.", 
            "title": "Returns"
        }, 
        {
            "location": "/load_song()/#description", 
            "text": "Loads a song from an file MOD, S3M or XM, to its later reproduction.  The function requires the name of the file which contains the music module,\nand if this one must be played back just once (indicating  0  in  replay ) or\nindefinitely (indicating  1 ).  These music modules can be composed with multiple shareware programs\nor freeware programs. In DIV Games Studio these music modules can be played back, in the created programs,\nbut you cannot compose new modules.", 
            "title": "Description"
        }, 
        {
            "location": "/load_song()/#example-program", 
            "text": "PROGRAM example_load_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n\n    load_song( help/help.xm ,1); // Loads an XM module, with replay\n\n    song(id_song);\n    write(0,0,0,0, Press ESC to finish );\n    REPEAT\n        FRAME;\n    UNTIL (key(_ESC));\n    unload_song(id_song);\nEND  This example loads the module contained in the file  help.xm  with the\nfunction  load_song() , indicating that this one must be played back indefinitely.\nThe reproduction of the file is begun with a call to the function  song() .  To delete a song from memory, the function  unload_song()  must be used.  The sound volume of the song can be controlled with the function  set_volume()  \nand the data contained in the  setup structure .", 
            "title": "Example program"
        }, 
        {
            "location": "/load_song()/#note-with-this-version-of-div-games-studio-comes-included-some-files-of-freeware", 
            "text": "music modules in the directory  MOD .", 
            "title": "Note With this version of DIV Games Studio comes included some files of freeware"
        }, 
        {
            "location": "/load_song()/#note-to-reproduce-songs-contained-in-a-cd-audio-track-the-functions", 
            "text": "play_cd()  and  stop_cd()  must be used.   See:  unload_song()  -  song()  -  play_cd()  -  Setup structure", 
            "title": "Note To reproduce songs contained in a CD-Audio track the functions"
        }, 
        {
            "location": "/unload_song()/", 
            "text": "unload_song(\nidentifier of the module\n)\n\n\nDescription\n\n\nDeletes from memory the music module whose identifier is given as the\nparameter. This \nidentifier of the module\n is the value which the\nfunction returns  \nload_song()\n when is loaded into memory.\n\n\nAfter deleting a module \nyou must be very cautious\n\nnot to use it again in the program, otherwise the program would crash.\n\n\nIt is not necessary to delete the modules\n before finishing the program\nbecause the system will do it automatically.\nSo, just delete from memory the modules which are not going to be\nused for the time being in order to liberate computer memory to load\nother resources (other files of graphics, sounds, fonts, etc).\n\n\nExample program\n\n\nPROGRAM example_unload_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n    load_song(\nhelp/help.xm\n,1);\n    song(id_song);\n    write(0,0,0,0,\nPress ESC to finish\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_ESC));\n\n    unload_song(id_song); // Sets free the filled memory by the module\n\nEND\n\n\n\n\nThis example loads the module contained in the file \nhelp.xm\n with the\nfunction \nload_song()\n. The playback of the file is indicated with a\ncall to the function \nsong()\n.\n\n\nThe program will continue to play this module until the \nESC\n key is pressed,\nthe module is then deleted from memory with the function \nunload_song()\n,\nindicating as the parameter \nid_song\n which contains the \nidentifier of the module\n\nreturned when loaded.\n\n\n\n\nNote songs that are CD-Audio tracks, which can be played with\n\n\nthe function \nplay_cd()\n, don't use up computer memory,\nso they cannot be deleted with the function \nunload_song()\n.\n\n\n\n\nSee: \nload_song()\n - \nsong()", 
            "title": "unload_song()"
        }, 
        {
            "location": "/unload_song()/#description", 
            "text": "Deletes from memory the music module whose identifier is given as the\nparameter. This  identifier of the module  is the value which the\nfunction returns   load_song()  when is loaded into memory.  After deleting a module  you must be very cautious \nnot to use it again in the program, otherwise the program would crash.  It is not necessary to delete the modules  before finishing the program\nbecause the system will do it automatically.\nSo, just delete from memory the modules which are not going to be\nused for the time being in order to liberate computer memory to load\nother resources (other files of graphics, sounds, fonts, etc).", 
            "title": "Description"
        }, 
        {
            "location": "/unload_song()/#example-program", 
            "text": "PROGRAM example_unload_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n    load_song( help/help.xm ,1);\n    song(id_song);\n    write(0,0,0,0, Press ESC to finish );\n    REPEAT\n        FRAME;\n    UNTIL (key(_ESC));\n\n    unload_song(id_song); // Sets free the filled memory by the module\n\nEND  This example loads the module contained in the file  help.xm  with the\nfunction  load_song() . The playback of the file is indicated with a\ncall to the function  song() .  The program will continue to play this module until the  ESC  key is pressed,\nthe module is then deleted from memory with the function  unload_song() ,\nindicating as the parameter  id_song  which contains the  identifier of the module \nreturned when loaded.", 
            "title": "Example program"
        }, 
        {
            "location": "/unload_song()/#note-songs-that-are-cd-audio-tracks-which-can-be-played-with", 
            "text": "the function  play_cd() , don't use up computer memory,\nso they cannot be deleted with the function  unload_song() .   See:  load_song()  -  song()", 
            "title": "Note songs that are CD-Audio tracks, which can be played with"
        }, 
        {
            "location": "/song()/", 
            "text": "song(\nidentifier of the module\n)\n\n\nDescription\n\n\nStarts playback of a music module loaded with the function\n\nload_song()\n. The function will receive as its only parameter the {\nidentifier\nof the module\n} to play back.\n\n\nJust one module can be played at the same time, if another starts, the previous module\nwill stop. But a music module, a CD-Audio track (see \nplay_cd()\n) and multiple \nsound effects (see \nsound()\n) can be played at the same time .\n\n\nThe playback will always begin from the start of the module (the beginning\nof the song). To play a specific part of the module then use the function\n\nset_song_pos()\n, which sets the position from where playback of the module\nwill start.\n\n\nExample program\n\n\nPROGRAM example_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n    load_song(\nhelp/help.xm\n,1);\n\n    song(id_song); // Starts the reproduction of the music module\n\n    write(0,0,0,0,\nPress ESC to finish\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_ESC));\n    unload_song(id_song);\nEND\n\n\n\n\nThis example loads the module contained in the file \nhelp.xm\n with the\nfunction \nload_song()\n, indicating that this must be played\nindefinitely (this must be indicated in the file's load).\n\n\nThen the playback of the file begins with the function \nsong()\n.\n\n\nThe program will then enter a loop in which this module will still be playing, \nuntil the \nESC\n key is pressed and the program finishes.\n\n\nThe sound volume of playback can be controlled with the function\n\nset_volume()\n and the contained data in the \nsetup structure\n.\n\n\n\n\nNote To finish the playback of a music module the function\n\n\nstop_song()\n must be used.\n\n\n\n\nNote The function \nis_playing_song()\n can find if the module is being currently\n\n\nplayed.\n\n\n\n\nSee: \nload_song()\n - \nstop_song()\n - \nplay_cd()\n - \nsound()", 
            "title": "song()"
        }, 
        {
            "location": "/song()/#description", 
            "text": "Starts playback of a music module loaded with the function load_song() . The function will receive as its only parameter the { identifier\nof the module } to play back.  Just one module can be played at the same time, if another starts, the previous module\nwill stop. But a music module, a CD-Audio track (see  play_cd() ) and multiple \nsound effects (see  sound() ) can be played at the same time .  The playback will always begin from the start of the module (the beginning\nof the song). To play a specific part of the module then use the function set_song_pos() , which sets the position from where playback of the module\nwill start.", 
            "title": "Description"
        }, 
        {
            "location": "/song()/#example-program", 
            "text": "PROGRAM example_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n    load_song( help/help.xm ,1);\n\n    song(id_song); // Starts the reproduction of the music module\n\n    write(0,0,0,0, Press ESC to finish );\n    REPEAT\n        FRAME;\n    UNTIL (key(_ESC));\n    unload_song(id_song);\nEND  This example loads the module contained in the file  help.xm  with the\nfunction  load_song() , indicating that this must be played\nindefinitely (this must be indicated in the file's load).  Then the playback of the file begins with the function  song() .  The program will then enter a loop in which this module will still be playing, \nuntil the  ESC  key is pressed and the program finishes.  The sound volume of playback can be controlled with the function set_volume()  and the contained data in the  setup structure .", 
            "title": "Example program"
        }, 
        {
            "location": "/song()/#note-to-finish-the-playback-of-a-music-module-the-function", 
            "text": "stop_song()  must be used.", 
            "title": "Note To finish the playback of a music module the function"
        }, 
        {
            "location": "/song()/#note-the-function-is_playing_song-can-find-if-the-module-is-being-currently", 
            "text": "played.   See:  load_song()  -  stop_song()  -  play_cd()  -  sound()", 
            "title": "Note The function is_playing_song() can find if the module is being currently"
        }, 
        {
            "location": "/stop_song()/", 
            "text": "stop_song(\n)\n\n\nDescription\n\n\nStops the playback of the music module (MOD, S3M or XM) which is being played.\nThis function doesn't require any parameter, because only one music module can be\nplayed at the same time.\n\n\nIt is not essential to stop the playback of a music module before being\ndeleted from memory (an operation made with the function \nunload_song()\n), \nthis is done automatically.\n\n\nExample program\n\n\nPROGRAM example_stop_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n    load_song(\nhelp/help.xm\n,1);\n    song(id_song);\n    write(0,0,0,0,\nPress SPACE to stop the song ...\n);\n    LOOP\n        IF (key(_space))\n\n            stop_song(); // Stops the module\n\n        END\n        FRAME;\n    END\n    unload_song(id_song);\nEND\n\n\n\n\nThis example loads the module contained in the file \nhelp.xm\n with the\nfunction \nload_song()\n. The playback of the file begins with a\ncall to the function \nsong()\n.\n\n\nThe program will then enter into a loop in which this module will still be playing,\nwhen the space bar is pressed it makes a call to the function \nstop_song()\n\nand the module finishes.\n\n\nTo delete a song from memory the function \nunload_song()\n must be used, \nall the programs created in DIV Games Studio will free any\nfilled memory automatically at the end.\n\n\n\n\nNote To stop a song of CD-Audio the function \nstop_cd()\n is used, and for\n\n\na sound effect, use the function \nstop_sound()\n.\n\n\n\n\nNote The function \nis_playing_song()\n can find out if a module is playing.\n\n\n\n\nSee: \nsong()\n - \nload_song()\n - \nplay_cd()\n - \nsound()", 
            "title": "stop_song()"
        }, 
        {
            "location": "/stop_song()/#description", 
            "text": "Stops the playback of the music module (MOD, S3M or XM) which is being played.\nThis function doesn't require any parameter, because only one music module can be\nplayed at the same time.  It is not essential to stop the playback of a music module before being\ndeleted from memory (an operation made with the function  unload_song() ), \nthis is done automatically.", 
            "title": "Description"
        }, 
        {
            "location": "/stop_song()/#example-program", 
            "text": "PROGRAM example_stop_song;\n\nGLOBAL\n    id_song;\n\nBEGIN\n    load_song( help/help.xm ,1);\n    song(id_song);\n    write(0,0,0,0, Press SPACE to stop the song ... );\n    LOOP\n        IF (key(_space))\n\n            stop_song(); // Stops the module\n\n        END\n        FRAME;\n    END\n    unload_song(id_song);\nEND  This example loads the module contained in the file  help.xm  with the\nfunction  load_song() . The playback of the file begins with a\ncall to the function  song() .  The program will then enter into a loop in which this module will still be playing,\nwhen the space bar is pressed it makes a call to the function  stop_song() \nand the module finishes.  To delete a song from memory the function  unload_song()  must be used, \nall the programs created in DIV Games Studio will free any\nfilled memory automatically at the end.", 
            "title": "Example program"
        }, 
        {
            "location": "/stop_song()/#note-to-stop-a-song-of-cd-audio-the-function-stop_cd-is-used-and-for", 
            "text": "a sound effect, use the function  stop_sound() .", 
            "title": "Note To stop a song of CD-Audio the function stop_cd() is used, and for"
        }, 
        {
            "location": "/stop_song()/#note-the-function-is_playing_song-can-find-out-if-a-module-is-playing", 
            "text": "See:  song()  -  load_song()  -  play_cd()  -  sound()", 
            "title": "Note The function is_playing_song() can find out if a module is playing."
        }, 
        {
            "location": "/set_song_pos()/", 
            "text": "set_song_pos(\nposition of the module\n)\n\n\nDescription\n\n\nFixes the position of the music module playback (the \npattern\n number).\n\n\nThis \nposition of the module\n is a number between 0 and the max number of\n\npattern\n of the module. This value varies for each module, and can be defined in the\nprograms used to compose them. The modules usually have quite a variable number of \npatterns, though the average is usually situated between 30 and 40.\n\n\nInside each pattern, the modules have a determined number of lines\n(normally 64), in which appear the musical notes, so each pattern could be\ndefined as a small section of the music module.\n\n\nTo obtain the current position which is being played back the function\n\nget_song_pos()\n is used.\n\n\nThe position of the module can be changed if the module is playing or has stopped.\nThis function can be used to advance or to retard the playback of the module,\nto implement diverse loops in certain parts of a module, etc.\n\n\nExample program\n\n\nPROGRAM example_set_song_pos;\n\nGLOBAL\n    id_song;\n    position_module;\n\nBEGIN\n    load_song(\nhelp/help.xm\n,1);\n    song(id_song);\n    write(0,0,0,0,\nPress SPACE to change the position of the module ...\n);\n    write(0,0,20,0,\nposition:\n);\n    write_int(0,0,30,0,OFFSET position_module);\n    LOOP\n        IF (key(_space))\n            position_module=rand(0,19);\n\n            set_song_pos(position_module); // Changes the position of the module\n\n        END\n        position_module=get_song_pos();\n        FRAME;\n    END\nEND\n\n\n\n\nThis program loads the module contained in the file \nhelp.xm\n and then\nstarts its playback with the function \nsong()\n.\n\n\nFrom this moment the current position of the module will be shown on screen\nand it can be changed by pressing the space bar (a random position will be assigned\nbetween 0 and 19, because this module has 20 patterns).\n\n\n\n\nNote The playback line of a module can't be set (inside\n\n\neach pattern), but the value can be obtained with the function \nget_song_line()\n.\n\n\n\n\nSee: \nget_song_pos()\n - \nsong()\n - \nload_song()", 
            "title": "set_song_pos()"
        }, 
        {
            "location": "/set_song_pos()/#description", 
            "text": "Fixes the position of the music module playback (the  pattern  number).  This  position of the module  is a number between 0 and the max number of pattern  of the module. This value varies for each module, and can be defined in the\nprograms used to compose them. The modules usually have quite a variable number of \npatterns, though the average is usually situated between 30 and 40.  Inside each pattern, the modules have a determined number of lines\n(normally 64), in which appear the musical notes, so each pattern could be\ndefined as a small section of the music module.  To obtain the current position which is being played back the function get_song_pos()  is used.  The position of the module can be changed if the module is playing or has stopped.\nThis function can be used to advance or to retard the playback of the module,\nto implement diverse loops in certain parts of a module, etc.", 
            "title": "Description"
        }, 
        {
            "location": "/set_song_pos()/#example-program", 
            "text": "PROGRAM example_set_song_pos;\n\nGLOBAL\n    id_song;\n    position_module;\n\nBEGIN\n    load_song( help/help.xm ,1);\n    song(id_song);\n    write(0,0,0,0, Press SPACE to change the position of the module ... );\n    write(0,0,20,0, position: );\n    write_int(0,0,30,0,OFFSET position_module);\n    LOOP\n        IF (key(_space))\n            position_module=rand(0,19);\n\n            set_song_pos(position_module); // Changes the position of the module\n\n        END\n        position_module=get_song_pos();\n        FRAME;\n    END\nEND  This program loads the module contained in the file  help.xm  and then\nstarts its playback with the function  song() .  From this moment the current position of the module will be shown on screen\nand it can be changed by pressing the space bar (a random position will be assigned\nbetween 0 and 19, because this module has 20 patterns).", 
            "title": "Example program"
        }, 
        {
            "location": "/set_song_pos()/#note-the-playback-line-of-a-module-cant-be-set-inside", 
            "text": "each pattern), but the value can be obtained with the function  get_song_line() .   See:  get_song_pos()  -  song()  -  load_song()", 
            "title": "Note The playback line of a module can't be set (inside"
        }, 
        {
            "location": "/get_song_pos()/", 
            "text": "get_song_pos(\n)\n\n\nReturns\n\n\nThe current position of the musical module which is being played.\n\n\nDescription\n\n\nReturns the current position of playback of the musical module, this\nposition can be set with the function \nset_song_pos()\n.\n\n\nThis \nposition of the module\n is a number between 0 and the max number of\n\npattern\n of the module. This value is different for each module, and is defined\nin the programs used to compose them. The modules can have any variable number of\npatterns, although the average is between 30 and 40.\n\n\nInside each pattern the modules have a determined number of lines\n(normally 64), in which appear the musical notes, therefore\neach pattern can be defined as a small section of the musical module.\n\n\nExample program\n\n\nPROGRAM example_get_song_pos;\n\nGLOBAL\n    id_song;\n    position_module;\n\nBEGIN\n    load_song(\nhelp/help.xm\n,1);\n    song(id_song);\n    write(0,0,0,0,\nPosition of the module:\n);\n    write_int(0,0,10,0,OFFSET position_module);\n    LOOP\n\n        position_module=get_song_pos(); // Obtain the position\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis program loads the module contained in the file \nhelp.xm\n and then\ninitiates its playback with the function \nsong()\n.\n\n\nFrom this moment the current position of the module on screen will be shown,\nobtained with the function \nget_song_pos()\n.\n\n\n\n\nNote the line number which is played back Can be obtained, inside the pattern,\n\n\nwith the function \nget_song_line()\n.\n\n\n\n\nSee: \nget_song_line()\n - \nset_song_pos()\n - \nsong()", 
            "title": "get_song_pos()"
        }, 
        {
            "location": "/get_song_pos()/#returns", 
            "text": "The current position of the musical module which is being played.", 
            "title": "Returns"
        }, 
        {
            "location": "/get_song_pos()/#description", 
            "text": "Returns the current position of playback of the musical module, this\nposition can be set with the function  set_song_pos() .  This  position of the module  is a number between 0 and the max number of pattern  of the module. This value is different for each module, and is defined\nin the programs used to compose them. The modules can have any variable number of\npatterns, although the average is between 30 and 40.  Inside each pattern the modules have a determined number of lines\n(normally 64), in which appear the musical notes, therefore\neach pattern can be defined as a small section of the musical module.", 
            "title": "Description"
        }, 
        {
            "location": "/get_song_pos()/#example-program", 
            "text": "PROGRAM example_get_song_pos;\n\nGLOBAL\n    id_song;\n    position_module;\n\nBEGIN\n    load_song( help/help.xm ,1);\n    song(id_song);\n    write(0,0,0,0, Position of the module: );\n    write_int(0,0,10,0,OFFSET position_module);\n    LOOP\n\n        position_module=get_song_pos(); // Obtain the position\n\n        FRAME;\n    END\nEND  This program loads the module contained in the file  help.xm  and then\ninitiates its playback with the function  song() .  From this moment the current position of the module on screen will be shown,\nobtained with the function  get_song_pos() .", 
            "title": "Example program"
        }, 
        {
            "location": "/get_song_pos()/#note-the-line-number-which-is-played-back-can-be-obtained-inside-the-pattern", 
            "text": "with the function  get_song_line() .   See:  get_song_line()  -  set_song_pos()  -  song()", 
            "title": "Note the line number which is played back Can be obtained, inside the pattern,"
        }, 
        {
            "location": "/get_song_line()/", 
            "text": "get_song_line(\n)\n\n\nReturns\n\n\nThe line number of the musical module.\n\n\nDescription\n\n\nThe line number of a musical module playing can be obtained With this function.\n\n\nThis current position, or pattern, can be obtained with the function\n\nget_song_pos()\n.\n\n\nInside each pattern the modules have a determined number of lines\n(normally 64), in which appear musical notes. The modules\noften have a different number of patterns, although the average is between 30 and 40.\n\n\nExample program\n\n\nPROGRAM example_get_song_line;\n\nGLOBAL\n    id_song;\n    line_module;\n\nBEGIN\n    load_song(\nhelp/help.xm\n,1);\n    song(id_song);\n    write(0,0,0,0,\nLine of module:\n);\n    write_int(0,0,10,0,OFFSET line_module);\n    LOOP\n\n        line_module=get_song_line(); // Obtain the number of line\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis program loads the module contained in the file \nhelp.xm\n and then\ninitiates its playback with the function \nsong()\n.\n\n\nFrom this moment the current line of the module is shown on screen,\nobtained with the function \nget_song_line()\n.\n\n\n\n\nNote The line of a musical module Cannot be set, although it is possible to fix\n\n\nthe position where playback begins with the function \nset_song_pos()\n\n(always will begin from the line 0 of the pattern).\n\n\n\n\nSee: #219,get_song_pos()} - \nset_song_pos()\n - \nsong()", 
            "title": "get_song_line()"
        }, 
        {
            "location": "/get_song_line()/#returns", 
            "text": "The line number of the musical module.", 
            "title": "Returns"
        }, 
        {
            "location": "/get_song_line()/#description", 
            "text": "The line number of a musical module playing can be obtained With this function.  This current position, or pattern, can be obtained with the function get_song_pos() .  Inside each pattern the modules have a determined number of lines\n(normally 64), in which appear musical notes. The modules\noften have a different number of patterns, although the average is between 30 and 40.", 
            "title": "Description"
        }, 
        {
            "location": "/get_song_line()/#example-program", 
            "text": "PROGRAM example_get_song_line;\n\nGLOBAL\n    id_song;\n    line_module;\n\nBEGIN\n    load_song( help/help.xm ,1);\n    song(id_song);\n    write(0,0,0,0, Line of module: );\n    write_int(0,0,10,0,OFFSET line_module);\n    LOOP\n\n        line_module=get_song_line(); // Obtain the number of line\n\n        FRAME;\n    END\nEND  This program loads the module contained in the file  help.xm  and then\ninitiates its playback with the function  song() .  From this moment the current line of the module is shown on screen,\nobtained with the function  get_song_line() .", 
            "title": "Example program"
        }, 
        {
            "location": "/get_song_line()/#note-the-line-of-a-musical-module-cannot-be-set-although-it-is-possible-to-fix", 
            "text": "the position where playback begins with the function  set_song_pos() \n(always will begin from the line 0 of the pattern).   See: #219,get_song_pos()} -  set_song_pos()  -  song()", 
            "title": "Note The line of a musical module Cannot be set, although it is possible to fix"
        }, 
        {
            "location": "/is_playing_sound()/", 
            "text": "is_playing_sound(\nnumber of channel\n)\n\n\nReturns\n\n\n0\n - If the channel is stopped.\n\n\n1\n - If is going the sound by the channel.\n\n\nDescription\n\n\nThis function allows you to know if one of the \nsound channels\n are playing sound or if it is disposed.\n\n\nthe \nnumber of channel\n is required as the parameter, this value is obtained as the \nreturn of the function \nsound()\n after initiating the playback of the sound effect.\n\n\nExample program\n\n\nPROGRAM example_is_playing_sound;\n\nGLOBAL\n    sound_id;\n    channel_id;\n\nBEGIN\n    write(0,0,0,0,\nPress ESC to finish.\n);\n    sound_id = load_pcm(\nhelp/help.pcm\n,0);\n    channel_id  = sound(sound_id, 256, rand(100,400));\n    REPEAT\n\n        // If the playback has finished, return the sound\n\n        IF (NOT is_playing_sound(channel_id))\n\n            channel_id = sound(sound_id, 256, rand(100,400));\n        END\n        FRAME;\n    UNTIL (key(_ESC));\nEND\n\n\n\n\nThis example uses a function to continually test and restart the sound, \ncontrolled by the program, instead of automatically (as is often \nindicated in the loading of the sound, in the functions \nload_pcm()\n\nor \nload_wav()\n).\n\n\nThe playback again always initiates once the sound channel is free,\nit means, each time when playback of the sound has finished.\n\n\nThe program uses this circumstance (manual control of the replay)\nto emit the sound with a different frequency in each case, this couldn't be done\nwith the automatic replay. This frequency is obtained as\na value between 100 and 400 with the function \nrand()\n.\n\n\n\n\nNote The same sound can be played back by different channels each time,\n\n\ntherefore it is necessary to save the channel number each time when the playback is initiated.\n\n\n\n\nSee: \nsound()\n - \nchange_sound()\n - \nis_playing_song()", 
            "title": "is_playing_sound()"
        }, 
        {
            "location": "/is_playing_sound()/#returns", 
            "text": "0  - If the channel is stopped.  1  - If is going the sound by the channel.", 
            "title": "Returns"
        }, 
        {
            "location": "/is_playing_sound()/#description", 
            "text": "This function allows you to know if one of the  sound channels  are playing sound or if it is disposed.  the  number of channel  is required as the parameter, this value is obtained as the \nreturn of the function  sound()  after initiating the playback of the sound effect.", 
            "title": "Description"
        }, 
        {
            "location": "/is_playing_sound()/#example-program", 
            "text": "PROGRAM example_is_playing_sound;\n\nGLOBAL\n    sound_id;\n    channel_id;\n\nBEGIN\n    write(0,0,0,0, Press ESC to finish. );\n    sound_id = load_pcm( help/help.pcm ,0);\n    channel_id  = sound(sound_id, 256, rand(100,400));\n    REPEAT\n\n        // If the playback has finished, return the sound\n\n        IF (NOT is_playing_sound(channel_id))\n\n            channel_id = sound(sound_id, 256, rand(100,400));\n        END\n        FRAME;\n    UNTIL (key(_ESC));\nEND  This example uses a function to continually test and restart the sound, \ncontrolled by the program, instead of automatically (as is often \nindicated in the loading of the sound, in the functions  load_pcm() \nor  load_wav() ).  The playback again always initiates once the sound channel is free,\nit means, each time when playback of the sound has finished.  The program uses this circumstance (manual control of the replay)\nto emit the sound with a different frequency in each case, this couldn't be done\nwith the automatic replay. This frequency is obtained as\na value between 100 and 400 with the function  rand() .", 
            "title": "Example program"
        }, 
        {
            "location": "/is_playing_sound()/#note-the-same-sound-can-be-played-back-by-different-channels-each-time", 
            "text": "therefore it is necessary to save the channel number each time when the playback is initiated.   See:  sound()  -  change_sound()  -  is_playing_song()", 
            "title": "Note The same sound can be played back by different channels each time,"
        }, 
        {
            "location": "/is_playing_song()/", 
            "text": "is_playing_song(\n)\n\n\nReturns\n\n\n0\n - Any module is playing.\n\n\n1\n - Is playing a musical module.\n\n\nDescription\n\n\nThis function determines if a digital musical module of the file MOD,\nS3M or XM is being played.\n\n\nThese modules must be loaded with the function \nload_song()\n and their\nplayback is initiated with the call to \nsong()\n.\n\n\nOnly one module can be played back at the same time, therefore this function\ndoesn't require any parameter, only returns \n1\n if there is one module\nreproducing.\n\n\nExample program\n\n\nPROGRAM example_is_playing_song;\n\nGLOBAL\n    id_song;\n    sounding;\n\nBEGIN\n    load_song(\nhelp/help.xm\n,1);\n    song(id_song);\n    write(0,0,0,0,\nENTER initiate the module / SPACE to stop it\n);\n    write_int(0,0,10,0,OFFSET sounding);\n    LOOP\n        IF (key(_enter)) song(id_song); END\n        IF (key(_space)) stop_song(); END\n\n        sounding = is_playing_song(); // Determines if is playing\n\n        FRAME;\n    END\nEND\n\n\n\n\nThis example loads musical module contained in the file \nhelp.xm\n and\npermits, inside one loop, initiate it with the key \nENTER\n and stop it with\nthe space bar.\n\n\nInside the same loop is used the function \nis_playing_song()\n to\ndetermine if it is playing each moment.\n\n\n\n\nNote To finish the playback of one musical module must be used the function \nstop_song()\n.\n\n\n\n\nSee: \nload_song()\n - \nsong()\n - \nis_playing_sound()", 
            "title": "is_playing_song()"
        }, 
        {
            "location": "/is_playing_song()/#returns", 
            "text": "0  - Any module is playing.  1  - Is playing a musical module.", 
            "title": "Returns"
        }, 
        {
            "location": "/is_playing_song()/#description", 
            "text": "This function determines if a digital musical module of the file MOD,\nS3M or XM is being played.  These modules must be loaded with the function  load_song()  and their\nplayback is initiated with the call to  song() .  Only one module can be played back at the same time, therefore this function\ndoesn't require any parameter, only returns  1  if there is one module\nreproducing.", 
            "title": "Description"
        }, 
        {
            "location": "/is_playing_song()/#example-program", 
            "text": "PROGRAM example_is_playing_song;\n\nGLOBAL\n    id_song;\n    sounding;\n\nBEGIN\n    load_song( help/help.xm ,1);\n    song(id_song);\n    write(0,0,0,0, ENTER initiate the module / SPACE to stop it );\n    write_int(0,0,10,0,OFFSET sounding);\n    LOOP\n        IF (key(_enter)) song(id_song); END\n        IF (key(_space)) stop_song(); END\n\n        sounding = is_playing_song(); // Determines if is playing\n\n        FRAME;\n    END\nEND  This example loads musical module contained in the file  help.xm  and\npermits, inside one loop, initiate it with the key  ENTER  and stop it with\nthe space bar.  Inside the same loop is used the function  is_playing_song()  to\ndetermine if it is playing each moment.", 
            "title": "Example program"
        }, 
        {
            "location": "/is_playing_song()/#note-to-finish-the-playback-of-one-musical-module-must-be-used-the-function-stop_song", 
            "text": "See:  load_song()  -  song()  -  is_playing_sound()", 
            "title": "Note To finish the playback of one musical module must be used the function stop_song()."
        }, 
        {
            "location": "/fopen()/", 
            "text": "fopen(\nname of file\n,\n \nmode\n)\n\n\nReturns\n\n\nThe \nhandle\n or identifier of the open file, or \n0\n if an error was produced.\n\n\nDescription\n\n\nOpens a data file to read or write to, with the help of a \nhandle\n or \nidentifier of file\n\nwhich this function returns from the open or created file.\n\n\nthe \nname of file\n to open or create is required , and the \nmode\n of opening,\nwhich must be a literal (text in inverted commas) inside the following:\n\n\nr\n - Open the file for reading of the data contained in it.\n\n\nw\n - Create the file to write (if it already exists, it will lose the presently contained data).\n\n\na\n - Open the file to write to after finishing with it, or it creates the file if it didn't exist.\n\n\nr+\n - Open an existent file to activate it, permitting reading and writing.\n\n\nw+\n - Create a file to write to, permitting also its reading.\n\n\na+\n - Open an file to read it from any position and write new data to add on the end.\n\n\nOnce an file is opened, you can use all the functions for files\nbased in \nhandles\n, but once the necessary operations have been completed \nin the file \nmust not be closed\n, you should then close it with the function \nfclose()\n.\n\n\nThe main functions are \nfread()\n for reading the data inside\nthe file and \nfwrite()\n to write the data; it is important to\nopen the file in the appropriate \nmode\n for the requested operations.\nFor example, you cannot write in the file if it was opened only for reading.\n\n\nExample program\n\n\nPROGRAM example_fopen;\n\nGLOBAL\n    list1[3]=11,22,33,44;\n    list2[3];\n    myhandle;\n\nBEGIN\n\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n); // Open file to write\n\n    fwrite(OFFSET list1,4,myhandle);\n    fclose(myhandle);\n\n    myhandle=fopen(\nhelp/help.dat\n,\nr\n); // Open file to read\n\n    fread(OFFSET list2,4,myhandle);\n    fclose(myhandle);\nEND\n\n\n\n\nThis example program has defined two global lists; \nlist1\n with four values\ninitiated in 11, 22, 33 and 44, and \nlist2\n with four without initiates (zero).\n\n\nThe functions of files are used to write in one file the content\nof the \nlist1\n and then load it over the \nlist2\n. After finishing the program,\nthe data of the first list will have been copied into the second.\n\n\nthe function \nfopen()\n is called on two occasions, the first to {create it and\nwrite} in it and the second to \nopen it and read\n its contents.\n\n\nIt is important to underline that each time when you open or create the file, you must\nclose it with the function \nfclose()\n (can be seen how in the example\nthe file is closed on two occasions).\n\n\n\n\nThe function \nfseek()\n allows you to situate the \npointer of reading/writing\n\nat any position in the file. In this way, data at any point of the file \ncan be read or written.\n\n\n\n\nThe function \nflush()\n empties the buffers of writing and allows you also\nto check how many files are open at any moment.\n\n\n\n\nNote The functions \nsave()\n and \nload()\n allow you also\n\n\nto save the data in files of the disk and restore them. These functions are\nless useful, but their use is easier than\nthe functions based in \nhandles\n here described.\n\n\n\n\nSee: \nfclose()\n \nfread()\n - \nfwrite()\n - \nsave()", 
            "title": "fopen()"
        }, 
        {
            "location": "/fopen()/#returns", 
            "text": "The  handle  or identifier of the open file, or  0  if an error was produced.", 
            "title": "Returns"
        }, 
        {
            "location": "/fopen()/#description", 
            "text": "Opens a data file to read or write to, with the help of a  handle  or  identifier of file \nwhich this function returns from the open or created file.  the  name of file  to open or create is required , and the  mode  of opening,\nwhich must be a literal (text in inverted commas) inside the following:  r  - Open the file for reading of the data contained in it.  w  - Create the file to write (if it already exists, it will lose the presently contained data).  a  - Open the file to write to after finishing with it, or it creates the file if it didn't exist.  r+  - Open an existent file to activate it, permitting reading and writing.  w+  - Create a file to write to, permitting also its reading.  a+  - Open an file to read it from any position and write new data to add on the end.  Once an file is opened, you can use all the functions for files\nbased in  handles , but once the necessary operations have been completed \nin the file  must not be closed , you should then close it with the function  fclose() .  The main functions are  fread()  for reading the data inside\nthe file and  fwrite()  to write the data; it is important to\nopen the file in the appropriate  mode  for the requested operations.\nFor example, you cannot write in the file if it was opened only for reading.", 
            "title": "Description"
        }, 
        {
            "location": "/fopen()/#example-program", 
            "text": "PROGRAM example_fopen;\n\nGLOBAL\n    list1[3]=11,22,33,44;\n    list2[3];\n    myhandle;\n\nBEGIN\n\n    myhandle=fopen( help/help.dat , w ); // Open file to write\n\n    fwrite(OFFSET list1,4,myhandle);\n    fclose(myhandle);\n\n    myhandle=fopen( help/help.dat , r ); // Open file to read\n\n    fread(OFFSET list2,4,myhandle);\n    fclose(myhandle);\nEND  This example program has defined two global lists;  list1  with four values\ninitiated in 11, 22, 33 and 44, and  list2  with four without initiates (zero).  The functions of files are used to write in one file the content\nof the  list1  and then load it over the  list2 . After finishing the program,\nthe data of the first list will have been copied into the second.  the function  fopen()  is called on two occasions, the first to {create it and\nwrite} in it and the second to  open it and read  its contents.  It is important to underline that each time when you open or create the file, you must\nclose it with the function  fclose()  (can be seen how in the example\nthe file is closed on two occasions).   The function  fseek()  allows you to situate the  pointer of reading/writing \nat any position in the file. In this way, data at any point of the file \ncan be read or written.   The function  flush()  empties the buffers of writing and allows you also\nto check how many files are open at any moment.", 
            "title": "Example program"
        }, 
        {
            "location": "/fopen()/#note-the-functions-save-and-load-allow-you-also", 
            "text": "to save the data in files of the disk and restore them. These functions are\nless useful, but their use is easier than\nthe functions based in  handles  here described.   See:  fclose()   fread()  -  fwrite()  -  save()", 
            "title": "Note The functions save() and load() allow you also"
        }, 
        {
            "location": "/fclose()/", 
            "text": "fclose(\nhandle\n)\n\n\nReturns\n\n\nNumber of closed files.\n\n\nDescription\n\n\nCloses an file opened with the function \nfopen()\n, fclose must \nreceive as parameter the \nhandle\n or \nidentifier of file\n returned\nby this function.\n\n\nIn the second modality, the function \nfclose()\n can {close all opened\nfiles} at one time, for this you indicate \n0\n\n(zero) as its parameter, instead of \nhandle\n.\n\n\nAnyway, the function returns the number of files which were closed,\nif it returns \n0\n it can mean one of these cases:\n\n\n -\n There was no open file.\n\n\n -\n The passed \nhandle\n doesn't correspond to any opened file.\n\n -\n The file corresponding to this \nhandle\n was already closed.\n\n\nAll open files must be closed before the program finishes its execution.\n\n\nExample program\n\n\nPROGRAM example_fclose;\n\nGLOBAL\n    list1[3]=11,22,33,44;\n    list2[3];\n    myhandle;\n\nBEGIN\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n);\n    fwrite(OFFSET list1,4,myhandle);\n\n    fclose(myhandle); // The file closes to be opened in other mode\n\n    myhandle=fopen(\nhelp/help.dat\n,\nr\n);\n    fread(OFFSET list2,4,myhandle);\n\n    fclose(myhandle); // The file closes definitively\nEND\n\n\n\n\nthe functions of files Are used to write in one file the content\nof the \nlist1\n and then copy it over the \nlist2\n. After finishing the program,\nthe data of the first will have been copied into the second.\n\n\nIf the open file in one mode (with the function \nfopen()\n) wants to\naccess an file in a different mode, you must first close the file before opening it\nin the new mode; in the example, the file of writing is then closed to open\nit then in reading mode.\n\n\n\n\nThe function \nflush()\n empties the buffers of writing and permits you also to \ncheck how many files are open at any moment.\n\n\n\n\nSee also: \nfopen()\n \nfread()\n - \nfwrite()", 
            "title": "fclose()"
        }, 
        {
            "location": "/fclose()/#returns", 
            "text": "Number of closed files.", 
            "title": "Returns"
        }, 
        {
            "location": "/fclose()/#description", 
            "text": "Closes an file opened with the function  fopen() , fclose must \nreceive as parameter the  handle  or  identifier of file  returned\nby this function.  In the second modality, the function  fclose()  can {close all opened\nfiles} at one time, for this you indicate  0 \n(zero) as its parameter, instead of  handle .  Anyway, the function returns the number of files which were closed,\nif it returns  0  it can mean one of these cases:   -  There was no open file.   -  The passed  handle  doesn't correspond to any opened file.  -  The file corresponding to this  handle  was already closed.  All open files must be closed before the program finishes its execution.", 
            "title": "Description"
        }, 
        {
            "location": "/fclose()/#example-program", 
            "text": "PROGRAM example_fclose;\n\nGLOBAL\n    list1[3]=11,22,33,44;\n    list2[3];\n    myhandle;\n\nBEGIN\n    myhandle=fopen( help/help.dat , w );\n    fwrite(OFFSET list1,4,myhandle);\n\n    fclose(myhandle); // The file closes to be opened in other mode\n\n    myhandle=fopen( help/help.dat , r );\n    fread(OFFSET list2,4,myhandle);\n\n    fclose(myhandle); // The file closes definitively\nEND  the functions of files Are used to write in one file the content\nof the  list1  and then copy it over the  list2 . After finishing the program,\nthe data of the first will have been copied into the second.  If the open file in one mode (with the function  fopen() ) wants to\naccess an file in a different mode, you must first close the file before opening it\nin the new mode; in the example, the file of writing is then closed to open\nit then in reading mode.   The function  flush()  empties the buffers of writing and permits you also to \ncheck how many files are open at any moment.   See also:  fopen()   fread()  -  fwrite()", 
            "title": "Example program"
        }, 
        {
            "location": "/fread()/", 
            "text": "fread(\nOFFSET data\n,\n \nlength\n,\n \nhandle\n)\n\n\nReturns\n\n\n0\n - If an error was produced , or all asked data was not read .\n\n\n1\n - If all data was read.\n\n\nDescription\n\n\nThis function permits you to read the data of an file opened with the function\n\nfopen()\n, starting from the position indicated by the {pointer of\nreading/writing}.\n\n\nThe file must be opened in the \nreading mode\n, or a mode which it permits\nreading of data.\n\n\nThe \npointer\n is situated at the beginning of the file, after it has been opened,\nand advances sequentially during the reading of the data. But\nthis pointer can be situated in any position, using the function \nfseek()\n\nand the function \nftell()\n allows you to obtain the current\nposition of the pointer of an file.\n\n\nThe function \nfread()\n requires as a parameter the \nOFFSET\n\n\nof the data\n in which must the data of file be read , it means,\nthe memory address from where must be placed the data which are reading from the file.\n\n\nAs second parameter is required the \nlength\n or total size of the data\nwhich you want to read, it means, the number of positions of memory\nwhich occupy these data. The length of one data can be obtained with the\nfunction \nsizeof()\n.\n\n\nThe last parameter must be the \nhandle\n or \nidentifier of file\n which\nwas obtained after open the file as value of return of \nfopen()\n.\n\n\nExample program\n\n\nPROGRAM example_fread;\n\nGLOBAL\n    list1[3]=11,22,33,44;\n    list2[3];\n    myhandle;\n\nBEGIN\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n);\n    fwrite(OFFSET list1,4,myhandle);\n    fclose(myhandle);\n    myhandle=fopen(\nhelp/help.dat\n,\nr\n);\n\n    fread(OFFSET list2,4,myhandle); // Read the file about \nlist2\n\n\n    fclose(myhandle);\nEND\n\n\n\n\nThis example program has defined two global lists; \nlist1\n with four\nvalues initiated as 11, 22, 33 \n 44, and \nlist2\n with four without initiate\n(all zero).\n\n\nThe file functions are used to write in one file the content\nof the \nlist1\n and then copy it over the \nlist2\n. After finishing the program,\nthe data of the first list will have been copied into the second.\n\n\nThe function \nfopen()\n is called on two occasions, the first to {create it and\nwrite} in it and the second to \nopen it and read\n its contents.\n\n\nIt is important to underline that each time you open or create the file, you must\nclose it with the function \nfclose()\n (in the example\nthe file is closed on two occasions).\n\n\n\n\nThe inverse function to \nfread()\n, which permits you to write data in\nan file instead of read it, is \nfwrite()\n. The way to use this\nfunction and its parameters are similar to those of \nfread()\n.\n\n\n\n\nNote By default, the \nlength\n is specified as the number of simple data,\n\n\nremembering that a simple data (a variable) occupies {4\nbytes}. So for example, if ten data (indicating 10 as\nlength)are read, these date will occupy 40 bytes of memory.\n\n\nThis relation can be changed by modifying the global variable \ndrive_size\n,\nwhich has a default value of \n4\n in all programs.\n\n\n\n\nSee: \nfopen()\n - \nfwrite()\n - \nfseek()\n - \ndrive_size", 
            "title": "fread()"
        }, 
        {
            "location": "/fread()/#returns", 
            "text": "0  - If an error was produced , or all asked data was not read .  1  - If all data was read.", 
            "title": "Returns"
        }, 
        {
            "location": "/fread()/#description", 
            "text": "This function permits you to read the data of an file opened with the function fopen() , starting from the position indicated by the {pointer of\nreading/writing}.  The file must be opened in the  reading mode , or a mode which it permits\nreading of data.  The  pointer  is situated at the beginning of the file, after it has been opened,\nand advances sequentially during the reading of the data. But\nthis pointer can be situated in any position, using the function  fseek() \nand the function  ftell()  allows you to obtain the current\nposition of the pointer of an file.  The function  fread()  requires as a parameter the  OFFSET  of the data  in which must the data of file be read , it means,\nthe memory address from where must be placed the data which are reading from the file.  As second parameter is required the  length  or total size of the data\nwhich you want to read, it means, the number of positions of memory\nwhich occupy these data. The length of one data can be obtained with the\nfunction  sizeof() .  The last parameter must be the  handle  or  identifier of file  which\nwas obtained after open the file as value of return of  fopen() .", 
            "title": "Description"
        }, 
        {
            "location": "/fread()/#example-program", 
            "text": "PROGRAM example_fread;\n\nGLOBAL\n    list1[3]=11,22,33,44;\n    list2[3];\n    myhandle;\n\nBEGIN\n    myhandle=fopen( help/help.dat , w );\n    fwrite(OFFSET list1,4,myhandle);\n    fclose(myhandle);\n    myhandle=fopen( help/help.dat , r );\n\n    fread(OFFSET list2,4,myhandle); // Read the file about  list2 \n\n    fclose(myhandle);\nEND  This example program has defined two global lists;  list1  with four\nvalues initiated as 11, 22, 33   44, and  list2  with four without initiate\n(all zero).  The file functions are used to write in one file the content\nof the  list1  and then copy it over the  list2 . After finishing the program,\nthe data of the first list will have been copied into the second.  The function  fopen()  is called on two occasions, the first to {create it and\nwrite} in it and the second to  open it and read  its contents.  It is important to underline that each time you open or create the file, you must\nclose it with the function  fclose()  (in the example\nthe file is closed on two occasions).   The inverse function to  fread() , which permits you to write data in\nan file instead of read it, is  fwrite() . The way to use this\nfunction and its parameters are similar to those of  fread() .", 
            "title": "Example program"
        }, 
        {
            "location": "/fread()/#note-by-default-the-length-is-specified-as-the-number-of-simple-data", 
            "text": "remembering that a simple data (a variable) occupies {4\nbytes}. So for example, if ten data (indicating 10 as\nlength)are read, these date will occupy 40 bytes of memory.  This relation can be changed by modifying the global variable  drive_size ,\nwhich has a default value of  4  in all programs.   See:  fopen()  -  fwrite()  -  fseek()  -  drive_size", 
            "title": "Note By default, the &lt;length&gt; is specified as the number of simple data,"
        }, 
        {
            "location": "/fwrite()/", 
            "text": "fwrite(\nOFFSET data\n,\n \nlength\n,\n \nhandle\n)\n\n\nReturns\n\n\n0\n - If an error was produced or the data was not successfully written.\n\n\n1\n - If all the data was written.\n\n\nDescription\n\n\nThis function allows you to write data into an file opened with the function\n\nfopen()\n, starting from the position indicated by the \ncursor of reading/writing\n.\n\n\nThe file must have been opened in a \nwrite mode\n.\n\n\nThe \ncursor\n is placed at the beginning of the file, when opened or created, \nand advances sequentially as the data is written.\nBut this cursor can be placed in any position of the file \nusing the function \nfseek()\n and the function \nftell()\n allows you to\nobtain the current position of an file cursor.\n\n\nThe function \nfwrite()\n requires as its first parameter the \nOFFSET\n\n\nof the data\n which must be written in the file, so, the address of memory.\n\n\nAs second parameter is required the \nlength\n or total size of the\ndata which are wanted to be written, the number of memory positions\nwhich fill these data. The length of a data can be obtained with the\nfunction \nsizeof()\n.\n\n\nThe last parameter must be the \nhandle\n or \nidentifier of file\n which\nwas obtained when the file was opened as return value of \nfopen()\n.\n\n\nExample program\n\n\nPROGRAM example_fwrite;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    myhandle;\n\nBEGIN\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n);\n\n    fwrite(OFFSET mytable,4,myhandle); // Writes \nmytable\n in the file\n\n    fclose(myhandle);\nEND\n\n\n\n\nThis example program writes the contained data in \nmytable\n in the file\n\nhelp.dat\n of the disk.\n\n\nThe function \nfopen()\n is called to create it and to the function \nfclose()\n\nto close it once every data has been written.\n\n\n\n\nThe opposite function to \nfwrite()\n,that allows to read data in\nan file instead of write to it, is \nfread()\n. The way to use this function\nand its parameters is the same as\nfwrite()\n.\n\n\n\n\nNote By default, the \nlength\n is specified as the number of simple data\n\n\nassuming that a simple data (a variable) fills \n4 bytes\n of memory. So, if for example, \nten data are written (indicating 10 as length), then 40 bytes of data will be written.\n\n\nThis relation can be changed by modifying the global variable \ndrive_size\n,\nwhich, by default is \n4\n in every program.\n\n\n\n\nSee: \nfopen()\n - \nfread()\n - \nfseek()\n - \ndrive_size", 
            "title": "fwrite()"
        }, 
        {
            "location": "/fwrite()/#returns", 
            "text": "0  - If an error was produced or the data was not successfully written.  1  - If all the data was written.", 
            "title": "Returns"
        }, 
        {
            "location": "/fwrite()/#description", 
            "text": "This function allows you to write data into an file opened with the function fopen() , starting from the position indicated by the  cursor of reading/writing .  The file must have been opened in a  write mode .  The  cursor  is placed at the beginning of the file, when opened or created, \nand advances sequentially as the data is written.\nBut this cursor can be placed in any position of the file \nusing the function  fseek()  and the function  ftell()  allows you to\nobtain the current position of an file cursor.  The function  fwrite()  requires as its first parameter the  OFFSET  of the data  which must be written in the file, so, the address of memory.  As second parameter is required the  length  or total size of the\ndata which are wanted to be written, the number of memory positions\nwhich fill these data. The length of a data can be obtained with the\nfunction  sizeof() .  The last parameter must be the  handle  or  identifier of file  which\nwas obtained when the file was opened as return value of  fopen() .", 
            "title": "Description"
        }, 
        {
            "location": "/fwrite()/#example-program", 
            "text": "PROGRAM example_fwrite;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    myhandle;\n\nBEGIN\n    myhandle=fopen( help/help.dat , w );\n\n    fwrite(OFFSET mytable,4,myhandle); // Writes  mytable  in the file\n\n    fclose(myhandle);\nEND  This example program writes the contained data in  mytable  in the file help.dat  of the disk.  The function  fopen()  is called to create it and to the function  fclose() \nto close it once every data has been written.   The opposite function to  fwrite() ,that allows to read data in\nan file instead of write to it, is  fread() . The way to use this function\nand its parameters is the same as fwrite() .", 
            "title": "Example program"
        }, 
        {
            "location": "/fwrite()/#note-by-default-the-length-is-specified-as-the-number-of-simple-data", 
            "text": "assuming that a simple data (a variable) fills  4 bytes  of memory. So, if for example, \nten data are written (indicating 10 as length), then 40 bytes of data will be written.  This relation can be changed by modifying the global variable  drive_size ,\nwhich, by default is  4  in every program.   See:  fopen()  -  fread()  -  fseek()  -  drive_size", 
            "title": "Note By default, the &lt;length&gt; is specified as the number of simple data"
        }, 
        {
            "location": "/fseek()/", 
            "text": "fseek(\nhandle\n,\n \ncursor position\n,\n \nmode\n)\n\n\nDescription\n\n\nPlaces the \ncursor of reading/writing\n of an file at the indicated position.\n\n\nThe function requires, first, the \nhandle\n or \nidentifier of the file\n\nreturned by the function \nfopen()\n when opened.\n\n\nThen the new position where the \ncursor\n of the file must be placed is defined.\nNow every future reading or writing operation which is done, will be from this position.\n\n\nAs a last parameter the \nmode\n in which the new position of the cursor \nmust be specified is indicated, can be one of the following three modes:\n\n\nseek_set\n - Position is in relation to the beginning of the file (0).\n\n\nseek_cur\n - Increment related to the current position (1).\n\n\nseek_end\n - Position is in relation to the end of the file (2).\n\n\nTo obtain the current situation of an file cursor, the function\n\nftell()\n must be used.\n\n\nEvery reading or writing operation of an file is done automatically, \nso all these access functions are called sequentially (reading or\nwriting the data one after another).\n\n\nExample program\n\n\nPROGRAM example_fseek;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    mydata;\n    myhandle;\n\nBEGIN\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n);\n    fwrite(OFFSET mytable,4,myhandle);\n    fclose(myhandle);\n    myhandle=fopen(\nhelp/help.dat\n,\nr\n);\n\n    // Places the cursor to read the fourth data of the file (44)\n\n    fseek(myhandle,3,seek_set);\n\n    fread(OFFSET mydata,1,myhandle);\n    fclose(myhandle);\nEND\n\n\n\n\nThis example writes the four data items contained in \nmytable\n (11,22,33 and 44)\nin the file \nhelp.dat\n, and then, opens the file for reading and uses\nthe function \nfseek()\n to place the cursor in the \nposition 3\n from the\nbeginning of the file (with \nseek_set\n).\n\n\nThen you can read from the fourth data item of the file, so that,\nwhen a value is read in the variable \nmydata\n this will be \n44\n,\nthe fourth value of the table.\n\n\n\n\nNote By default, the \nposition of the cursor\n is specified as a\n\n\nnumber of simple data items, assuming that a simple data (a variable)\nfills \n4 bytes\n of memory. If, for example, the cursor is placed in the tenth position\nfrom the beginning of the file, then the program can access the data \nfrom the fortieth byte.\n\n\nThis relation can be changed, by modifying the global variable \ndrive_size\n,\nwhich by default is \n4\n for every program.\n\n\n\n\nSee: \nftell()\n - \nfread()\n - \nfwrite()\n - \ndrive_size", 
            "title": "fseek()"
        }, 
        {
            "location": "/fseek()/#description", 
            "text": "Places the  cursor of reading/writing  of an file at the indicated position.  The function requires, first, the  handle  or  identifier of the file \nreturned by the function  fopen()  when opened.  Then the new position where the  cursor  of the file must be placed is defined.\nNow every future reading or writing operation which is done, will be from this position.  As a last parameter the  mode  in which the new position of the cursor \nmust be specified is indicated, can be one of the following three modes:  seek_set  - Position is in relation to the beginning of the file (0).  seek_cur  - Increment related to the current position (1).  seek_end  - Position is in relation to the end of the file (2).  To obtain the current situation of an file cursor, the function ftell()  must be used.  Every reading or writing operation of an file is done automatically, \nso all these access functions are called sequentially (reading or\nwriting the data one after another).", 
            "title": "Description"
        }, 
        {
            "location": "/fseek()/#example-program", 
            "text": "PROGRAM example_fseek;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    mydata;\n    myhandle;\n\nBEGIN\n    myhandle=fopen( help/help.dat , w );\n    fwrite(OFFSET mytable,4,myhandle);\n    fclose(myhandle);\n    myhandle=fopen( help/help.dat , r );\n\n    // Places the cursor to read the fourth data of the file (44)\n\n    fseek(myhandle,3,seek_set);\n\n    fread(OFFSET mydata,1,myhandle);\n    fclose(myhandle);\nEND  This example writes the four data items contained in  mytable  (11,22,33 and 44)\nin the file  help.dat , and then, opens the file for reading and uses\nthe function  fseek()  to place the cursor in the  position 3  from the\nbeginning of the file (with  seek_set ).  Then you can read from the fourth data item of the file, so that,\nwhen a value is read in the variable  mydata  this will be  44 ,\nthe fourth value of the table.", 
            "title": "Example program"
        }, 
        {
            "location": "/fseek()/#note-by-default-the-position-of-the-cursor-is-specified-as-a", 
            "text": "number of simple data items, assuming that a simple data (a variable)\nfills  4 bytes  of memory. If, for example, the cursor is placed in the tenth position\nfrom the beginning of the file, then the program can access the data \nfrom the fortieth byte.  This relation can be changed, by modifying the global variable  drive_size ,\nwhich by default is  4  for every program.   See:  ftell()  -  fread()  -  fwrite()  -  drive_size", 
            "title": "Note By default, the &lt;position of the cursor&gt; is specified as a"
        }, 
        {
            "location": "/ftell()/", 
            "text": "ftell(\nhandle\n)\n\n\nReturns\n\n\nThe current position of the cursor of reading/writing in an file.\n\n\nDescription\n\n\nReturns the position of the \nreading/writing cursor\n in an file, for which,\nthe only parameter required is the \nhandle\n or \nidentifier of file\n returned by the\nfunction \nfopen()\n when the file was opened.\n\n\nTo establish a new position for an file cursor, the function \nfseek()\n\nmust be used. In contrast, the function, \nftell()\n always returns\nthe position of the cursor, related to the beginning of the file.\n\n\nEvery reading or writing operation of an file\nautomatically moves the cursor forward, so every access is\ndone sequentially (reading or writing the data one after another).\n\n\nExample program\n\n\nPROGRAM example_ftell;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    midata1;\n    midata2;\n    myhandle;\n\nBEGIN\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n);\n\n    midata1=ftell(myhandle); // Position of the cursor before writing\n\n    fwrite(OFFSET mytable,4,myhandle);\n\n    midata2=ftell(myhandle); // Position of the cursor after being written the data\n\n    fclose(myhandle);\nEND\n\n\n\n\nThis example writes the four data items contained in \nmytable\n (11,22,33 \n 44)\ninto the file \nhelp.dat\n.\n\n\nAfter opening the file with \nfopen()\n the position of the cursor is obtained\nand saved in the variable \nmidata1\n (this will be 0, the beginning of the file).\n\n\nThen, the four values contained in the table are written in the file and the\nposition of the cursor is obtained again, which now is saved in \nmidata2\n (will be\n4, at the end of the file, after the four written values).\n\n\nFinally, the file is closed with \n#224.fclose()\n before ends.\n\n\nNote By default, the \nposition of the cursor\n is specified as a\n\n\nnumber of simple data, assuming that a simple data (a variable)\nfills \n4 bytes\n. So for example, if the cursor is placed in the tenth position\nfrom the beginning of the file, then the program can access the data\nfrom the fortieth byte.\n\n\nThis relation can be changed, modifying the global variable \ndrive_size\n,\nwhich by default is set at \n4\n for every program.\n\n\n\n\nNota The function \nfilelength()\n allows you to find the length of an\n\n\nfile, but to do this the file must already be open.\n\n\n\n\nSee: \nfseek()\n - \nfread()\n - \nfwrite()\n - \ndrive_size", 
            "title": "ftell()"
        }, 
        {
            "location": "/ftell()/#returns", 
            "text": "The current position of the cursor of reading/writing in an file.", 
            "title": "Returns"
        }, 
        {
            "location": "/ftell()/#description", 
            "text": "Returns the position of the  reading/writing cursor  in an file, for which,\nthe only parameter required is the  handle  or  identifier of file  returned by the\nfunction  fopen()  when the file was opened.  To establish a new position for an file cursor, the function  fseek() \nmust be used. In contrast, the function,  ftell()  always returns\nthe position of the cursor, related to the beginning of the file.  Every reading or writing operation of an file\nautomatically moves the cursor forward, so every access is\ndone sequentially (reading or writing the data one after another).", 
            "title": "Description"
        }, 
        {
            "location": "/ftell()/#example-program", 
            "text": "PROGRAM example_ftell;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    midata1;\n    midata2;\n    myhandle;\n\nBEGIN\n    myhandle=fopen( help/help.dat , w );\n\n    midata1=ftell(myhandle); // Position of the cursor before writing\n\n    fwrite(OFFSET mytable,4,myhandle);\n\n    midata2=ftell(myhandle); // Position of the cursor after being written the data\n\n    fclose(myhandle);\nEND  This example writes the four data items contained in  mytable  (11,22,33   44)\ninto the file  help.dat .  After opening the file with  fopen()  the position of the cursor is obtained\nand saved in the variable  midata1  (this will be 0, the beginning of the file).  Then, the four values contained in the table are written in the file and the\nposition of the cursor is obtained again, which now is saved in  midata2  (will be\n4, at the end of the file, after the four written values).  Finally, the file is closed with  #224.fclose()  before ends.", 
            "title": "Example program"
        }, 
        {
            "location": "/ftell()/#note-by-default-the-position-of-the-cursor-is-specified-as-a", 
            "text": "number of simple data, assuming that a simple data (a variable)\nfills  4 bytes . So for example, if the cursor is placed in the tenth position\nfrom the beginning of the file, then the program can access the data\nfrom the fortieth byte.  This relation can be changed, modifying the global variable  drive_size ,\nwhich by default is set at  4  for every program.", 
            "title": "Note By default, the &lt;position of the cursor&gt; is specified as a"
        }, 
        {
            "location": "/ftell()/#nota-the-function-filelength-allows-you-to-find-the-length-of-an", 
            "text": "file, but to do this the file must already be open.   See:  fseek()  -  fread()  -  fwrite()  -  drive_size", 
            "title": "Nota The function filelength() allows you to find the length of an"
        }, 
        {
            "location": "/filelength()/", 
            "text": "filelength(\nhandle\n)\n\n\nReturns\n\n\nThe length of the file\n\n\nDescription\n\n\nThis function obtains the length of an file already opened\nwith \nfopen()\n, to do this you need as a parameter the \nhandle\n or\n\nidentifier of file\n returned by the \nfopen()\n function.\n\n\nThis function doesn't modify the current position of the reading/writing\ncursor of the file, but simply returns the number of data items contained \ntherein.\n\n\nExample program\n\n\nPROGRAM example_filelength;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    longitude;\n    myhandle;\n\nBEGIN\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n);\n    fwrite(OFFSET mytable,4,myhandle);\n    fclose(myhandle);\n    myhandle=fopen(\nhelp/help.dat\n,\nr\n);\n\n    longitude=filelength(myhandle); // Obtains the length of the file (4)\n\n    fclose(myhandle);\nEND\n\n\n\n\nThis example program creates first an file called \nhelp.dat\n,\nwriting to it the four values contained in \nmytable\n.\n\n\nOnce the file has been created, it will be reopened in read mode to obtain its \nlength\n.\n\n\n\n\nNote By default, the \nlength of the file\n is obtained as the number of\n\n\nsimple data items it contains, assuming that a simple data (a variable)\nfills up \n4 bytes\n. If, for example, the length of an file is ten\nthen it will occupy forty bytes of memory.\n\n\nThis relation can be changed by modifying the global variable \ndrive_size\n,\nwhich by default is \n4\n for every program.\n\n\n\n\nNote The functions \nget_dirinfo()\n and \nget_fileinfo()\n allow you to\n\n\nobtain a lot of information about the structure of directories (folders)\non the drive and about the files/files contained on it.\n\n\n\n\nSee: \nfopen()\n - \nget_dirinfo()\n - \ndrive_size", 
            "title": "filelength()"
        }, 
        {
            "location": "/filelength()/#returns", 
            "text": "The length of the file", 
            "title": "Returns"
        }, 
        {
            "location": "/filelength()/#description", 
            "text": "This function obtains the length of an file already opened\nwith  fopen() , to do this you need as a parameter the  handle  or identifier of file  returned by the  fopen()  function.  This function doesn't modify the current position of the reading/writing\ncursor of the file, but simply returns the number of data items contained \ntherein.", 
            "title": "Description"
        }, 
        {
            "location": "/filelength()/#example-program", 
            "text": "PROGRAM example_filelength;\n\nGLOBAL\n    mytable[3]=11,22,33,44;\n    longitude;\n    myhandle;\n\nBEGIN\n    myhandle=fopen( help/help.dat , w );\n    fwrite(OFFSET mytable,4,myhandle);\n    fclose(myhandle);\n    myhandle=fopen( help/help.dat , r );\n\n    longitude=filelength(myhandle); // Obtains the length of the file (4)\n\n    fclose(myhandle);\nEND  This example program creates first an file called  help.dat ,\nwriting to it the four values contained in  mytable .  Once the file has been created, it will be reopened in read mode to obtain its  length .", 
            "title": "Example program"
        }, 
        {
            "location": "/filelength()/#note-by-default-the-length-of-the-file-is-obtained-as-the-number-of", 
            "text": "simple data items it contains, assuming that a simple data (a variable)\nfills up  4 bytes . If, for example, the length of an file is ten\nthen it will occupy forty bytes of memory.  This relation can be changed by modifying the global variable  drive_size ,\nwhich by default is  4  for every program.", 
            "title": "Note By default, the length of the file is obtained as the number of"
        }, 
        {
            "location": "/filelength()/#note-the-functions-get_dirinfo-and-get_fileinfo-allow-you-to", 
            "text": "obtain a lot of information about the structure of directories (folders)\non the drive and about the files/files contained on it.   See:  fopen()  -  get_dirinfo()  -  drive_size", 
            "title": "Note The functions get_dirinfo() and get_fileinfo() allow you to"
        }, 
        {
            "location": "/flush()/", 
            "text": "flush(\n)\n\n\nReturns\n\n\nThe number of opened files/files.\n\n\nDescription\n\n\nEmpties the memory buffers, and ensures that all data written \nto a file which is still in the cache memory is saved\nin its correspondent file.\n\n\nThis operation is not very necessary, because the administration of the\ncache that the operating system makes, is very effective and the data is not going to \nbe lost due to not being correctly written to its corresponding file/file.\n\n\nBut, this function has another utility. It will return the {number\nof files opened with} \nfopen()\n inside of a program.\n\n\nThe file system allows just a maximum number of files to be open at once,\nwhich depends on the system's configuration.\n\n\nEvery file must be closed with \nfclose()\n once the program has finished operating on them.\nThis last function allows you to close just one file, or everyone which is open.\n\n\nExample program\n\n\nPROGRAM example_flush;\n\nGLOBAL\n    midata1;\n    midata2;\n    myhandle;\n\nBEGIN\n    myhandle=fopen(\nhelp/help.dat\n,\nw\n);\n\n    midata1=flush(); // Obtains the number of opened files (1)\n\n    fclose(myhandle);\n\n    midata2=flush(); // Obtains the number of opened files (0)\n\nEND\n\n\n\n\nThis example obtains on two occasions the number of files opened, with \nthe function \nflush()\n. After the file \nhelp.dat\n has been opened, the\nfunction determines that there is one open file, and once closed,\ncould be used to check that no files are still open.\n\n\n\n\nSee: \nfopen()\n - \nfclose()", 
            "title": "flush()"
        }, 
        {
            "location": "/flush()/#returns", 
            "text": "The number of opened files/files.", 
            "title": "Returns"
        }, 
        {
            "location": "/flush()/#description", 
            "text": "Empties the memory buffers, and ensures that all data written \nto a file which is still in the cache memory is saved\nin its correspondent file.  This operation is not very necessary, because the administration of the\ncache that the operating system makes, is very effective and the data is not going to \nbe lost due to not being correctly written to its corresponding file/file.  But, this function has another utility. It will return the {number\nof files opened with}  fopen()  inside of a program.  The file system allows just a maximum number of files to be open at once,\nwhich depends on the system's configuration.  Every file must be closed with  fclose()  once the program has finished operating on them.\nThis last function allows you to close just one file, or everyone which is open.", 
            "title": "Description"
        }, 
        {
            "location": "/flush()/#example-program", 
            "text": "PROGRAM example_flush;\n\nGLOBAL\n    midata1;\n    midata2;\n    myhandle;\n\nBEGIN\n    myhandle=fopen( help/help.dat , w );\n\n    midata1=flush(); // Obtains the number of opened files (1)\n\n    fclose(myhandle);\n\n    midata2=flush(); // Obtains the number of opened files (0)\n\nEND  This example obtains on two occasions the number of files opened, with \nthe function  flush() . After the file  help.dat  has been opened, the\nfunction determines that there is one open file, and once closed,\ncould be used to check that no files are still open.   See:  fopen()  -  fclose()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_dirinfo()/", 
            "text": "get_dirinfo(\nmask of directory\n,\n \ntypes of file\n)\n\n\nReturns\n\n\nNumber of files of the directory which coincides with the mask and the\ntype selected.\n\n\nDescription\n\n\nThis function allows you to obtain a list of the files in a directory (folder).\n\n\nThe \nmask of directory\n is required to select the type of files\nwhich must be listed. This \nmask\n is just a name of a partial file\nusing jokers; for example, the mask \n.\n (must be indicated as a text\nbetween quotation marks) will select every file in the directory.\n\n\nYou can also include in the mask, the \npath\n of the directory (if no path is defined\nthe files of the current directory will be listed). \nFor example, the mask \nC:\\WINDOWS\\SYS*.??E\n will select every file of the\ndirectory \nC:\\WINDOWS\n whose name starts with \nSYS\n and whose extension finishes\nwith \nE\n.\n\n\nAs a second parameter the \ntypes of files\n must be indicated which are to\nbe included in the list, this will be one of the following:\n\n\n _normal\n - To list just the normal files.\n\n\n _hidden\n - To include also all hidden files.\n\n\n _system\n - To include also the system files.\n\n\n _subdir\n - To include also the subdirectories.\n\n\n _volid\n  - To list just the label of the volume.\n\n\nThe most common choice is to indicate \n_normal\n as the \ntype of files\n, this type\ncovers most files, including read-only files, file files and read/write files \n(only some special files are excluded, which typically are internal system files).\n\n\nIf \n_hidden\n, \n_system\n or \n_subdir\n is indicated in this parameter, these types of files\nwill be included as well as the normal files (it's not necessary to specify \n_normal\n).\nAlso, you can select more than one of these types; for example, indicating \n_hidden+_system\n\nwill list every normal file, as well as every hidden and system file.\n\n\nWhen {_volid) is indicated, just the name of the volume label of the disk\nwill be listed, no file or subdirectory will be listed (you can't add other types to this).\n\n\n\n\nThe function \nget_dirinfo()\n simply returns the \ntotal number\n of listed files;\nthe names of these files are saved in the global structure\n\ndirinfo\n (the first name of the file is saved in \ndirinfo.name[0]\n, the\nsecond in \ndirinfo.name[1]\n, etc.).\n\n\nThe \ntotal number\n of listed files which this function returns is saved\nin \ndirinfo.files\n.\n\n\nThe list of file names is always saved in alphabetic order, but the function\n\nqsort()\n can be used to order the global structure \ndirinfo\n \nwith any other criteria.\n\n\n\n\nThis function just allows you to obtain the \nnames\n of the files, to\nobtain further information about them (the attributes, the size, the data,\netc.) the function \nget_fileinfo()\n must be used.\n\n\nExample program\n\n\nPROGRAM example_get_dirinfo;\n\nGLOBAL\n    counter;\n\nBEGIN\n    write(0,0,0,0,\nList of files - Press ESC to finish\n);\n\n    get_dirinfo(\nC:\\WINDOWS\\*.EXE\n,_normal); // Obtains the list of files\n\n    FOR (counter=0;counter\ndirinfo.files;counter++)\n       x=(counter%4)*80;\n       y=16+(counter/4)*8;\n       write(0,x,y,0,dirinfo.name[counter]);\n    END\n\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis example program lists every normal \nEXE\n file of the directory\nC:\\WINDOWS, and then shows them on screen.\n\n\nThe loop \nFOR\n is the one that shows on screen the list of the\nfiles of the structure \ndirinfo\n in four columns, as otherwise the function\n\nget_dirinfo()\n doesn't show any information on screen, it just fills up the\nstructure \ndirinfo\n with the names of the files found in the directory.\n\n\n\n\nTo open or create a file the function \nfopen()\n can be used.\n\n\nTo change the directory, you must use the function \nchdir()\n, and\n\nmkdir()\n to create a new directory.\n\n\nThe function \ndisk_free()\n allows you to find out the free disk space on a drive.\n\n\n\n\nSee: \nget_fileinfo()\n - \nfopen()\n - \nchdir()\n - \nmkdir()\n - \ndisk_free()", 
            "title": "get_dirinfo()"
        }, 
        {
            "location": "/get_dirinfo()/#returns", 
            "text": "Number of files of the directory which coincides with the mask and the\ntype selected.", 
            "title": "Returns"
        }, 
        {
            "location": "/get_dirinfo()/#description", 
            "text": "This function allows you to obtain a list of the files in a directory (folder).  The  mask of directory  is required to select the type of files\nwhich must be listed. This  mask  is just a name of a partial file\nusing jokers; for example, the mask  .  (must be indicated as a text\nbetween quotation marks) will select every file in the directory.  You can also include in the mask, the  path  of the directory (if no path is defined\nthe files of the current directory will be listed). \nFor example, the mask  C:\\WINDOWS\\SYS*.??E  will select every file of the\ndirectory  C:\\WINDOWS  whose name starts with  SYS  and whose extension finishes\nwith  E .  As a second parameter the  types of files  must be indicated which are to\nbe included in the list, this will be one of the following:   _normal  - To list just the normal files.   _hidden  - To include also all hidden files.   _system  - To include also the system files.   _subdir  - To include also the subdirectories.   _volid   - To list just the label of the volume.  The most common choice is to indicate  _normal  as the  type of files , this type\ncovers most files, including read-only files, file files and read/write files \n(only some special files are excluded, which typically are internal system files).  If  _hidden ,  _system  or  _subdir  is indicated in this parameter, these types of files\nwill be included as well as the normal files (it's not necessary to specify  _normal ).\nAlso, you can select more than one of these types; for example, indicating  _hidden+_system \nwill list every normal file, as well as every hidden and system file.  When {_volid) is indicated, just the name of the volume label of the disk\nwill be listed, no file or subdirectory will be listed (you can't add other types to this).   The function  get_dirinfo()  simply returns the  total number  of listed files;\nthe names of these files are saved in the global structure dirinfo  (the first name of the file is saved in  dirinfo.name[0] , the\nsecond in  dirinfo.name[1] , etc.).  The  total number  of listed files which this function returns is saved\nin  dirinfo.files .  The list of file names is always saved in alphabetic order, but the function qsort()  can be used to order the global structure  dirinfo  \nwith any other criteria.   This function just allows you to obtain the  names  of the files, to\nobtain further information about them (the attributes, the size, the data,\netc.) the function  get_fileinfo()  must be used.", 
            "title": "Description"
        }, 
        {
            "location": "/get_dirinfo()/#example-program", 
            "text": "PROGRAM example_get_dirinfo;\n\nGLOBAL\n    counter;\n\nBEGIN\n    write(0,0,0,0, List of files - Press ESC to finish );\n\n    get_dirinfo( C:\\WINDOWS\\*.EXE ,_normal); // Obtains the list of files\n\n    FOR (counter=0;counter dirinfo.files;counter++)\n       x=(counter%4)*80;\n       y=16+(counter/4)*8;\n       write(0,x,y,0,dirinfo.name[counter]);\n    END\n\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND  This example program lists every normal  EXE  file of the directory\nC:\\WINDOWS, and then shows them on screen.  The loop  FOR  is the one that shows on screen the list of the\nfiles of the structure  dirinfo  in four columns, as otherwise the function get_dirinfo()  doesn't show any information on screen, it just fills up the\nstructure  dirinfo  with the names of the files found in the directory.   To open or create a file the function  fopen()  can be used.  To change the directory, you must use the function  chdir() , and mkdir()  to create a new directory.  The function  disk_free()  allows you to find out the free disk space on a drive.   See:  get_fileinfo()  -  fopen()  -  chdir()  -  mkdir()  -  disk_free()", 
            "title": "Example program"
        }, 
        {
            "location": "/get_fileinfo()/", 
            "text": "get_fileinfo(\nname of the file\n)\n\n\nReturns\n\n\n0\n - Can't obtain any information about the file.\n\n\n1\n - The information about the file was saved correctly.\n\n\nDescription\n\n\nObtains information about a file or directory on the disk, for which,\nthe function requires the \nname of the file\n as a parameter (between quotation\nmarks). You can either just indicate the filename, or include the path to\nthe file as well.\n\n\nIf the function finds the file in the specified directory (or in\nthe current one, in the case of no directory being specified), it will return back\nthe value \n1\n and will save all information about the file in the global structure\n\nfileinfo\n, which contains the following fields:\n\n\n fullpath\n - Complete name (including the path).\n\n\n drive\n    - Disk drive (1-A:, 2-B:, 3-C:, ...).\n\n\n dir\n      - Directory of the file.\n\n\n name\n     - Name of the file.\n\n\n ext\n      - Extension of the file.\n\n\n size\n     - Size (in simple data, see \ndrive_size\n).\n\n\n day\n      - Day (data of the last access).\n\n\n month\n    - Month (data of the last access).\n\n\n year\n     - Year (data of the last access).\n\n\n hour\n     - Hour (hour of the last access).\n\n\n min\n      - Minute (hour of the last access).\n\n\n sec\n      - Second (hour of the last access).\n\n\n attrib\n   - Attributes of the file.\n\n\nThe path to the file can be completely specified (from the\nmain directory of the drive, as \nC:\\WINDOWS...\n) or relative to the current \ndirectory (from which the game is executed, like \nMAP\\MIOS...\n).\nAnyhow, the complete path from the main directory will always be stored in \n\nfileinfo.fullpath\n, including the drive letter of the disk.\n\n\n\n\nThe function \nget_fileinfo()\n just obtains information about a file,\nto obtain the complete list of files in a directory, the function\n\nget_dirinfo()\n must be used.\n\n\nExample program\n\n\nPROGRAM example_get_fileinfo;\nBEGIN\n    // ...\n\n    get_fileinfo(\nhelp/HELP.FPG\n);\n\n    // ...\nEND\n\n\n\n\nThis small example asks for information about the file \nhelp.fpg\n\ncontained in the directory \nhelp\n. It can be extracted and traced (with \nF12\n)\nto see how, after the call to the function, the global structure\npredefined as \nfileinfo\n has been filled up with information concerning \nthe file.\n\n\n\n\nTo open or create a file the function \nfopen()\n can be used,\nand to delete a file from the drive the function \nremove()\n can be used.\n\n\nThe function \ndisk_free()\n allows you to ascertain the free disk space\nof any drive.\n\n\n\n\nSee: \nget_dirinfo()\n - \nfopen()\n - \nremove()\n - \ndisk_free()", 
            "title": "get_fileinfo()"
        }, 
        {
            "location": "/get_fileinfo()/#returns", 
            "text": "0  - Can't obtain any information about the file.  1  - The information about the file was saved correctly.", 
            "title": "Returns"
        }, 
        {
            "location": "/get_fileinfo()/#description", 
            "text": "Obtains information about a file or directory on the disk, for which,\nthe function requires the  name of the file  as a parameter (between quotation\nmarks). You can either just indicate the filename, or include the path to\nthe file as well.  If the function finds the file in the specified directory (or in\nthe current one, in the case of no directory being specified), it will return back\nthe value  1  and will save all information about the file in the global structure fileinfo , which contains the following fields:   fullpath  - Complete name (including the path).   drive     - Disk drive (1-A:, 2-B:, 3-C:, ...).   dir       - Directory of the file.   name      - Name of the file.   ext       - Extension of the file.   size      - Size (in simple data, see  drive_size ).   day       - Day (data of the last access).   month     - Month (data of the last access).   year      - Year (data of the last access).   hour      - Hour (hour of the last access).   min       - Minute (hour of the last access).   sec       - Second (hour of the last access).   attrib    - Attributes of the file.  The path to the file can be completely specified (from the\nmain directory of the drive, as  C:\\WINDOWS... ) or relative to the current \ndirectory (from which the game is executed, like  MAP\\MIOS... ).\nAnyhow, the complete path from the main directory will always be stored in  fileinfo.fullpath , including the drive letter of the disk.   The function  get_fileinfo()  just obtains information about a file,\nto obtain the complete list of files in a directory, the function get_dirinfo()  must be used.", 
            "title": "Description"
        }, 
        {
            "location": "/get_fileinfo()/#example-program", 
            "text": "PROGRAM example_get_fileinfo;\nBEGIN\n    // ...\n\n    get_fileinfo( help/HELP.FPG );\n\n    // ...\nEND  This small example asks for information about the file  help.fpg \ncontained in the directory  help . It can be extracted and traced (with  F12 )\nto see how, after the call to the function, the global structure\npredefined as  fileinfo  has been filled up with information concerning \nthe file.   To open or create a file the function  fopen()  can be used,\nand to delete a file from the drive the function  remove()  can be used.  The function  disk_free()  allows you to ascertain the free disk space\nof any drive.   See:  get_dirinfo()  -  fopen()  -  remove()  -  disk_free()", 
            "title": "Example program"
        }, 
        {
            "location": "/getdrive()/", 
            "text": "getdrive(\n)\n\n\nReturns\n\n\nThe number of the current drive.\n\n\nDescription\n\n\nThis function allows you to determine which is the drive that is being\ncurrently used, this is returned as a number, where \n1\n corresponds to the drive ### A,\nthe number \n2\n to ### B, \n3\n to ### C, etc. \nThere are no parameters required in the function call.\n\n\nThe function \nsetdrive()\n allows you to set the current drive;\nall access to the disk (reading and writing files) is always done\non the selected drive which, by default, will be the drive\non which the program is executed.\n\n\nExample program\n\n\nPROGRAM example_getdrive;\n\nGLOBAL\n    drive;\n\nBEGIN\n    write(0,0,0,0,\nCurrent drive:\n);\n\n    drive=getdrive();\n\n    write_int(0,0,20,0,OFFSET drive);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nThis program shows on screen the number of the current drive obtained\nusing the function \ngetdrive()\n.\n\n\n\n\nTo change the directory you must use the function \nchdir()\n, and\n\nmkdir()\n to create a new directory.\n\n\nThe function \ndisk_free()\n allows you to ascertain the remaining free\ndisk space on a drive.\n\n\n\n\nSee: \nsetdrive()\n - \nchdir()\n - \nmkdir()\n - \ndisk_free()", 
            "title": "getdrive()"
        }, 
        {
            "location": "/getdrive()/#returns", 
            "text": "The number of the current drive.", 
            "title": "Returns"
        }, 
        {
            "location": "/getdrive()/#description", 
            "text": "This function allows you to determine which is the drive that is being\ncurrently used, this is returned as a number, where  1  corresponds to the drive ### A,\nthe number  2  to ### B,  3  to ### C, etc. \nThere are no parameters required in the function call.  The function  setdrive()  allows you to set the current drive;\nall access to the disk (reading and writing files) is always done\non the selected drive which, by default, will be the drive\non which the program is executed.", 
            "title": "Description"
        }, 
        {
            "location": "/getdrive()/#example-program", 
            "text": "PROGRAM example_getdrive;\n\nGLOBAL\n    drive;\n\nBEGIN\n    write(0,0,0,0, Current drive: );\n\n    drive=getdrive();\n\n    write_int(0,0,20,0,OFFSET drive);\n    LOOP\n        FRAME;\n    END\nEND  This program shows on screen the number of the current drive obtained\nusing the function  getdrive() .   To change the directory you must use the function  chdir() , and mkdir()  to create a new directory.  The function  disk_free()  allows you to ascertain the remaining free\ndisk space on a drive.   See:  setdrive()  -  chdir()  -  mkdir()  -  disk_free()", 
            "title": "Example program"
        }, 
        {
            "location": "/setdrive()/", 
            "text": "setdrive(\ndrive\n)\n\n\nDescription\n\n\nThis function allows you to set the current drive; all access to the disk\n(reading and writing files) is always done on the selected drive\nwhich, by default, will be the drive on which the program was executed.\n\n\nThe \ndrive\n must be indicated with a number, where \nthe number \n1\n corresponds with the drive ### A, the number  \n2\n with ### B,\n\n3\n the ### C, etc.   this function doesn't return any value.\n\n\nThe function \ngetdrive()\n allows you to obtain the number of the current drive.\n\n\nExample program\n\n\nPROGRAM example_setdrive;\n\nGLOBAL\n    drive;\n\nBEGIN\n    // ...\n\n    drive=getdrive();\n\n    setdrive(1);      // Is placed in the drive A:\n\n    // ...\n\n    setdrive(drive); // Recovers the previous drive\n\n    // ...\nEND\n\n\n\n\nThis program first, obtains the current drive with the function \ngetdrive()\n\nand saves it in the variable \ndrive\n, then the drive is set to \n1\n (A:)\nbefore, finally, the drive is reset as the drive in which the program is\nbeing executed.\n\n\n\n\nNote When a drive is changed with \nsetdrive()\n no value is returned,\n\n\nbut afterwards \ngetdrive()\n can be called to check that the program\nhas been placed on the correct drive.\n\n\n\n\nTo change the directory you must use the function \nchdir()\n, and\n\nmkdir()\n to create a new directory.\n\n\nThe function \ndisk_free()\n allows you to ascertain the remaining free\ndisk space on a drive.\n\n\n\n\nSee: \ngetdrive()\n - \nchdir()\n - \nmkdir()\n - \ndisk_free()", 
            "title": "setdrive()"
        }, 
        {
            "location": "/setdrive()/#description", 
            "text": "This function allows you to set the current drive; all access to the disk\n(reading and writing files) is always done on the selected drive\nwhich, by default, will be the drive on which the program was executed.  The  drive  must be indicated with a number, where \nthe number  1  corresponds with the drive ### A, the number   2  with ### B, 3  the ### C, etc.   this function doesn't return any value.  The function  getdrive()  allows you to obtain the number of the current drive.", 
            "title": "Description"
        }, 
        {
            "location": "/setdrive()/#example-program", 
            "text": "PROGRAM example_setdrive;\n\nGLOBAL\n    drive;\n\nBEGIN\n    // ...\n\n    drive=getdrive();\n\n    setdrive(1);      // Is placed in the drive A:\n\n    // ...\n\n    setdrive(drive); // Recovers the previous drive\n\n    // ...\nEND  This program first, obtains the current drive with the function  getdrive() \nand saves it in the variable  drive , then the drive is set to  1  (A:)\nbefore, finally, the drive is reset as the drive in which the program is\nbeing executed.", 
            "title": "Example program"
        }, 
        {
            "location": "/setdrive()/#note-when-a-drive-is-changed-with-setdrive-no-value-is-returned", 
            "text": "but afterwards  getdrive()  can be called to check that the program\nhas been placed on the correct drive.   To change the directory you must use the function  chdir() , and mkdir()  to create a new directory.  The function  disk_free()  allows you to ascertain the remaining free\ndisk space on a drive.   See:  getdrive()  -  chdir()  -  mkdir()  -  disk_free()", 
            "title": "Note When a drive is changed with setdrive() no value is returned,"
        }, 
        {
            "location": "/chdir()/", 
            "text": "chdir(\ndirectory\n)\n\n\nReturns\n\n\n1\n - The indicated directory was changed.\n\n\n0\n - This directory can't be read.\n\n\nDescription\n\n\nChanges the current directory, on the selected drive.\n\n\nThe directory must be indicated as a literal (text between quotation marks), and\ncan be a relative path (from the current directory) or an absolute path\n(from the main directory).\n\n\nThe ways of use and possibilities of this function are the same as the\ncommand \nCD\n that can be typed in at the command line of the operating system.\n\n\nEach program is placed at the beginning of the directory where the main executable\nis found.\n\n\nNew directories (or folders)can be created on a disk \nwith the function \nmkdir()\n, and with the function \nremove()\n the other \ndirectories can be eliminated.\n\n\nExample program\n\n\nPROGRAM example_chdir;\nBEGIN\n    chdir(\nMAP\n); // Is placed in the directory MAP\\\n\n    // ...\n\n    chdir(\n..\n);  // Comes back to the previous directory\nEND\n\n\n\n\nThis small example shows how the function \nchdir()\n can be used\nto change the current directory.\n\n\n\n\nThe function \nsetdrive()\n allows you to set the current drive\nand the function \ngetdrive()\n allows you to ascertain it;\nall access to the disk (reading and writing of files) is always done on the selected\ndrive which, by default, will be the drive on which the program is being executed.\n\n\n\n\nNote The list of a directory's files can be obtained with the\n\n\nfunction \nget_dirinfo()\n.\n\n\n\n\nSee: \nmkdir()\n - \nremove()\n - \nsetdrive()\n - \ngetdrive()", 
            "title": "chdir()"
        }, 
        {
            "location": "/chdir()/#returns", 
            "text": "1  - The indicated directory was changed.  0  - This directory can't be read.", 
            "title": "Returns"
        }, 
        {
            "location": "/chdir()/#description", 
            "text": "Changes the current directory, on the selected drive.  The directory must be indicated as a literal (text between quotation marks), and\ncan be a relative path (from the current directory) or an absolute path\n(from the main directory).  The ways of use and possibilities of this function are the same as the\ncommand  CD  that can be typed in at the command line of the operating system.  Each program is placed at the beginning of the directory where the main executable\nis found.  New directories (or folders)can be created on a disk \nwith the function  mkdir() , and with the function  remove()  the other \ndirectories can be eliminated.", 
            "title": "Description"
        }, 
        {
            "location": "/chdir()/#example-program", 
            "text": "PROGRAM example_chdir;\nBEGIN\n    chdir( MAP ); // Is placed in the directory MAP\\\n\n    // ...\n\n    chdir( .. );  // Comes back to the previous directory\nEND  This small example shows how the function  chdir()  can be used\nto change the current directory.   The function  setdrive()  allows you to set the current drive\nand the function  getdrive()  allows you to ascertain it;\nall access to the disk (reading and writing of files) is always done on the selected\ndrive which, by default, will be the drive on which the program is being executed.", 
            "title": "Example program"
        }, 
        {
            "location": "/chdir()/#note-the-list-of-a-directorys-files-can-be-obtained-with-the", 
            "text": "function  get_dirinfo() .   See:  mkdir()  -  remove()  -  setdrive()  -  getdrive()", 
            "title": "Note The list of a directory's files can be obtained with the"
        }, 
        {
            "location": "/mkdir()/", 
            "text": "mkdir(\ndirectory\n)\n\n\nDescription\n\n\nCreates a new directory (inside of the current directory or folder).\n\n\nYou must indicate as a parameter the name of the directory to be created \nas a literal (text between quotation marks).\n\n\nThe way of using and possibilities for this function are the same as\nthe command \nMD\n which can be typed at the command line of the operating\nsystem.\n\n\nEach program is placed at the beginning of the directory where the main\nexecutable is found.\n\n\nYou create a new directory with the function \nmkdir()\n, eliminate\nthe other directories with the function \nremove()\n.\n\n\n.\n\n\nExample program\n\n\nPROGRAM example_mkdir;\nBEGIN\n    mkdir(\ntemporal\n); // Creates a new directory\n\n    // ...\n    remove(\ntemporal\n);\nEND\n\n\n\n\nThis small program shows how the function \nmkdir()\n can be used to create\na directory, and then it is deleted with the function \nremove()\n.\n\n\n\n\nThe function \nsetdrive()\n allows you to set the current drive\nand the function \ngetdrive()\n allows you to ascertain it;\nall access to the disk (reading and writing of files) is always done on the selected\ndrive which, by default, will be the drive on which the program is being executed.\n\n\n\n\nNote The directory's list of files can be obtained with the function\n\n\nget_dirinfo()\n.\n\n\n\n\nSee: \nchdir()\n - \nremove()\n - \nsetdrive()\n - \ngetdrive()", 
            "title": "mkdir()"
        }, 
        {
            "location": "/mkdir()/#description", 
            "text": "Creates a new directory (inside of the current directory or folder).  You must indicate as a parameter the name of the directory to be created \nas a literal (text between quotation marks).  The way of using and possibilities for this function are the same as\nthe command  MD  which can be typed at the command line of the operating\nsystem.  Each program is placed at the beginning of the directory where the main\nexecutable is found.  You create a new directory with the function  mkdir() , eliminate\nthe other directories with the function  remove() .  .", 
            "title": "Description"
        }, 
        {
            "location": "/mkdir()/#example-program", 
            "text": "PROGRAM example_mkdir;\nBEGIN\n    mkdir( temporal ); // Creates a new directory\n\n    // ...\n    remove( temporal );\nEND  This small program shows how the function  mkdir()  can be used to create\na directory, and then it is deleted with the function  remove() .   The function  setdrive()  allows you to set the current drive\nand the function  getdrive()  allows you to ascertain it;\nall access to the disk (reading and writing of files) is always done on the selected\ndrive which, by default, will be the drive on which the program is being executed.", 
            "title": "Example program"
        }, 
        {
            "location": "/mkdir()/#note-the-directorys-list-of-files-can-be-obtained-with-the-function", 
            "text": "get_dirinfo() .   See:  chdir()  -  remove()  -  setdrive()  -  getdrive()", 
            "title": "Note The directory's list of files can be obtained with the function"
        }, 
        {
            "location": "/remove()/", 
            "text": "remove(\nname of file or directory\n)\n\n\nDescription\n\n\nDeletes files or subdirectories contained inside of the current directory\nin which the program was executed.\n\n\nThe \nname of file or directory\n must be indicated in a literal (text\nbetween quotation marks), also the joker/wild characters \n?\n and \n  are accepted (as\nfor example \n.bak\n to eliminate every file with the extension BAK).\n\n\nThe files eliminated will always be inside of the current directory (see \nchdir()\n\nto change the directory) and on the current drive (see \nsetdrive()\n to change\nthe drive).\n\n\nWith this function directories can also be eliminated, but only\nif they are empty (if there are no files or other subdirectories inside).\n\n\n\n\nNote This function must be used with more caution, because the files\n\n\ndeleted cannot be recovered, and information or programs\ncontained on the disk can be lost .\n\n\n\n\nExample program\n\n\nPROGRAM example_remove;\nBEGIN\n    mkdir(\ntemporal\n);\n    // ...\n\n    remove(\ntemporal\n); // Deletes a directory\nEND\n\n\n\n\nThis small example creates a directory with the function \nmkdir()\n and then\neliminates it with the function \nremove()\n.\n\n\n\n\nNote The directory's list of files can be obtained with the function\n\n\nget_dirinfo()\n.\n\n\n\n\nSee: \nchdir()\n - \nsetdrive()\n - \nget_dirinfo()", 
            "title": "remove()"
        }, 
        {
            "location": "/remove()/#description", 
            "text": "Deletes files or subdirectories contained inside of the current directory\nin which the program was executed.  The  name of file or directory  must be indicated in a literal (text\nbetween quotation marks), also the joker/wild characters  ?  and    are accepted (as\nfor example  .bak  to eliminate every file with the extension BAK).  The files eliminated will always be inside of the current directory (see  chdir() \nto change the directory) and on the current drive (see  setdrive()  to change\nthe drive).  With this function directories can also be eliminated, but only\nif they are empty (if there are no files or other subdirectories inside).", 
            "title": "Description"
        }, 
        {
            "location": "/remove()/#note-this-function-must-be-used-with-more-caution-because-the-files", 
            "text": "deleted cannot be recovered, and information or programs\ncontained on the disk can be lost .", 
            "title": "Note This function must be used with more caution, because the files"
        }, 
        {
            "location": "/remove()/#example-program", 
            "text": "PROGRAM example_remove;\nBEGIN\n    mkdir( temporal );\n    // ...\n\n    remove( temporal ); // Deletes a directory\nEND  This small example creates a directory with the function  mkdir()  and then\neliminates it with the function  remove() .", 
            "title": "Example program"
        }, 
        {
            "location": "/remove()/#note-the-directorys-list-of-files-can-be-obtained-with-the-function", 
            "text": "get_dirinfo() .   See:  chdir()  -  setdrive()  -  get_dirinfo()", 
            "title": "Note The directory's list of files can be obtained with the function"
        }, 
        {
            "location": "/disk_free()/", 
            "text": "disk_free(\ndrive\n)\n\n\nReturns\n\n\nThe free disk space on the drive.\n\n\nDescription\n\n\nThis function allows you to determine the free disk space of any drive.\n\n\nThe number of the \ndrive\n is required as the only parameter, the\nnumber \n1\n meaning the drive ### A, \n2\n with ### B, \n3\n with ### C, etc.\n\n\nThe remaining space on the drive is given in \nKbs\n (in kilobytes,\neach one being a total of 1024 bytes).\n\n\nThe current drive can be ascertained (the one where the program is being\nexecuted) thanks to the function \ngetdrive()\n.\n\n\nExample program\n\n\nPROGRAM example_disk_free;\n\nGLOBAL\n    drive;\n    free_space;\n\nBEGIN\n    // ...\n\n    drive=getdrive();\n    free_space=disk_free(drive);\n\n    // ...\nEND\n\n\n\n\nThis program uses first the function \ngetdrive()\n to\ndetermine on which drive the program is being executed (where\nthe variable \ndrive\n)is stored on, and then determines the free \ndisk space of that drive with \ndisk_free()\n.\n\n\n\n\nTo obtain information about the size of the files etc... you must be use the\nfunctions \nget_dirinfo()\n and \nget_fileinfo()\n.\n\n\n\n\nNote The function \nmemory_free()\n allows you to determine the free RAM\n\n\nmemory, the quantity of memory that is available to run the program.\n\n\n\n\nSee: \ngetdrive()\n - \nmemory_free()", 
            "title": "disk_free()"
        }, 
        {
            "location": "/disk_free()/#returns", 
            "text": "The free disk space on the drive.", 
            "title": "Returns"
        }, 
        {
            "location": "/disk_free()/#description", 
            "text": "This function allows you to determine the free disk space of any drive.  The number of the  drive  is required as the only parameter, the\nnumber  1  meaning the drive ### A,  2  with ### B,  3  with ### C, etc.  The remaining space on the drive is given in  Kbs  (in kilobytes,\neach one being a total of 1024 bytes).  The current drive can be ascertained (the one where the program is being\nexecuted) thanks to the function  getdrive() .", 
            "title": "Description"
        }, 
        {
            "location": "/disk_free()/#example-program", 
            "text": "PROGRAM example_disk_free;\n\nGLOBAL\n    drive;\n    free_space;\n\nBEGIN\n    // ...\n\n    drive=getdrive();\n    free_space=disk_free(drive);\n\n    // ...\nEND  This program uses first the function  getdrive()  to\ndetermine on which drive the program is being executed (where\nthe variable  drive )is stored on, and then determines the free \ndisk space of that drive with  disk_free() .   To obtain information about the size of the files etc... you must be use the\nfunctions  get_dirinfo()  and  get_fileinfo() .", 
            "title": "Example program"
        }, 
        {
            "location": "/disk_free()/#note-the-function-memory_free-allows-you-to-determine-the-free-ram", 
            "text": "memory, the quantity of memory that is available to run the program.   See:  getdrive()  -  memory_free()", 
            "title": "Note The function memory_free() allows you to determine the free RAM"
        }, 
        {
            "location": "/memory_free()/", 
            "text": "memory_free(\n)\n\n\nReturns\n\n\nThe free memory available for the program.\n\n\nDescription\n\n\nThis function allows you to determine the computer's RAM memory that is\navailable for the use of the program.\n\n\nNo parameter is required, and the memory total is returned in Kbs\n(in kilobytes, each one being a total of 1024 bytes).\n\n\nThis quantity of memory will be available for the program to load\nall its resources (graphics, sounds, etc.), it is useful to\ncheck with this function, at the start of a program, that the computer\nhas enough memory to load all the necessary resources.\n\n\nExample program\n\n\nPROGRAM example_memory_free;\n\nGLOBAL\n    free_memory;\n\nBEGIN\n    // ...\n\n    free_memory=memory_free();\n\n    // ...\nEND\n\n\n\n\nThis small example uses the function \nmemory_free()\n to save the quantity \nof RAM available for the program in the global variable \nfree_memory\n.\n\n\n\n\nNote The function \ndisk_free()\n allows you to determine the free disk\n\n\nspace on a computer drive.\n\n\n\n\nSee: \ndisk_free()", 
            "title": "memory_free()"
        }, 
        {
            "location": "/memory_free()/#returns", 
            "text": "The free memory available for the program.", 
            "title": "Returns"
        }, 
        {
            "location": "/memory_free()/#description", 
            "text": "This function allows you to determine the computer's RAM memory that is\navailable for the use of the program.  No parameter is required, and the memory total is returned in Kbs\n(in kilobytes, each one being a total of 1024 bytes).  This quantity of memory will be available for the program to load\nall its resources (graphics, sounds, etc.), it is useful to\ncheck with this function, at the start of a program, that the computer\nhas enough memory to load all the necessary resources.", 
            "title": "Description"
        }, 
        {
            "location": "/memory_free()/#example-program", 
            "text": "PROGRAM example_memory_free;\n\nGLOBAL\n    free_memory;\n\nBEGIN\n    // ...\n\n    free_memory=memory_free();\n\n    // ...\nEND  This small example uses the function  memory_free()  to save the quantity \nof RAM available for the program in the global variable  free_memory .", 
            "title": "Example program"
        }, 
        {
            "location": "/memory_free()/#note-the-function-disk_free-allows-you-to-determine-the-free-disk", 
            "text": "space on a computer drive.   See:  disk_free()", 
            "title": "Note The function disk_free() allows you to determine the free disk"
        }, 
        {
            "location": "/ignore_error()/", 
            "text": "ignore_error(\nerror number\n)\n\n\nDescription\n\n\nThis function allows you to ignore a specified execution error,\nthe \nerror number\n is required as a parameter; this is the present\nnumber in the information window of an error which appears on occasions\nwhen a program is being executed.\n\n\nAt the beginning it is not recommended to ignore the execution errors,\nbecause the program may not work correctly, and you may need some information\nrelative to the error to solve the problem.\n\n\nWhen a program produces an execution error, it is always for a reason;\nand to ignore the error will not solve the problem.\n\n\n\n\nNote Not all the errors can be ignored, there are some errors which\n\n\nmake it impossible for the program to run properly. These are the errors\ndenoted as \nserious\n, which will always cause the program to abort.\n\n\n\n\nExample program\n\n\nPROGRAM example_ignore_error;\nBEGIN\n\n    ignore_error(145); // To ignore the divisions by zero\n\n    x=x/0;\nEND\n\n\n\n\nIn this example the function \nignore_error()\n is called to advise \nthe system that, from now on, it should ignore all divisions by zero\n(these will produce an unquantifiable result).\n\n\nNow a division by zero is made, to check that the program doesn't emit\nan error message.\n\n\nThis error number is \n145\n, the same as the number given with the call to the\nfunction \nignore_error()\n of the previous example.\n\n\n\n\nList of codes of execution errors\n\n\n100\n There is not enough memory to run the program.\n\n\n101\n Call to key() with a nonexistent key code.\n\n\n102\n The palette was not loaded, file not found.\n\n\n103\n An invalid palette file was loaded.\n\n\n104\n Too many FPG files are open at the same time.\n\n\n105\n The file was not loaded, file not found.\n\n\n106\n An invalid FPG file was loaded.\n\n\n107\n Number of scroll invalid (must be between 0 and 9).\n\n\n108\n Number of region invalid (out of range).\n\n\n109\n file Code invalid.\n\n\n110\n Code of graphic invalid.\n\n\n111\n An FPG file was used before it was loaded.\n\n\n112\n A graphic's code is needed for the scroll.\n\n\n113\n Too many fonts have been loaded.\n\n\n114\n The font was not loaded, file not found.\n\n\n115\n An invalid font file was loaded.\n\n\n116\n Identifier code of fonts invalid.\n\n\n117\n Code of text centre invalid.\n\n\n118\n There are too many blocks of text currently active in the program.\n\n\n119\n Identifier of text invalid.\n\n\n120\n Screen region is defined incorrectly.\n\n\n121\n Nonexistent graphic was used.\n\n\n122\n A block out of memory was written.\n\n\n123\n The file you are attempting to write to hasn't been opened.\n\n\n124\n Can't write to the file (check space on disk).\n\n\n125\n A block out of memory was read.\n\n\n126\n Can't open the file for reading.\n\n\n127\n Can't read the file.\n\n\n128\n Can't load the sound effect.\n\n\n129\n Can't play the wanted sound effect.\n\n\n130\n Can't start the wanted animation.\n\n\n131\n Number of mode 7 invalid (must be between  0 and 9).\n\n\n132\n A code of graphic for the mode 7 is needed.\n\n\n133\n Number of checkpoint invalid.\n\n\n134\n Number of button incorrect (must be between 0 and 3).\n\n\n135\n Number of axis incorrect (must be between 0 and 3).\n\n\n136\n Address of the palette table out of memory.\n\n\n137\n Can't check regions in mode 7 graphics.\n\n\n138\n Code of graphic information incorrect.\n\n\n139\n Can't check collisions in mode 7 graphics.\n\n\n140\n Access out of rank.\n\n\n141\n An invalid process was accessed..\n\n\n142\n The process looks like a block, expecting FRAME.\n\n\n143\n Can't load the map, file not found.\n\n\n144\n An invalid map file was loaded.\n\n\n145\n A division by zero was made.\n\n\n146\n The size of the region is incorrect.\n\n\n147\n Can't load FLI/FLC animation, file not found.\n\n\n148\n Value of timeout incorrect (must be between 1 and 60).\n\n\n149\n Number of players incorrect (must be between 2 and 8).\n\n\n150\n Only global data can be sent .\n\n\n151\n Size of the square invalid (must be between 1 and 256).\n\n\n152\n searching Map invalid (from 1x1 to 128x128).\n\n\n153\n Size of the map incorrect (from 1x1 to 32768x32768).\n\n\n154\n Number of colour incorrect (must be from 0 to 255).\n\n\n155\n The centre is outside of the graphic's limits.\n\n\n156\n The object is outside of the map and will be eliminated.\n\n\n157\n Map texture not found.\n\n\n158\n Texture size incorrect.\n\n\n159\n Can't load the world, file not found.\n\n\n160\n Can't load the world, file not valid.\n\n\n161\n Flag number invalid.\n\n\n162\n Dispositive invalid (just 1-IPX,2-SERIAL,3-MODEM).\n\n\n163\n Packet size invalid (just from 1 to 199).\n\n\n164\n The string of text destination is invalid.\n\n\n165\n Null cursor was accessed.\n\n\n166\n The access mode to the file is invalid.\n\n\n167\n Can't load the module.\n\n\n168\n Too many ignored errors.\n\n\n169\n To many files opened..\n\n\n170\n Identifier of file (handle) not valid.\n\n\n171\n Value out of rank.\n\n\n172\n Too many graphic objects visualised.\n\n\n173\n Type of graphic object is not known.\n\n\n174\n Percentage of link out of rank (0..15).\n\n\n175\n Number of graphic object invalid.\n\n\n176\n Error variable of type: Texture of map [a] not found in file [b].\n\n\n177\n Map texture.\n\n\n178\n Not found in file.\n\n\n179\n Too many partitions of dynamic memory were made..\n\n\n180\n The cursor doesn't correspond to any of the reserved blocks.\n\n\n181\n Can't reserve blocks of less than one position.\n\n\n182\n A block outside of the memory was (de)encrypted.\n\n\n183\n Can't load another palette when the current one is enforced.\n\n\n200\n file with corrupted data, can't be loaded.\n\n\n\n\nNote With the compilation options (see \nCompiler_options\n) the errors\n\n\nof execution can be ignored , but this practice is not recommended.\n\n\n\n\nSee: \nCompiler_options", 
            "title": "ignore_error()"
        }, 
        {
            "location": "/ignore_error()/#description", 
            "text": "This function allows you to ignore a specified execution error,\nthe  error number  is required as a parameter; this is the present\nnumber in the information window of an error which appears on occasions\nwhen a program is being executed.  At the beginning it is not recommended to ignore the execution errors,\nbecause the program may not work correctly, and you may need some information\nrelative to the error to solve the problem.  When a program produces an execution error, it is always for a reason;\nand to ignore the error will not solve the problem.", 
            "title": "Description"
        }, 
        {
            "location": "/ignore_error()/#note-not-all-the-errors-can-be-ignored-there-are-some-errors-which", 
            "text": "make it impossible for the program to run properly. These are the errors\ndenoted as  serious , which will always cause the program to abort.", 
            "title": "Note Not all the errors can be ignored, there are some errors which"
        }, 
        {
            "location": "/ignore_error()/#example-program", 
            "text": "PROGRAM example_ignore_error;\nBEGIN\n\n    ignore_error(145); // To ignore the divisions by zero\n\n    x=x/0;\nEND  In this example the function  ignore_error()  is called to advise \nthe system that, from now on, it should ignore all divisions by zero\n(these will produce an unquantifiable result).  Now a division by zero is made, to check that the program doesn't emit\nan error message.  This error number is  145 , the same as the number given with the call to the\nfunction  ignore_error()  of the previous example.", 
            "title": "Example program"
        }, 
        {
            "location": "/ignore_error()/#list-of-codes-of-execution-errors", 
            "text": "100  There is not enough memory to run the program.  101  Call to key() with a nonexistent key code.  102  The palette was not loaded, file not found.  103  An invalid palette file was loaded.  104  Too many FPG files are open at the same time.  105  The file was not loaded, file not found.  106  An invalid FPG file was loaded.  107  Number of scroll invalid (must be between 0 and 9).  108  Number of region invalid (out of range).  109  file Code invalid.  110  Code of graphic invalid.  111  An FPG file was used before it was loaded.  112  A graphic's code is needed for the scroll.  113  Too many fonts have been loaded.  114  The font was not loaded, file not found.  115  An invalid font file was loaded.  116  Identifier code of fonts invalid.  117  Code of text centre invalid.  118  There are too many blocks of text currently active in the program.  119  Identifier of text invalid.  120  Screen region is defined incorrectly.  121  Nonexistent graphic was used.  122  A block out of memory was written.  123  The file you are attempting to write to hasn't been opened.  124  Can't write to the file (check space on disk).  125  A block out of memory was read.  126  Can't open the file for reading.  127  Can't read the file.  128  Can't load the sound effect.  129  Can't play the wanted sound effect.  130  Can't start the wanted animation.  131  Number of mode 7 invalid (must be between  0 and 9).  132  A code of graphic for the mode 7 is needed.  133  Number of checkpoint invalid.  134  Number of button incorrect (must be between 0 and 3).  135  Number of axis incorrect (must be between 0 and 3).  136  Address of the palette table out of memory.  137  Can't check regions in mode 7 graphics.  138  Code of graphic information incorrect.  139  Can't check collisions in mode 7 graphics.  140  Access out of rank.  141  An invalid process was accessed..  142  The process looks like a block, expecting FRAME.  143  Can't load the map, file not found.  144  An invalid map file was loaded.  145  A division by zero was made.  146  The size of the region is incorrect.  147  Can't load FLI/FLC animation, file not found.  148  Value of timeout incorrect (must be between 1 and 60).  149  Number of players incorrect (must be between 2 and 8).  150  Only global data can be sent .  151  Size of the square invalid (must be between 1 and 256).  152  searching Map invalid (from 1x1 to 128x128).  153  Size of the map incorrect (from 1x1 to 32768x32768).  154  Number of colour incorrect (must be from 0 to 255).  155  The centre is outside of the graphic's limits.  156  The object is outside of the map and will be eliminated.  157  Map texture not found.  158  Texture size incorrect.  159  Can't load the world, file not found.  160  Can't load the world, file not valid.  161  Flag number invalid.  162  Dispositive invalid (just 1-IPX,2-SERIAL,3-MODEM).  163  Packet size invalid (just from 1 to 199).  164  The string of text destination is invalid.  165  Null cursor was accessed.  166  The access mode to the file is invalid.  167  Can't load the module.  168  Too many ignored errors.  169  To many files opened..  170  Identifier of file (handle) not valid.  171  Value out of rank.  172  Too many graphic objects visualised.  173  Type of graphic object is not known.  174  Percentage of link out of rank (0..15).  175  Number of graphic object invalid.  176  Error variable of type: Texture of map [a] not found in file [b].  177  Map texture.  178  Not found in file.  179  Too many partitions of dynamic memory were made..  180  The cursor doesn't correspond to any of the reserved blocks.  181  Can't reserve blocks of less than one position.  182  A block outside of the memory was (de)encrypted.  183  Can't load another palette when the current one is enforced.  200  file with corrupted data, can't be loaded.", 
            "title": "List of codes of execution errors"
        }, 
        {
            "location": "/ignore_error()/#note-with-the-compilation-options-see-compiler_options-the-errors", 
            "text": "of execution can be ignored , but this practice is not recommended.   See:  Compiler_options", 
            "title": "Note With the compilation options (see Compiler_options) the errors"
        }, 
        {
            "location": "/save_map()_forward_slash_save_pcx()/", 
            "text": "save_map(\nfile\n,\n \ngraphic\n,\n \nname of the file\n)\n\n\nsave_pcx(\nfile\n,\n \ngraphic\n,\n \nname of the file\n)\n\n\nReturns\n\n\n1\n - If the file was loaded successfully.\n\n\n0\n - While saving the file there was an error.\n\n\nDescription\n\n\nCreates a MAP or PCX file from a graphic loaded in memory.\n\n\nThe function requires the \nfile\n and \ngraphic\n codes which identify\nthe graphic, and the \nname of the file\n MAP\n or \nPCX\n which must be created\non the disk containing that image. The name of the file must be specified\nas a literal (text between quotation marks, as \nimage.pcx\n).\n\n\nGraphics loaded with the functions \nload_map()\n or \nload_pcx()\n\n(or created with \nnew_map()\n) will be used as if they were from the\nfirst file (the file with the code 0).\n\n\nThe function \nsave_map()\n always creates \nMAP\n files, and \nsave_pcx()\n\nwill always create \nPCX\n files, \nindependent of the indicated extension\n in the\n\nname of the file\n. If there is no error, the function will create the file\nwith the image and will return back the value \n1\n.\n\n\n\n\nThese maps can be loaded in the graphical environment of\nDIV Games Studio or in the programs, using the functions\n\nload_map()\n o \nload_pcx()\n.\n\n\n\n\nExample program\n\n\nPROGRAM example_save_map;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n\n    save_pcx(0,1,\nhelp/help.pcx\n); // Creates a PCX file \n\nEND\n\n\n\n\nThis example uses the function \nsave_pcx()\n to create a PCX file \ncontaining an image previously loaded inside of the file\n\nhelp.fpg\n with the function \nload_fpg()\n.\n\n\n\n\nA graphic can be created with the function \nnew_map()\n, and to\nmodify a graphic the following functions can be used:\n\n\nmap_block_copy()\n - Transfers a block of a graphic to another.\n\n\nmap_get_pixel()\n - Obtains the colour of a graphic pixel.\n\n\nmap_put()\n - Puts a graphic into another.\n\n\nmap_put_pixel()\n - Fixes the colour of one point in a graphic.\n\n\nmap_xput()\n - Places a graphic into another, with added effects.\n\n\n\n\nNote The function \nwrite_map()\n allows you to write text in a\n\n\ngraphic created in memory (instead of writing it on screen).\n\n\n\n\nSee: \nload_map/pcx()\n - \nunload_map/pcx()", 
            "title": "save_map() / save_pcx()"
        }, 
        {
            "location": "/save_map()_forward_slash_save_pcx()/#returns", 
            "text": "1  - If the file was loaded successfully.  0  - While saving the file there was an error.", 
            "title": "Returns"
        }, 
        {
            "location": "/save_map()_forward_slash_save_pcx()/#description", 
            "text": "Creates a MAP or PCX file from a graphic loaded in memory.  The function requires the  file  and  graphic  codes which identify\nthe graphic, and the  name of the file  MAP  or  PCX  which must be created\non the disk containing that image. The name of the file must be specified\nas a literal (text between quotation marks, as  image.pcx ).  Graphics loaded with the functions  load_map()  or  load_pcx() \n(or created with  new_map() ) will be used as if they were from the\nfirst file (the file with the code 0).  The function  save_map()  always creates  MAP  files, and  save_pcx() \nwill always create  PCX  files,  independent of the indicated extension  in the name of the file . If there is no error, the function will create the file\nwith the image and will return back the value  1 .   These maps can be loaded in the graphical environment of\nDIV Games Studio or in the programs, using the functions load_map()  o  load_pcx() .", 
            "title": "Description"
        }, 
        {
            "location": "/save_map()_forward_slash_save_pcx()/#example-program", 
            "text": "PROGRAM example_save_map;\nBEGIN\n    load_fpg( help/help.fpg );\n\n    save_pcx(0,1, help/help.pcx ); // Creates a PCX file \n\nEND  This example uses the function  save_pcx()  to create a PCX file \ncontaining an image previously loaded inside of the file help.fpg  with the function  load_fpg() .   A graphic can be created with the function  new_map() , and to\nmodify a graphic the following functions can be used:  map_block_copy()  - Transfers a block of a graphic to another.  map_get_pixel()  - Obtains the colour of a graphic pixel.  map_put()  - Puts a graphic into another.  map_put_pixel()  - Fixes the colour of one point in a graphic.  map_xput()  - Places a graphic into another, with added effects.", 
            "title": "Example program"
        }, 
        {
            "location": "/save_map()_forward_slash_save_pcx()/#note-the-function-write_map-allows-you-to-write-text-in-a", 
            "text": "graphic created in memory (instead of writing it on screen).   See:  load_map/pcx()  -  unload_map/pcx()", 
            "title": "Note The function write_map() allows you to write text in a"
        }, 
        {
            "location": "/sin()/", 
            "text": "sin(\nangle\n)\n\n\nReturns\n\n\nThe sin of a given angle.\n\n\nDescription\n\n\nCalculates the sin in thousandths of the angle given as the parameter.\n\n\nThe angles are always manipulated in thousandths of degree (see the\n\nuse of angles in the language\n), and the sin will be returned \nin thousandths of a unit as well (as a value from -1000 to 1000).\n\n\nFor example, \nsin(90000)\n will return  \n1000\n, because the sin of 90 degrees is 1.\n\n\nExample program\n\n\nPROGRAM example_sin;\n\nGLOBAL\n    angles[15];\n    sine[15];\n    n;\n\nBEGIN\n    write(0,0,0,0,\nAngles\n);\n    write(0,160,0,0,\nSins\n);\n    FROM n=0 TO 15;\n        angles[n] = rand(0, 360000);\n\n        sine[n] = sin(angles[n]); // The sin of the angle is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset angles[n]);\n        write_int(0, 160, 20+n*10, 0, offset sine[n]);\n    END\n    write(0,0,192,0,\nPress ESC to finish ...\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis program will print on screen a list of angles, randomly\nchosen between 0 and 360000 (from 0 to 360 degrees), and use the function\n\nsin()\n to calculate the sine of them.\n\n\n\n\nSee: \nExpression\n - See: \nUse of the angles in the language", 
            "title": "sin()"
        }, 
        {
            "location": "/sin()/#returns", 
            "text": "The sin of a given angle.", 
            "title": "Returns"
        }, 
        {
            "location": "/sin()/#description", 
            "text": "Calculates the sin in thousandths of the angle given as the parameter.  The angles are always manipulated in thousandths of degree (see the use of angles in the language ), and the sin will be returned \nin thousandths of a unit as well (as a value from -1000 to 1000).  For example,  sin(90000)  will return   1000 , because the sin of 90 degrees is 1.", 
            "title": "Description"
        }, 
        {
            "location": "/sin()/#example-program", 
            "text": "PROGRAM example_sin;\n\nGLOBAL\n    angles[15];\n    sine[15];\n    n;\n\nBEGIN\n    write(0,0,0,0, Angles );\n    write(0,160,0,0, Sins );\n    FROM n=0 TO 15;\n        angles[n] = rand(0, 360000);\n\n        sine[n] = sin(angles[n]); // The sin of the angle is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset angles[n]);\n        write_int(0, 160, 20+n*10, 0, offset sine[n]);\n    END\n    write(0,0,192,0, Press ESC to finish ... );\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND  This program will print on screen a list of angles, randomly\nchosen between 0 and 360000 (from 0 to 360 degrees), and use the function sin()  to calculate the sine of them.   See:  Expression  - See:  Use of the angles in the language", 
            "title": "Example program"
        }, 
        {
            "location": "/cos()/", 
            "text": "cos(\nangle\n)\n\n\nReturns\n\n\nThe cosine of a given angle.\n\n\nDescription\n\n\nCalculates the cosine in thousandths of the angle given as the parameter.\n\n\nThe angles are manipulated always in thousandths of a degree (see the\n\nuse of angles in the language\n), and the cosine will be returned \nin thousandths of a unit also (as a value from -1000 to 1000).\n\n\nFor example, \ncos(0)\n will return  \n1000\n, because the cosine of 0 degrees is 1.\n\n\nExample program\n\n\nPROGRAM example_cos;\n\nGLOBAL\n    angles[15];\n    cosine[15];\n    n;\n\nBEGIN\n    write(0,0,0,0,\nAngles\n);\n    write(0,160,0,0,\nCos\n);\n    FROM n=0 TO 15;\n        angles[n] = rand(0, 360000);\n\n        cosine[n] = cos(angles[n]); // The cosine of the angle is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset angles[n]);\n        write_int(0, 160, 20+n*10, 0, offset cosine[n]);\n    END\n    write(0,0,192,0,\nPress ESC to finish ...\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis program will print on screen a list of the angles, randomly chosen\nbetween 0 and 360000 (from 0 to 360 degrees), and will use the function\n\ncos()\n to calculate the cosine of them.\n\n\n\n\nSee: \nExpression\n - See: \nUse of the angles in the language", 
            "title": "cos()"
        }, 
        {
            "location": "/cos()/#returns", 
            "text": "The cosine of a given angle.", 
            "title": "Returns"
        }, 
        {
            "location": "/cos()/#description", 
            "text": "Calculates the cosine in thousandths of the angle given as the parameter.  The angles are manipulated always in thousandths of a degree (see the use of angles in the language ), and the cosine will be returned \nin thousandths of a unit also (as a value from -1000 to 1000).  For example,  cos(0)  will return   1000 , because the cosine of 0 degrees is 1.", 
            "title": "Description"
        }, 
        {
            "location": "/cos()/#example-program", 
            "text": "PROGRAM example_cos;\n\nGLOBAL\n    angles[15];\n    cosine[15];\n    n;\n\nBEGIN\n    write(0,0,0,0, Angles );\n    write(0,160,0,0, Cos );\n    FROM n=0 TO 15;\n        angles[n] = rand(0, 360000);\n\n        cosine[n] = cos(angles[n]); // The cosine of the angle is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset angles[n]);\n        write_int(0, 160, 20+n*10, 0, offset cosine[n]);\n    END\n    write(0,0,192,0, Press ESC to finish ... );\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND  This program will print on screen a list of the angles, randomly chosen\nbetween 0 and 360000 (from 0 to 360 degrees), and will use the function cos()  to calculate the cosine of them.   See:  Expression  - See:  Use of the angles in the language", 
            "title": "Example program"
        }, 
        {
            "location": "/tan()/", 
            "text": "tan(\nangle\n)\n\n\nReturns\n\n\nThe tan of a given angle.\n\n\nDescription\n\n\nCalculates the tangent in thousandths of the angle given as the parameter.\n\n\nThe angles are manipulated always in thousandths of a degree (see the\n\nuse of angles in the language\n), and the tan will be returned \nin thousandths of also (as a value inside of the rank \n\nmin_int\n ... \nmax_int\n).\n\n\nFor example, \ntan(45000)\n will return  \n1000\n, because the tan of 45 degrees \nis 1.\n\n\nExample program\n\n\nPROGRAM example_tan;\n\nGLOBAL\n    angles[15];\n    tangent[15];\n    n;\n\nBEGIN\n    write(0,0,0,0,\nAngles\n);\n    write(0,160,0,0,\nTans\n);\n    FROM n=0 TO 15;\n         angles[n] = rand(0, 360000);\n\n        tangent[n] = tan(angles[n]); // calculates the tan of the angle\n\n        write_int(0, 0,   20+n*10, 0, offset angles[n]);\n        write_int(0, 160, 20+n*10, 0, offset tangent[n]);\n    END\n    write(0,0,192,0,\nPress ESC to finish ...\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis program will print on screen a list of the angles, randomly chosen\nbetween 0 and 360000 (from 0 to 360 degrees), and will use the function\n\ntan()\n to calculate the tangent of them.\n\n\n\n\nSee: \nExpression\n - See: \nUse of the angles in the language", 
            "title": "tan()"
        }, 
        {
            "location": "/tan()/#returns", 
            "text": "The tan of a given angle.", 
            "title": "Returns"
        }, 
        {
            "location": "/tan()/#description", 
            "text": "Calculates the tangent in thousandths of the angle given as the parameter.  The angles are manipulated always in thousandths of a degree (see the use of angles in the language ), and the tan will be returned \nin thousandths of also (as a value inside of the rank  min_int  ...  max_int ).  For example,  tan(45000)  will return   1000 , because the tan of 45 degrees \nis 1.", 
            "title": "Description"
        }, 
        {
            "location": "/tan()/#example-program", 
            "text": "PROGRAM example_tan;\n\nGLOBAL\n    angles[15];\n    tangent[15];\n    n;\n\nBEGIN\n    write(0,0,0,0, Angles );\n    write(0,160,0,0, Tans );\n    FROM n=0 TO 15;\n         angles[n] = rand(0, 360000);\n\n        tangent[n] = tan(angles[n]); // calculates the tan of the angle\n\n        write_int(0, 0,   20+n*10, 0, offset angles[n]);\n        write_int(0, 160, 20+n*10, 0, offset tangent[n]);\n    END\n    write(0,0,192,0, Press ESC to finish ... );\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND  This program will print on screen a list of the angles, randomly chosen\nbetween 0 and 360000 (from 0 to 360 degrees), and will use the function tan()  to calculate the tangent of them.   See:  Expression  - See:  Use of the angles in the language", 
            "title": "Example program"
        }, 
        {
            "location": "/asin()/", 
            "text": "asin(\nasin\n)\n\n\nReturns\n\n\nThe arcsine of a given sine.\n\n\nDescription\n\n\nCalculates the arcsine of the sine given as the parameter in thousandths, the corresponding\nangle to a sine value is obtained (opposite operation to sine, which can be obtained\nwith the function \nsin()\n).\n\n\nThe angles are always manipulated in thousandths of a degree (see the\n\nuse of angles in the language\n), and the asin will be returned \nin thousandths of a degree also (as a value inside of the rank \n\nmin_int\n ... \nmax_int\n).\n\n\nThe \nsin\n is required as a value from\n -1000\n to \n1000\n (from -1.0 to +1.0),\nand the result is returned as an angle between\n -90000\n and \n90000\n (from -90\nto +90 degrees).\n\n\nExample program\n\n\nPROGRAM example_asin;\n\nGLOBAL\n    sine[15];\n    angles[15];\n    n;\n\nBEGIN\n    write(0,0,0,0,\nSin\n);\n    write(0,160,0,0,\nAsin (angle)\n);\n    FROM n=0 TO 15;\n        sine[n] = rand(-1000, 1000);\n\n        angles[n] = asin(sine[n]); // calculates the arcsine of a sine\n\n        write_int(0, 0,   20+n*10, 0, offset sine[n]);\n        write_int(0, 160, 20+n*10, 0, offset angles[n]);\n    END\n    write(0,0,192,0,\nPress ESC to finish ...\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis program will print on screen a list of sines, randomly chosen\nbetween -1000 and 1000 (represented in thousandths), and will use the function\n\nasin()\n to calculate the arcsine of these values.\n\n\n\n\nSee: \nExpression\n - See: \nUse of the angles in the language", 
            "title": "asin()"
        }, 
        {
            "location": "/asin()/#returns", 
            "text": "The arcsine of a given sine.", 
            "title": "Returns"
        }, 
        {
            "location": "/asin()/#description", 
            "text": "Calculates the arcsine of the sine given as the parameter in thousandths, the corresponding\nangle to a sine value is obtained (opposite operation to sine, which can be obtained\nwith the function  sin() ).  The angles are always manipulated in thousandths of a degree (see the use of angles in the language ), and the asin will be returned \nin thousandths of a degree also (as a value inside of the rank  min_int  ...  max_int ).  The  sin  is required as a value from  -1000  to  1000  (from -1.0 to +1.0),\nand the result is returned as an angle between  -90000  and  90000  (from -90\nto +90 degrees).", 
            "title": "Description"
        }, 
        {
            "location": "/asin()/#example-program", 
            "text": "PROGRAM example_asin;\n\nGLOBAL\n    sine[15];\n    angles[15];\n    n;\n\nBEGIN\n    write(0,0,0,0, Sin );\n    write(0,160,0,0, Asin (angle) );\n    FROM n=0 TO 15;\n        sine[n] = rand(-1000, 1000);\n\n        angles[n] = asin(sine[n]); // calculates the arcsine of a sine\n\n        write_int(0, 0,   20+n*10, 0, offset sine[n]);\n        write_int(0, 160, 20+n*10, 0, offset angles[n]);\n    END\n    write(0,0,192,0, Press ESC to finish ... );\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND  This program will print on screen a list of sines, randomly chosen\nbetween -1000 and 1000 (represented in thousandths), and will use the function asin()  to calculate the arcsine of these values.   See:  Expression  - See:  Use of the angles in the language", 
            "title": "Example program"
        }, 
        {
            "location": "/acos()/", 
            "text": "acos(\ncos\n)\n\n\nReturns\n\n\nThe arccos of a given cos.\n\n\nDescription\n\n\nCalculates the arccos of the cosine given as the parameter in thousandths, the corresponding\nangle to a cosine is obtained (inverse operation to the cosine, which can be obtained\nusing the function \ncos()\n).\n\n\nThe angles are always manipulated in thousandths of a degree (see the\n\nuse of angles in the language\n), and the acos also returns values in thousandths\n(as a value inside of the rank). \n\n\nThe \ncos\n is required as a value from\n -1000\n to \n1000\n (from -1.0 to +1.0),\nand the result is returned as an angle between \n -90000\n and \n90000\n (from -90\nto +90 degrees).\n\n\nExample program\n\n\nPROGRAM example_acos;\n\nGLOBAL\n    cosine[15];\n    angles[15];\n    n;\n\nBEGIN\n    write(0,0,0,0,\nCos\n);\n    write(0,160,0,0,\nAcos(angle)\n);\n    FROM n=0 TO 15;\n        cosine[n] = rand(-1000, 1000);\n\n        angles[n] = acos(cosine[n]); // The acos of a cos is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset cosine[n]);\n        write_int(0, 160, 20+n*10, 0, offset angles[n]);\n    END\n    write(0,0,192,0,\nPress ESC to finish ...\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis program will print on screen a list of the sins, randomly chosen\nbetween -1000 and 1000 (represented in thousandths), and will use the function\n\nacos()\n to calculate the asin of them.\n\n\n\n\nSee: \nExpression\n - See: \nUse of the angles in the language", 
            "title": "acos()"
        }, 
        {
            "location": "/acos()/#returns", 
            "text": "The arccos of a given cos.", 
            "title": "Returns"
        }, 
        {
            "location": "/acos()/#description", 
            "text": "Calculates the arccos of the cosine given as the parameter in thousandths, the corresponding\nangle to a cosine is obtained (inverse operation to the cosine, which can be obtained\nusing the function  cos() ).  The angles are always manipulated in thousandths of a degree (see the use of angles in the language ), and the acos also returns values in thousandths\n(as a value inside of the rank).   The  cos  is required as a value from  -1000  to  1000  (from -1.0 to +1.0),\nand the result is returned as an angle between   -90000  and  90000  (from -90\nto +90 degrees).", 
            "title": "Description"
        }, 
        {
            "location": "/acos()/#example-program", 
            "text": "PROGRAM example_acos;\n\nGLOBAL\n    cosine[15];\n    angles[15];\n    n;\n\nBEGIN\n    write(0,0,0,0, Cos );\n    write(0,160,0,0, Acos(angle) );\n    FROM n=0 TO 15;\n        cosine[n] = rand(-1000, 1000);\n\n        angles[n] = acos(cosine[n]); // The acos of a cos is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset cosine[n]);\n        write_int(0, 160, 20+n*10, 0, offset angles[n]);\n    END\n    write(0,0,192,0, Press ESC to finish ... );\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND  This program will print on screen a list of the sins, randomly chosen\nbetween -1000 and 1000 (represented in thousandths), and will use the function acos()  to calculate the asin of them.   See:  Expression  - See:  Use of the angles in the language", 
            "title": "Example program"
        }, 
        {
            "location": "/atan()/", 
            "text": "atan(\ntan\n)\n\n\nReturns\n\n\nThe arctan of a given tangent.\n\n\nDescription\n\n\nCalculates the arctan of the tan given as a parameter in thousandths, the corresponding\nangle to a tan is obtained (inverse operation to the tan of an angle, which can be obtained\nwith the function \ntan()\n).\n\n\nThe angles are always manipulated in thousandths of a degree (see the\n\nuse of angles in the language\n), and the arctan will be returned \nin thousandths of a degree also.\n\n\nThe \ntan\n is required as a value inside of the rank \nmin_int\n...\n\n max_int\n (from -inf to +inf), and the result is returned as an \nangle between\n -90000\n and \n90000\n (from -90 to +90 degrees).\n\n\n\n\nNote There is another function to calculate the arctan called \natan2()\n,\n\n\nthis function takes as its parameters the values \nx\n and \ny\n and returns the arctan\nof \ny/x\n between -180000 and 180000 (of -180 to 180 degrees).\n\n\n\n\nExample program\n\n\nPROGRAM example_atan;\n\nGLOBAL\n    tangent[15];\n    angles[15];\n    n;\n\nBEGIN\n    write(0,0,0,0,\nTan\n);\n    write(0,160,0,0,\nAtan(angle)\n);\n    FROM n=0 TO 15;\n        tangent[n] = rand(-1000, 1000);\n\n        angles[n] = atan(tangent[n]); // The arctan of a tan is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset tangent[n]);\n        write_int(0, 160, 20+n*10, 0, offset angles[n]);\n    END\n    write(0,0,192,0,\nPress ESC to finish ...\n);\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis program will print on screen a list of the tans, randomly chosen\nbetween -1000 and 1000 and use the function \natan()\n to calculate the\narctan of them (between -45 and 45 degrees).\n\n\n\n\nSee: \nExpression\n - See: \nUse of the angles in the language", 
            "title": "atan()"
        }, 
        {
            "location": "/atan()/#returns", 
            "text": "The arctan of a given tangent.", 
            "title": "Returns"
        }, 
        {
            "location": "/atan()/#description", 
            "text": "Calculates the arctan of the tan given as a parameter in thousandths, the corresponding\nangle to a tan is obtained (inverse operation to the tan of an angle, which can be obtained\nwith the function  tan() ).  The angles are always manipulated in thousandths of a degree (see the use of angles in the language ), and the arctan will be returned \nin thousandths of a degree also.  The  tan  is required as a value inside of the rank  min_int ...  max_int  (from -inf to +inf), and the result is returned as an \nangle between  -90000  and  90000  (from -90 to +90 degrees).", 
            "title": "Description"
        }, 
        {
            "location": "/atan()/#note-there-is-another-function-to-calculate-the-arctan-called-atan2", 
            "text": "this function takes as its parameters the values  x  and  y  and returns the arctan\nof  y/x  between -180000 and 180000 (of -180 to 180 degrees).", 
            "title": "Note There is another function to calculate the arctan called atan2(),"
        }, 
        {
            "location": "/atan()/#example-program", 
            "text": "PROGRAM example_atan;\n\nGLOBAL\n    tangent[15];\n    angles[15];\n    n;\n\nBEGIN\n    write(0,0,0,0, Tan );\n    write(0,160,0,0, Atan(angle) );\n    FROM n=0 TO 15;\n        tangent[n] = rand(-1000, 1000);\n\n        angles[n] = atan(tangent[n]); // The arctan of a tan is calculated\n\n        write_int(0, 0,   20+n*10, 0, offset tangent[n]);\n        write_int(0, 160, 20+n*10, 0, offset angles[n]);\n    END\n    write(0,0,192,0, Press ESC to finish ... );\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\nEND  This program will print on screen a list of the tans, randomly chosen\nbetween -1000 and 1000 and use the function  atan()  to calculate the\narctan of them (between -45 and 45 degrees).   See:  Expression  - See:  Use of the angles in the language", 
            "title": "Example program"
        }, 
        {
            "location": "/atan2()/", 
            "text": "atan2(\nx\n,\n \ny\n)\n\n\nReturns\n\n\nThe arctan of \ny\n/\nx\n.\n\n\nDescription\n\n\nCalculates the arctan of the tan obtained as the division of the\ntwo values, given as the parameter (\ny\n/\nx\n), the angle corresponding\nto arctan  (inverse operation to the tan of an angle, which can be obtained\nwith the function \ntan()\n) is obtained.\n\n\nThe angles are always manipulated in thousandths of a degree (see the\n\nuse of angles in the language\n), and the arctan is also returned \nin thousandths as a value between\n -180000\n and \n180000\n (from -180 to +180\ndegrees).\n\n\n\n\nNote 1 Another function exists to calculate the arctan called\n\n\nsimply \natan()\n, this function takes as its only parameter the\ntan of an angle and returns its arctan between -90000 and 90000 (from -90\nto 90 degrees).\n\n\n\n\nNote 2 There is also a version of \natan2()\n, which is more simply adapted\n\n\nto the geometric concepts; it is the function denoted as \nfget_angle()\n\nwhich obtains directly the angle between two points.\n\n\n\n\nSee: \nExpression\n - See: \nUse of angles in the language", 
            "title": "atan2()"
        }, 
        {
            "location": "/atan2()/#returns", 
            "text": "The arctan of  y / x .", 
            "title": "Returns"
        }, 
        {
            "location": "/atan2()/#description", 
            "text": "Calculates the arctan of the tan obtained as the division of the\ntwo values, given as the parameter ( y / x ), the angle corresponding\nto arctan  (inverse operation to the tan of an angle, which can be obtained\nwith the function  tan() ) is obtained.  The angles are always manipulated in thousandths of a degree (see the use of angles in the language ), and the arctan is also returned \nin thousandths as a value between  -180000  and  180000  (from -180 to +180\ndegrees).", 
            "title": "Description"
        }, 
        {
            "location": "/atan2()/#note-1-another-function-exists-to-calculate-the-arctan-called", 
            "text": "simply  atan() , this function takes as its only parameter the\ntan of an angle and returns its arctan between -90000 and 90000 (from -90\nto 90 degrees).", 
            "title": "Note 1 Another function exists to calculate the arctan called"
        }, 
        {
            "location": "/atan2()/#note-2-there-is-also-a-version-of-atan2-which-is-more-simply-adapted", 
            "text": "to the geometric concepts; it is the function denoted as  fget_angle() \nwhich obtains directly the angle between two points.   See:  Expression  - See:  Use of angles in the language", 
            "title": "Note 2 There is also a version of atan2(), which is more simply adapted"
        }, 
        {
            "location": "/draw()/", 
            "text": "draw(\ntype\n,\n \ncolour\n,\n \nopacity\n,\n \nregion\n,\n \nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n,\n)\n\n\nReturns\n\n\nThe \nidentifier of the primitive graphic\n painted.\n\n\nDescription\n\n\nThis is a generic function able to draw some primitive graphics\non screen (such as lines, boxes and circles). The following parameters\nmust be indicated:\n\n\ntype\n - Type of primitive graphic, as one of the following:\n\n\n1\n - Straight line.\n\n\n2\n - Rectangle.\n\n\n3\n - Filled rectangle.\n\n\n4\n - Ellipse.\n\n\n5\n - Filled ellipse.\n\n\ncolour\n - colour of the ink with which the primitive will be drawn \n(from \n0\n to \n255\n, as a colour of the palette).\n\n\nopacity\n - Level of opacity of the primitive, from \n0\n to \n15\n (to allow\nfor transparency effects).\n\n\nregion\n - Number of region (window inside of the screen) where the primitive \ncan be painted ; normally this value will be \n0\n to print the \nprimitive in any position of the screen. To define\na region on the function \ndefine_region()\n must be used.\n\n\nx0\n, \ny0\n - Starting point of the straight line, or the upper left corner\nof the box which contains the rectangle or ellipse.\n\n\nx1\n, \ny1\n - End point of the straight line, or the lower right corner\nof the box which contains the rectangle or ellipse.\n\n\n\n\nWhen a primitive graphic is painted with \ndraw()\n this will remain fixed\non screen until it is moved with the function \nmove_draw()\n, or eliminated with\nthe function \ndelete_draw()\n.\n\n\nThe \nidentifier of the primitive\n returned by the function \ndraw()\n will be \nnecessary in order to move or delete the primitive.\n\n\nThe representation system of these graphic primitives is quite similar\nto the system for texts; texts are painted with \nwrite()\n and will remain fixed\nuntil they are moved with \nmove_text()\n or eliminated with \ndelete_text()\n.\n\n\n\n\nNote The level of impression or depth of the primitive graphics can be controlled\n\n\nwith the predefined global variable \ndraw_z\n.\n\n\n\n\nExample program\n\n\nPROGRAM example_draw;\n\nGLOBAL\n    counter;\n    types;\n    colour;\n    opacity;\n    x0,y0;\n    x1,y1;\n\nBEGIN\n    write(0,0,0,0,\nPress ESC to finish ...\n);\n    REPEAT\n        FROM counter=1 TO 10;\n            types=rand(1,5);\n            colour=rand(0,255);\n            opacity=rand(0,15);\n            x0=rand(0,319);\n            y0=rand(0,199);\n            x1=rand(0,319);\n            y1=rand(0,199);\n\n            // Paints a primitive graphic \n\n            draw(types,colour,opacity,0,x0,y0,x1,y1);\n\n        END\n        FRAME;\n        delete_draw(all_drawing);\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis example program draws on screen  10 primitive graphics\nwhose characteristics are selected randomly with the function\n\nrand()\n, and after creating an image with \nFRAME\n, it then deletes\nthem with the function \ndelete_draw()\n.\n\n\nThe process is repeated until the ESC key is pressed.\n\n\n\n\nNote a maximum of \n256\n primitive graphics can be represented on the screen at the same time.\n\n\n\n\nSee: \nmove_draw()\n - \ndelete_draw()\n - \ndraw_z", 
            "title": "draw()"
        }, 
        {
            "location": "/draw()/#returns", 
            "text": "The  identifier of the primitive graphic  painted.", 
            "title": "Returns"
        }, 
        {
            "location": "/draw()/#description", 
            "text": "This is a generic function able to draw some primitive graphics\non screen (such as lines, boxes and circles). The following parameters\nmust be indicated:  type  - Type of primitive graphic, as one of the following:  1  - Straight line.  2  - Rectangle.  3  - Filled rectangle.  4  - Ellipse.  5  - Filled ellipse.  colour  - colour of the ink with which the primitive will be drawn \n(from  0  to  255 , as a colour of the palette).  opacity  - Level of opacity of the primitive, from  0  to  15  (to allow\nfor transparency effects).  region  - Number of region (window inside of the screen) where the primitive \ncan be painted ; normally this value will be  0  to print the \nprimitive in any position of the screen. To define\na region on the function  define_region()  must be used.  x0 ,  y0  - Starting point of the straight line, or the upper left corner\nof the box which contains the rectangle or ellipse.  x1 ,  y1  - End point of the straight line, or the lower right corner\nof the box which contains the rectangle or ellipse.   When a primitive graphic is painted with  draw()  this will remain fixed\non screen until it is moved with the function  move_draw() , or eliminated with\nthe function  delete_draw() .  The  identifier of the primitive  returned by the function  draw()  will be \nnecessary in order to move or delete the primitive.  The representation system of these graphic primitives is quite similar\nto the system for texts; texts are painted with  write()  and will remain fixed\nuntil they are moved with  move_text()  or eliminated with  delete_text() .", 
            "title": "Description"
        }, 
        {
            "location": "/draw()/#note-the-level-of-impression-or-depth-of-the-primitive-graphics-can-be-controlled", 
            "text": "with the predefined global variable  draw_z .", 
            "title": "Note The level of impression or depth of the primitive graphics can be controlled"
        }, 
        {
            "location": "/draw()/#example-program", 
            "text": "PROGRAM example_draw;\n\nGLOBAL\n    counter;\n    types;\n    colour;\n    opacity;\n    x0,y0;\n    x1,y1;\n\nBEGIN\n    write(0,0,0,0, Press ESC to finish ... );\n    REPEAT\n        FROM counter=1 TO 10;\n            types=rand(1,5);\n            colour=rand(0,255);\n            opacity=rand(0,15);\n            x0=rand(0,319);\n            y0=rand(0,199);\n            x1=rand(0,319);\n            y1=rand(0,199);\n\n            // Paints a primitive graphic \n\n            draw(types,colour,opacity,0,x0,y0,x1,y1);\n\n        END\n        FRAME;\n        delete_draw(all_drawing);\n    UNTIL (key(_esc));\nEND  This example program draws on screen  10 primitive graphics\nwhose characteristics are selected randomly with the function rand() , and after creating an image with  FRAME , it then deletes\nthem with the function  delete_draw() .  The process is repeated until the ESC key is pressed.", 
            "title": "Example program"
        }, 
        {
            "location": "/draw()/#note-a-maximum-of-256-primitive-graphics-can-be-represented-on-the-screen-at-the-same-time", 
            "text": "See:  move_draw()  -  delete_draw()  -  draw_z", 
            "title": "Note a maximum of 256 primitive graphics can be represented on the screen at the same time."
        }, 
        {
            "location": "/delete_draw()/", 
            "text": "delete_draw(\nidentifier of the graphic primitive\n)\n\n\nDescription\n\n\nDeletes a primitive graphic which has been painted with the function \ndraw()\n,\nfor which the \nidentifier of the primitive\n is required as a parameter, \nwhich is the numeric code which was returned when it was painted.\n\n\nIf \nall_drawing\n is specified as a parameter the function will delete every\nprimitive graphic represented on screen, the \nidentifier\n is only\nnecessary in the case of wanting to eliminate a particular primitive graphic.\n\n\nExample program\n\n\nPROGRAM example_delete_draw;\n\nPRIVATE\n    id_draw;\n    types;\n    colour;\n    opacity;\n    x0,y0;\n    x1,y1;\n\nBEGIN\n    write(0, 160, 8, 1, \n[ENTER] To show a primitive / [SPACE] to delete it\n);\n    draw(2,127,15,0,0,0,319,199);\n    LOOP\n        types=rand(1,5);\n        colour=rand(0,255);\n        opacity=rand(0,15);\n        x0=rand(0,319);\n        y0=rand(0,199);\n        x1=rand(0,319);\n        y1=rand(0,199);\n\n        id_draw=draw(types,colour,opacity,0,x0,y0,x1,y1);\n\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n\n        delete_draw(id_draw); // We delete the graphic\n\n        WHILE (NOT key(_enter))\n            FRAME;\n        END\n    END\nEND\n\n\n\n\nIn the previous example, a primitive is painted on screen, then the program waits\nfor the \nspace bar\n to be pressed, at which moment the primitive is deleted\nand then when the \nENTER\n key is pressed the program repeats the loop.\n\n\nThis is the second primitive, which identifier has been saved in the variable \nid_draw\n\n(the first primitive is the rectangle which has the same size as the screen and is\npainted with the first call to the function \ndraw()\n of the program).\n\n\nTo delete every primitive graphic call the function \ndelete_draw(all_drawing);\n, \nthe parameter all_drawing will also eliminate the rectangle.\n\n\n\n\nNote The characteristics of a graphic primitive presented on screen (position,\n\n\ncolour, opacity and size) can be modified with the function \nmove_draw()\n. \n\n\n\n\nSee: \ndraw()\n - \nmove_draw()", 
            "title": "delete_draw()"
        }, 
        {
            "location": "/delete_draw()/#description", 
            "text": "Deletes a primitive graphic which has been painted with the function  draw() ,\nfor which the  identifier of the primitive  is required as a parameter, \nwhich is the numeric code which was returned when it was painted.  If  all_drawing  is specified as a parameter the function will delete every\nprimitive graphic represented on screen, the  identifier  is only\nnecessary in the case of wanting to eliminate a particular primitive graphic.", 
            "title": "Description"
        }, 
        {
            "location": "/delete_draw()/#example-program", 
            "text": "PROGRAM example_delete_draw;\n\nPRIVATE\n    id_draw;\n    types;\n    colour;\n    opacity;\n    x0,y0;\n    x1,y1;\n\nBEGIN\n    write(0, 160, 8, 1,  [ENTER] To show a primitive / [SPACE] to delete it );\n    draw(2,127,15,0,0,0,319,199);\n    LOOP\n        types=rand(1,5);\n        colour=rand(0,255);\n        opacity=rand(0,15);\n        x0=rand(0,319);\n        y0=rand(0,199);\n        x1=rand(0,319);\n        y1=rand(0,199);\n\n        id_draw=draw(types,colour,opacity,0,x0,y0,x1,y1);\n\n        WHILE (NOT key(_space))\n            FRAME;\n        END\n\n        delete_draw(id_draw); // We delete the graphic\n\n        WHILE (NOT key(_enter))\n            FRAME;\n        END\n    END\nEND  In the previous example, a primitive is painted on screen, then the program waits\nfor the  space bar  to be pressed, at which moment the primitive is deleted\nand then when the  ENTER  key is pressed the program repeats the loop.  This is the second primitive, which identifier has been saved in the variable  id_draw \n(the first primitive is the rectangle which has the same size as the screen and is\npainted with the first call to the function  draw()  of the program).  To delete every primitive graphic call the function  delete_draw(all_drawing); , \nthe parameter all_drawing will also eliminate the rectangle.", 
            "title": "Example program"
        }, 
        {
            "location": "/delete_draw()/#note-the-characteristics-of-a-graphic-primitive-presented-on-screen-position", 
            "text": "colour, opacity and size) can be modified with the function  move_draw() .    See:  draw()  -  move_draw()", 
            "title": "Note The characteristics of a graphic primitive presented on screen (position,"
        }, 
        {
            "location": "/move_draw()/", 
            "text": "move_draw(\nidentifier of the primitive graphic\n,\n \ncolour\n,\n \nopacity\n,\n \nx0\n,\n \ny0\n,\n \nx1\n,\n \ny1\n)\n\n\nDescription\n\n\nModifies a primitive graphic which has been painted with the function \ndraw()\n,\nto do this, the following parameters are required:\n\n\nidentifier of the primitive\n - Is the numeric code which was returned by the\nfunction \ndraw()\n when the primitive graphic was painted and which is now wanted to\nbe modified.\n\n\ncolour\n - colour of ink for the primitive (from \n0\n to \n255\n, as a colour\nof the palette).\n\n\nopacity\n - Level of opacity of the primitive, from \n0\n to \n15\n (to allow\nfor transparency effects).\n\n\nx0\n, \ny0\n - Initial point of the straight line, or the upper left corner\nof the box which contains the rectangle or ellipse.\n\n\nx1\n, \ny1\n - Final point of the straight line, or the lower right corner\nof the box which contains the rectangle or ellipse and the screen coordinates\n(\nx\n, \ny\n) where it must be moved to.\n\n\n\n\nExample program\n\n\nPROGRAM example_move_draw;\n\nPRIVATE\n    id_draw;\n    colour;\n    opacity;\n\nBEGIN\n    write(0, 0, 0, 0, \nMove the mouse ...\n);\n    id_draw=draw(4, 127, 15, 0, 0, 0, 32, 32);\n    LOOP\n        colour=rand(0,255);\n        opacity=rand(0,15);\n\n        // The graphic primitive is moved to the mouse coordinates\n\n        move_draw(id_draw, colour, opacity, mouse.x-16, mouse.y-16, mouse.x+16, mouse.y+16);\n\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example a circular primitive graphic is painted with the function \ndraw()\n,\nand its \nidentifier of graphic primitive\n is saved in the global variable \nid_draw\n.\n\n\nThen, inside of a loop, the function \nmove_draw()\n will be used \nto place the circle at or near the mouse coordinates, and assign a randomly chosen colour \nand opacity to each image.\n\n\n\n\nNote To eliminate (delete) a primitive graphic the function\n\n\ndelete_draw()\n is used, and with the predefined global variable \ndraw_z\n \nthe priority of impression of them can be handled .\n\n\n\n\nSee: \ndraw()\n - \ndelete_draw()\n - \ndraw_z", 
            "title": "move_draw()"
        }, 
        {
            "location": "/move_draw()/#description", 
            "text": "Modifies a primitive graphic which has been painted with the function  draw() ,\nto do this, the following parameters are required:  identifier of the primitive  - Is the numeric code which was returned by the\nfunction  draw()  when the primitive graphic was painted and which is now wanted to\nbe modified.  colour  - colour of ink for the primitive (from  0  to  255 , as a colour\nof the palette).  opacity  - Level of opacity of the primitive, from  0  to  15  (to allow\nfor transparency effects).  x0 ,  y0  - Initial point of the straight line, or the upper left corner\nof the box which contains the rectangle or ellipse.  x1 ,  y1  - Final point of the straight line, or the lower right corner\nof the box which contains the rectangle or ellipse and the screen coordinates\n( x ,  y ) where it must be moved to.", 
            "title": "Description"
        }, 
        {
            "location": "/move_draw()/#example-program", 
            "text": "PROGRAM example_move_draw;\n\nPRIVATE\n    id_draw;\n    colour;\n    opacity;\n\nBEGIN\n    write(0, 0, 0, 0,  Move the mouse ... );\n    id_draw=draw(4, 127, 15, 0, 0, 0, 32, 32);\n    LOOP\n        colour=rand(0,255);\n        opacity=rand(0,15);\n\n        // The graphic primitive is moved to the mouse coordinates\n\n        move_draw(id_draw, colour, opacity, mouse.x-16, mouse.y-16, mouse.x+16, mouse.y+16);\n\n        FRAME;\n    END\nEND  In the example a circular primitive graphic is painted with the function  draw() ,\nand its  identifier of graphic primitive  is saved in the global variable  id_draw .  Then, inside of a loop, the function  move_draw()  will be used \nto place the circle at or near the mouse coordinates, and assign a randomly chosen colour \nand opacity to each image.", 
            "title": "Example program"
        }, 
        {
            "location": "/move_draw()/#note-to-eliminate-delete-a-primitive-graphic-the-function", 
            "text": "delete_draw()  is used, and with the predefined global variable  draw_z  \nthe priority of impression of them can be handled .   See:  draw()  -  delete_draw()  -  draw_z", 
            "title": "Note To eliminate (delete) a primitive graphic the function"
        }, 
        {
            "location": "/write_in_map()/", 
            "text": "write_in_map(\nfont\n,\n \ntext\n,\n \ncode of centre\n)\n\n\nReturns\n\n\nThe created \ncode of the graphic\n containing the text.\n\n\nDescription\n\n\nCreates a new map in memory (without loading it on disk, very similar to the\nfunction \nnew_map()\n), and writes in the map some text which characteristics\nare described with the following parameters:\n\n\nfont\n - The \ncode of the font\n or \ntype of letter\n which is going to be used.\nHere a  0 must be placed when you want to use the system font\n(font of white colour, small, of 6 to 8 points), or the \ncode of font\n returned\nby the function \nload_fnt()\n when a new font is loaded in the program.\n\n\ntext\n -  specify the text to be written as a literal, as text between quotation\n  marks (see the \ndelimitation symbols of literals\n).\n\n\ncode of centre\n - This code value determines where the \ncentre\n of the text\nwill be placed on the \ncheckpoint\n of the created map. its\npossible values are:\n\n\n0\n-Up left     \n1\n-Up     \n2\n-Up right\n\n\n3\n-Left           \n4\n-centre     \n5\n-Right\n\n\n6\n-Down left      \n7\n-Down      \n8\n-Down right\n\n\nThe text will always be fitted in a new map of the same dimensions, but\nthis \ncheckpoint\n will specify which point of the map will centred on\nthe coordinates where it will then be placed.\n\n\n\n\nThis function works practically the same as \nload_map()\n, but instead of\nreading a file on the disk which contains the graphic it creates a graphic\nwhich contains a written message.\n\n\nThe \ncode of the graphic\n is given as the return value, which is a numeric\nvalue which must be specified in order to use the graphic in the variable\n\ngraph\n or, in any function which requires a \ncode of graphic\n\nas its parameters.\n\n\nWhen the \ncode of file\n which belongs to the graphic is wanted inside of a function\nthe code \n0\n must be indicated (which is the code\nof the first \nfile FPG\n which is loaded in the program).\n\n\n\n\nExample program\n\n\nPROGRAM example_write_in_map;\n\nGLOBAL\n    mi_font;\n\nBEGIN\n    mi_font=load_fnt(\nhelp/help.fnt\n);\n\n    // A new map is created with the text \nMOUSE\n\n    // with the checkpoint in the centre, and is\n    // assigned as the graphic of the mouse cursor.\n\n    mouse.graph = write_in_map(mi_font,\nMOUSE\n,4);\n\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\n    unload_map(mouse.graph);\nEND\n\n\n\n\nIn the example a font is loaded with the function \nload_fnt()\n,\nand then a map is created with the function \nwrite_in_map()\n, saving the\n\ncode of the graphic\n which is returned in the variable \nmouse.graph\n, so\nit will appear as the mouse cursor.\n\n\nThe new map is created with the message \nMOUSE\n written with the font \nhelp.fnt\n,\nand its main \ncheckpoint\n is placed in the centre (with the code \n4\n).\n\n\nPressing the \nESC\n key will bring you out of the loop and the program will\ndelete the graphic with the function \nunload_map()\n (exactly the same\nas if it were a file loaded from the drive).\n\n\nBut, \nit is not necessary to delete the graphic from memory\n before finishing\nthe program, because the system will do it automatically.\n\n\n\n\nThe main advantage of the function \nwrite_in_map()\n is to be able\nto work with texts as if they were graphics, so they can be rotated,\nscaled, printed with transparency effects, etc...\n\n\nNote \nwrite_in_map()\n can show a numeric value if used with the function\n\n\nitoa()\n, which allows you to convert a numeric value into a string of text.\n\n\n\n\nSee: \nwrite()\n - \nunload_map/pcx()\n - \ngraph\n - \nitoa()", 
            "title": "write_in_map()"
        }, 
        {
            "location": "/write_in_map()/#returns", 
            "text": "The created  code of the graphic  containing the text.", 
            "title": "Returns"
        }, 
        {
            "location": "/write_in_map()/#description", 
            "text": "Creates a new map in memory (without loading it on disk, very similar to the\nfunction  new_map() ), and writes in the map some text which characteristics\nare described with the following parameters:  font  - The  code of the font  or  type of letter  which is going to be used.\nHere a  0 must be placed when you want to use the system font\n(font of white colour, small, of 6 to 8 points), or the  code of font  returned\nby the function  load_fnt()  when a new font is loaded in the program.  text  -  specify the text to be written as a literal, as text between quotation\n  marks (see the  delimitation symbols of literals ).  code of centre  - This code value determines where the  centre  of the text\nwill be placed on the  checkpoint  of the created map. its\npossible values are:  0 -Up left      1 -Up      2 -Up right  3 -Left            4 -centre      5 -Right  6 -Down left       7 -Down       8 -Down right  The text will always be fitted in a new map of the same dimensions, but\nthis  checkpoint  will specify which point of the map will centred on\nthe coordinates where it will then be placed.   This function works practically the same as  load_map() , but instead of\nreading a file on the disk which contains the graphic it creates a graphic\nwhich contains a written message.  The  code of the graphic  is given as the return value, which is a numeric\nvalue which must be specified in order to use the graphic in the variable graph  or, in any function which requires a  code of graphic \nas its parameters.  When the  code of file  which belongs to the graphic is wanted inside of a function\nthe code  0  must be indicated (which is the code\nof the first  file FPG  which is loaded in the program).", 
            "title": "Description"
        }, 
        {
            "location": "/write_in_map()/#example-program", 
            "text": "PROGRAM example_write_in_map;\n\nGLOBAL\n    mi_font;\n\nBEGIN\n    mi_font=load_fnt( help/help.fnt );\n\n    // A new map is created with the text  MOUSE \n    // with the checkpoint in the centre, and is\n    // assigned as the graphic of the mouse cursor.\n\n    mouse.graph = write_in_map(mi_font, MOUSE ,4);\n\n    REPEAT\n        FRAME;\n    UNTIL (key(_esc));\n    unload_map(mouse.graph);\nEND  In the example a font is loaded with the function  load_fnt() ,\nand then a map is created with the function  write_in_map() , saving the code of the graphic  which is returned in the variable  mouse.graph , so\nit will appear as the mouse cursor.  The new map is created with the message  MOUSE  written with the font  help.fnt ,\nand its main  checkpoint  is placed in the centre (with the code  4 ).  Pressing the  ESC  key will bring you out of the loop and the program will\ndelete the graphic with the function  unload_map()  (exactly the same\nas if it were a file loaded from the drive).  But,  it is not necessary to delete the graphic from memory  before finishing\nthe program, because the system will do it automatically.   The main advantage of the function  write_in_map()  is to be able\nto work with texts as if they were graphics, so they can be rotated,\nscaled, printed with transparency effects, etc...", 
            "title": "Example program"
        }, 
        {
            "location": "/write_in_map()/#note-write_in_map-can-show-a-numeric-value-if-used-with-the-function", 
            "text": "itoa() , which allows you to convert a numeric value into a string of text.   See:  write()  -  unload_map/pcx()  -  graph  -  itoa()", 
            "title": "Note write_in_map() can show a numeric value if used with the function"
        }, 
        {
            "location": "/calculate()/", 
            "text": "calculate(\ntext with a numeric expression\n)\n\n\nReturns\n\n\nThe result of the numeric expression.\n\n\nDescription\n\n\nAllows you to convert a literal (or text between quotation marks), which contains a\nnumber or numeric expression, to a constant value which can be assigned to any\ndata.\n\n\nAllows you to convert some text into a number; for example, the\nstatement \nx=calculate(\n234\n);\n will assign the value \n234\n to the variable\n\nx\n (exactly the same as with the statement \nx=234;\n). The function \nitoa()\n\nallows the opposite operation, to convert a number into text.\n\n\nBut also, the function \ncalculate()\n can evaluate an expression, contained\nin the text with some operators, that can be the following (all the symbols\naccepted by each operator are indicated):\n\n\n + -\n      Addition and substraction.\n\n\n * /\n      Multiplication and division.\n\n\n % MOD\n    Modulus, or rest of an entire division.\n\n\n \n \n     Binary rotation to the left.\n\n\n \n \n     Rotation to the right.\n\n\n ^ ^^ XOR\n OR binary exclusive.\n\n\n | || OR\n  OR binary.\n\n\n \n \n AND\n AND binary.\n\n\n ! NOT\n    Binary negation.\n\n\n SQRT\n     Square root.\n\n\nParentheses \n( )\n can also be used the to indicate priorities\ninside of the calculation of the expression. For example, \ncalculate(\n(2+3)*4\n)\n\nwould return the value \n20\n as a result.\n\n\n\n\nNote The operation of this function is very similar to the window\n\n\nof the \ncalculator\n (\nSystem\\Calculator\n) of the windows environment.\n\n\n\n\nExample program\n\n\nPROGRAM example_calculate;\n\nGLOBAL\n    STRING calculation;\n    result;\n\nBEGIN\n    write(0,0,0,0,\nIntroduce an expression:\n);\n    write(0,0,10,0,calculation);\n    write(0,0,30,0,\nResult:\n);\n    write_int(0,0,40,0,OFFSET result);\n    LOOP\n        SWITCH(ascii)\n            CASE 8:\n                calculation--;\n            END\n            CASE 27:\n                calculation=\n;\n            END\n            CASE 0..31:\n            END\n            DEFAULT:\n                calculation+=ascii;\n            END\n        END\n\n        result = calculate(calculation); // Evaluates the calculation\n\n        IF (timer MOD 100\n50)\n            calculation+=\n_\n;\n        ELSE\n            calculation+=\n \n;\n        END\n        FRAME;\n        calculation--;\n    END\nEND\n\n\n\n\nThis example program allows you to introduce an expression to a string of text\n(See \nSTRING\n) and then evaluates it with the function\n\ncalculate()\n to show the result of the same string.\n\n\n\n\nNote if an error is produced in the evaluation of the expression (for example,\n\n\nif there exists any parenthesis which are not closed again), the function will return \n0\n as\nits result.\n\n\n\n\nSee: \nitoa()\n - \nwrite()\n - \nSTRING", 
            "title": "calculate()"
        }, 
        {
            "location": "/calculate()/#returns", 
            "text": "The result of the numeric expression.", 
            "title": "Returns"
        }, 
        {
            "location": "/calculate()/#description", 
            "text": "Allows you to convert a literal (or text between quotation marks), which contains a\nnumber or numeric expression, to a constant value which can be assigned to any\ndata.  Allows you to convert some text into a number; for example, the\nstatement  x=calculate( 234 );  will assign the value  234  to the variable x  (exactly the same as with the statement  x=234; ). The function  itoa() \nallows the opposite operation, to convert a number into text.  But also, the function  calculate()  can evaluate an expression, contained\nin the text with some operators, that can be the following (all the symbols\naccepted by each operator are indicated):   + -       Addition and substraction.   * /       Multiplication and division.   % MOD     Modulus, or rest of an entire division.           Binary rotation to the left.           Rotation to the right.   ^ ^^ XOR  OR binary exclusive.   | || OR   OR binary.       AND  AND binary.   ! NOT     Binary negation.   SQRT      Square root.  Parentheses  ( )  can also be used the to indicate priorities\ninside of the calculation of the expression. For example,  calculate( (2+3)*4 ) \nwould return the value  20  as a result.", 
            "title": "Description"
        }, 
        {
            "location": "/calculate()/#note-the-operation-of-this-function-is-very-similar-to-the-window", 
            "text": "of the  calculator  ( System\\Calculator ) of the windows environment.", 
            "title": "Note The operation of this function is very similar to the window"
        }, 
        {
            "location": "/calculate()/#example-program", 
            "text": "PROGRAM example_calculate;\n\nGLOBAL\n    STRING calculation;\n    result;\n\nBEGIN\n    write(0,0,0,0, Introduce an expression: );\n    write(0,0,10,0,calculation);\n    write(0,0,30,0, Result: );\n    write_int(0,0,40,0,OFFSET result);\n    LOOP\n        SWITCH(ascii)\n            CASE 8:\n                calculation--;\n            END\n            CASE 27:\n                calculation= ;\n            END\n            CASE 0..31:\n            END\n            DEFAULT:\n                calculation+=ascii;\n            END\n        END\n\n        result = calculate(calculation); // Evaluates the calculation\n\n        IF (timer MOD 100 50)\n            calculation+= _ ;\n        ELSE\n            calculation+=   ;\n        END\n        FRAME;\n        calculation--;\n    END\nEND  This example program allows you to introduce an expression to a string of text\n(See  STRING ) and then evaluates it with the function calculate()  to show the result of the same string.", 
            "title": "Example program"
        }, 
        {
            "location": "/calculate()/#note-if-an-error-is-produced-in-the-evaluation-of-the-expression-for-example", 
            "text": "if there exists any parenthesis which are not closed again), the function will return  0  as\nits result.   See:  itoa()  -  write()  -  STRING", 
            "title": "Note if an error is produced in the evaluation of the expression (for example,"
        }, 
        {
            "location": "/itoa()/", 
            "text": "itoa(\nexpression\n)\n\n\nReturns\n\n\nA string of text containing the result.\n\n\nDescription\n\n\nThis function is used to convert a numeric value or \nexpression\n into\na string of text, that allows you to convert a number into text.\nThe string will have as many types as digits has the result.\n\n\nThe function \ncalculate()\n allows the opposite operation;\nto convert a literal or string of text into a numeric value.\n\n\nExample program\n\n\nPROGRAM example_itoa;\n\nGLOBAL\n    STRING message;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    mouse.graph=200;\n    write(0,0,0,0,message);\n    REPEAT\n\n        // It makes a message with text and numbers using itoa()\n\n        message = \nCursor of the mouse in (\n + itoa(mouse.x) +\n                  \n,\n + itoa(mouse.y) + \n).\n;\n\n        FRAME;\n    UNTIL (key(_esc));\nEND\n\n\n\n\nThis example program creates a string of text called \nmessage\n\n(see \nSTRING\n) letters and numeric values (the coordinates\nof the mouse, see \nmouse\n), and it is represented on screen\nwith the function \nwrite()\n.\n\n\nThe program loads the file \nhelp.fpg\n with \nload_fpg()\n and assigns\nthe graphic \n200\n as the cursor of the mouse. The program will continue until\nthe \nESC\n key is pressed.\n\n\n\n\nNote The name of the function \nitoa()\n, that comes from the C language, comes\n\n\nfrom the expression \ninteger to ascii\n. And the function that does the opposite\noperation, \nascii to integer\n is called \ncalculate()\n.\n\n\n\n\nSee: \nCalculate()\n - \nArithmetic expressions\n - \nWrite()", 
            "title": "itoa()"
        }, 
        {
            "location": "/itoa()/#returns", 
            "text": "A string of text containing the result.", 
            "title": "Returns"
        }, 
        {
            "location": "/itoa()/#description", 
            "text": "This function is used to convert a numeric value or  expression  into\na string of text, that allows you to convert a number into text.\nThe string will have as many types as digits has the result.  The function  calculate()  allows the opposite operation;\nto convert a literal or string of text into a numeric value.", 
            "title": "Description"
        }, 
        {
            "location": "/itoa()/#example-program", 
            "text": "PROGRAM example_itoa;\n\nGLOBAL\n    STRING message;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    mouse.graph=200;\n    write(0,0,0,0,message);\n    REPEAT\n\n        // It makes a message with text and numbers using itoa()\n\n        message =  Cursor of the mouse in (  + itoa(mouse.x) +\n                   ,  + itoa(mouse.y) +  ). ;\n\n        FRAME;\n    UNTIL (key(_esc));\nEND  This example program creates a string of text called  message \n(see  STRING ) letters and numeric values (the coordinates\nof the mouse, see  mouse ), and it is represented on screen\nwith the function  write() .  The program loads the file  help.fpg  with  load_fpg()  and assigns\nthe graphic  200  as the cursor of the mouse. The program will continue until\nthe  ESC  key is pressed.", 
            "title": "Example program"
        }, 
        {
            "location": "/itoa()/#note-the-name-of-the-function-itoa-that-comes-from-the-c-language-comes", 
            "text": "from the expression  integer to ascii . And the function that does the opposite\noperation,  ascii to integer  is called  calculate() .   See:  Calculate()  -  Arithmetic expressions  -  Write()", 
            "title": "Note The name of the function itoa(), that comes from the C language, comes"
        }, 
        {
            "location": "/change_channel()/", 
            "text": "change_channel(\nchannel\n,\n \nvolume\n,\n \nbalance\n)\n\n\nDescription\n\n\nThis is a complementary function to \nchange_sound()\n, which modifies\nthe properties of one of the sound channels which plays back the digital sound effects \n(See \nsound()\n) or music modules (See \nsong()\n).\n\n\nThe \nchannel\n number which is wanted to be adjusted must be indicated, (normally\nthe channel number returned by the function \nsound()\n), and the two following\nvalues:\n\n\nvolume\n - Is given as the volume of the channel, between \n0\n and \n512\n,\nindependent of the volume of the sound and the general volume level.\n\n\nWhen the volumes of the different channels are too loud the sound will be distorted,\nso it is recommended to  modify the volume of the sound effects\nthrough the function \nchange_sound()\n which, also allows you to adjust the\nfrequency of the sound.\n\n\nbalance\n - Is the \npanning\n or difference of volume between the left speaker\nand the right one, it must be a value between \n0\n and \n255\n.\n\n\n\n\nNote The general levels of volume can be adjusted with the\n\n\nglobal structure \nsetup\n (digital sound, cd-audio and general volume).\n\n\n\n\nExample program\n\n\nPROGRAM example_change_channel;\n\nPRIVATE\n    balance=128;     // volume level (0..256)\n\n    id_sound;\n    channel_id;\n\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n\n    id_sound = load_pcm(\nhelp/help.pcm\n, 1);\n    channel_id = sound(id_sound, 256, 256);\n\n    write(0, 160, 0, 1, \nPress right or left to change the balance.\n);\n    write_int(0, 160, 10, 1, offset balance);\n    LOOP\n\n        // Changes the balance of the channel\n\n        change_channel(channel_id, 50, balance);\n\n        IF (key(_right) AND balance\n255) balance++; END\n        IF (key(_left) AND balance\n0) balance--; END\n        FRAME;\n    END\n\nEND\n\n\n\n\nIn the example a sound (contained in the file \nhelp.pcm\n)is loaded and played.\nInside of the program's main loop the channel balance through which the sound \nwith the function \nchange_channel()\nis being played , can be changed using\nthe cursor keys.\n\n\n\n\nNote See also the global predefined table in the predefined global table\n\n\nchannel\n, that indicates which of the sound channels are being used.\n\n\n\n\nSee: \nchange_sound()\n - \nsound()\n - \nsong()\n \nSTRUCT setup", 
            "title": "change_channel()"
        }, 
        {
            "location": "/change_channel()/#description", 
            "text": "This is a complementary function to  change_sound() , which modifies\nthe properties of one of the sound channels which plays back the digital sound effects \n(See  sound() ) or music modules (See  song() ).  The  channel  number which is wanted to be adjusted must be indicated, (normally\nthe channel number returned by the function  sound() ), and the two following\nvalues:  volume  - Is given as the volume of the channel, between  0  and  512 ,\nindependent of the volume of the sound and the general volume level.  When the volumes of the different channels are too loud the sound will be distorted,\nso it is recommended to  modify the volume of the sound effects\nthrough the function  change_sound()  which, also allows you to adjust the\nfrequency of the sound.  balance  - Is the  panning  or difference of volume between the left speaker\nand the right one, it must be a value between  0  and  255 .", 
            "title": "Description"
        }, 
        {
            "location": "/change_channel()/#note-the-general-levels-of-volume-can-be-adjusted-with-the", 
            "text": "global structure  setup  (digital sound, cd-audio and general volume).", 
            "title": "Note The general levels of volume can be adjusted with the"
        }, 
        {
            "location": "/change_channel()/#example-program", 
            "text": "PROGRAM example_change_channel;\n\nPRIVATE\n    balance=128;     // volume level (0..256)\n\n    id_sound;\n    channel_id;\n\nBEGIN\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n\n    id_sound = load_pcm( help/help.pcm , 1);\n    channel_id = sound(id_sound, 256, 256);\n\n    write(0, 160, 0, 1,  Press right or left to change the balance. );\n    write_int(0, 160, 10, 1, offset balance);\n    LOOP\n\n        // Changes the balance of the channel\n\n        change_channel(channel_id, 50, balance);\n\n        IF (key(_right) AND balance 255) balance++; END\n        IF (key(_left) AND balance 0) balance--; END\n        FRAME;\n    END\n\nEND  In the example a sound (contained in the file  help.pcm )is loaded and played.\nInside of the program's main loop the channel balance through which the sound \nwith the function  change_channel() is being played , can be changed using\nthe cursor keys.", 
            "title": "Example program"
        }, 
        {
            "location": "/change_channel()/#note-see-also-the-global-predefined-table-in-the-predefined-global-table", 
            "text": "channel , that indicates which of the sound channels are being used.   See:  change_sound()  -  sound()  -  song()   STRUCT setup", 
            "title": "Note See also the global predefined table in the predefined global table"
        }, 
        {
            "location": "/malloc()/", 
            "text": "malloc(\nlength\n)\n\n\nReturns\n\n\nThe \nOFFSET\n of the memory block asked, or \n0\n if the memory available is not\nenough.\n\n\nDescription\n\n\nThis function assigns dynamic memory, or a new block of free memory if required, \nto the program.\n\n\nthe \nlength\n of the memory block to be occupied is required as a parameter. \nThis length is specified as a number of simple data blocks, each one of them \ntaking up 4 bytes of memory; for example, if a block of length \n100\n is required\nthen 400 bytes of memory will be put aside.\n\n\nA max number of \n256 blocks\n can be requested inside of a program, \nirrespective of its size, the function \nfree()\n allows you to liberate\nthese memory blocks.\n\n\n\n\nNormally the \nOFFSET\n (memory address) returned by the function\n\nmalloc()\n is assigned to a data of type pointer (See \nPOINTER\n).\n\n\n\n\nExample program\n\n\nPROGRAM example_malloc;\n\nGLOBAL\n    POINTER mytable[1000];  // pointer of a table of 1000 data\n    counter;\nBEGIN\n\n    mytable = malloc(1000); // Asks for 1000 memory positions\n\n    FOR (counter=0;counter\n1000;counter++) // Accesses the data\n        mytable[counter]=-1;\n    END\n\n    free(mytable);          // Liberates the memory occupied by the table\nEND\n\n\n\n\nThis small example shows how a pointer to the table can be defined \n(the pointer contains none of the data of the table, just a handle to the table itself),\nand to assign memory to this pointer with the function \nmalloc()\n.\n\n\nOnce the memory is assigned to the table of data, the program accesses them\n(they are initiated to -1, as an example), and finally frees up the memory.\n\n\nThe memory blocks which are not liberated  with the function \nfree()\n, will be\nliberated automatically by the system when the program has finished.\n\n\n\n\nNote the quantity of available memory for the processing of program data\n\n\n(local and private data) can be controlled with the compilation options\n(See \nCompiler_options\n).\n\n\n\n\nSee: \nfree()\n - \nPOINTER", 
            "title": "malloc()"
        }, 
        {
            "location": "/malloc()/#returns", 
            "text": "The  OFFSET  of the memory block asked, or  0  if the memory available is not\nenough.", 
            "title": "Returns"
        }, 
        {
            "location": "/malloc()/#description", 
            "text": "This function assigns dynamic memory, or a new block of free memory if required, \nto the program.  the  length  of the memory block to be occupied is required as a parameter. \nThis length is specified as a number of simple data blocks, each one of them \ntaking up 4 bytes of memory; for example, if a block of length  100  is required\nthen 400 bytes of memory will be put aside.  A max number of  256 blocks  can be requested inside of a program, \nirrespective of its size, the function  free()  allows you to liberate\nthese memory blocks.   Normally the  OFFSET  (memory address) returned by the function malloc()  is assigned to a data of type pointer (See  POINTER ).", 
            "title": "Description"
        }, 
        {
            "location": "/malloc()/#example-program", 
            "text": "PROGRAM example_malloc;\n\nGLOBAL\n    POINTER mytable[1000];  // pointer of a table of 1000 data\n    counter;\nBEGIN\n\n    mytable = malloc(1000); // Asks for 1000 memory positions\n\n    FOR (counter=0;counter 1000;counter++) // Accesses the data\n        mytable[counter]=-1;\n    END\n\n    free(mytable);          // Liberates the memory occupied by the table\nEND  This small example shows how a pointer to the table can be defined \n(the pointer contains none of the data of the table, just a handle to the table itself),\nand to assign memory to this pointer with the function  malloc() .  Once the memory is assigned to the table of data, the program accesses them\n(they are initiated to -1, as an example), and finally frees up the memory.  The memory blocks which are not liberated  with the function  free() , will be\nliberated automatically by the system when the program has finished.", 
            "title": "Example program"
        }, 
        {
            "location": "/malloc()/#note-the-quantity-of-available-memory-for-the-processing-of-program-data", 
            "text": "(local and private data) can be controlled with the compilation options\n(See  Compiler_options ).   See:  free()  -  POINTER", 
            "title": "Note the quantity of available memory for the processing of program data"
        }, 
        {
            "location": "/free()/", 
            "text": "free(\nOFFSET of the memory block\n)\n\n\nDescription\n\n\nLiberates a block of dynamic memory which has been reserved previously with the\nthe function \nmalloc()\n\n\nthe \nOFFSET\n or memory address in which the block starts is required as a parameter, \nwhich is the value obtained when it is reserved.\n\n\nThe memory blocks not liberated with the function \nfree()\n, will be liberated\nautomatically by the system when the program ends.\n\n\nExample program\n\n\nPROGRAM example_free;\n\nGLOBAL\n    POINTER mytable[1000];  // Pointer of a table of 1000 data\n    counter;\nBEGIN\n\n    mytable = malloc(1000); // Asks for 1000 positions of memory\n\n    FOR (counter=0;counter\n1000;counter++) // Accesses to the data\n        mytable[counter]=-1;\n    END\n\n    free(mytable);          // Liberates the memory filled up by the table\nEND\n\n\n\n\nThis small example shows how a pointer to a table can be defined \n(the pointer contains none of the data of the table, just a handle to the table itself),\nmemory assigned to this with the function \nmalloc()\n.\n\n\nOnce the memory is assigned to the table of data, the program accesses them\n(they are initiated to -1, as an example), and finally frees up the memory.\n\n\n\n\nSee: \nfree()\n - \nPOINTER", 
            "title": "free()"
        }, 
        {
            "location": "/free()/#description", 
            "text": "Liberates a block of dynamic memory which has been reserved previously with the\nthe function  malloc()  the  OFFSET  or memory address in which the block starts is required as a parameter, \nwhich is the value obtained when it is reserved.  The memory blocks not liberated with the function  free() , will be liberated\nautomatically by the system when the program ends.", 
            "title": "Description"
        }, 
        {
            "location": "/free()/#example-program", 
            "text": "PROGRAM example_free;\n\nGLOBAL\n    POINTER mytable[1000];  // Pointer of a table of 1000 data\n    counter;\nBEGIN\n\n    mytable = malloc(1000); // Asks for 1000 positions of memory\n\n    FOR (counter=0;counter 1000;counter++) // Accesses to the data\n        mytable[counter]=-1;\n    END\n\n    free(mytable);          // Liberates the memory filled up by the table\nEND  This small example shows how a pointer to a table can be defined \n(the pointer contains none of the data of the table, just a handle to the table itself),\nmemory assigned to this with the function  malloc() .  Once the memory is assigned to the table of data, the program accesses them\n(they are initiated to -1, as an example), and finally frees up the memory.   See:  free()  -  POINTER", 
            "title": "Example program"
        }, 
        {
            "location": "/encode()/", 
            "text": "encode(\nOFFSET of the data\n,\n \nlength\n,\n \nclue\n)\n\n\nDescription\n\n\nencrypt or un-encrypts a block of data in memory with a determined clue.\nThe necessary parameters are the following:\n\n\nOFFSET of the data\n - Memory address in which starts the block which must\nbe compressed, to obtain this address the operator \nOFFSET\n must be used.\n\n\nlength\n - Length of the data to be compressed, the number of\npositions of memory, filled up for the same, the length of any\ndata can be obtained with \nSIZEOF()\n.\n\n\nclue\n - A literal (text between quotation marks) with the clue of encryption\nor decryption of the data.\n\n\nThe algorithm is reversible so, to decrypt the data, simply you must to encrypt\nthem with the same clue.\n\n\nThe algorithm of encryption is very complex, so, any encrypted data with a clue\njust can be recovered applying to it the same clue again.\n\n\nExample program\n\n\nPROGRAM example_encode;\n\nCONST\n    password=\nmypass\n;\n\nGLOBAL\n    table_original[14]  =0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n    table_encrypted[14]=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n    counter;\n\nBEGIN\n    write(0,0,  0,0,\nOriginal values\n);\n    write(0,160,0,0,\nencrypted values\n);\n    write(0,0,190,0,\n[SPACE] to encrypt/decrypt the values\n);\n\n    // encrypts the values of the second table\n\n    encode(OFFSET table_encrypted,sizeof(table_encrypted),password);\n\n    FOR (counter=0;counter\n15;counter++)\n        write_int(0,0,  20+counter*8,0,OFFSET table_original[counter]);\n        write_int(0,160,20+counter*8,0,OFFSET table_encrypted[counter]);\n    END\n\n    LOOP\n        IF (scan_code==_space)\n\n            // encrypts and decodes of values of the second table\n\n            encode(OFFSET table_encrypted,sizeof(table_encrypted),password);\n\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nThis program has defined two tables of global data both with the same\nvalues and allows, pressing the \nspace bar\n, to encrypt and\ndecrypt one of the two tables (the denominated \ntable_encrypted[]\n).\n\n\nIt can be seen how, when the data are encrypted a second time they are recovered\nin its original state. If a different clue is used, the result will be \ncompletely different.\n\n\n\n\nNote There are other two functions which allow to encrypt and\n\n\ndecrypt any kind of file, in this case must be used a function to\neach operation: \nencode_file()\n to encrypt and \ndecode_file()\n\nto decrypt.\n\n\n\n\nSee: \nencode_file()\n - \ndecode_file()", 
            "title": "encode()"
        }, 
        {
            "location": "/encode()/#description", 
            "text": "encrypt or un-encrypts a block of data in memory with a determined clue.\nThe necessary parameters are the following:  OFFSET of the data  - Memory address in which starts the block which must\nbe compressed, to obtain this address the operator  OFFSET  must be used.  length  - Length of the data to be compressed, the number of\npositions of memory, filled up for the same, the length of any\ndata can be obtained with  SIZEOF() .  clue  - A literal (text between quotation marks) with the clue of encryption\nor decryption of the data.  The algorithm is reversible so, to decrypt the data, simply you must to encrypt\nthem with the same clue.  The algorithm of encryption is very complex, so, any encrypted data with a clue\njust can be recovered applying to it the same clue again.", 
            "title": "Description"
        }, 
        {
            "location": "/encode()/#example-program", 
            "text": "PROGRAM example_encode;\n\nCONST\n    password= mypass ;\n\nGLOBAL\n    table_original[14]  =0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n    table_encrypted[14]=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n    counter;\n\nBEGIN\n    write(0,0,  0,0, Original values );\n    write(0,160,0,0, encrypted values );\n    write(0,0,190,0, [SPACE] to encrypt/decrypt the values );\n\n    // encrypts the values of the second table\n\n    encode(OFFSET table_encrypted,sizeof(table_encrypted),password);\n\n    FOR (counter=0;counter 15;counter++)\n        write_int(0,0,  20+counter*8,0,OFFSET table_original[counter]);\n        write_int(0,160,20+counter*8,0,OFFSET table_encrypted[counter]);\n    END\n\n    LOOP\n        IF (scan_code==_space)\n\n            // encrypts and decodes of values of the second table\n\n            encode(OFFSET table_encrypted,sizeof(table_encrypted),password);\n\n        END\n        FRAME;\n    END\nEND  This program has defined two tables of global data both with the same\nvalues and allows, pressing the  space bar , to encrypt and\ndecrypt one of the two tables (the denominated  table_encrypted[] ).  It can be seen how, when the data are encrypted a second time they are recovered\nin its original state. If a different clue is used, the result will be \ncompletely different.", 
            "title": "Example program"
        }, 
        {
            "location": "/encode()/#note-there-are-other-two-functions-which-allow-to-encrypt-and", 
            "text": "decrypt any kind of file, in this case must be used a function to\neach operation:  encode_file()  to encrypt and  decode_file() \nto decrypt.   See:  encode_file()  -  decode_file()", 
            "title": "Note There are other two functions which allow to encrypt and"
        }, 
        {
            "location": "/encode_file()/", 
            "text": "encode_file(\nname of file\n,\n \nclue\n)\n\n\nDescription\n\n\nencrypts one or more files of the disk with a pre-determined clue.\nThe necessary parameters are the following:\n\n\nname of the file\n - Description of a file which must be encrypted,\na literal (text between quotation marks) with the name of the file. \nYou can use the joker characters \n?\n and \n in the specifying of\nthese files (for example, \n.BAK\n to encrypt every file with extension BAK).\n\n\nclue\n - A literal containing the clue of encryption of the file or files.\n\n\nThe encryption algorithm is quite complex, but any encrypted file\nwith a clue can be recovered simply by applying the same clue to it\nwith the function \ndecode_file()\n. If this function is not called,\nthe resulted file will be completely useless, being impossible to recover\nthe data contained in it.\n\n\nFiles which are already encrypted cannot be encrypted a second time.\n\n\nExample program\n\n\nPROGRAM example_encode_file;\n\nCONST\n    password=\nmypass\n;\n\nGLOBAL\n    mytable[]=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n\nBEGIN\n    save(\nhelp/help.enc\n,OFFSET mytable,sizeof(mytable));\n\n    encode_file(\nhelp/help.enc\n,password); // encrypts the file\nEND\n\n\n\n\nThis small program uses the function \nsave()\n to create a file\ncalled \nhelp.enc\n with the data contained in \nmytable\n, and then the program\nencrypts it with the function \nencode_file()\n.\n\n\nYou can see how the contents of the created file (inside of the directory\n\nhelp/\n) doesn't bear any relation to the original data (independent\nof what the encryption clue is).\n\n\n\n\nThere is another function called \nencode()\n which allows you to encrypt\nand decrypt data in memory, in this case the operation is reversible, so\nthe same function is used for both operations.\n\n\n\n\nNote The functions \ncompress_file()\n and \nuncompress_file()\n\n\nallow you to compress and uncompress files of the disk. The encrypted files\n\ncannot be compressed\n with the functions (as their contents are randomly \norganised).\n\n\n\n\nSee: \nencode()\n - \ndecode_file()\n - \ncompress_file()\n - \nuncompress_file()", 
            "title": "encode_file()"
        }, 
        {
            "location": "/encode_file()/#description", 
            "text": "encrypts one or more files of the disk with a pre-determined clue.\nThe necessary parameters are the following:  name of the file  - Description of a file which must be encrypted,\na literal (text between quotation marks) with the name of the file. \nYou can use the joker characters  ?  and   in the specifying of\nthese files (for example,  .BAK  to encrypt every file with extension BAK).  clue  - A literal containing the clue of encryption of the file or files.  The encryption algorithm is quite complex, but any encrypted file\nwith a clue can be recovered simply by applying the same clue to it\nwith the function  decode_file() . If this function is not called,\nthe resulted file will be completely useless, being impossible to recover\nthe data contained in it.  Files which are already encrypted cannot be encrypted a second time.", 
            "title": "Description"
        }, 
        {
            "location": "/encode_file()/#example-program", 
            "text": "PROGRAM example_encode_file;\n\nCONST\n    password= mypass ;\n\nGLOBAL\n    mytable[]=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n\nBEGIN\n    save( help/help.enc ,OFFSET mytable,sizeof(mytable));\n\n    encode_file( help/help.enc ,password); // encrypts the file\nEND  This small program uses the function  save()  to create a file\ncalled  help.enc  with the data contained in  mytable , and then the program\nencrypts it with the function  encode_file() .  You can see how the contents of the created file (inside of the directory help/ ) doesn't bear any relation to the original data (independent\nof what the encryption clue is).   There is another function called  encode()  which allows you to encrypt\nand decrypt data in memory, in this case the operation is reversible, so\nthe same function is used for both operations.", 
            "title": "Example program"
        }, 
        {
            "location": "/encode_file()/#note-the-functions-compress_file-and-uncompress_file", 
            "text": "allow you to compress and uncompress files of the disk. The encrypted files cannot be compressed  with the functions (as their contents are randomly \norganised).   See:  encode()  -  decode_file()  -  compress_file()  -  uncompress_file()", 
            "title": "Note The functions compress_file() and uncompress_file()"
        }, 
        {
            "location": "/decode_file()/", 
            "text": "decode_file(\nname of the file\n,\n \nclue\n)\n\n\nDescription\n\n\nDecodes one or more files on the disk, that share the same clue as the one\nthey were encrypted with using the function \nencode_file()\n. The necessary \nparameters are the following:\n\n\nname of file\n - Description of a file which must be unencrypted,\na literal (text between quotation marks) with the name of the file. \nYou can use the joker characters \n?\n and \n in the specifying of\nthese files (for example, \n.BAK\n to decrypt every file with extension BAK).\n\n\nclue\n - A literal specifying the clue of encryption for the file or files.\nThis clue must be \nexactly\n the same as the clue that the files were originally \nencrypted with, if {they are unencrypted with a different clue, the files will\nremain indecipherable}.\n\n\nThe files unencrypted cannot be unencrypted again.\n\n\nExample program\n\n\nPROGRAM example_decode_file;\n\nCONST\n    pass=\nmypass\n;\n\nGLOBAL\n    mytable[]=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n\nBEGIN\n    save(\nhelp/help.enc\n,OFFSET mytable,sizeof(mytable));\n    encode_file(\nhelp/help.enc\n,pass);\n    // ...\n\n    decode_file(\nhelp/help.enc\n,pass); // decodes the file\n\nEND\n\n\n\n\nThis small program uses the function \nsave()\n to create a file\ncalled \nhelp.enc\n with the data contained in \nmytable\n, and is encrypted with\nthe function \nencode_file()\n.\n\n\nBefore the program finishes the contents of the file are recovered again using \nthe function \ndecode_file()\n which decodes the data. The file will be returned\nto its original form.\n\n\n\n\nThe function \nencode()\n allows you to encrypt and decode data in\nmemory, but in this case, the operation is reversible, so\nthe same function is used for both operations.\n\n\n\n\nNote the functions \ncompress_file()\n and \nuncompress_file()\n\n\nallow you to compress and uncompress files on the disk. The files encrypted\n\ncannot be compressed\n with these functions (due to its content being completely \nrandomly organised).\n\n\n\n\nSee: \nencode_file()\n - \nencode()\n - \ncompress_file()\n - \nuncompress_file()", 
            "title": "decode_file()"
        }, 
        {
            "location": "/decode_file()/#description", 
            "text": "Decodes one or more files on the disk, that share the same clue as the one\nthey were encrypted with using the function  encode_file() . The necessary \nparameters are the following:  name of file  - Description of a file which must be unencrypted,\na literal (text between quotation marks) with the name of the file. \nYou can use the joker characters  ?  and   in the specifying of\nthese files (for example,  .BAK  to decrypt every file with extension BAK).  clue  - A literal specifying the clue of encryption for the file or files.\nThis clue must be  exactly  the same as the clue that the files were originally \nencrypted with, if {they are unencrypted with a different clue, the files will\nremain indecipherable}.  The files unencrypted cannot be unencrypted again.", 
            "title": "Description"
        }, 
        {
            "location": "/decode_file()/#example-program", 
            "text": "PROGRAM example_decode_file;\n\nCONST\n    pass= mypass ;\n\nGLOBAL\n    mytable[]=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14;\n\nBEGIN\n    save( help/help.enc ,OFFSET mytable,sizeof(mytable));\n    encode_file( help/help.enc ,pass);\n    // ...\n\n    decode_file( help/help.enc ,pass); // decodes the file\n\nEND  This small program uses the function  save()  to create a file\ncalled  help.enc  with the data contained in  mytable , and is encrypted with\nthe function  encode_file() .  Before the program finishes the contents of the file are recovered again using \nthe function  decode_file()  which decodes the data. The file will be returned\nto its original form.   The function  encode()  allows you to encrypt and decode data in\nmemory, but in this case, the operation is reversible, so\nthe same function is used for both operations.", 
            "title": "Example program"
        }, 
        {
            "location": "/decode_file()/#note-the-functions-compress_file-and-uncompress_file", 
            "text": "allow you to compress and uncompress files on the disk. The files encrypted cannot be compressed  with these functions (due to its content being completely \nrandomly organised).   See:  encode_file()  -  encode()  -  compress_file()  -  uncompress_file()", 
            "title": "Note the functions compress_file() and uncompress_file()"
        }, 
        {
            "location": "/compress_file()/", 
            "text": "compress_file(\nname of file\n)\n\n\nDescription\n\n\nCompresses one or more files of the disk, the only parameter required is \nthe \nname of file\n which must be compressed, as a literal (text between\nquotation marks). The joker characters \n?\n \n \n can be used to specify some\nfiles (for example, \n.BAK\n to compress every file with the extension BAK).\n\n\nTo uncompress these files the function \nuncompress_file()\n must be used.\nThe format of file encryption is a format specific to DIV Games Studio,\nso it can't be uncompressed with any other external utility program.\n\n\nThe file will be saved compressed with the same name and extension as the\noriginal. Files already compressed cannot be compressed a second time.\n\n\nExample program\n\n\nPROGRAM example_compress_file;\n\nGLOBAL\n    counter;\n    mytable[999];\n\nBEGIN\n    FOR (counter=0;counter\n1000;counter++)\n        mytable[counter]=counter;\n    END\n\n    save(\nhelp/help.cmp\n,OFFSET mytable,sizeof(mytable));\n\n    compress_file(\nhelp/help.cmp\n); // Compress the file.\nEND\n\n\n\n\nThis small program uses the function \nsave()\n to create a file\ncalled \nhelp.cmp\n with the data contained in \nmytable\n, this being a group of\nconsecutive numbers from 0 to 1000.\n\n\nOnce created, the file is compressed with the function \ncompress_file()\n.\n\n\nIn this case, the original size of the file is 4000 bytes (1000 blocks of data),\nand the size of the compressed file is 1441 bytes (36% of the original size).\n\n\n\n\nNote the functions \nencode_file()\n and \ndecode_file()\n\n\nallow you to encrypt and decode files on the disk.\n\n\nThe files encrypted with these functions \ncan't be compressed\n\ndue to their being content completely randomly organised. But, {the files\ncompressed can be encrypted}.\n\n\n\n\nSee: \nuncompress_file()\n - \nencode_file()\n - \ndecode_file()", 
            "title": "compress_file()"
        }, 
        {
            "location": "/compress_file()/#description", 
            "text": "Compresses one or more files of the disk, the only parameter required is \nthe  name of file  which must be compressed, as a literal (text between\nquotation marks). The joker characters  ?      can be used to specify some\nfiles (for example,  .BAK  to compress every file with the extension BAK).  To uncompress these files the function  uncompress_file()  must be used.\nThe format of file encryption is a format specific to DIV Games Studio,\nso it can't be uncompressed with any other external utility program.  The file will be saved compressed with the same name and extension as the\noriginal. Files already compressed cannot be compressed a second time.", 
            "title": "Description"
        }, 
        {
            "location": "/compress_file()/#example-program", 
            "text": "PROGRAM example_compress_file;\n\nGLOBAL\n    counter;\n    mytable[999];\n\nBEGIN\n    FOR (counter=0;counter 1000;counter++)\n        mytable[counter]=counter;\n    END\n\n    save( help/help.cmp ,OFFSET mytable,sizeof(mytable));\n\n    compress_file( help/help.cmp ); // Compress the file.\nEND  This small program uses the function  save()  to create a file\ncalled  help.cmp  with the data contained in  mytable , this being a group of\nconsecutive numbers from 0 to 1000.  Once created, the file is compressed with the function  compress_file() .  In this case, the original size of the file is 4000 bytes (1000 blocks of data),\nand the size of the compressed file is 1441 bytes (36% of the original size).", 
            "title": "Example program"
        }, 
        {
            "location": "/compress_file()/#note-the-functions-encode_file-and-decode_file", 
            "text": "allow you to encrypt and decode files on the disk.  The files encrypted with these functions  can't be compressed \ndue to their being content completely randomly organised. But, {the files\ncompressed can be encrypted}.   See:  uncompress_file()  -  encode_file()  -  decode_file()", 
            "title": "Note the functions encode_file() and decode_file()"
        }, 
        {
            "location": "/uncompress_file()/", 
            "text": "uncompress_file(\nname of file\n)\n\n\nDescription\n\n\nUncompresses one or more files on the disk, previously compressed\nwith the function \ncompress_file()\n, the only parameter required is\nthe \nname of file\n which must be uncompressed, as a literal\n(text between quotation marks). The joker characters \n?\n \n \n can be used \nto specify some files (for example, \n.BAK\n to uncompress every\nfile with extension BAK).\n\n\nThe format of file encryption is a format specific to DIV Games Studio,\nso it can't be uncompressed with any other external utility program.\n\n\nThe file will be uncompressed with the same name and extension as the \none compressed. Files not compressed with the function\n\ncompress_file()\n can't be uncompressed using this function.\n\n\nExample program\n\n\nPROGRAM example_uncompress_file;\n\nGLOBAL\n    counter;\n    mytable[999];\n\nBEGIN\n    FOR (counter=0;counter\n1000;counter++)\n        mytable[counter]=counter;\n    END\n\n    save(\nhelp/help.cmp\n,OFFSET mytable,sizeof(mytable));\n\n    compress_file(\nhelp/help.cmp\n); // Compress an file\n\n    // ...\n\n    uncompress_file(\nhelp/help.cmp\n); // Uncompress the file\n\n    load(\nhelp/help.cmp\n,OFFSET mytable);\nEND\n\n\n\n\nThis small example uses the function \nsave()\n to create a file\ncalled \nhelp.cmp\n using the data contained in \nmytable\n, this being  a group\nof consecutive numbers from 0 to 1000, then the file is compressed\nwith the function \ncompress_file()\n.\n\n\nOnce the compressed file has been created, it is then uncompressed with the function\n\nuncompress_file()\n and is again loaded over the original table using the\nfunction \nload()\n.\n\n\n\n\nNote the functions \nencode_file()\n and \ndecode_file()\n\n\nallow you to encrypt and decode files of the disk.\n\n\nThe encrypted files, generated with these functions \ncannot be compressed\n\ndue to their contents being completely randomly organised. \nBut, \nthe compressed files can be encrypted\n.\n\n\n\n\nSee: \ncompress_file()\n - \nencode_file()\n - \ndecode_file()", 
            "title": "uncompress_file()"
        }, 
        {
            "location": "/uncompress_file()/#description", 
            "text": "Uncompresses one or more files on the disk, previously compressed\nwith the function  compress_file() , the only parameter required is\nthe  name of file  which must be uncompressed, as a literal\n(text between quotation marks). The joker characters  ?      can be used \nto specify some files (for example,  .BAK  to uncompress every\nfile with extension BAK).  The format of file encryption is a format specific to DIV Games Studio,\nso it can't be uncompressed with any other external utility program.  The file will be uncompressed with the same name and extension as the \none compressed. Files not compressed with the function compress_file()  can't be uncompressed using this function.", 
            "title": "Description"
        }, 
        {
            "location": "/uncompress_file()/#example-program", 
            "text": "PROGRAM example_uncompress_file;\n\nGLOBAL\n    counter;\n    mytable[999];\n\nBEGIN\n    FOR (counter=0;counter 1000;counter++)\n        mytable[counter]=counter;\n    END\n\n    save( help/help.cmp ,OFFSET mytable,sizeof(mytable));\n\n    compress_file( help/help.cmp ); // Compress an file\n\n    // ...\n\n    uncompress_file( help/help.cmp ); // Uncompress the file\n\n    load( help/help.cmp ,OFFSET mytable);\nEND  This small example uses the function  save()  to create a file\ncalled  help.cmp  using the data contained in  mytable , this being  a group\nof consecutive numbers from 0 to 1000, then the file is compressed\nwith the function  compress_file() .  Once the compressed file has been created, it is then uncompressed with the function uncompress_file()  and is again loaded over the original table using the\nfunction  load() .", 
            "title": "Example program"
        }, 
        {
            "location": "/uncompress_file()/#note-the-functions-encode_file-and-decode_file", 
            "text": "allow you to encrypt and decode files of the disk.  The encrypted files, generated with these functions  cannot be compressed \ndue to their contents being completely randomly organised. \nBut,  the compressed files can be encrypted .   See:  compress_file()  -  encode_file()  -  decode_file()", 
            "title": "Note the functions encode_file() and decode_file()"
        }, 
        {
            "location": "/find_color()/", 
            "text": "find_color(\nred\n,\n \ngreen\n,\n \nblue\n)\n\n\nReturns\n\n\nThe \ncolour number\n in the palette.\n\n\nDescription\n\n\nFinds the colour from the current palette nearest to the indicated colour.\n\n\nthe desired colour must be specified in the palette using the three\ncomponent RGB system of colour coding, that is \nred\n (red), \ngreen\n (green)\nand \nblue\n (blue), all of them being expressed as values between 0 and 63.\n\n\nthe \nnumber of colour\n of the palette which is the nearest to the indicated \ncomponent colours, will be given as the return value of the function.\n\n\nFor example, if the program calls a function like \nfind_color(63,63,0)\n, it will\nreturn the colour number of the palette which is the nearest to or identical to this\ncolour, namely \nyellow\n.\n\n\n\n\nNote the function \nfind_color()\n \ndoesn't modify the current palette\n, it just\n\n\nsearches for the defined colours in the palette, to modify a colour of the\npalette the function \nset_color()\n must be used.\n\n\nExample program\n\n\nPROGRAM example_find_colour;\n\nGLOBAL;\n    blue;\n    green;\n    yellow;\n    red;\n\nBEGIN\n\n    blue=find_color(0,0,63);      // Search for the colour blue\n    green=find_color(0,63,0);     // Search for the colour green\n    yellow=find_color(63,63,0);    // Search for the colour yellow\n    red=find_color(63,0,0);       // Search for the colour red\n\n    draw(2,blue,15,0,0,0,79,79);\n    draw(2,green,15,0,80,0,159,79);\n    draw(2,yellow,15,0,160,0,239,79);\n    draw(2,red,15,0,240,0,319,79);\n\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nThis example uses the function \nfind_color()\n to define the colours\n\nblue\n, \ngreen\n, \nyellow\n and \nred\n inside of the palette, and then\nusing the function \ndraw()\n, shows four squares of these colours.\n\n\nThe advantage of using this system is that it doesn't matter if the program \nchanges the current palette, because the same colours can always be found.\n\n\n\n\nTo modify the whole palette, the file must be loaded with the\nfunction \nload_pal()\n.\n\n\nTo create other palette effects, the function \nroll_palette()\n can be used,\nwhich allows you to create cycles of colour, or the function \nfade()\n\nwhich allows you to create multiple fades and saturations of colour at different speeds.\n\n\n\n\nSee: \nset_color()\n - \nroll_palette()\n - \nload_pal()", 
            "title": "find_color()"
        }, 
        {
            "location": "/find_color()/#returns", 
            "text": "The  colour number  in the palette.", 
            "title": "Returns"
        }, 
        {
            "location": "/find_color()/#description", 
            "text": "Finds the colour from the current palette nearest to the indicated colour.  the desired colour must be specified in the palette using the three\ncomponent RGB system of colour coding, that is  red  (red),  green  (green)\nand  blue  (blue), all of them being expressed as values between 0 and 63.  the  number of colour  of the palette which is the nearest to the indicated \ncomponent colours, will be given as the return value of the function.  For example, if the program calls a function like  find_color(63,63,0) , it will\nreturn the colour number of the palette which is the nearest to or identical to this\ncolour, namely  yellow .", 
            "title": "Description"
        }, 
        {
            "location": "/find_color()/#note-the-function-find_color-doesnt-modify-the-current-palette-it-just", 
            "text": "searches for the defined colours in the palette, to modify a colour of the\npalette the function  set_color()  must be used.", 
            "title": "Note the function find_color() doesn't modify the current palette, it just"
        }, 
        {
            "location": "/find_color()/#example-program", 
            "text": "PROGRAM example_find_colour;\n\nGLOBAL;\n    blue;\n    green;\n    yellow;\n    red;\n\nBEGIN\n\n    blue=find_color(0,0,63);      // Search for the colour blue\n    green=find_color(0,63,0);     // Search for the colour green\n    yellow=find_color(63,63,0);    // Search for the colour yellow\n    red=find_color(63,0,0);       // Search for the colour red\n\n    draw(2,blue,15,0,0,0,79,79);\n    draw(2,green,15,0,80,0,159,79);\n    draw(2,yellow,15,0,160,0,239,79);\n    draw(2,red,15,0,240,0,319,79);\n\n    LOOP\n        FRAME;\n    END\nEND  This example uses the function  find_color()  to define the colours blue ,  green ,  yellow  and  red  inside of the palette, and then\nusing the function  draw() , shows four squares of these colours.  The advantage of using this system is that it doesn't matter if the program \nchanges the current palette, because the same colours can always be found.   To modify the whole palette, the file must be loaded with the\nfunction  load_pal() .  To create other palette effects, the function  roll_palette()  can be used,\nwhich allows you to create cycles of colour, or the function  fade() \nwhich allows you to create multiple fades and saturations of colour at different speeds.   See:  set_color()  -  roll_palette()  -  load_pal()", 
            "title": "Example program"
        }, 
        {
            "location": "/load_screen()/", 
            "text": "load_screen(\nname of the file\n)\n\n\nDescription\n\n\nLoads an image file \nMAP\n or \nPCX\n into the background of the screen.\n\n\nIf the graphic is a different size (in pixels) to the screen size\nthe graphic will be printed centred on the screen.\n\n\nTo delete the screen background the function \nclear_screen()\n must be used.\n\n\n\n\nIt is a function that combines three actions into one:\n\n\n1 -\n To load a file which contains a map with the background image (using the\nfunction \nload_map()\n or \nload_pcx()\n).\n\n\n2 -\n To establish the image as the background (using \nput_screen()\n).\n\n\n3 -\n To delete the previous image file from memory (with \nunload_map()\n or\n\nunload_pcx()\n)\n\n\n\n\nExample program\n\n\nPROGRAM example_load_screen;\nBEGIN\n    load_screen(\nhelp/help.map\n);\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn the example the background image contained in the file \nhelp.map\n\nis loaded with the function \nload_screen()\n.\n\n\n\n\nNote If you want to print a graphic on a solid part of the screen\n\n\nor region which is \nnot centred\n, then use the function \nput()\n\nin conjunction with it. The function \nxput()\n allows, you \nto print graphics rotated, scaled, mirrored and/or transparent\non any region of the screen.\n\n\n\n\nSee: \nload_map/pcx()\n - \nput_screen()\n - \nunload_map/pcx()", 
            "title": "load_screen()"
        }, 
        {
            "location": "/load_screen()/#description", 
            "text": "Loads an image file  MAP  or  PCX  into the background of the screen.  If the graphic is a different size (in pixels) to the screen size\nthe graphic will be printed centred on the screen.  To delete the screen background the function  clear_screen()  must be used.   It is a function that combines three actions into one:  1 -  To load a file which contains a map with the background image (using the\nfunction  load_map()  or  load_pcx() ).  2 -  To establish the image as the background (using  put_screen() ).  3 -  To delete the previous image file from memory (with  unload_map()  or unload_pcx() )", 
            "title": "Description"
        }, 
        {
            "location": "/load_screen()/#example-program", 
            "text": "PROGRAM example_load_screen;\nBEGIN\n    load_screen( help/help.map );\n    LOOP\n        FRAME;\n    END\nEND  In the example the background image contained in the file  help.map \nis loaded with the function  load_screen() .", 
            "title": "Example program"
        }, 
        {
            "location": "/load_screen()/#note-if-you-want-to-print-a-graphic-on-a-solid-part-of-the-screen", 
            "text": "or region which is  not centred , then use the function  put() \nin conjunction with it. The function  xput()  allows, you \nto print graphics rotated, scaled, mirrored and/or transparent\non any region of the screen.   See:  load_map/pcx()  -  put_screen()  -  unload_map/pcx()", 
            "title": "Note If you want to print a graphic on a solid part of the screen"
        }, 
        {
            "location": "/force_pal()/", 
            "text": "force_pal(\nname of file\n)\n\n\nDescription\n\n\nLoads a colour palette (a file of type PAL, FPG, MAP, PCX or FNT) and\n\nestablishes it as the obligatory palette\n for all the graphics and fonts which are\nloaded thereafter.\n\n\nThe functioning is very similar to \nload_pal()\n (which simply loads and\nactivates a palette) but, once the palette has been loaded with \nforce_pal()\n,\n\nevery map, file and font\n loaded afterwards {will adapt automatically \nto the current palette}.\n\n\nThe \ngraphics already loaded\n before \nforce_pal()\n was called {won't\nbe adapted}, and as such, if all the graphics are wanted to be seen with\na unique palette, this function must be called at the beginning of the program.\n\n\nIt is \nimportant\n to note that the maps, files \n fonts will just adapt in the\ncomputer's memory, the original files remain unaltered, each one with\ntheir own palette.\n\n\n\n\nNote To stop adapting the loaded graphics to the unique palette, the function\n\n\nforce_pal(0)\n must be called (indicating a \n0\n as its parameter, instead of the \nname of a file.\n\n\n\n\nExample program\n\n\nPROGRAM example_force_pal;\nBEGIN\n\n    force_pal(\nhelp/help.pal\n);\n\n    // Now all the files, maps and fonts can be loaded \n    // which are wanted, irrespective of their own palette, to be adapted\n    // automatically to the current palette.\n\n    // ...\n\nEND\n\n\n\n\nThis small example shows how all the graphics can be forced to just one \npalette inside of a program by calling \nforce_pal()\n at the beginning of\nprogram execution.\n\n\n\n\nA palette can't be deleted from the computer's memory, because this doesn't\ntake up any space in memory.\n\n\n\n\nSee: \nload_pal()", 
            "title": "force_pal()"
        }, 
        {
            "location": "/force_pal()/#description", 
            "text": "Loads a colour palette (a file of type PAL, FPG, MAP, PCX or FNT) and establishes it as the obligatory palette  for all the graphics and fonts which are\nloaded thereafter.  The functioning is very similar to  load_pal()  (which simply loads and\nactivates a palette) but, once the palette has been loaded with  force_pal() , every map, file and font  loaded afterwards {will adapt automatically \nto the current palette}.  The  graphics already loaded  before  force_pal()  was called {won't\nbe adapted}, and as such, if all the graphics are wanted to be seen with\na unique palette, this function must be called at the beginning of the program.  It is  important  to note that the maps, files   fonts will just adapt in the\ncomputer's memory, the original files remain unaltered, each one with\ntheir own palette.", 
            "title": "Description"
        }, 
        {
            "location": "/force_pal()/#note-to-stop-adapting-the-loaded-graphics-to-the-unique-palette-the-function", 
            "text": "force_pal(0)  must be called (indicating a  0  as its parameter, instead of the \nname of a file.", 
            "title": "Note To stop adapting the loaded graphics to the unique palette, the function"
        }, 
        {
            "location": "/force_pal()/#example-program", 
            "text": "PROGRAM example_force_pal;\nBEGIN\n\n    force_pal( help/help.pal );\n\n    // Now all the files, maps and fonts can be loaded \n    // which are wanted, irrespective of their own palette, to be adapted\n    // automatically to the current palette.\n\n    // ...\n\nEND  This small example shows how all the graphics can be forced to just one \npalette inside of a program by calling  force_pal()  at the beginning of\nprogram execution.   A palette can't be deleted from the computer's memory, because this doesn't\ntake up any space in memory.   See:  load_pal()", 
            "title": "Example program"
        }, 
        {
            "location": "/insufficient_memorydot/", 
            "text": "There is not \nenough memory\n to compile the program.", 
            "title": "Insufficient memory."
        }, 
        {
            "location": "/ltobjdotdef_was_not_found/", 
            "text": "The \nLTOBJ.DEF\n file has not been found in the DIV directory; this \nfile is indispensable to compile the programs.\n\n\nRecover the original file if you have a copy. Otherwise, you will have to reinstall the application.", 
            "title": "ltobj.def was not found"
        }, 
        {
            "location": "/invalid_ltlexdotdef_filedot/", 
            "text": "An invalid symbol\n has been defined in the \nLTLEX.DEF\n file. Recover\nthe original file if you have a copy. Otherwise, you will have to reinstall the application.", 
            "title": "Invalid ltlex.def file."
        }, 
        {
            "location": "/invalid_ltlexdotdef_filedot/", 
            "text": "An invalid symbol\n has been defined in the \nLTLEX.DEF\n file. Recover\nthe original file if you have a copy. Otherwise, you will have to reinstall the application.", 
            "title": "Invalid ltlex.def file."
        }, 
        {
            "location": "/invalid_ltlexdotdef_filedot/", 
            "text": "An invalid symbol\n has been defined in the \nLTLEX.DEF\n file. Recover\nthe original file if you have a copy. Otherwise, you will have to reinstall the application.", 
            "title": "Invalid ltlex.def file."
        }, 
        {
            "location": "/ltobjdotdef_was_not_found/", 
            "text": "The \nLTOBJ.DEF\n file has not been found in the DIV directory; this \nfile is indispensable to compile the programs.\n\n\nRecover the original file if you have a copy. Otherwise, you will have to reinstall the application.", 
            "title": "ltobj.def was not found"
        }, 
        {
            "location": "/invalid_ltobjdotdef_filedot/", 
            "text": "The changes made in the \nLTOBJ.DEF\n file \nare invalid\n. Therefore, you must recover the original \nfile if you have a copy. Otherwise, you will have to reinstall the application.", 
            "title": "Invalid ltobj.def file."
        }, 
        {
            "location": "/unknown_characterdot/", 
            "text": "A character that does not belong to any symbol of the language \nand that, moreover, \nis not valid\n to create a new name was found in the program.\n\n\nIf it is a \ncomment\n it is necessary to indicate it correctly with a symbol\n// at the beginning of the comments of a line, or the symbols /\n and \n/ to\nindicate the beginning and the end, respectively, of comments occupying more than one line.\n\n\nIf you intend to create a \nname\n you must replace that character by another one among the characters allowed by the language.\n\n\n\n\nSee: \nSyntax\n - \nComments", 
            "title": "Unknown character."
        }, 
        {
            "location": "/unclosed_literaldot/", 
            "text": "Literals are \ntexts in inverted commas\n. In the indicated position of the program, a literal starts but it is not closed.\n\n\nAll the literals must be closed in the same line as they started. It is not possible to define literals occupying more than one line.\n\n\nThe literals may start and finish with the character [\n'\n] or even with the\ncharacter [\n] (but they have to start and finish with the same character). There are two ways to include the character [\n] in a literal, supposing that the aim is to define a literal containing the text: a\nB\nc\n\n\n\n\n\n\nDuplicating the character: \na\nB\nc\n\n\n\n\n\n\nDefining it with the simple inverted comma: 'a\nB\nc'\n\n\n\n\n\n\nIt happens the same regarding the character [\n'\n], that can be included in a literal if it is duplicated, or if the literal is delimited with the character [\n].\n\n\n\n\nSee: \nSyntax", 
            "title": "Unclosed literal."
        }, 
        {
            "location": "/unknown_symboldot/", 
            "text": "In the indicated position of the program there is a symbol that does not belong to the language. Check the symbols available in the language to construct the expression correctly.\n\n\nIt is probably a typographic mistake; check the syntax.\n\n\n\n\nSee: \nSyntax", 
            "title": "Unknown symbol."
        }, 
        {
            "location": "/expecting_for_[program]/", 
            "text": "All the programs must start with the reserved word \nPROGRAM\n followed by the program name. Before this word, only can appear \ncomments\n (explanatory texts preceded by the symbol // or between the symbols /\n and \n/)\nor the \ncompilation options\n.\n\n\nCheck if the word has been correctly written, as no difference is made between uppercase and lowercase letters. Therefore, \nPROGRAM\n, \nprogram\n, \nProgram\n, ... are valid words.\n\n\nExample\n\n\n// -------------------\n// Listing of my game\n// -------------------\n\nPROGRAM my_game;\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nComments\n - \nProgram's head", 
            "title": "expecting for [PROGRAM]"
        }, 
        {
            "location": "/expecting_for_[program]/#example", 
            "text": "// -------------------\n// Listing of my game\n// -------------------\n\nPROGRAM my_game;\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND   See:  Syntax  -  Comments  -  Program's head", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_the_programapostrophes_namedot/", 
            "text": "expecting for the program's name to come after the reserved word \nPROGRAM\n.\n\n\nExample\n\n\nPROGRAM program_name;\nBEGIN\n    //...\nEND\n\n\n\n\nThe name of this program is \nprogram_name\n.\n\n\n\n\nSee: \nSyntax\n - \nNames\n - \nProgram's head", 
            "title": "expecting for the program's name."
        }, 
        {
            "location": "/expecting_for_the_programapostrophes_namedot/#example", 
            "text": "PROGRAM program_name;\nBEGIN\n    //...\nEND  The name of this program is  program_name .   See:  Syntax  -  Names  -  Program's head", 
            "title": "Example"
        }, 
        {
            "location": "/the_name_is_not_newdot/", 
            "text": "A \nname\n of an invalid process has been used, as it was already predefined as the name of another object. It can be the name of a \nconstant\n, variable, table, structure, process or a function of the program.\n\n\nIt is also possible either that the same name has been used inside the program to identify two different objects, or \nthat a predefined name has been used with another purpose inside the language\n. In that case, it is possible to access the \nGlossary\n to see the object to which this name is referred.\n\n\nYou must replace this name by another similar one.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.\n\n\n\n\nSee: \nSyntax\n - \nNames", 
            "title": "The name is not new."
        }, 
        {
            "location": "/the_name_is_not_newdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND  In this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.   See:  Syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[equal]/", 
            "text": "To define a constant, a symbol \n=\n must be put after the name of the constant.\n\n\nThe compiler has understood that the last defined word was the name of a new \nconstant\n and, in the indicated position, it was expected for the symbol of assignment (\n=\n) to be shown.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    a=0;\n    b=1;\n    c,d; // Error: expecting for [=].\nBEGIN\n    //...\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of data", 
            "title": "expecting for [=]"
        }, 
        {
            "location": "/expecting_for_[equal]/#example", 
            "text": "PROGRAM my_game;\nCONST\n    a=0;\n    b=1;\n    c,d; // Error: expecting for [=].\nBEGIN\n    //...\nEND   See:  Syntax  -  Declaration of data", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[)]/", 
            "text": "The compiler was  expecting for a bracket previously open with the symbol \n)\n to be closed at the indicated position.\n\n\nThis error normally appears for one of the two following reasons:\n\n\n\n\n\n\nIn an expression, several brackets have been opened and then some of them have not been closed. In this case, the opened brackets must be closed.\n\n\n\n\n\n\nInside an expression in brackets, any operator has been omitted, then appearing  two operands in a row, for instance, \n(2*3 4)\n. In this case, it is necessary to indicate the lacking operator.\n\n\n\n\n\n\n\n\nSee: \nSyntax", 
            "title": "expecting for [)]"
        }, 
        {
            "location": "/expecting_for_[]]/", 
            "text": "The compiler was expecting for a square bracket previously opened, with the symbol []](pointer\n[\n].md) to be closed in the indicated position.\n\n\nThis error normally appears for one of the following reasons:\n\n\n\n\n\n\nThe opening of a square bracket (\n[\n) has been indicated in a table or structure and, after having indicated its length or index, it has not been closed. In this case, the symbol \n]\n must be added in the indicated position.\n\n\n\n\n\n\nOn indicating the index of a table or structure, any operator has been omitted, then appearing, two operands in a row, for instance \ntable[2*3 4]\n. It is necessary now to indicate the lacking operator.\n\n\n\n\n\n\n\n\nSee: \nSyntax", 
            "title": "expecting for []]"
        }, 
        {
            "location": "/an_operand_was_waited_fordot/", 
            "text": "The indicated position in the program is inside the context of an expression and, at this point of the expression, an operand (a value on which it is possible to do some calculations) was waited for. Instead of it, another different element on which it is not possible to do any calculation is given.\n\n\nThere are several causes that can provoke this error, among which the most frequent are the following ones:\n\n\n\n\n\n\nA reserved word of the language has been used as if it was a variable,\nfor instance \nx=global*2;\n. In this case, it is possible to check whether it is a reserved word by accessing the glossary.\n\n\n\n\n\n\nAn operand has been omitted inside an expression, for instance \nx=2+ /y;\n.\n\n\n\n\n\n\nA square bracket or a bracket that had not been previously opened has been closed inside an expression, for instance \nx=);\n.\n\n\n\n\n\n\nAnyhow, you must check the \nsyntax\n of the indicated expression to correctly construct it.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of data", 
            "title": "An operand was waited for."
        }, 
        {
            "location": "/unknown_namedot/", 
            "text": "In the indicated position of the program, reference is made to a non-existent \nPROCESS\n \nFUNCTION\n,\nthat can be one of the following cases:\n\n\n\n\n\n\nThe name of a process has been incorrectly keyed. In this case, check the name of the original process, as it is possible that the name does not correctly appear in its definition.\n\n\n\n\n\n\nThe aim has been to use a language function and its name has not been correctly written. In this case, it is possible to access the general index to look for the exact name of the function.\n\n\n\n\n\n\nReference is made to a process whose code has not been defined yet. Therefore, if the aim is to compile the program, it is necessary to define the process, at least, as follows:\n\n\n\n\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    my_process();\nEND\n\nPROCESS my_process()\nBEGIN\nEND\n\n\n\n\nIndicating in the process the parameters that it receives (in the previous example, it does not receive any parameter).\n\n\n\n\nSee: \nSyntax", 
            "title": "Unknown name."
        }, 
        {
            "location": "/unknown_namedot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    my_process();\nEND\n\nPROCESS my_process()\nBEGIN\nEND  Indicating in the process the parameters that it receives (in the previous example, it does not receive any parameter).   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[begin]/", 
            "text": "This error appears when an invalid declaration is made inside the \nCONST\n, \nGLOBAL\n, \nLOCAL\n or\n\nPRIVATE\n sections.\n\n\nAfter the initial statement \nPROGRAM program's_name;\n wait for any of the sections previously mentioned to appear (always in the same order), finally appearing the word \nBEGIN\n.\n\n\nAfter the beginning of a process (\nPROCESS process_name(\n...\n)\n)\nor function (\nFUNCTION\n \nname_of_function(\n...\n)\n) wait\nfor the \nPRIVATE\n section or the \nBEGIN\n word to be shown.\n\n\nThe error can appear under the following circumstances:\n\n\n\n\n\n\nThe name of any section has been incorrectly written.\n\n\n\n\n\n\nSeveral sections have been put in an incorrect order:\n\n\n\n\n\n\nExample:}\n\n\nPROGRAM my_game;\nLOCAL\n    a=0;\nGLOBAL // Error: expecting for [BEGIN]\n    b=0;\nBEGIN\n    //...\nEND\n\n-\n\n\nKeep in mind that the sections must appear in the following order:\n\n\n**CONST**\n\n[GLOBAL](declaration_of_global_datadot.md)\n\n[LOCAL](declaration_of_local_datadot.md)\n\n[PRIVATE](declaration_of_private_datadot.md)\n\n\n\n\n\nInside any of the sections previously mentioned, an element that is not a valid declaration inside that section appear. \n\n\n\n\nExample:\n\nPROGRAM my_game;\nGLOBAL\n    +variable=0; // Error: expecting for [BEGIN]\nBEGIN\n    //...\nEND\n\n-\n\n\nIn this example, on reaching the symbol \n+\n the compiler determines\nthat the \nGLOBAL\n section has already finished. Therefore, as the following element\nis not the beginning of the \nLOCAL\n or \nPRIVATE\n sections, the compiler is \nexpecting for the \nBEGIN\n reserved word to appear, indicating the beginning of the program code.\n\n\n\n\nAt the beginning of the program or on defining a process, the word \nBEGIN\n has been omitted.\n\n\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_process()\n    FRAME; // Error: expecting for [BEGIN]\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nBEGIN", 
            "title": "expecting for [BEGIN]"
        }, 
        {
            "location": "/expecting_for_[begin]/#example", 
            "text": "PROGRAM my_game;\nLOCAL\n    a=0;\nGLOBAL // Error: expecting for [BEGIN]\n    b=0;\nBEGIN\n    //...\nEND -  Keep in mind that the sections must appear in the following order:  **CONST**\n\n[GLOBAL](declaration_of_global_datadot.md)\n\n[LOCAL](declaration_of_local_datadot.md)\n\n[PRIVATE](declaration_of_private_datadot.md)   Inside any of the sections previously mentioned, an element that is not a valid declaration inside that section appear.    Example: \nPROGRAM my_game;\nGLOBAL\n    +variable=0; // Error: expecting for [BEGIN]\nBEGIN\n    //...\nEND -  In this example, on reaching the symbol  +  the compiler determines\nthat the  GLOBAL  section has already finished. Therefore, as the following element\nis not the beginning of the  LOCAL  or  PRIVATE  sections, the compiler is \nexpecting for the  BEGIN  reserved word to appear, indicating the beginning of the program code.   At the beginning of the program or on defining a process, the word  BEGIN  has been omitted.   {#9999,Example  PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_process()\n    FRAME; // Error: expecting for [BEGIN]\nEND   See:  Syntax  -  BEGIN", 
            "title": "Example:}"
        }, 
        {
            "location": "/a_constant_expression_was_waited_fordot/", 
            "text": "To initialise \nconstants\n, variables, tables and structures it is necessary to use numeric values or expressions whose value may be determined when the program is compiled.\n\n\nAn expression starts in the indicated position. The value of this expression has not been resolved in compilation time, probably because it uses global, local or private data, or because a function is called.\n\n\nIn constant expressions, it is only possible to use:\n\n\n- [Constants](declaration_of_constantsdot.md) previously defined.\n\n- **Numeric values**.\n\n- Arithmetic or logical **operators**.\n\n- **Literals** (texts in inverted commas).\n\n- The [sizeof()](sizeof().md) function.\n\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    my_variable=4;\n    position=2*my_variable; // Error: A constant expression was waited for.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, \nposition\n can not be initialised, as the \nx\n local variable is being used for that purpose.\n\n\n\n\nSee: \nSyntax\n - \nDefinition of constants", 
            "title": "A constant expression was waited for."
        }, 
        {
            "location": "/a_constant_expression_was_waited_fordot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    my_variable=4;\n    position=2*my_variable; // Error: A constant expression was waited for.\nBEGIN\n    //...\nEND  In this example,  position  can not be initialised, as the  x  local variable is being used for that purpose.   See:  Syntax  -  Definition of constants", 
            "title": "Example"
        }, 
        {
            "location": "/the_table_has_been_exceededdot/", 
            "text": "The constant expression that starts in the indicated position of the program can not be calculated, as in it you access a table or structure out of its range of positions.\n\n\nCheck the range of the table or structure in its definition.\nKeep in mind that a table defined, for instance, as \ntable[10]\n\nhas \n11\n positions (from table[0] to table[10]).\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    table[]=1, 3, 5;\n    value=table[3]; // Error: The table has been exceeded.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the \nvalue\n variable can not be initialised as an non-existent table position is being used for this purpose.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of table", 
            "title": "The table has been exceeded."
        }, 
        {
            "location": "/the_table_has_been_exceededdot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    table[]=1, 3, 5;\n    value=table[3]; // Error: The table has been exceeded.\nBEGIN\n    //...\nEND  In this example, the  value  variable can not be initialised as an non-existent table position is being used for this purpose.   See:  Syntax  -  Declaration of table", 
            "title": "Example"
        }, 
        {
            "location": "/the_offset_can_not_be_calculateddot/", 
            "text": "In the expression indicated in the program, the \noffset\n operator (or the \n synonymous symbol) is used with the aim of obtaining the address (offset) of an object. That object has no address, as it is not a variable, a table or a structure. Therefore, the compiler can not resolve the expression.\n\n\nProbably you have intended to obtain the address of a constant expression or an expression involving several operands.\n\n\nNow, a program is shown with several examples of valid and invalid uses of the \noffset\n operator.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    my_constant=0;\nGLOBAL\n    my_offset=0;\n    my_variable=0;\n    my_table[10];\n    STRUCT my_structure[10]\n        variable;\n    END\nBEGIN\n    // Correct examples\n    my_offset=offset my_variable;\n    my_offset=offset my_table;\n    my_offset=offset my_table[my_variable];\n    my_offset=offset my_structure[0].variable;\n    my_offset=offset id.x;\n\n    // Invalid examples\n    my_offset=offset (my_variable*2);\n    my_offset=offset my_constant;\n    my_offset=offset 0;\n    write_int(0, 0, 0, 0, offset (my_variable+1));\nEND\n\n\n\n\nThere is no difference between the use of the \noffset\n reserved word\nor the symbol \n.\n\n\nThe \nconstants\n such as \nmy_constant\n have no offset as they are just\nsynonymous of the numeric value they represent.\n\n\nThe statement \nmy_offset=offset (my_variable*2);\n is invalid as the multiplication is made at first and, once it has been done, the \nmy_variable*2\n value is transformed into a numeric result that has no assigned address.\n\n\nUnlikely, the \noffset my_variable*2\n expression is valid as, in this case, the address of \nmy_variable\n is obtained at first and then, this address will be multiplied by \n2\n.\n\n\n\n\nSee: \nSyntax\n - \noffset", 
            "title": "The offset can not be calculated."
        }, 
        {
            "location": "/the_offset_can_not_be_calculateddot/#example", 
            "text": "PROGRAM my_game;\nCONST\n    my_constant=0;\nGLOBAL\n    my_offset=0;\n    my_variable=0;\n    my_table[10];\n    STRUCT my_structure[10]\n        variable;\n    END\nBEGIN\n    // Correct examples\n    my_offset=offset my_variable;\n    my_offset=offset my_table;\n    my_offset=offset my_table[my_variable];\n    my_offset=offset my_structure[0].variable;\n    my_offset=offset id.x;\n\n    // Invalid examples\n    my_offset=offset (my_variable*2);\n    my_offset=offset my_constant;\n    my_offset=offset 0;\n    write_int(0, 0, 0, 0, offset (my_variable+1));\nEND  There is no difference between the use of the  offset  reserved word\nor the symbol  .  The  constants  such as  my_constant  have no offset as they are just\nsynonymous of the numeric value they represent.  The statement  my_offset=offset (my_variable*2);  is invalid as the multiplication is made at first and, once it has been done, the  my_variable*2  value is transformed into a numeric result that has no assigned address.  Unlikely, the  offset my_variable*2  expression is valid as, in this case, the address of  my_variable  is obtained at first and then, this address will be multiplied by  2 .   See:  Syntax  -  offset", 
            "title": "Example"
        }, 
        {
            "location": "/too_many_values_for_the_tabledot/", 
            "text": "A table has been initialised with more values than it can contain.\n\n\nExample:}\n\n\nPROGRAM my_game;\nGLOBAL\n    table1[3]=0, 1,2 , 3, 4; // Error: Too many values for the table.\nBEGIN\n    //...\nEND\n\n-\n\n\nTo initialise a table take into account that, at the most, it can have as many values as the number in square brackets plus 1 indicates.\n\n\nExample:\n\nPROGRAM my_game;\nGLOBAL\n    table1[3]=2, 4, 6, 8;\nBEGIN\n    //...\nEND\n\n-\n\n\nIn this case, the table \ntable1\n may contain four values (table1[0]=2,\ntable1[1]=4, table1[2]=6 and table1[3]=8).\n\n\nAnother option is \nnot to indicate the size of the table\n, so the compiler will deduce it from its initialisation.  \n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nGLOBAL\n    table1[]=2, 4, 6, 8;\nBEGIN\n    //...\nEND\n\n\n\n\nIn this case, if it was necessary to refer to the table's length inside the program,\n\nthe \nsizeof(table1)\n expression should be used, being equal to \n4\n in this example.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of table\n - \nsizeof()", 
            "title": "Too many values for the table."
        }, 
        {
            "location": "/too_many_values_for_the_tabledot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    table1[3]=0, 1,2 , 3, 4; // Error: Too many values for the table.\nBEGIN\n    //...\nEND -  To initialise a table take into account that, at the most, it can have as many values as the number in square brackets plus 1 indicates.  Example: \nPROGRAM my_game;\nGLOBAL\n    table1[3]=2, 4, 6, 8;\nBEGIN\n    //...\nEND -  In this case, the table  table1  may contain four values (table1[0]=2,\ntable1[1]=4, table1[2]=6 and table1[3]=8).  Another option is  not to indicate the size of the table , so the compiler will deduce it from its initialisation.    {#9999,Example  PROGRAM my_game;\nGLOBAL\n    table1[]=2, 4, 6, 8;\nBEGIN\n    //...\nEND  In this case, if it was necessary to refer to the table's length inside the program, \nthe  sizeof(table1)  expression should be used, being equal to  4  in this example.   See:  Syntax  -  Declaration of table  -  sizeof()", 
            "title": "Example:}"
        }, 
        {
            "location": "/division_by_0dot/", 
            "text": "In the indicated position of the program, a \nconstant expression\n unresolved because it contains a division by 0 among its operations, appears.\n\n\nOn dividing a number by zero results \n infinite and, as in the programming language only integers within the range (\nmin_int\n ... \nmax_int\n) can be used, it is not possible either to store the result of that operation in any variable or to relate it with a constant.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    infinite=1/0; // Error: Division by 0.\nBEGIN\n    //...\nEND\n\n\n\n\nIt is probably an involuntary error. Thus, on evaluating the expression it is necessary to avoid doing any division by zero.\n\n\n\n\nSee: \nSyntax\n - \nStatement of assignment", 
            "title": "Division by 0."
        }, 
        {
            "location": "/division_by_0dot/#example", 
            "text": "PROGRAM my_game;\nCONST\n    infinite=1/0; // Error: Division by 0.\nBEGIN\n    //...\nEND  It is probably an involuntary error. Thus, on evaluating the expression it is necessary to avoid doing any division by zero.   See:  Syntax  -  Statement of assignment", 
            "title": "Example"
        }, 
        {
            "location": "/table_of_negative_lengthdot/", 
            "text": "To define a table indicating in square brackets its length, it is necessary to use a positive integer (0, 1, 2, 3, ...), taking into account that all the tables start in the zero position and finish in the position indicated in the index.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    table1[9];\n    table2[-9]; // Error: Table of negative length.\nBEGIN\n    //...\nEND\n\n\n\n\nThe compiler has detected a table defined with a negative length such as \ntable2\n. In this example, it is necessary to define the table such as\n\ntable1\n that, in this case, will be a table of 10 positions (from\ntable1[0] to table1[9]).\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of table", 
            "title": "Table of negative length."
        }, 
        {
            "location": "/table_of_negative_lengthdot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    table1[9];\n    table2[-9]; // Error: Table of negative length.\nBEGIN\n    //...\nEND  The compiler has detected a table defined with a negative length such as  table2 . In this example, it is necessary to define the table such as table1  that, in this case, will be a table of 10 positions (from\ntable1[0] to table1[9]).   See:  Syntax  -  Declaration of table", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[(]/", 
            "text": "The compiler is expecting for a bracket with the \n(\n symbol to be opened in the indicated position of the program.\n\n\nThere are many cases in which the opening of a \nbracket\n is obligatory:\n\n\n\n\nAfter a process name or a function\n, its call parameters must always be indicated in brackets. Even when the process or the function have no parameters, a bracket must be opened and, later, closed.  \n\n\n\n\nExample:}\n\n\nPROGRAM my_game;\nBEGIN\n    my_process();\n    //...\nEND\nPROCESS my_process()\nBEGIN\n  //...\nEND\n\n-\n\n\n\n\nIn the control statements requiring a condition\n to control the program's flow, that condition must be put in brackets.\n\n\n\n\nExample:\n\nPROGRAM my_game;\nBEGIN\n    IF (x\n10)\n        //...\n    END\n\n\nWHILE (x\nlt;10)\n    //...\nEND\n\nREPEAT\n    //...\nUNTIL (x\nlt;10)\n\nSWITCH (x)\n    //...\nEND\n\nFOR (x=0;x\nlt;10;x++)\n    //...\nEND\n\n\n\nEND\n\n-\n\n\nIn this example, it is possible to see how the different control statements indicate the condition in brackets. There are two exceptions:\n\n\n\n\n\n\nThe \nSWITCH\n statement does not require a condition, but a simple expression, which must be in brackets, anyhow.\n\n\n\n\n\n\nThe \nFOR\n statement has three parts inside the brackets, separated\nby  semicolons. These parts are the following ones: initialisation (\nx=0\n),\ncondition (\nx\n10\n) and increment (\nx++\n).\n\n\n\n\n\n\nAfter the \nDUP\n operator\n (used to initialise\ntables and structures) it is also obligatory to open a bracket.\n\n\n\n\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nGLOBAL\n    table1[]=10 dup (1, 2, 3);\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, table1 would be a table of 30 positions (from table1[0]\nto table1[29]) initialised in the following way: 1, 2, 3, 1, 2, 3, ...\n\n\n\n\nSee: \nSyntax\n - \n( )", 
            "title": "expecting for [(]"
        }, 
        {
            "location": "/expecting_for_[(]/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    my_process();\n    //...\nEND\nPROCESS my_process()\nBEGIN\n  //...\nEND -   In the control statements requiring a condition  to control the program's flow, that condition must be put in brackets.   Example: \nPROGRAM my_game;\nBEGIN\n    IF (x 10)\n        //...\n    END  WHILE (x lt;10)\n    //...\nEND\n\nREPEAT\n    //...\nUNTIL (x lt;10)\n\nSWITCH (x)\n    //...\nEND\n\nFOR (x=0;x lt;10;x++)\n    //...\nEND  END -  In this example, it is possible to see how the different control statements indicate the condition in brackets. There are two exceptions:    The  SWITCH  statement does not require a condition, but a simple expression, which must be in brackets, anyhow.    The  FOR  statement has three parts inside the brackets, separated\nby  semicolons. These parts are the following ones: initialisation ( x=0 ),\ncondition ( x 10 ) and increment ( x++ ).    After the  DUP  operator  (used to initialise\ntables and structures) it is also obligatory to open a bracket.    {#9999,Example  PROGRAM my_game;\nGLOBAL\n    table1[]=10 dup (1, 2, 3);\nBEGIN\n    //...\nEND  In this example, table1 would be a table of 30 positions (from table1[0]\nto table1[29]) initialised in the following way: 1, 2, 3, 1, 2, 3, ...   See:  Syntax  -  ( )", 
            "title": "Example:}"
        }, 
        {
            "location": "/only_can_be_repeated_once_or_twicedot/", 
            "text": "The \nDUP\n operator used to initialise tables and\nstructures allows us to repeat (duplicate) a sequence of\nvalues a specific number of times: from once (in this case, the operator is useless) to an undetermined positive number of times.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    table1[]=10 dup (1, 2, 3);\n    table2[]=-10 dup (1, 2, 3); // Error: Only can be repeated once or twice.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, table1 would be a table of 30 positions (from table1[0]\nto table1[29]) initialised in the following way: 1, 2, 3, 1, 2, 3, ...\n\n\nIt is also possible, moreover, to omit the \nDUP\n operator. In this case, the declaration of table1 would become as follows:\n\n\ntable1[]=10(1, 2, 3);\n\n\nThe effect is exactly the same as in the previous example. That is to say,\nwhen the compiler is in a table's initialisation, the \nnumber (sequence_of_values ... )\n sequence interprets that you intend to repeat the \nsequence_of_values\n the \nnumber\n of times indicated.\n\n\nTherefore, it is not possible to repeat a sequence of values zero times or a negative number of times.\n\n\n\n\nSee: \nSyntax\n - \nDUP", 
            "title": "Only can be repeated once or twice."
        }, 
        {
            "location": "/only_can_be_repeated_once_or_twicedot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    table1[]=10 dup (1, 2, 3);\n    table2[]=-10 dup (1, 2, 3); // Error: Only can be repeated once or twice.\nBEGIN\n    //...\nEND  In this example, table1 would be a table of 30 positions (from table1[0]\nto table1[29]) initialised in the following way: 1, 2, 3, 1, 2, 3, ...  It is also possible, moreover, to omit the  DUP  operator. In this case, the declaration of table1 would become as follows:  table1[]=10(1, 2, 3);  The effect is exactly the same as in the previous example. That is to say,\nwhen the compiler is in a table's initialisation, the  number (sequence_of_values ... )  sequence interprets that you intend to repeat the  sequence_of_values  the  number  of times indicated.  Therefore, it is not possible to repeat a sequence of values zero times or a negative number of times.   See:  Syntax  -  DUP", 
            "title": "Example"
        }, 
        {
            "location": "/invalid_assignmentdot/", 
            "text": "The indicated assignment can not be done in this position of the program.\nIn an assignment statement it is only allowed to assign values to\nobjects such as variables (of any kind), to a position of a table, or to an element of a structure.\n\n\nIt is not possible to assign a value to a \nconstant\n, a\nfunction or to a process or, in general, to any numeric or logical expression.\n\n\nThe following program shows examples of several kinds of invalid assignments:\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    my_constant=0;\nBEGIN\n    my_constant=1;  // Error: Invalid assignment.\n    type my_game=2; // Error: Invalid assignment.\n    sizeof(mouse)=3; // Error: Invalid assignment.\n    4+5=6;           // Error: Invalid assignment.\n    //...\nEND\n\n\n\n\nAll these assignments are invalid because the result of an expression, which is just a numeric value, can not be modified with an assignment. Thus, it is the same as to put a statement of the kind \n2=4;\n that, obviously, is impossible.\n\n\n\n\nSee: \nSyntax\n - \nDefinition of expression", 
            "title": "Invalid assignment."
        }, 
        {
            "location": "/invalid_assignmentdot/#example", 
            "text": "PROGRAM my_game;\nCONST\n    my_constant=0;\nBEGIN\n    my_constant=1;  // Error: Invalid assignment.\n    type my_game=2; // Error: Invalid assignment.\n    sizeof(mouse)=3; // Error: Invalid assignment.\n    4+5=6;           // Error: Invalid assignment.\n    //...\nEND  All these assignments are invalid because the result of an expression, which is just a numeric value, can not be modified with an assignment. Thus, it is the same as to put a statement of the kind  2=4;  that, obviously, is impossible.   See:  Syntax  -  Definition of expression", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[end]/", 
            "text": "An \nEND\n of the \nCASE\n or \nDEFAULT\n was waited for inside the \nSWITCH\n statement.\n\n\nInside the reserved words \nSWITCH\n and \nEND\n one or more sections of the following kind were waited for:\n\n\nCASE\n ... \nEND\n\n\nDEFAULT\n ... \nEND\n\n\nIn the program, there is one of these sections that was expected to finish with the reserved word \nEND\n, but it finishes with another word. The most usual case is the following one:\n\n\n\n\nThat a \nREPEAT\n or a \nIF\n have been lost, finishing the block\nof statements with an \nUNTIL\n or an \nELSE\n. In this case, the associated \nREPEAT\n or \nIF\n must be looked for.\n\n\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    SWITCH (x)\n        CASE 0:\n            //REPEAT\n            //...\n            UNTIL (key(_esc)); // Error: expecting for [END]\n        END\n    END\nEND\n\n\n\n\nIn this example, the section that started with \nCASE\n has finished with \nUNTIL\n (because \nREPEAT\n has been accidentally commented), and the compiler was expecting this section to finish with \nEND\n.\n\n\n\n\nSee: \nSyntax", 
            "title": "expecting for [END]"
        }, 
        {
            "location": "/expecting_for_[end]/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    SWITCH (x)\n        CASE 0:\n            //REPEAT\n            //...\n            UNTIL (key(_esc)); // Error: expecting for [END]\n        END\n    END\nEND  In this example, the section that started with  CASE  has finished with  UNTIL  (because  REPEAT  has been accidentally commented), and the compiler was expecting this section to finish with  END .   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/invalid_expressiondot/", 
            "text": "In the indicated position of the program there is an expression incorrectly constructed, so the compiler can not interpret it.\n\n\n\n\n\n\nCheck the \nsyntax\n of the expression.\n\n\n\n\n\n\nIf the error is not found, try to express it in a different way.\n\n\n\n\n\n\nTry to divide the expression into several subexpressions, sequentially and separately doing the different calculations done in the original expression. For instance, the expression:\n\n\n\n\n\n\nx=(x*4+1)/2;\n\n\ncan be expressed as the three following expressions:\n\n\nx=x*4;\n\n\nx=x+1;\n\n\nx=x/2;\n\n\nThus, it is possible to locate the exact point in which the operation that can not be done is.\n\n\n\n\nSee: \nSyntax\n - \nDefinition of expression", 
            "title": "Invalid expression."
        }, 
        {
            "location": "/expecting_for_[until]/", 
            "text": "A block of statements that started with the reserved word \nREPEAT\n\nmust necessarily finish with the word \nUNTIL\n. In the indicated position\nof the program, the block of statements has finished with a\ndifferent word. So probably:\n\n\n\n\nA \nREPEAT\n has finished with an \nEND\n. In this case,\nif  you intend to create a loop indefinitely, the \nLOOP\n ... \nEND\n statement must be used.\n\n\n\n\nExample:}\n\n\nPROGRAM my_game;\nBEGIN\n    REPEAT\n    //...\n    END // Error: expecting for [UNTIL]\nEND\n\n-\n\n\n\n\nInside the \nREPEAT\n ... \nUNTIL\n loop will appear a spare word such as \nEND\n or \nELSE\n without its corresponding beginning (\nIF\n, \nWHILE\n, ...).\n\n\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nBEGIN\n    REPEAT\n        IF (x\n0) x++; END\n            y++;\n        END // Error: expecting for [UNTIL]\n    UNTIL (x\n=0);\nEND\n\n\n\n\nIn this case, the \nEND\n of the \nIF\n has been put twice,\ninterpreting the compiler that the second \nEND\n intends to close the \nREPEAT\n.\n\n\n\n\nOr finally, that you have forgotten to put the \nUNTIL\n of the \nREPEAT\n.\n\n\n\n\n\n\nSee: \nSyntax\n - \n Statement REPEAT\n - \nIF\n - \nWHILE", 
            "title": "expecting for [UNTIL]"
        }, 
        {
            "location": "/expecting_for_[until]/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    REPEAT\n    //...\n    END // Error: expecting for [UNTIL]\nEND -   Inside the  REPEAT  ...  UNTIL  loop will appear a spare word such as  END  or  ELSE  without its corresponding beginning ( IF ,  WHILE , ...).   {#9999,Example  PROGRAM my_game;\nBEGIN\n    REPEAT\n        IF (x 0) x++; END\n            y++;\n        END // Error: expecting for [UNTIL]\n    UNTIL (x =0);\nEND  In this case, the  END  of the  IF  has been put twice,\ninterpreting the compiler that the second  END  intends to close the  REPEAT .   Or finally, that you have forgotten to put the  UNTIL  of the  REPEAT .    See:  Syntax  -   Statement REPEAT  -  IF  -  WHILE", 
            "title": "Example:}"
        }, 
        {
            "location": "/local_variable_that_can_not_be_accesseddot/", 
            "text": "In the indicated position of the program, the aim is to access a variable\nof another process. But this is not possible, as this variable is not local\nin the other process.\n\n\nIt is necessary to verify that the variable intended to access either is defined inside the \nLOCAL\n section of the program, or is a local variable predefined in the language (such as \nx\n, \ny\n, \ngraph\n,\n\nsize\n, ...).\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    id_my_process;\n    score=0;\nBEGIN\n    id_my_process=my_process();\n    id_my_process.x=0;\n    id_my_process.score=0; // Error: Local variable that can not be accessed.\nEND\nPROCESS my_process()\nBEGIN\n    //...\nEND\n\n\n\n\nIn this case, the aim is to access the \nscore\n of \nmy_process\n, but\n\nscore\n is just a single \nGLOBAL\n variable and not a \nLOCAL\n\nvariable of every process. This can also happen by trying to access a constant\n(defined in \nCONST\n) or an expression like:\n\n\nx=id_my_process.(x+1);\n\n\nIn this example, the expression makes no sense at all. The following expression would probably be the one intended to be used:\n\n\nx=id_my_process.x+1;\n\n\n(equivalent to \nx=(id_my_process.x)+1;\n).\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of local data", 
            "title": "Local variable that can not be accessed."
        }, 
        {
            "location": "/local_variable_that_can_not_be_accesseddot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    id_my_process;\n    score=0;\nBEGIN\n    id_my_process=my_process();\n    id_my_process.x=0;\n    id_my_process.score=0; // Error: Local variable that can not be accessed.\nEND\nPROCESS my_process()\nBEGIN\n    //...\nEND  In this case, the aim is to access the  score  of  my_process , but score  is just a single  GLOBAL  variable and not a  LOCAL \nvariable of every process. This can also happen by trying to access a constant\n(defined in  CONST ) or an expression like:  x=id_my_process.(x+1);  In this example, the expression makes no sense at all. The following expression would probably be the one intended to be used:  x=id_my_process.x+1;  (equivalent to  x=(id_my_process.x)+1; ).   See:  Syntax  -  Declaration of local data", 
            "title": "Example"
        }, 
        {
            "location": "/invalid_parameterdot/", 
            "text": "The processes can receive parameters in the following kinds of data:\n\n\n\n\n\n\nA predefined local variable (like \nx\n, \nsize\n, \nflags\n, ...).\n\n\n\n\n\n\nA local variable defined inside the \nLOCAL\n section.\n\n\n\n\n\n\nA global variable defined inside the \nGLOBAL\n section.\n\n\n\n\n\n\nA private variable of the process declared inside the \nPRIVATE\n section\nof the process.\n\n\n\n\n\n\nA private variable \nnot declared\n inside the \nPRIVATE\n section.\n\n\n\n\n\n\nIn all these cases, it is understood that a variable can be referred to a\nvariable, to a specific position of a table or to an element inside a structure.\n\n\nIn the indicated position of the program, the aim is either to receive a parameter in an object different from those aforementioned, or to indicate an expression instead of a simple variable. These are some examples of invalid parameters' declarations:\n\n\nPROCESS my_process(my_constant)\n\n\nA parameter can not be received in a constant.\n\n\nPROCESS my_process(x*2)\n\n\nA parameter can not be received in an expression.\n\n\nPROCESS my_process(x=0)\n\n\nA parameter can not be received in an assignment.\n\n\n\n\nSee: \nSyntax\n - \nParameters of a process", 
            "title": "Invalid parameter."
        }, 
        {
            "location": "/expecting_for_another_parameterdot/", 
            "text": "In the calls to processes or functions, it is necessary to put as many values or expressions as parameters are required, all of them inside the same \nbracket\n and separated by \ncommas (,)\n. This error appears when the bracket is closed after a \ncomma\n, as in the following example:\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    signal(id, ); // Error: expecting for another parameter.\nEND\n\n\n\n\nThere are two reasons for that: either a comma has been accidentally put after the last parameter, or the last parameter has been omitted (like in the previous example).\n\n\n\n\nSee: \nSyntax\n - \nParameters of a process", 
            "title": "expecting for another parameter."
        }, 
        {
            "location": "/expecting_for_another_parameterdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    signal(id, ); // Error: expecting for another parameter.\nEND  There are two reasons for that: either a comma has been accidentally put after the last parameter, or the last parameter has been omitted (like in the previous example).   See:  Syntax  -  Parameters of a process", 
            "title": "Example"
        }, 
        {
            "location": "/invalid_number_of_parametersdot/", 
            "text": "The process or function has a number of parameters different from the one that appears in the indicated position of the program.\n\n\nIf it is a function, access \nGlossary\n to consult the required parameters\nor place the cursor on the name of the function in the program and then press \nF1\n.\n\n\nIf it is a \nprocess\n, then it is possible that in the indicated position, the number of parameters is correct, but a call to this process has previously appeared in the program with a different number of parameters.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    my_process();\nEND\nPROCESS my_process(x, y) // Error: Invalid number of parameters.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the error is not in the definition of the process as it is shown,\nbut in the previous call to that process (\nmy_process();\n). This is like this because when the compiler finds a call to a process that does not know, it records it like a new process and notes down its number of parameters.\nIf the next time it finds that process the number of parameters does not coincide with those it had recorded, then the error appears.\n\n\nTherefore, if the call or definition of the process shown in the program is correct, then use the search option (\nALT-F\n) to check the number of parameters in the previous calls to that process.\n\n\n\n\nSee: \nSyntax\n -  \nParameters of a process", 
            "title": "Invalid number of parameters."
        }, 
        {
            "location": "/invalid_number_of_parametersdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    my_process();\nEND\nPROCESS my_process(x, y) // Error: Invalid number of parameters.\nBEGIN\n    //...\nEND  In this example, the error is not in the definition of the process as it is shown,\nbut in the previous call to that process ( my_process(); ). This is like this because when the compiler finds a call to a process that does not know, it records it like a new process and notes down its number of parameters.\nIf the next time it finds that process the number of parameters does not coincide with those it had recorded, then the error appears.  Therefore, if the call or definition of the process shown in the program is correct, then use the search option ( ALT-F ) to check the number of parameters in the previous calls to that process.   See:  Syntax  -   Parameters of a process", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[semicolon]/", 
            "text": "The compiler is expecting for a \nsemicolon (;)\n in the indicated position of the program.\n\n\nIn the language, the following points of the program must be indicated with semicolons:\n\n\n\n\n\n\nThe end of the \noptions of compilation\n.\n\n\n\n\n\n\nThe end of the \ndeclaration PROGRAM\n.\n\n\n\n\n\n\nThe end of a \ndeclaration of data\n.\n\n\n\n\n\n\nThe end of a \ndeclaration IMPORT\n.\n\n\n\n\n\n\nThe end of the following statements:\n\n\nAssignments or increments of data\n.\n\n\nCalls to processes\n.\n\n\nCalls to functions\n.\n\n\nFRAME\n, \nRETURN\n, \nDEBUG\n, \nBREAK\n and \nCONTINUE\n.\n\n\n\n\n\n\nThe end of the beginning of a loop \nFROM\n.\n\n\n\n\n\n\nAnd as division of the different parts of a \nFOR\n statement.\n\n\n\n\n\n\nThe compiler will indicate when the symbol \n;\n is missing in any of these periods.\n\n\nMoreover, this symbol can be put in other specific points of the programs. For instance, after any other type of statement, even if, in this case, it will be optional and, therefore, the compiler will not notice its lack.\n\n\n\n\nSee: \nSyntax\n - \n ;", 
            "title": "expecting for [;]"
        }, 
        {
            "location": "/[break]_does_not_appear_inside_a_loopdot/", 
            "text": "The \nBREAK\n statement makes the program continue after the loop that is running.\n\n\nThis statement is used to exit the following loops:\n\n\nLOOP\n ... \nEND\n\n\nFROM\n .. \nTO\n .. \nSTEP\n .. ... \nEND\n\n\nREPEAT\n ... \nUNTIL\n \n(\n .. \n)\n\n\nWHILE\n \n(\n .. \n)\n ... \nEND\n\n\nFOR\n \n(\n .. \n;\n .. \n;\n .. \n)\n ... \nEND\n\n\nA \nBREAK\n statement will make the program continue to be executed after the \nEND\n or \nUNTIL\n of the loop closest to the statement.\n\nBREAK\n can only appear inside one of these loops.\n\n\nIf there are several nested loops (one inside another one) the \nBREAK\n statement will exit the inner loop.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    LOOP\n        REPEAT\n            IF (key(_esc)) BREAK; END\n            //...\n        UNTIL (x==0);\n        //...\n    END\n    BREAK; // Error: [BREAK] does not appear inside a loop.\nEND\n\n\n\n\nIn this example the \nBREAK\n statement will exit \nREPEAT\n ... \nUNTIL\n (when the \nESC\n key is pressed)\nbut not \nLOOP\n ... \nEND\n.\n\n\n\n\nSee: \nSyntax\n - \nStatement BREAK", 
            "title": "[BREAK] does not appear inside a loop."
        }, 
        {
            "location": "/[break]_does_not_appear_inside_a_loopdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    LOOP\n        REPEAT\n            IF (key(_esc)) BREAK; END\n            //...\n        UNTIL (x==0);\n        //...\n    END\n    BREAK; // Error: [BREAK] does not appear inside a loop.\nEND  In this example the  BREAK  statement will exit  REPEAT  ...  UNTIL  (when the  ESC  key is pressed)\nbut not  LOOP  ...  END .   See:  Syntax  -  Statement BREAK", 
            "title": "Example"
        }, 
        {
            "location": "/[continue]_does_not_appear_inside_a_loopdot/", 
            "text": "The \nCONTINUE\n statement makes the program finish the current iteration of the loop that is running.\n\n\nThis statement is used to go to the beginning/end of the following loops:\n\n\nLOOP\n ... \nEND\n\n\nA \nCONTINUE\n statement inside this loop will jump to \nLOOP\n.\n\n\nFROM\n .. \nTO\n .. \nSTEP\n .. ... \nEND\n\n\nA \nCONTINUE\n statement inside this loop will make the increment (\nSTEP\n) and, if the value indicated in the \nTO\n has not been passed, the program will continue at the beginning of the loop.\n\n\nREPEAT\n ... \nUNTIL\n \n(\n .. \n)\n\n\nA \nCONTINUE\n inside this loop will jump to \nUNTIL\n.\n\n\nWHILE\n \n(\n .. \n)\n ... \nEND\n\n\nA \nCONTINUE\n inside this loop will jump to \nWHILE\n.\n\n\nFOR\n \n(\n .. \n;\n .. \n;\n .. \n)\n ... \nEND\n\n\nA \nCONTINUE\n inside this loop will make the increment\nand the comparison. If the latter is true, the program will continue at the beginning of the loop. But if it is false, the program will continue after the \nEND\n of the \nFOR\n.\n\n\nCONTINUE\n \nmust obligatory appear inside one of these loops\n.\n\n\nIf there are several nested loops (one inside another) the \nCONTINUE\n statement will take effect only in the inner loop.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    FOR (x=0, y=0;x\n10;x++)\n        IF (x\n5) CONTINUE; END\n        y++;\n    END\nEND\n\n\n\n\nIn this example, after the whole loop has been executed, \nx\n will be equal to \n10\n and \ny\n will be equal to \n5\n as, providing that \nx\n is less than 5, the \nCONTINUE\n statement prevents the \ny++;\n statement from being executed.\n\n\n\n\nSee: \nSyntax\n - \nStatement CONTINUE", 
            "title": "[CONTINUE] does not appear inside a loop."
        }, 
        {
            "location": "/[continue]_does_not_appear_inside_a_loopdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    FOR (x=0, y=0;x 10;x++)\n        IF (x 5) CONTINUE; END\n        y++;\n    END\nEND  In this example, after the whole loop has been executed,  x  will be equal to  10  and  y  will be equal to  5  as, providing that  x  is less than 5, the  CONTINUE  statement prevents the  y++;  statement from being executed.   See:  Syntax  -  Statement CONTINUE", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[case/", 
            "text": "The syntax of the \nSWITCH\n statement is, broadly speaking, as follows:\n\n\n[SWITCH](switch_statement.md) [( ]((__).md)expression[ )]((__).md)\n\n    [CASE](case.md) value[ :](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n    [CASE](case.md) value[ .. ](dotdot.md)value[ :](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n    [CASE](case.md) value, value, value[ :](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n    //...\n\n    [DEFAULT](default.md) [:](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n[END](end.md)\n\n\n\nThe position indicated in the program is inside a \nSWITCH\n statement,\nbut out of a \nCASE\n or \nDEFAULT\n section. For that reason, the compiler was expecting for one of the three following statements to appear in that position:\n\n\n\n\n\n\nThe reserved word \nCASE\n starting a new section to be executed\nwhen the expression would coincide with the indicated value.\n\n\n\n\n\n\nThe reserved word \nDEFAULT\n starting a section by default to be executed when the expression would not coincide with any of the values\nindicated in the different sections \nCASE\n.\n\n\n\n\n\n\nThe reserved word \nEND\n finishing the \nSWITCH\n statement.\n\n\n\n\n\n\nFor a more detailed description of the \nSWITCH\n statement,\nconsult the syntax of the language.\n\n\n\n\nSee: \nSyntax\n - \nStatement SWITCH", 
            "title": "expecting for [CASE"
        }, 
        {
            "location": "/expecting_for_[end]/", 
            "text": "An \nEND\n of the \nCASE\n or \nDEFAULT\n was waited for inside the \nSWITCH\n statement.\n\n\nInside the reserved words \nSWITCH\n and \nEND\n one or more sections of the following kind were waited for:\n\n\nCASE\n ... \nEND\n\n\nDEFAULT\n ... \nEND\n\n\nIn the program, there is one of these sections that was expected to finish with the reserved word \nEND\n, but it finishes with another word. The most usual case is the following one:\n\n\n\n\nThat a \nREPEAT\n or a \nIF\n have been lost, finishing the block\nof statements with an \nUNTIL\n or an \nELSE\n. In this case, the associated \nREPEAT\n or \nIF\n must be looked for.\n\n\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    SWITCH (x)\n        CASE 0:\n            //REPEAT\n            //...\n            UNTIL (key(_esc)); // Error: expecting for [END]\n        END\n    END\nEND\n\n\n\n\nIn this example, the section that started with \nCASE\n has finished with \nUNTIL\n (because \nREPEAT\n has been accidentally commented), and the compiler was expecting this section to finish with \nEND\n.\n\n\n\n\nSee: \nSyntax", 
            "title": "expecting for [END]"
        }, 
        {
            "location": "/expecting_for_[end]/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    SWITCH (x)\n        CASE 0:\n            //REPEAT\n            //...\n            UNTIL (key(_esc)); // Error: expecting for [END]\n        END\n    END\nEND  In this example, the section that started with  CASE  has finished with  UNTIL  (because  REPEAT  has been accidentally commented), and the compiler was expecting this section to finish with  END .   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[process]/", 
            "text": "or [FUNCTION]}\n\n\nThe compiler has interpreted that, in the indicated position of the program, the main program (\nPROGRAM\n ... \nBEGIN\n ... \nEND\n), or the last process (\nPROCESS\n or function (\nFUNCTION\n) and have finished and then, it was expected that either a process would start or the program would finish.\n\n\nThe most frequent is to have duplicated \nEND\n inside the last block of statements \nBEGIN\n ... \nEND\n.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    IF (x\n0) x++; END\n    END\n    FRAME; // Error: expecting for [PROCESS].\nEND\n\n\n\n\nIn this example, the \nEND\n of the \nIF\n has been accidentally put twice, interpreting the compiler that the second is that of \nEND\n\nof the \nBEGIN\n. Therefore, after this last \nEND\n only\nthe end of the program or the reserved word \nPROCESS\n or \nFUNCTION\n \ncan come, marking the beginning of a new process. When a \nFRAME\n statement is placed in that position, the compiler reports the error.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of process", 
            "title": "expecting for [PROCESS]"
        }, 
        {
            "location": "/expecting_for_[process]/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    IF (x 0) x++; END\n    END\n    FRAME; // Error: expecting for [PROCESS].\nEND  In this example, the  END  of the  IF  has been accidentally put twice, interpreting the compiler that the second is that of  END \nof the  BEGIN . Therefore, after this last  END  only\nthe end of the program or the reserved word  PROCESS  or  FUNCTION  \ncan come, marking the beginning of a new process. When a  FRAME  statement is placed in that position, the compiler reports the error.   See:  Syntax  -  Declaration of process", 
            "title": "Example"
        }, 
        {
            "location": "/a_table_can_not_be_specified_as_a_parameterdot/", 
            "text": "It is not necessary to declare the \nparameters of the process\n inside the \nPRIVATE\n section, as they are automatically declared. But if they are declared, they must be declared as variables, not as tables or structures, and they must not be initialised.\n\n\nYou have probably intended to use the same name for two different objects. On the one hand, for the parameter of the process and, on the other hand, for a \nPRIVATE\n table of the same process.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\nPROCESS my_process(a)\nPRIVATE\n    a[9]; // Error: A table can not be specified as a parameter.\nBEGIN\n    //...\nEND\n\n\n\n\nThe compiler interprets that the parameter \na\n is being typified as a table of 10 positions and, since a table can not be passed as a parameter, it reports the error.\n\n\n\n\nSee: \nSyntax\n - \nParameters of a process", 
            "title": "A table can not be specified as a parameter."
        }, 
        {
            "location": "/a_table_can_not_be_specified_as_a_parameterdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\nPROCESS my_process(a)\nPRIVATE\n    a[9]; // Error: A table can not be specified as a parameter.\nBEGIN\n    //...\nEND  The compiler interprets that the parameter  a  is being typified as a table of 10 positions and, since a table can not be passed as a parameter, it reports the error.   See:  Syntax  -  Parameters of a process", 
            "title": "Example"
        }, 
        {
            "location": "/a_parameter_can_not_be_initialiseddot/", 
            "text": "It is not necessary to declare the \nparameters of the process\n inside the \nPRIVATE\n section, as they are automatically declared. But if they are declared, they must be declared as variables, not as tables or structures, and they must not be initialised.\n\n\nYou have probably intended to use the same name for two different objects. On the one hand, for the parameter of the process and, on the other hand, for a \nPRIVATE\n variable of the same process.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\nPROCESS my_process(a)\nPRIVATE\n    a=0; // Error: A parameter can not be initialised.\nBEGIN\n    //...\nEND\n\n\n\n\nThe compiler interprets that the parameter \na\n is being initialised at \n0\n\nand, as it is not allowed to initialise a parameter (as it will take its value depending on the call to the process), the error is reported.\n\n\n\n\nSee: \nSyntax\n - \nParameters of a process", 
            "title": "A parameter can not be initialised."
        }, 
        {
            "location": "/a_parameter_can_not_be_initialiseddot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\nPROCESS my_process(a)\nPRIVATE\n    a=0; // Error: A parameter can not be initialised.\nBEGIN\n    //...\nEND  The compiler interprets that the parameter  a  is being initialised at  0 \nand, as it is not allowed to initialise a parameter (as it will take its value depending on the call to the process), the error is reported.   See:  Syntax  -  Parameters of a process", 
            "title": "Example"
        }, 
        {
            "location": "/the_end_came_inside_a_commentdot/", 
            "text": "The end of the program has come inside a comment of several lines\n(those defined between the\n /*\n and\n */\n symbols).\n\n\nThis error appears because any comment has not been closed. Therefore, check that all the comments opened with the\n /*\n symbol have their corresponding\n */\n symbol closing them.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    /* Beginning of the comment\n    FRAME;\nEND // Error: The end came inside a comment.\n\n\n\n\n\n\nSee: \nSyntax\n - \nDefinition of comments", 
            "title": "The end came inside a comment."
        }, 
        {
            "location": "/the_end_came_inside_a_commentdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    /* Beginning of the comment\n    FRAME;\nEND // Error: The end came inside a comment.   See:  Syntax  -  Definition of comments", 
            "title": "Example"
        }, 
        {
            "location": "/it_is_not_possible_to_access_external_private_datadot/", 
            "text": "In the indicated position of the program, there is an attempt to access a \nPRIVATE\n variable of another process. It is not allowed.\n\n\nIf the aim is to access a variable of a process from another process, this variable must be declared inside the \nLOCAL\n section.\n\n\nExample:}\n\n\nPROGRAM my_game;\nPRIVATE n;\nBEGIN\n    my_process();\n    //...\nEND\nPROCESS my_process()\nPRIVATE n;\nBEGIN\n    father.n=0; // It is not possible to access external PRIVATE data.\nEND\n\n-\n\n\nIt is not possible to access \nPRIVATE\n data, even when the accessed process is of the same kind as the process that is trying to access the variable.\n\n\nThe correct way to declare the variable \nn\n in the previous example is as follows:\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nLOCAL n;\nBEGIN\n    my_process();\n    //...\nEND\nPROCESS my_process()\nBEGIN\n    father.n=0;\nEND\n\n\n\n\nKeep in mind that all the processes of the program will have the data declared inside the \nLOCAL\n section (all the processes of the previous example\nwill have an own variable named \nn\n).\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of PRIVATE data", 
            "title": "It is not possible to access external PRIVATE data."
        }, 
        {
            "location": "/it_is_not_possible_to_access_external_private_datadot/#example", 
            "text": "PROGRAM my_game;\nPRIVATE n;\nBEGIN\n    my_process();\n    //...\nEND\nPROCESS my_process()\nPRIVATE n;\nBEGIN\n    father.n=0; // It is not possible to access external PRIVATE data.\nEND -  It is not possible to access  PRIVATE  data, even when the accessed process is of the same kind as the process that is trying to access the variable.  The correct way to declare the variable  n  in the previous example is as follows:  {#9999,Example  PROGRAM my_game;\nLOCAL n;\nBEGIN\n    my_process();\n    //...\nEND\nPROCESS my_process()\nBEGIN\n    father.n=0;\nEND  Keep in mind that all the processes of the program will have the data declared inside the  LOCAL  section (all the processes of the previous example\nwill have an own variable named  n ).   See:  Syntax  -  Declaration of PRIVATE data", 
            "title": "Example:}"
        }, 
        {
            "location": "/a_structure_must_contain_one_elemen/", 
            "text": "In the indicated position of the program, the aim is to close the declaration of a structure without any element (field) defined in it with \nEND\n.\n\n\nA structure (\nSTRUCT\n) is like a list of index cards\n(records) with several pieces of information (fields) in every index card.\n\n\nSTRUCT name_structure[10]\n\n\n**x, y;**\n\n\n\nEND\n\n\nIn this example, the structure (set of index cards) is called \nname_structure\n\nand it has \n10 records\n (ten index cards) with \n2 fields\n each one (with two pieces of information; \nx\n and \ny\n).\n\n\nTherefore, defining a structure without fields makes no sense (since it is the same as defining a set of index cards with no piece of information).\n\n\nThen, to access the information of the index cards, the structure is used as follows (suppose that in the global variable \nn\n the aim is to put the value\n\ny\n of the index card number \n5\n).\n\n\nn=name_structure[5].y;\n\n\nAn invalid program is shown now.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT my_structure[10]\n\n    END // Error: A structure must contain one element, at least.\nBEGIN\n    //...\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of structure", 
            "title": "A structure must contain one elemen"
        }, 
        {
            "location": "/a_structure_must_contain_one_elemen/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT my_structure[10]\n\n    END // Error: A structure must contain one element, at least.\nBEGIN\n    //...\nEND   See:  Syntax  -  Declaration of structure", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_an_element_of_the_structuredot/", 
            "text": "In the indicated position of the program, the aim is to declare an invalid element (field) of the structure.\n\n\nA structure can just have the following kind of fields:\n\n\n\n\n\n\nA variable. In this case, the name of the declaration without being initialised must be indicated.\n\n\n\n\n\n\nA table, indicating its name and, subsequently, its length in square brackets (keep in mind that a table declared like \nmy_table[9];\n is a table of \n10\n positions, from my_table[0] to my_table[10]). They must not be initialised.\n\n\n\n\n\n\nAnother structure. It is possible to include as many structures inside other structures as necessary, with no limit of nesting. An example of structures nesting is shown now.\n\n\n\n\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT my_structure[9]\n        elements;\n        STRUCT data[9]\n            x, y;\n        END\n    END\n    a, b;\nBEGIN\n    FROM a=0 TO 9;\n        my_structure[a].elements=-1;\n        FROM b=0 TO 9;\n            my_structure[a].data[b].x=-1;\n            my_structure[a].data[b].y=-1;\n        END\n    END\n    //...\nEND\n\n\n\n\nIn this example, every record of \nmy_structure\n will have a variable\ncalled \nelements\n and another structure with 10 elements, each one with two\nvariables: \nx\n and \ny\n.\n\n\nNext, in the same example, it is possible to see an example of access\nto that structure with two nested loops that initialise all the values of the structure at\n -1\n.\n\n\nTo see how to initialise the values of a structure in the definition itself, go to the topic \nsyntax\n.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of structure", 
            "title": "expecting for an element of the structure."
        }, 
        {
            "location": "/expecting_for_an_element_of_the_structuredot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT my_structure[9]\n        elements;\n        STRUCT data[9]\n            x, y;\n        END\n    END\n    a, b;\nBEGIN\n    FROM a=0 TO 9;\n        my_structure[a].elements=-1;\n        FROM b=0 TO 9;\n            my_structure[a].data[b].x=-1;\n            my_structure[a].data[b].y=-1;\n        END\n    END\n    //...\nEND  In this example, every record of  my_structure  will have a variable\ncalled  elements  and another structure with 10 elements, each one with two\nvariables:  x  and  y .  Next, in the same example, it is possible to see an example of access\nto that structure with two nested loops that initialise all the values of the structure at  -1 .  To see how to initialise the values of a structure in the definition itself, go to the topic  syntax .   See:  Syntax  -  Declaration of structure", 
            "title": "Example"
        }, 
        {
            "location": "/it_is_not_a_type_of_processdot/", 
            "text": "The \nTYPE\n operator may only be used if it goes before a process name of the program or the word \nmouse\n (to detect collisions with the mouse pointer).\n\n\nIn the indicated position of the program, it is not preceding a process name. It is probable either that the process name has been incorrectly written or that the type of a process is intended to be obtained from its \nidentifying code\n.\n\n\nThere is a way to obtain the type of a process having its \nidentifying code\n, as it is shown below (suppose that we have the identifier in the \nid2\n variable).\n\n\n**id2.reserved.process_type**\n\n\n\nInstead of \nTYPE id2\n that is not allowed (as there is no process\nnamed \nid2\n, since \nid2\n is a variable).\n\n\nNext, an example of correct use of the \nTYPE\n operator is shown\n(with the aim of obtaining the \nidentifying code\n of a process).\n\n\nExample\n\n\nPROGRAM my_game;\nPRIVATE\n    id2;\nBEGIN\n    //...\n    id2=get_id(TYPE my_process);\n    //...\n    id2=get_id(TYPE id2); // Error: It is not a type of process.\n    //...\nEND\nPROCESS my_process()\nBEGIN\n    //...\nEND\n\n\n\n\nAs it can be noticed, the \nTYPE\n operator requires the process name of the program with no brackets or parameters.\n\n\n\n\nSee: \nSyntax\n - \nTypes of processes", 
            "title": "It is not a type of process."
        }, 
        {
            "location": "/it_is_not_a_type_of_processdot/#example", 
            "text": "PROGRAM my_game;\nPRIVATE\n    id2;\nBEGIN\n    //...\n    id2=get_id(TYPE my_process);\n    //...\n    id2=get_id(TYPE id2); // Error: It is not a type of process.\n    //...\nEND\nPROCESS my_process()\nBEGIN\n    //...\nEND  As it can be noticed, the  TYPE  operator requires the process name of the program with no brackets or parameters.   See:  Syntax  -  Types of processes", 
            "title": "Example"
        }, 
        {
            "location": "/the_size_can_not_be_calculateddot/", 
            "text": "The \nsizeof()\n function may be used to obtain the number of elements of a table or structure. For that purpose, it requires in \nbrackets\n, the name of the table or structure (with no square brackets or index).\n\n\nIt can also be used with the name of a variable but, in this case,\nthe function will always return 1.\n\n\nIt can indistinctly be used with global, local or private data.\n\n\nIn the indicated position of the program, the aim is to obtain the size of an object that is not a variable, table or structure. For instance, this error\nwill appear if the aim is to obtain the size of a constant, function, process, etc.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    my_constant=99;\nGLOBAL\n    a=sizeof(my_constant); // Error: The size can not be calculated.\nBEGIN\n    //...\nEND\n\n\n\n\nThis example will provoke the error on trying to obtain the number of elements\nof a \nconstant\n, as a constant is not an object having a size, but just a synonymous of the numeric values that it represents.\n\n\n\n\nSee: \nSyntax\n - \nsizeof", 
            "title": "The size can not be calculated."
        }, 
        {
            "location": "/the_size_can_not_be_calculateddot/#example", 
            "text": "PROGRAM my_game;\nCONST\n    my_constant=99;\nGLOBAL\n    a=sizeof(my_constant); // Error: The size can not be calculated.\nBEGIN\n    //...\nEND  This example will provoke the error on trying to obtain the number of elements\nof a  constant , as a constant is not an object having a size, but just a synonymous of the numeric values that it represents.   See:  Syntax  -  sizeof", 
            "title": "Example"
        }, 
        {
            "location": "/usecolon_import_double_quotenamedotdlldouble_quote/", 
            "text": "The compiler was expecting for the file name to appear in inverted commas after the reserved word \nIMPORT\n.\n\n\nTo declare the use of an external library, it is necessary to put a declaration\nlike that of the following example.\n\n\nExample\n\n\nPROGRAM my_game;\nIMPORT \nlibrary.dll\n;\nBEGIN\n    //...\nEND\n\n\n\n\nThis program declares the use of the library called \nlibrary.dll\n\n(alleged name of an hypothetical library of external functions).\n\n\nThis declaration must be put just before the \nPRIVATE\n section or the\n\nBEGIN\n of the main program. It is possible to make several \nIMPORT\n declarations in a row to declare the use of more than one library\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of libraries", 
            "title": "Use: import \"name.dll\""
        }, 
        {
            "location": "/usecolon_import_double_quotenamedotdlldouble_quote/#example", 
            "text": "PROGRAM my_game;\nIMPORT  library.dll ;\nBEGIN\n    //...\nEND  This program declares the use of the library called  library.dll \n(alleged name of an hypothetical library of external functions).  This declaration must be put just before the  PRIVATE  section or the BEGIN  of the main program. It is possible to make several  IMPORT  declarations in a row to declare the use of more than one library   See:  Syntax  -  Declaration of libraries", 
            "title": "Example"
        }, 
        {
            "location": "/use_of_an_invalid_external_dlldot/", 
            "text": "In the indicated position of the program, the aim is to load an invalid \nDLL\n, which is explained for the following reasons:\n\n\n\n\n\n\nThe file with the \nDLL\n has become corrupted because it has been stored in a damaged environment.\n\n\n\n\n\n\nIt is not a \nDLL\n specifically designed for DIV Games Studio.\n\n\n\n\n\n\nThe file with extension \nDLL\n is not found in the path specified by the \nIMPORT\n statement.\n\n\n\n\n\n\nIt is not possible to use \nDLL\n of other languages, as they are not compatible with this language even if all the files have the extension \nDLL\n.\n\n\nWhen this \nDLL\n has been prepared for this language, check the installation instructions and verify either that the file with extension \nDLL\n is in the directory of DIV Games Studio, or that the \nIMPORT\n statement specifies the complete path of that file.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of libraries", 
            "title": "Use of an invalid external DLL."
        }, 
        {
            "location": "/expression_with_no_sensedot/", 
            "text": "In the indicated position of the program, the compiler has supposed that a statement of the following types started:\n\n\nAssignments, e.g.:\n\n\nlt;data\ngt;** = **\nlt;expression\ngt;** ; **\n\nIncrements or decrements, e.g.:\n\n\nlt;data\ngt;** ++ ;**\n\nCall to a process or function, e.g.:\n\n\nlt;name_process\ngt;** ( **...** ) ;**\n\n\n\nNevertheless, it has found an expression that apparently makes no sense, as once its operations have been done, its result is not used for any purpose.\n\n\nIt is probably an isolated operator that has been left out of a statement, for instance, because an operator has been lost.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    x+1; // Error: Expression with no sense.\n    //...\nEND\n\n\n\n\nThis error is reported in this example, as the \nx+1;\n statement is not useful; it adds the \nx\n variable and the constant \n1\n but then, this result is not used for any purpose. If the aim is to add \n1\n to the \nx\n variable, then the following statement must be used:\n\n\n**x=x+1;**\n\n\n\nHere, the \nx\n variable and the constant \n1\n are added and then this result is assigned to the \nx\n variable. It could have also been done with the \nx++;\n statement (incrementing x).\n\n\n\n\nSee: \nSyntax\n - \nStatement of assignment", 
            "title": "Expression with no sense."
        }, 
        {
            "location": "/expression_with_no_sensedot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    x+1; // Error: Expression with no sense.\n    //...\nEND  This error is reported in this example, as the  x+1;  statement is not useful; it adds the  x  variable and the constant  1  but then, this result is not used for any purpose. If the aim is to add  1  to the  x  variable, then the following statement must be used:  **x=x+1;**  Here, the  x  variable and the constant  1  are added and then this result is assigned to the  x  variable. It could have also been done with the  x++;  statement (incrementing x).   See:  Syntax  -  Statement of assignment", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[colon]/", 
            "text": "The indicated position in the program is inside a \nSWITCH\n statement,\nafter the beginning of a section with \nCASE\n value\n. For that reason, the compiler was expecting for the symbol\n :\n to appear in this position preceding the statements of that section.\n\n\nThe syntax of the \nSWITCH\n statement is, broadly speaking, as follows:\n\n\n[SWITCH](switch_statement.md) [( ]((__).md)expression[ )](or__pipepipe__pipe.md)\n\n    [CASE](case.md) value[ :](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n    [CASE](case.md) value**#, .. **value[ :](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n    [CASE](case.md) value, value, value[ :](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n    //...\n\n    [DEFAULT](default.md) [:](colon.md)\n\n        statements[;](semicolon.md)\n\n    [END](end.md)\n\n[END](end.md)\n\n\n\nFor a more detailed description of the \nSWITCH\n statement,\nconsult the syntax of the language.\n\n\n\n\nSee: \nSyntax\n - \nStatement SWITCH", 
            "title": "expecting for [:]"
        }, 
        {
            "location": "/expecting_for_[semicolon]/", 
            "text": "The compiler is expecting for a \nsemicolon (;)\n in the indicated position of the program.\n\n\nIn the language, the following points of the program must be indicated with semicolons:\n\n\n\n\n\n\nThe end of the \noptions of compilation\n.\n\n\n\n\n\n\nThe end of the \ndeclaration PROGRAM\n.\n\n\n\n\n\n\nThe end of a \ndeclaration of data\n.\n\n\n\n\n\n\nThe end of a \ndeclaration IMPORT\n.\n\n\n\n\n\n\nThe end of the following statements:\n\n\nAssignments or increments of data\n.\n\n\nCalls to processes\n.\n\n\nCalls to functions\n.\n\n\nFRAME\n, \nRETURN\n, \nDEBUG\n, \nBREAK\n and \nCONTINUE\n.\n\n\n\n\n\n\nThe end of the beginning of a loop \nFROM\n.\n\n\n\n\n\n\nAnd as division of the different parts of a \nFOR\n statement.\n\n\n\n\n\n\nThe compiler will indicate when the symbol \n;\n is missing in any of these periods.\n\n\nMoreover, this symbol can be put in other specific points of the programs. For instance, after any other type of statement, even if, in this case, it will be optional and, therefore, the compiler will not notice its lack.\n\n\n\n\nSee: \nSyntax\n - \n ;", 
            "title": "expecting for [;]"
        }, 
        {
            "location": "/expecting_for_a_variabledot/", 
            "text": "The compiler was expecting for a global, local or private variable of the process in the indicated position of the program.\n\n\nThe syntax of the \nFROM\n loop statement is the following one:\n\n\nFROM\n \nvariable\n=\nconstant\n \nTO\n \nconstant\n \nSTEP\n \nconstant\n;\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) **;**\n\n...\n\n\n\nEND\n\n\nBeing the \nSTEP \nconstant\n declaration optional.\n\n\nAfter the reserved word \nFROM\n, the \nname\n of a variable (normally local or private) of the process must appear directly.\n\n\nIf the aim is to use a variable of another process, a table or an element of a structure as a counter, the \nFOR\n statement must be used instead of \nFROM\n, as it allows us to define the conditions of the loop more freely.\n\n\n\n\nSee: \nSyntax\n - \nStatement FROM", 
            "title": "expecting for a variable."
        }, 
        {
            "location": "/expecting_for_[equal]/", 
            "text": "To define a constant, a symbol \n=\n must be put after the name of the constant.\n\n\nThe compiler has understood that the last defined word was the name of a new \nconstant\n and, in the indicated position, it was expected for the symbol of assignment (\n=\n) to be shown.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    a=0;\n    b=1;\n    c,d; // Error: expecting for [=].\nBEGIN\n    //...\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of data", 
            "title": "expecting for [=]"
        }, 
        {
            "location": "/expecting_for_[equal]/#example", 
            "text": "PROGRAM my_game;\nCONST\n    a=0;\n    b=1;\n    c,d; // Error: expecting for [=].\nBEGIN\n    //...\nEND   See:  Syntax  -  Declaration of data", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[to]/", 
            "text": "The compiler was expecting for the reserved word \nTO\n of the \nFROM\n statement in the indicated position of the program.\n\n\nThe syntax of the \nFROM\n loop statement is the following one:\n\n\nFROM\n \nvariable\n=\nconstant\n \nTO\n \nconstant\n\n\nSTEP\n \nconstant\n;\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) **;**\n\n...\n\n\n\nEND\n\n\nBeing the \nSTEP \nconstant\n declaration optional.\n\n\nAfter the reserved word \nFROM\n, the \nname\n of a variable (normally local or private) of the process must appear directly, and then the symbol \n=\n (assignment), preceding a constant. After this constant value, only the reserved word \nTO\n can appear.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    id2;\nBEGIN\n    //...\n    FROM id2.x=0 STEP 9; // Error: expecting for [TO].\n        //...\n    END\nEND\n\n\n\n\nIn a \nFROM\n statement, the \ninitial\n and \nfinal\n values of the loop's counter variable must always appear in both sides of the word \nTO\n.\n\n\n\n\nSee: \nSyntax\n - \nStatement FROM", 
            "title": "expecting for [TO]"
        }, 
        {
            "location": "/expecting_for_[to]/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    id2;\nBEGIN\n    //...\n    FROM id2.x=0 STEP 9; // Error: expecting for [TO].\n        //...\n    END\nEND  In a  FROM  statement, the  initial  and  final  values of the loop's counter variable must always appear in both sides of the word  TO .   See:  Syntax  -  Statement FROM", 
            "title": "Example"
        }, 
        {
            "location": "/the_value_step_is_not_validdot/", 
            "text": "In a \nFROM\n statement:\n\n\n\n\n\n\nIf the initial value \nis less\n than the final value, a negative value can not be specified in the declaration \nSTEP\n.\n\n\n\n\n\n\nIf the initial value \nis bigger\n than the final value, a positive value can not be specified in the declaration \nSTEP\n.\n\n\n\n\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    FROM x=0 TO 10 STEP -1; // Error: The value STEP is not valid.\n        //...\n    END\nEND\n\n\n\n\nThis loop is not valid as, if \n1\n is subtracted from \nx\n (that originally will be equal to \n0\n) in every iteration, it will never reach \n10\n. If the aim is to create a continuous loop, the \nLOOP\n statement must be used.\n\n\n\n\nSee: \nSyntax\n - \nStatement FROM", 
            "title": "The value STEP is not valid."
        }, 
        {
            "location": "/the_value_step_is_not_validdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    FROM x=0 TO 10 STEP -1; // Error: The value STEP is not valid.\n        //...\n    END\nEND  This loop is not valid as, if  1  is subtracted from  x  (that originally will be equal to  0 ) in every iteration, it will never reach  10 . If the aim is to create a continuous loop, the  LOOP  statement must be used.   See:  Syntax  -  Statement FROM", 
            "title": "Example"
        }, 
        {
            "location": "/invalid_from_statementdot/", 
            "text": "In a \nFROM\n statement:\n\n\n\n\nThe \ninitial\n and \nfinal\n values of a \nFROM\n loop must be different.\n\n\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    FROM x=0 TO 0; // Error: Invalid FROM statement.\n        //...\n    END\nEND\n\n\n\n\nCreating this loop makes no sense, as the inner set of statements will be repeated just once, which would be equivalent to initialising \nx\n at \n0\n (with the \nx=0;\n statement) and, then, to directly putting the inner statements, omitting the loop \nFROM\n.\n\n\nIf the aim is to create an ever-repeating loop, the \nLOOP\n statement must be used.\n\n\n\n\nSee: \nSyntax\n - \nFROM statement", 
            "title": "Invalid FROM statement."
        }, 
        {
            "location": "/invalid_from_statementdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    FROM x=0 TO 0; // Error: Invalid FROM statement.\n        //...\n    END\nEND  Creating this loop makes no sense, as the inner set of statements will be repeated just once, which would be equivalent to initialising  x  at  0  (with the  x=0;  statement) and, then, to directly putting the inner statements, omitting the loop  FROM .  If the aim is to create an ever-repeating loop, the  LOOP  statement must be used.   See:  Syntax  -  FROM statement", 
            "title": "Example"
        }, 
        {
            "location": "/correct_compilation/", 
            "text": "The program has no errors of compilation. Press:\n\n\nMenu programs\\Execute\n or \nF10\n.\n\n\nTo save, compile and execute the program.\n\n\nMenu programs\\Debug\n or \nF12\n.\n\n\nTo save, compile and debug the program step by step.", 
            "title": "Correct compilation"
        }, 
        {
            "location": "/exceeded_the_capacity_of_the_names_vectordot/", 
            "text": "The buffer to store the \nnames\n of the program has been exceeded.\nThis error can only be due to the fact that too long data names and processes have been used.\n\n\nThe only solution to compile the program is to replace some of these names by other shorter names.", 
            "title": "Exceeded the capacity of the names vector."
        }, 
        {
            "location": "/exceeded_the_capacity_of_the_demo_versiondot/", 
            "text": "This DEMO version of DIV Games Studio does not allow us to create programs as big as this one. It can only compile programs of a specific number of variables and processes.\n\n\nIn the complete version of DIV GAMES STUDIO does not exist this limit, being possible to create programs of any size.\n\n\nThe only option to compile this program is first eliminating all the processes and data that are no longer required or indispensable.", 
            "title": "Exceeded the capacity of the demo version."
        }, 
        {
            "location": "/exceeded_the_capacity_of_the_table_of_objectsdot/", 
            "text": "The available space to store data records and the program's processes has been exceeded.\n\n\nThis error should never happen, but when it happens it is difficult to resolve. The program is too big for this version of the compiler.\n\n\nIf there is a new version of the compiler or any 'patch' that updates this limitation, it must be updated.\n\n\nOtherwise, the only option is to eliminate from the program all the processes and \ndata\n that are not required or essential any longer.", 
            "title": "Exceeded the capacity of the table of objects."
        }, 
        {
            "location": "/expecting_for_the_structure_namedot/", 
            "text": "To define a structure of data, its name must be specified after the reserved word \nSTRUCT\n.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT positions[9]\n        x, y;\n    END\nBEGIN\n    //...\nEND\n\n\n\n\nThis structure has been defined with the name \npositions\n and contains \nten records\n (from 0 to 9) each one with two values \nx\n and \ny\n.\n\n\n\n\nSee: \nSyntax\n - \nNames\n - \nDeclaration Structures", 
            "title": "expecting for the structure name."
        }, 
        {
            "location": "/expecting_for_the_structure_namedot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT positions[9]\n        x, y;\n    END\nBEGIN\n    //...\nEND  This structure has been defined with the name  positions  and contains  ten records  (from 0 to 9) each one with two values  x  and  y .   See:  Syntax  -  Names  -  Declaration Structures", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_the_process_namedot/", 
            "text": "To define a process, its name must be specified after the reserved word \nPROCESS\n.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_process()\nBEGIN\n    //...\nEND\n\n\n\n\nThis process has been declared with the name \nmy_process\n.\n\n\n\n\nSee: \nSyntax\n - \nNames", 
            "title": "expecting for the process name."
        }, 
        {
            "location": "/expecting_for_the_process_namedot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_process()\nBEGIN\n    //...\nEND  This process has been declared with the name  my_process .   See:  Syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_the_name_of_a_processdot/", 
            "text": "The name of one of the processes defined in the program must be defined after the reserved word \nTYPE\n.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\n    signal(TYPE my_process, s_kill);\n    //...\nEND\n\nPROCESS my_process()\nBEGIN\n    //...\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nNames\n - \nTypes of processes", 
            "title": "expecting for the name of a process."
        }, 
        {
            "location": "/expecting_for_the_name_of_a_processdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\n    signal(TYPE my_process, s_kill);\n    //...\nEND\n\nPROCESS my_process()\nBEGIN\n    //...\nEND   See:  Syntax  -  Names  -  Types of processes", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_a_namedot/", 
            "text": "As a parameter, the \nsizeof()\n function requires the name of a variable. It can also be the name of a variable, a table or a structure of the program.\n\n\nThis function returns the number of data (or elements) that the object whose name is passed as an argument has. Therefore, if that object was a\nvariable, the function would always return 1.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    table[]=0, 1, 2, 3;\n    length_table;\nBEGIN\n    length_table=sizeof(table);\nEND\n\n\n\n\nIn this example \nlength_table\n will be equal to \n4\n after the statement execution,\nas the table contains four data.\n\n\n\n\nSee: \nSyntax\n - \nNames\n - \nsizeof", 
            "title": "expecting for a name."
        }, 
        {
            "location": "/expecting_for_a_namedot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    table[]=0, 1, 2, 3;\n    length_table;\nBEGIN\n    length_table=sizeof(table);\nEND  In this example  length_table  will be equal to  4  after the statement execution,\nas the table contains four data.   See:  Syntax  -  Names  -  sizeof", 
            "title": "Example"
        }, 
        {
            "location": "/the_name_is_not_newdot/", 
            "text": "A \nname\n of an invalid process has been used, as it was already predefined as the name of another object. It can be the name of a \nconstant\n, variable, table, structure, process or a function of the program.\n\n\nIt is also possible either that the same name has been used inside the program to identify two different objects, or \nthat a predefined name has been used with another purpose inside the language\n. In that case, it is possible to access the \nGlossary\n to see the object to which this name is referred.\n\n\nYou must replace this name by another similar one.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.\n\n\n\n\nSee: \nSyntax\n - \nNames", 
            "title": "The name is not new."
        }, 
        {
            "location": "/the_name_is_not_newdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND  In this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.   See:  Syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/the_name_is_not_newdot/", 
            "text": "A \nname\n of an invalid process has been used, as it was already predefined as the name of another object. It can be the name of a \nconstant\n, variable, table, structure, process or a function of the program.\n\n\nIt is also possible either that the same name has been used inside the program to identify two different objects, or \nthat a predefined name has been used with another purpose inside the language\n. In that case, it is possible to access the \nGlossary\n to see the object to which this name is referred.\n\n\nYou must replace this name by another similar one.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.\n\n\n\n\nSee: \nSyntax\n - \nNames", 
            "title": "The name is not new."
        }, 
        {
            "location": "/the_name_is_not_newdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND  In this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.   See:  Syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/the_name_is_not_newdot/", 
            "text": "A \nname\n of an invalid process has been used, as it was already predefined as the name of another object. It can be the name of a \nconstant\n, variable, table, structure, process or a function of the program.\n\n\nIt is also possible either that the same name has been used inside the program to identify two different objects, or \nthat a predefined name has been used with another purpose inside the language\n. In that case, it is possible to access the \nGlossary\n to see the object to which this name is referred.\n\n\nYou must replace this name by another similar one.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.\n\n\n\n\nSee: \nSyntax\n - \nNames", 
            "title": "The name is not new."
        }, 
        {
            "location": "/the_name_is_not_newdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND  In this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.   See:  Syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/the_name_is_not_newdot/", 
            "text": "A \nname\n of an invalid process has been used, as it was already predefined as the name of another object. It can be the name of a \nconstant\n, variable, table, structure, process or a function of the program.\n\n\nIt is also possible either that the same name has been used inside the program to identify two different objects, or \nthat a predefined name has been used with another purpose inside the language\n. In that case, it is possible to access the \nGlossary\n to see the object to which this name is referred.\n\n\nYou must replace this name by another similar one.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.\n\n\n\n\nSee: \nSyntax\n - \nNames", 
            "title": "The name is not new."
        }, 
        {
            "location": "/the_name_is_not_newdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND  In this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.   See:  Syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/the_name_is_not_newdot/", 
            "text": "A \nname\n of an invalid process has been used, as it was already predefined as the name of another object. It can be the name of a \nconstant\n, variable, table, structure, process or a function of the program.\n\n\nIt is also possible either that the same name has been used inside the program to identify two different objects, or \nthat a predefined name has been used with another purpose inside the language\n. In that case, it is possible to access the \nGlossary\n to see the object to which this name is referred.\n\n\nYou must replace this name by another similar one.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.\n\n\n\n\nSee: \nSyntax\n - \nNames", 
            "title": "The name is not new."
        }, 
        {
            "location": "/the_name_is_not_newdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\n\nPROCESS my_game() // Error: The name is not new.\nBEGIN\n    //...\nEND  In this example, the aim was to use the name that had been previously used to identify the main program as the name of a process.   See:  Syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_[equal]/", 
            "text": "To define a constant, a symbol \n=\n must be put after the name of the constant.\n\n\nThe compiler has understood that the last defined word was the name of a new \nconstant\n and, in the indicated position, it was expected for the symbol of assignment (\n=\n) to be shown.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    a=0;\n    b=1;\n    c,d; // Error: expecting for [=].\nBEGIN\n    //...\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of data", 
            "title": "expecting for [=]"
        }, 
        {
            "location": "/expecting_for_[equal]/#example", 
            "text": "PROGRAM my_game;\nCONST\n    a=0;\n    b=1;\n    c,d; // Error: expecting for [=].\nBEGIN\n    //...\nEND   See:  Syntax  -  Declaration of data", 
            "title": "Example"
        }, 
        {
            "location": "/too_many_values_for_the_structuredot/", 
            "text": "A structure has been initialised with more values than it can contain.\n\n\nTo initialise a structure, take into account the greatest number of values that it can contain. This number will be:\n\n\n**N\nordm; of records** X **N\nordm; of fields**\n\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT positions[9]\n        x, y;\n    END = 10 dup (-99, 99);\nBEGIN\n    //...\nEND\n\n\n\n\nIn this case, the structure \npositions\n has \n10 records\n (from positions[0]\nto positions[9]) and \n2 fields\n (x and y). Then, the greatest number of values that it can contain is \n20\n. In the example, all the fields \nx\n are initialised at\n -99\n and all the fields \ny\n are initialised at \n99\n.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of structure", 
            "title": "Too many values for the structure."
        }, 
        {
            "location": "/too_many_values_for_the_structuredot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT positions[9]\n        x, y;\n    END = 10 dup (-99, 99);\nBEGIN\n    //...\nEND  In this case, the structure  positions  has  10 records  (from positions[0]\nto positions[9]) and  2 fields  (x and y). Then, the greatest number of values that it can contain is  20 . In the example, all the fields  x  are initialised at  -99  and all the fields  y  are initialised at  99 .   See:  Syntax  -  Declaration of structure", 
            "title": "Example"
        }, 
        {
            "location": "/unknown_namedot/", 
            "text": "In the indicated position of the program, reference is made to a non-existent \nPROCESS\n \nFUNCTION\n,\nthat can be one of the following cases:\n\n\n\n\n\n\nThe name of a process has been incorrectly keyed. In this case, check the name of the original process, as it is possible that the name does not correctly appear in its definition.\n\n\n\n\n\n\nThe aim has been to use a language function and its name has not been correctly written. In this case, it is possible to access the general index to look for the exact name of the function.\n\n\n\n\n\n\nReference is made to a process whose code has not been defined yet. Therefore, if the aim is to compile the program, it is necessary to define the process, at least, as follows:\n\n\n\n\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    my_process();\nEND\n\nPROCESS my_process()\nBEGIN\nEND\n\n\n\n\nIndicating in the process the parameters that it receives (in the previous example, it does not receive any parameter).\n\n\n\n\nSee: \nSyntax", 
            "title": "Unknown name."
        }, 
        {
            "location": "/unknown_namedot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    my_process();\nEND\n\nPROCESS my_process()\nBEGIN\nEND  Indicating in the process the parameters that it receives (in the previous example, it does not receive any parameter).   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/the_increment_can_not_be_performeddot/", 
            "text": "In the indicated expression of the program the operator \n ++\n (or the operator\n --\n) are incorrectly used with the aim of incrementing (or decrementing) an object. That object has no offset, as it is not a variable, table or structure. Thus, the compiler can not perform an increment (or decrement) about it.\n\n\nThe aim has probably been to increment or decrement a constant expression or an expression involving several operands.\n\n\nNow, a program with several examples of valid and invalid use of the operators\n ++\n and\n --\n, is shown.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    my_constant=0;\nGLOBAL\n    my_variable=0;\n    my_table[10];\n    STRUCT my_structure[10]\n        variable;\n    END\nBEGIN\n    // Valid examples\n    my_variable++;\n    my_table--;\n    ++my_table[my_variable];\n    --my_structure[0].variable;\n    id.x++;\n\n    // Invalid examples\n    (my_variable*2)++;\n    my_constant--;\n    ++0;\n    --(my_variable+1);\nEND\n\n\n\n\nThe constants like \nmy_constant\n can not be incremented as they are just synonymous of the numeric value they represent.\n\n\nThe \n(my_variable*2)++;\n statement is not valid because the\nmultiplication is first done and then, the value \nmy_variable*2\n becomes a numeric result that has no offset and, therefore, it is not possible to access it in order to increment it.\n\n\nIn this case, the correct statement that should have been used is probably \nmy_variable=my_variable*2+1;\n\n\n\n\nSee: \nSyntax\n - \n++\n - \n--", 
            "title": "The increment can not be performed."
        }, 
        {
            "location": "/the_increment_can_not_be_performeddot/#example", 
            "text": "PROGRAM my_game;\nCONST\n    my_constant=0;\nGLOBAL\n    my_variable=0;\n    my_table[10];\n    STRUCT my_structure[10]\n        variable;\n    END\nBEGIN\n    // Valid examples\n    my_variable++;\n    my_table--;\n    ++my_table[my_variable];\n    --my_structure[0].variable;\n    id.x++;\n\n    // Invalid examples\n    (my_variable*2)++;\n    my_constant--;\n    ++0;\n    --(my_variable+1);\nEND  The constants like  my_constant  can not be incremented as they are just synonymous of the numeric value they represent.  The  (my_variable*2)++;  statement is not valid because the\nmultiplication is first done and then, the value  my_variable*2  becomes a numeric result that has no offset and, therefore, it is not possible to access it in order to increment it.  In this case, the correct statement that should have been used is probably  my_variable=my_variable*2+1;   See:  Syntax  -  ++  -  --", 
            "title": "Example"
        }, 
        {
            "location": "/structure_of_negative_lengthdot/", 
            "text": "To define a structure indicating its number of records in \nsquare brackets\n a positive integer (0, 1, 2, 3, ...) must be used, taking into account that all the structures start in the record zero and finish in the record indicated in the index.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT e1[9]\n      x, y;\n    END\n    STRUCT e2[-9] // Error: Structure of negative length.\n      x, y;\n    END\nBEGIN\n    //...\nEND\n\n\n\n\nThe compiler has detected a structure defined with a negative number of records, like \ne2\n. In this example, the structure must be defined as \ne1\n that,\nin this case, will be a structure of 10 records (from e1[0] to e1[9])\nand two fields (x and y).\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of structure", 
            "title": "Structure of negative length."
        }, 
        {
            "location": "/structure_of_negative_lengthdot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT e1[9]\n      x, y;\n    END\n    STRUCT e2[-9] // Error: Structure of negative length.\n      x, y;\n    END\nBEGIN\n    //...\nEND  The compiler has detected a structure defined with a negative number of records, like  e2 . In this example, the structure must be defined as  e1  that,\nin this case, will be a structure of 10 records (from e1[0] to e1[9])\nand two fields (x and y).   See:  Syntax  -  Declaration of structure", 
            "title": "Example"
        }, 
        {
            "location": "/a_statement_was_expecteddot/", 
            "text": "The indicated position of the program is within the context of a block of statements. Thus, a statement was expected to start in the indicated position. These are the possible types of statements:\n\n\nassignment statements\n\n\nexpression\n=\nexpression\n;\n\n\ncontrol statements\n\n\nIF\n and \nSWITCH\n.\n\n\nloop statements\n\n\nFROM\n, \nWHILE\n, \nREPEAT\n, \nLOOP\n and \nFOR\n.\n\n\nbreak statements\n\n\nBREAK\n, \nCONTINUE\n and \nRETURN\n.\n\n\nspecial statements\n\n\nFRAME\n, \nCLONE\n and \nDEBUG\n.\n\n\nBeing possible that, in this position, one of the following reserved words that can mark the end of a block of statements appear:\n\n\nEND\n, \nELSE\n and \nUNTIL\n.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    CASE 0: // Error: A statement was expected.\n        //...\n    END\nEND\n\n\n\n\nThis example will provoke error, because the reserved word \nCASE\n is not valid to start a statement. It is only valid inside a \nSWITCH\n statement.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of statements", 
            "title": "A statement was expected."
        }, 
        {
            "location": "/a_statement_was_expecteddot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    CASE 0: // Error: A statement was expected.\n        //...\n    END\nEND  This example will provoke error, because the reserved word  CASE  is not valid to start a statement. It is only valid inside a  SWITCH  statement.   See:  Syntax  -  Declaration of statements", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_for_the_name_of_the_string/", 
            "text": "To define a string of text you must specify the its name after the reserved word \nSTRING\n.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRING player[32];\n    STRING message;\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example two global text strings were defined. The first is defined with the name\n\nplayer\n which can accumulate up to 32 characters and the second with the name \nmessage\n\nwhich with the undeclared length can accumulate up to 256 characters (because this is\nthe application's maximum size of text strings).\n\n\n\n\nSee: \nsyntax\n - \nnames", 
            "title": "expecting for the name of the string"
        }, 
        {
            "location": "/expecting_for_the_name_of_the_string/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRING player[32];\n    STRING message;\nBEGIN\n    //...\nEND  In this example two global text strings were defined. The first is defined with the name player  which can accumulate up to 32 characters and the second with the name  message \nwhich with the undeclared length can accumulate up to 256 characters (because this is\nthe application's maximum size of text strings).   See:  syntax  -  names", 
            "title": "Example"
        }, 
        {
            "location": "/the_name_has_already_been_allocated/", 
            "text": "An item has been given a name that has already been used. It could be a name,\na constant, a variable, a table, a structure, a process or function\nof the program.\n\n\nYou may be attempting to use the same name inside the program\nto identify two different objects, or {a name you allocated is predefined for\nanother use was inside the language}.\nIn this case you can access the glossary to see to which object the name belongs to.\n\n\nIn each case,\nyou must substitute this name with another one\n.\n\n\nExample\n\n\nPROGRAM name_of_program;\nGLOBAL\n    player=0;\n    STRING player; // Error: The name is not unique.\nBEGIN\n  //...\nEND\n\n\n\n\n\n\nSee: \nsyntax\n - \nNames", 
            "title": "The name has already been allocated"
        }, 
        {
            "location": "/the_name_has_already_been_allocated/#example", 
            "text": "PROGRAM name_of_program;\nGLOBAL\n    player=0;\n    STRING player; // Error: The name is not unique.\nBEGIN\n  //...\nEND   See:  syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/text_string_has_a_negative_length/", 
            "text": "To define a text string you indicate in brackets its length,\nit is necessary for its length to be defined as a positive whole number \n(0, 1, 2, 3, ...), remembering that all strings begin in the position null\nand finish in the position which indicates the index.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRING string1[9];\n    STRING string2[-9]; // Error: Text string has negative length.\nBEGIN\n    //...\nEND\n\n\n\n\nThe compiler detected a text string with a negative string length such as \nstring2\n;\nin this example you must define the string as\n\nstring1\n which will be the string of 10 characters (from\nstring1[0] to string1[9]).\n\n\n\n\nSee: \nsyntax", 
            "title": "Text string has a negative length"
        }, 
        {
            "location": "/text_string_has_a_negative_length/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRING string1[9];\n    STRING string2[-9]; // Error: Text string has negative length.\nBEGIN\n    //...\nEND  The compiler detected a text string with a negative string length such as  string2 ;\nin this example you must define the string as string1  which will be the string of 10 characters (from\nstring1[0] to string1[9]).   See:  syntax", 
            "title": "Example"
        }, 
        {
            "location": "/_a_literal_was_expected/", 
            "text": "Literals are \ntexts in brackets\n. In the indicated position of the\nprogram a literal was expected to be given as the initial value of \na text string.\n\n\nThe text strings can be initiated as shown in this example.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRING string=\ninitial text in the string\n;\nBEGIN\n    //...\nEND\n\n\n\n\nIt is not obligatory to initiate the text strings of a program.\nIn the case of initiation, the string could have an empty text (\n) at the beginning of the program,\nso, these two declarations would be identical:\n\n\nSTRING\n string;\n\n\nSTRING\n string\n=\n;\n\n\nIn these cases, their length is not declared, therefore the strings can accumulate\nto a maximum of 256 characters (because this is the maximum size allowed for strings of text).\n\n\n\n\nSee: \nsyntax", 
            "title": " a literal was expected"
        }, 
        {
            "location": "/_a_literal_was_expected/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRING string= initial text in the string ;\nBEGIN\n    //...\nEND  It is not obligatory to initiate the text strings of a program.\nIn the case of initiation, the string could have an empty text ( ) at the beginning of the program,\nso, these two declarations would be identical:  STRING  string;  STRING  string = ;  In these cases, their length is not declared, therefore the strings can accumulate\nto a maximum of 256 characters (because this is the maximum size allowed for strings of text).   See:  syntax", 
            "title": "Example"
        }, 
        {
            "location": "/literal_is_too_long/", 
            "text": "A text string was initiated with a literal with a bigger number of characters than the string\ncan contain.\n\n\nExample:}\n\n\nPROGRAM my_game;\nGLOBAL\n    STRING string1[3]=\nABCDE\n; // Error: Literal is too long\nBEGIN\n    //...\nEND\n\n-\n\n\nTo initiate a text string you must remember that the maximum number of characters it can\ncontain is the number contained in square brackets, plus one.\n\n\nExample:\n\nPROGRAM my_game;\nGLOBAL\n    STRING string1[3]=\nABCD\n;\nBEGIN\n    //...\nEND\n\n-\n\n\nIn this case a text string \nstring1\n can contain four characters\n(string1[0]=char(\nA\n), string1[1]=char(\nB\n), string1[2]=char(\nC\n) and\nstring1[3]=char(\nD\n)).\n\n\nThe other option is \nnot to indicate the size of the text string\n, establishing in\nthis case the string size maximum of 256 characters.\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nGLOBAL\n    STRING string1=\nABCDEF\n;\nBEGIN\n    //...\nEND\n\n\n\n\nIn this case, \nstring1\n would contain initially six indicated characters\n(\nABCDEF\n), but it can reach 256 during the execution of the program.\n\n\n\n\nSee: \nsyntax", 
            "title": "Literal is too long"
        }, 
        {
            "location": "/literal_is_too_long/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRING string1[3]= ABCDE ; // Error: Literal is too long\nBEGIN\n    //...\nEND -  To initiate a text string you must remember that the maximum number of characters it can\ncontain is the number contained in square brackets, plus one.  Example: \nPROGRAM my_game;\nGLOBAL\n    STRING string1[3]= ABCD ;\nBEGIN\n    //...\nEND -  In this case a text string  string1  can contain four characters\n(string1[0]=char( A ), string1[1]=char( B ), string1[2]=char( C ) and\nstring1[3]=char( D )).  The other option is  not to indicate the size of the text string , establishing in\nthis case the string size maximum of 256 characters.  {#9999,Example  PROGRAM my_game;\nGLOBAL\n    STRING string1= ABCDEF ;\nBEGIN\n    //...\nEND  In this case,  string1  would contain initially six indicated characters\n( ABCDEF ), but it can reach 256 during the execution of the program.   See:  syntax", 
            "title": "Example:}"
        }, 
        {
            "location": "/a_comma_was_expected_/", 
            "text": "It is accessing a structure indicating less dimensions than required.\n\n\nIt means that a structure of two dimensions is attempting to use one dimension as its\nparameters or a structure of three dimensions is attempting to use it as a two\ndimensional structure.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT structure1[9,9];\n      n;\n      //...\n    END\nBEGIN\n    //...\n    structure1[0].n=0; // Error: A comma was expected.\nEND\n\n\n\n\nCheck the previous declaration of the named structure of data in the program.\n\n\n\n\nSee: \nsyntax", 
            "title": "A comma was expected "
        }, 
        {
            "location": "/a_comma_was_expected_/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT structure1[9,9];\n      n;\n      //...\n    END\nBEGIN\n    //...\n    structure1[0].n=0; // Error: A comma was expected.\nEND  Check the previous declaration of the named structure of data in the program.   See:  syntax", 
            "title": "Example"
        }, 
        {
            "location": "/a_comma_was_expected_/", 
            "text": "It is accessing a structure indicating less dimensions than required.\n\n\nIt means that a structure of two dimensions is attempting to use one dimension as its\nparameters or a structure of three dimensions is attempting to use it as a two\ndimensional structure.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT structure1[9,9];\n      n;\n      //...\n    END\nBEGIN\n    //...\n    structure1[0].n=0; // Error: A comma was expected.\nEND\n\n\n\n\nCheck the previous declaration of the named structure of data in the program.\n\n\n\n\nSee: \nsyntax", 
            "title": "A comma was expected "
        }, 
        {
            "location": "/a_comma_was_expected_/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT structure1[9,9];\n      n;\n      //...\n    END\nBEGIN\n    //...\n    structure1[0].n=0; // Error: A comma was expected.\nEND  Check the previous declaration of the named structure of data in the program.   See:  syntax", 
            "title": "Example"
        }, 
        {
            "location": "/cannot_calculate_the_offset_of_the_data/", 
            "text": "In the expression indicated in the program the operator \noffset\n is used \n(or synonymous symbol \n) with the goal to obtain the location\n(dislocation) of a \ncharacter\n, \nbyte\n or \nword\n which belongs\nto a table.\n\n\nIt is only possible to obtain the location at the beginning of the\ntable, but not of its data (except such data as \nint\n).\n\n\nShown below is a program with two examples of the use of the operator\n\noffset\n (or the symbol \n) for tables of such type \nbyte\n; one valid, another not.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    BYTE my_table[99];\n    offset_data;\nBEGIN\n    // Correct example\n    offset_data=offset my_table;\n\n    // Erroneous example\n    offset_data=offset my_table[1];\nEND\n\n\n\n\n\n\nIt is also applicable to \ntext strings\n (data like \nstring\n),\nmeaning, it is not possible to obtain the location of a character inside of the string.\n\n\nIn this case, the operator \noffset\n is not necessary to obtain the\ndislocation of a string of text (it can be omitted).\nIt means, that both of these two statements would be valid:\n\n\noffset_string\n=\noffset my_string\n;\n\n\noffset_string\n=\nmy_string\n;\n\n\nNote To operate with the text strings one has to use the functions\n\n\nof the language which were written to manipulate text (see for example\n\nstrcpy()\n).\n\n\n\n\nSee: \nsyntax\n - \noffset", 
            "title": "Cannot calculate the offset of the data"
        }, 
        {
            "location": "/cannot_calculate_the_offset_of_the_data/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    BYTE my_table[99];\n    offset_data;\nBEGIN\n    // Correct example\n    offset_data=offset my_table;\n\n    // Erroneous example\n    offset_data=offset my_table[1];\nEND   It is also applicable to  text strings  (data like  string ),\nmeaning, it is not possible to obtain the location of a character inside of the string.  In this case, the operator  offset  is not necessary to obtain the\ndislocation of a string of text (it can be omitted).\nIt means, that both of these two statements would be valid:  offset_string = offset my_string ;  offset_string = my_string ;", 
            "title": "Example"
        }, 
        {
            "location": "/cannot_calculate_the_offset_of_the_data/#note-to-operate-with-the-text-strings-one-has-to-use-the-functions", 
            "text": "of the language which were written to manipulate text (see for example strcpy() ).   See:  syntax  -  offset", 
            "title": "Note To operate with the text strings one has to use the functions"
        }, 
        {
            "location": "/assignation_to_incorrect_string/", 
            "text": "With text strings you can only realise assignations of three types:\n\n\n\n\n\n\nConventional assignations (=), a copy of the string to the right of the \n=\n sign\nwill be made to the left-hand string.\n\n\n\n\n\n\nSum and assignation (+=), the substring on the right hand side will be added to the left-hand string.\n\n\n\n\n\n\nSubtraction and assignation (-=), characters of the string will be removed.\n\n\n\n\n\n\nIf another type of assignation is attempted this error will be given.\n\n\n\n\nSee: \nsyntax\n - \nDefinition of expression", 
            "title": "Assignation to incorrect string"
        }, 
        {
            "location": "/text_string_is_too_long/", 
            "text": "To define a string of text indicating in brackets its length,\none must use a whole number \nless than 1048576\n, remembering\nthat all strings start from the position zero and finish in the position which indicates the index.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRING string1[29999999]; // Error: text string is too long.\nBEGIN\n    //...\nEND\n\n\n\n\nThe compiler detected a text string that was too long, such as \nstring1\n; the maximum that can be declared \nis a string of text of 1 Megabyte, with such declaration:  \nSTRING\n string1\n[\n1048575\n];\n\n\nstring1\n can contain up to \n1024*1024\n characters, from string1[0] to string1[1048575].\n\n\n\n\nSee: \nsyntax", 
            "title": "text string is too long"
        }, 
        {
            "location": "/text_string_is_too_long/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRING string1[29999999]; // Error: text string is too long.\nBEGIN\n    //...\nEND  The compiler detected a text string that was too long, such as  string1 ; the maximum that can be declared \nis a string of text of 1 Megabyte, with such declaration:   STRING  string1 [ 1048575 ];  string1  can contain up to  1024*1024  characters, from string1[0] to string1[1048575].   See:  syntax", 
            "title": "Example"
        }, 
        {
            "location": "/incorrect_initiation/", 
            "text": "The number of values indicated in the initiation does not coincide with the previous declaration of the structure.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT my_structure[9];\n        STRING name;\n        x,y;\n    END = 10 dup (\nAAA\n,0); // Error: Incorrect initiation.\nBEGIN\n    //...\nEND\n\n\n\n\nIn the last example the program declares a structure of three fields, and then \ninitiates it as if it had only two fields.\n\n\nYou must check the original declaration, always remembering that a\nstructure as \nmy_structure[9]\n has \n10\n registers (from \n0\n to \n9\n). For example,\nthe valid initiation for the structure would be:\n\n\n10 \ndup (\nAAA\n,\n 0\n,\n 0\n);\n\n\n\n\nSee: \nsyntax", 
            "title": "Incorrect initiation"
        }, 
        {
            "location": "/incorrect_initiation/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT my_structure[9];\n        STRING name;\n        x,y;\n    END = 10 dup ( AAA ,0); // Error: Incorrect initiation.\nBEGIN\n    //...\nEND  In the last example the program declares a structure of three fields, and then \ninitiates it as if it had only two fields.  You must check the original declaration, always remembering that a\nstructure as  my_structure[9]  has  10  registers (from  0  to  9 ). For example,\nthe valid initiation for the structure would be:  10  dup ( AAA ,  0 ,  0 );   See:  syntax", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_[semicolon]/", 
            "text": "The compiler expects a \nsemicolon (;)\n in the position indicated in the program.\n\n\nIn the language you must indicate the end of a declaration of data with a semicolon.\n\n\n\n\nSee: \nsyntax\n - \n ;", 
            "title": "expecting [;]"
        }, 
        {
            "location": "/_expecting_a_compilation_option/", 
            "text": "The compiler was expecting a compilation option in the indicated position of the program.\n\n\nSee the \noptions of compilation\n disposed in this version of the language.\n\n\n\n\nSee: \nsyntax\n - \nHeadline of program", 
            "title": " Expecting a compilation option"
        }, 
        {
            "location": "/expecting_[equal]/", 
            "text": "To set a maximum number of processes you must use the statement\n\ncompiler_options\n as it is shown in this program:\n\n\nExample\n\n\nCOMPILER_OPTIONS _max_process = 100;\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\n\n\n\n\nIn this case it was established that during the execution of the program \n\n a maximum of 100 processes\n can execute simultaneously.\n\n\n\n\nSee: \nsyntax", 
            "title": "Expecting [=]"
        }, 
        {
            "location": "/expecting_[equal]/#example", 
            "text": "COMPILER_OPTIONS _max_process = 100;\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND  In this case it was established that during the execution of the program   a maximum of 100 processes  can execute simultaneously.   See:  syntax", 
            "title": "Example"
        }, 
        {
            "location": "/assignation_inside_of_a_condition/", 
            "text": "The compiler detected, in the fly out position of the program, a statement of assignation inside of one condition.\n\n\nProbably was intended to compare two values using for it the assignation symbol \n=\n, \ninstead of the symbol of comparison / equivalence \n==\n.\n\n\n\n\nNote for new users If you want to \ncompare\n two values with the symbol\n=\n,\n\n\nyou must include in the program the option \n_simple_conditions\n.\nFor it you must put in the first line (before \nPROGRAM ...\n) this statement:\n\n\nCOMPILER_OPTIONS _simple_conditions;\n\n\n\n\nNote for users of the previous version In this new version of the language\n\n\nare prohibited the \nassignations inside of one condition\n, to simplify\nthe program syntax for new users. But it can be changed with\nthe options of compilation (see \n_extended_conditions and _simple_conditions\n).\n\n\n\n\nSee: \nsyntax\n - \nCompiler_options", 
            "title": "Assignation inside of a condition"
        }, 
        {
            "location": "/assignation_inside_of_a_condition/#note-for-new-users-if-you-want-to-compare-two-values-with-the-symbol", 
            "text": "you must include in the program the option  _simple_conditions .\nFor it you must put in the first line (before  PROGRAM ... ) this statement:  COMPILER_OPTIONS _simple_conditions;", 
            "title": "Note for new users If you want to compare two values with the symbol=,"
        }, 
        {
            "location": "/assignation_inside_of_a_condition/#note-for-users-of-the-previous-version-in-this-new-version-of-the-language", 
            "text": "are prohibited the  assignations inside of one condition , to simplify\nthe program syntax for new users. But it can be changed with\nthe options of compilation (see  _extended_conditions and _simple_conditions ).   See:  syntax  -  Compiler_options", 
            "title": "Note for users of the previous version In this new version of the language"
        }, 
        {
            "location": "/the_length_does_not_coincide_with_the_previous_declaration/", 
            "text": "a text string or pointer was declared \ntwice\n, as a parameter and as\nprivate data, and in the declarations a different length was specified.\n\n\nIt is not necessary to declare this data as private, because you can\nspecify its length in the same parameters of the process.\n\n\nExample:}\n\n\nPROGRAM name_of_program;\nBEGIN\n  //...\nEND\n\n\nPROCESS my_process(string my_string[16])\nBEGIN\n  //...\nEND\n\n-\n\n\nThe process of this example receives a parameter in a \nprivate\n string (but\nthis is not indicated in the process) of \n17\n characters in length (from\nmy_string[0] to my_string[16]).\n\n\nThe previous process can return to declare this string in the section\n\nPRIVATE\n (for example, to add an explanatory commentary), but in this case the \nspecified lengths must coincide. In this case,\nmy_string\n will be declared as shown\nbelow.\n\n\n{#9999,Example\n\n\nPROGRAM name_of_program;\nBEGIN\n  //...\nEND\n\nPROCESS my_process(string my_string[16])\n\nPRIVATE\n  string my_string[16]; // Here I will receive some text.\n\nBEGIN\n  //...\nEND\n\n\n\n\n\n\nSee: \nsyntax\n - \nDeclaration of private data", 
            "title": "The length does not coincide with the previous declaration"
        }, 
        {
            "location": "/the_length_does_not_coincide_with_the_previous_declaration/#example", 
            "text": "PROGRAM name_of_program;\nBEGIN\n  //...\nEND  PROCESS my_process(string my_string[16])\nBEGIN\n  //...\nEND -  The process of this example receives a parameter in a  private  string (but\nthis is not indicated in the process) of  17  characters in length (from\nmy_string[0] to my_string[16]).  The previous process can return to declare this string in the section PRIVATE  (for example, to add an explanatory commentary), but in this case the \nspecified lengths must coincide. In this case, my_string  will be declared as shown\nbelow.  {#9999,Example  PROGRAM name_of_program;\nBEGIN\n  //...\nEND\n\nPROCESS my_process(string my_string[16])\n\nPRIVATE\n  string my_string[16]; // Here I will receive some text.\n\nBEGIN\n  //...\nEND   See:  syntax  -  Declaration of private data", 
            "title": "Example:}"
        }, 
        {
            "location": "/expecting_a_name/", 
            "text": "To declare a data type you must specify its name after the reserved word \nINT\n, but in this case it is not so important\n(because all the data by default will be of the same type).\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example you can see 4 data of the  type whole number declared, for\nthe first two (\na\n and \nb\n) the type was specified as (INT) (as in \ninteger\n), \nbut there is no difference, in the level of declaration, with the last two \n(\nc\n and \nd\n), because these would also be data of the type (INT).\n\n\n\n\nSee: \nsyntax\n - \nNames", 
            "title": "Expecting a name"
        }, 
        {
            "location": "/expecting_a_name/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND  In this example you can see 4 data of the  type whole number declared, for\nthe first two ( a  and  b ) the type was specified as (INT) (as in  integer ), \nbut there is no difference, in the level of declaration, with the last two \n( c  and  d ), because these would also be data of the type (INT).   See:  syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/value_of_byte_out_of_rank_(0to255)/", 
            "text": "a variable of type \nBYTE\n was initiated with a value too big, or negative. This\ntype of data can only contain values inside the rank \n0\n ... \n255\n.\n\n\nExample:}\n\n\nPROGRAM my_game;\nGLOBAL\n    BYTE mi_value=300; // Error: Value of byte out of rank (0...255).\nBEGIN\n    //...\nEND\n\n-\n\n\nIf you want to assign this value to the data, you must not declare the data of this type \nBYTE\n,\n as is shown in this program.\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nGLOBAL\n    my_value=300;\nBEGIN\n    //...\nEND\n\n\n\n\nAs this form creates a variable which can contain a whole number value\ninside the rank (\nmin_int\n ... \nmax_int\n).\n\n\n\n\nSee: \nsyntax", 
            "title": "Value of BYTE out of rank (0...255)"
        }, 
        {
            "location": "/value_of_byte_out_of_rank_(0to255)/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    BYTE mi_value=300; // Error: Value of byte out of rank (0...255).\nBEGIN\n    //...\nEND -  If you want to assign this value to the data, you must not declare the data of this type  BYTE ,\n as is shown in this program.  {#9999,Example  PROGRAM my_game;\nGLOBAL\n    my_value=300;\nBEGIN\n    //...\nEND  As this form creates a variable which can contain a whole number value\ninside the rank ( min_int  ...  max_int ).   See:  syntax", 
            "title": "Example:}"
        }, 
        {
            "location": "/value_of_word_out_of_rank_(0to65535)/", 
            "text": "A \nWORD\n was initiated with a value too big or negative. This\ntype of data can only contain values inside the rank \n0\n ... \n65535\n.\n\n\nExample:}\n\n\nPROGRAM my_game;\nGLOBAL\n    WORD my_value=70000; // Error: Value of word out of rank (0...65535).\nBEGIN\n    //...\nEND\n\n-\n\n\nIf you want to assign this value to the data, you must not declare the data as type \nBYTE\n,\nas is shown in this program.\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nGLOBAL\n    my_value=70000;\nBEGIN\n    //...\nEND\n\n\n\n\nAs this form creates a data which can contain a whole number value\ninside the rank (\nmin_int\n ... \nmax_int\n).\n\n\n\n\nSee: \nsyntax", 
            "title": "Value of word out of rank (0...65535)"
        }, 
        {
            "location": "/value_of_word_out_of_rank_(0to65535)/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    WORD my_value=70000; // Error: Value of word out of rank (0...65535).\nBEGIN\n    //...\nEND -  If you want to assign this value to the data, you must not declare the data as type  BYTE ,\nas is shown in this program.  {#9999,Example  PROGRAM my_game;\nGLOBAL\n    my_value=70000;\nBEGIN\n    //...\nEND  As this form creates a data which can contain a whole number value\ninside the rank ( min_int  ...  max_int ).   See:  syntax", 
            "title": "Example:}"
        }, 
        {
            "location": "/expecting_a_name/", 
            "text": "To declare a data type you must specify its name after the reserved word \nINT\n, but in this case it is not so important\n(because all the data by default will be of the same type).\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example you can see 4 data of the  type whole number declared, for\nthe first two (\na\n and \nb\n) the type was specified as (INT) (as in \ninteger\n), \nbut there is no difference, in the level of declaration, with the last two \n(\nc\n and \nd\n), because these would also be data of the type (INT).\n\n\n\n\nSee: \nsyntax\n - \nNames", 
            "title": "Expecting a name"
        }, 
        {
            "location": "/expecting_a_name/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND  In this example you can see 4 data of the  type whole number declared, for\nthe first two ( a  and  b ) the type was specified as (INT) (as in  integer ), \nbut there is no difference, in the level of declaration, with the last two \n( c  and  d ), because these would also be data of the type (INT).   See:  syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/cannot_specify_a_table_as_the_parameter/", 
            "text": "The \nparameters of the process\n must be declared as variables,\nnot as tables or structures, and cannot be initiated (because they will receive \ntheir value with each call).\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    //...\nEND\nPROCESS my_process(a[9]) // Error: Cannot specify a table as the parameter.\nBEGIN\n    //...\nEND\n\n\n\n\nThe compiler interprets the parameter \na\n as a table of 10 positions, \nand cannot pass a table as the parameter, so emits the error.\n\n\n\n\nSee: \nsyntax\n - \nParameters of a process", 
            "title": "Cannot specify a table as the parameter"
        }, 
        {
            "location": "/cannot_specify_a_table_as_the_parameter/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    //...\nEND\nPROCESS my_process(a[9]) // Error: Cannot specify a table as the parameter.\nBEGIN\n    //...\nEND  The compiler interprets the parameter  a  as a table of 10 positions, \nand cannot pass a table as the parameter, so emits the error.   See:  syntax  -  Parameters of a process", 
            "title": "Example"
        }, 
        {
            "location": "/statement_import_is_incorrect_(see_corresponding_help)/", 
            "text": "The declaration of external libraries must be done {below the headline\nof the program}, in other words, after the declaration \nPROGRAM name_of_program;\n.\nDifferent declarations of \nIMPORT\n can be used to declare\nthe use of more than one library, as in this example.\n\n\nExample\n\n\n// Headline of the program\n\nPROGRAM my_game;\n\n// Declaration of libraries\n\nIMPORT \nlib1.dll\n;\nIMPORT \nlib2.dll\n;\n//...\n\n// And in continuation (optional) the rest of the sections that make up the program.\n\nCONST\n   //...\nGLOBAL\n   //...\nLOCAL\n   //...\nPRIVATE\n   //...\n\nBEGIN\n    //...\nEND\n\n\n\n\nThis program declares the use of the denoted libraries \nlib1.dll\n and\n\nlib2.dll\n (supposed names of hypothetical libraries with external functions).\n\n\n\n\nNote 1 In the original version of DIV, this declaration had to be done\n\n\nbetween sections \nLOCAL\n and \nPRIVATE\n of the program.\n\n\nNote 2 The libraries prepared in the original (DIV1 or DIV2) versions of the language\n\n\nwill not function correctly\n in DIV3, it is necessary first to re-compile\nthese libraries with new files of declarations for modern systems. It means,\nthat the font code of the libraries will be valid, but beforehand they must be \nre-compiled with new headline files (because they contain\ndeclarations for the new data and structures which exist in the DIV3 language).\n\n\n\n\nSee: \nsyntax\n - \nDeclaration of libraries", 
            "title": "statement IMPORT is incorrect (see corresponding help)"
        }, 
        {
            "location": "/statement_import_is_incorrect_(see_corresponding_help)/#example", 
            "text": "// Headline of the program\n\nPROGRAM my_game;\n\n// Declaration of libraries\n\nIMPORT  lib1.dll ;\nIMPORT  lib2.dll ;\n//...\n\n// And in continuation (optional) the rest of the sections that make up the program.\n\nCONST\n   //...\nGLOBAL\n   //...\nLOCAL\n   //...\nPRIVATE\n   //...\n\nBEGIN\n    //...\nEND  This program declares the use of the denoted libraries  lib1.dll  and lib2.dll  (supposed names of hypothetical libraries with external functions).", 
            "title": "Example"
        }, 
        {
            "location": "/statement_import_is_incorrect_(see_corresponding_help)/#note-1-in-the-original-version-of-div-this-declaration-had-to-be-done", 
            "text": "between sections  LOCAL  and  PRIVATE  of the program.", 
            "title": "Note 1 In the original version of DIV, this declaration had to be done"
        }, 
        {
            "location": "/statement_import_is_incorrect_(see_corresponding_help)/#note-2-the-libraries-prepared-in-the-original-div1-or-div2-versions-of-the-language", 
            "text": "will not function correctly  in DIV3, it is necessary first to re-compile\nthese libraries with new files of declarations for modern systems. It means,\nthat the font code of the libraries will be valid, but beforehand they must be \nre-compiled with new headline files (because they contain\ndeclarations for the new data and structures which exist in the DIV3 language).   See:  syntax  -  Declaration of libraries", 
            "title": "Note 2 The libraries prepared in the original (DIV1 or DIV2) versions of the language"
        }, 
        {
            "location": "/expecting_a_name/", 
            "text": "To declare a data type you must specify its name after the reserved word \nINT\n, but in this case it is not so important\n(because all the data by default will be of the same type).\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example you can see 4 data of the  type whole number declared, for\nthe first two (\na\n and \nb\n) the type was specified as (INT) (as in \ninteger\n), \nbut there is no difference, in the level of declaration, with the last two \n(\nc\n and \nd\n), because these would also be data of the type (INT).\n\n\n\n\nSee: \nsyntax\n - \nNames", 
            "title": "expecting a name"
        }, 
        {
            "location": "/expecting_a_name/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND  In this example you can see 4 data of the  type whole number declared, for\nthe first two ( a  and  b ) the type was specified as (INT) (as in  integer ), \nbut there is no difference, in the level of declaration, with the last two \n( c  and  d ), because these would also be data of the type (INT).   See:  syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_a_name/", 
            "text": "To declare a data type you must specify its name after the reserved word \nINT\n, but in this case it is not so important\n(because all the data by default will be of the same type).\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND\n\n\n\n\nIn this example you can see 4 data of the  type whole number declared, for\nthe first two (\na\n and \nb\n) the type was specified as (INT) (as in \ninteger\n), \nbut there is no difference, in the level of declaration, with the last two \n(\nc\n and \nd\n), because these would also be data of the type (INT).\n\n\n\n\nSee: \nsyntax\n - \nNames", 
            "title": "expecting a name"
        }, 
        {
            "location": "/expecting_a_name/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    INT a,b;  // declare two whole number data\n    c,d;      // declare another two whole number data\nBEGIN\n    //...\nEND  In this example you can see 4 data of the  type whole number declared, for\nthe first two ( a  and  b ) the type was specified as (INT) (as in  integer ), \nbut there is no difference, in the level of declaration, with the last two \n( c  and  d ), because these would also be data of the type (INT).   See:  syntax  -  Names", 
            "title": "Example"
        }, 
        {
            "location": "/incorrect_declaration_of_the_pointer_to_a_structure/", 
            "text": "The compiler was expecting, at the indicated position of the program, the name\nof a structure previously declared, with the intention of declaring it as a pointer.\n\n\nTo define a pointer to a data structure you must use the following syntax:\n\n\nSTRUCT POINTER name_structure name_pointer;\n\n\nname_structure\n being the name of a data structure declared\npreviously in the program, and \nname_pointer\n being the name of a pointer\nto the structure which is being declared.\n\n\n\n\nSee: \nsyntax\n - \nNames\n - \nDeclaration Structures", 
            "title": "Incorrect declaration of the pointer to a structure"
        }, 
        {
            "location": "/cannot_receive_a_structure_as_the_parameter/", 
            "text": "A process cannot receive a structure as its parameter, if you want to\naccess an external structure from a process, the process must receive as\nits parameter a pointer to the structure.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT positions[9]\n        x, y;\n    END\nBEGIN\n    my_process(OFFSET positions);\n    //...\nEND\n\nPROCESS my_process(STRUCT POINTER positions pos[9]);\nBEGIN\n    //pos[ ... ].x = ... ;\n    //...\nEND\n\n\n\n\nIn this example you can access the structure inside \nmy_process\n\nusing the pointer \npos\n.\n\n\n\n\nSee: \nsyntax\n - \nNames\n - \nDeclaration Structures", 
            "title": "Cannot receive a structure as the parameter"
        }, 
        {
            "location": "/cannot_receive_a_structure_as_the_parameter/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT positions[9]\n        x, y;\n    END\nBEGIN\n    my_process(OFFSET positions);\n    //...\nEND\n\nPROCESS my_process(STRUCT POINTER positions pos[9]);\nBEGIN\n    //pos[ ... ].x = ... ;\n    //...\nEND  In this example you can access the structure inside  my_process \nusing the pointer  pos .   See:  syntax  -  Names  -  Declaration Structures", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_a_name_of_structure/", 
            "text": "The indicated function requires as its parameter, at the indicated position, the name\nof a data structure of the program.\n\n\nYou do not have to use the operator \noffset\n, you just need to indicate the name \nof the structure.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT records[9]\n        STRING initials[2];\n        points;\n    END\nBEGIN\n    //...\n    qsort(offset records,points,1); // Error: expecting a name.\nEND\n\n\n\n\nIn this example the function \nqsort\n is used, which requires the name of a\nstructure as its first parameter. In this case, the correct instruction \nto order the table\nrecords\n is this one:\n\n\nqsort(records,points,1);\n\n\nThis instruction indicates how to order the structure, namely as a function\nof the field \npoints\n and in descending order.\n\n\n\n\nNote 1 Also it is possible that the indicated name has nothing to do with a\n\n\nstructure of data, but with the another type of object (for example, the name \nspecified was of a table of data).\n\n\nNote 2 This data structure cannot belong simultaneously to another\n\n\nstructure, so you cannot specify the name of a structure inside another one.\n\n\n\n\nSee: \nsyntax", 
            "title": "expecting a name of structure"
        }, 
        {
            "location": "/expecting_a_name_of_structure/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT records[9]\n        STRING initials[2];\n        points;\n    END\nBEGIN\n    //...\n    qsort(offset records,points,1); // Error: expecting a name.\nEND  In this example the function  qsort  is used, which requires the name of a\nstructure as its first parameter. In this case, the correct instruction \nto order the table records  is this one:  qsort(records,points,1);  This instruction indicates how to order the structure, namely as a function\nof the field  points  and in descending order.", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_a_name_of_structure/#note-1-also-it-is-possible-that-the-indicated-name-has-nothing-to-do-with-a", 
            "text": "structure of data, but with the another type of object (for example, the name \nspecified was of a table of data).", 
            "title": "Note 1 Also it is possible that the indicated name has nothing to do with a"
        }, 
        {
            "location": "/expecting_a_name_of_structure/#note-2-this-data-structure-cannot-belong-simultaneously-to-another", 
            "text": "structure, so you cannot specify the name of a structure inside another one.   See:  syntax", 
            "title": "Note 2 This data structure cannot belong simultaneously to another"
        }, 
        {
            "location": "/expecting_a_field_of_the_structure/", 
            "text": "The indicated function requires as its parameter, in the indicated position, the name\nof \na field pertinent to the structure previously indicated\n.\n\n\nYou don't have to use the operator \noffset\n, you only need to indicate the name of the field.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    STRUCT records[9]\n        STRING initials[2];\n        points;\n    END\nBEGIN\n    //...\n    qsort(records,\npoints,1); // Error: expecting a field of the structure.\nEND\n\n\n\n\nIn this example the function \nqsort\n is used, which requires the name of a field\nof the structure as its second parameter. In this case, the instruction to order \nthe table (records) would be :\n\n\nqsort(records,points,1);\n\n\nThis instruction indicates how to order the structure, as a function\nof the field \npoints\n and in descending order.\n\n\n\n\nNote  the indicated name does not always have to be a data structure.\n\n\n\n\nSee: \nsyntax", 
            "title": "expecting a field of the structure"
        }, 
        {
            "location": "/expecting_a_field_of_the_structure/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    STRUCT records[9]\n        STRING initials[2];\n        points;\n    END\nBEGIN\n    //...\n    qsort(records, points,1); // Error: expecting a field of the structure.\nEND  In this example the function  qsort  is used, which requires the name of a field\nof the structure as its second parameter. In this case, the instruction to order \nthe table (records) would be :  qsort(records,points,1);  This instruction indicates how to order the structure, as a function\nof the field  points  and in descending order.", 
            "title": "Example"
        }, 
        {
            "location": "/expecting_a_field_of_the_structure/#note-the-indicated-name-does-not-always-have-to-be-a-data-structure", 
            "text": "See:  syntax", 
            "title": "Note  the indicated name does not always have to be a data structure."
        }, 
        {
            "location": "/syntax_of_a_programdot/", 
            "text": "Now, the general structure of a program is shown in the language. To see the corresponding syntactic definition, click on the section of your interest with the mouse.\n\n\nProgram's head\n\n\nDeclaration of constants\n\n\nDeclaration of global data\n\n\nDeclaration of local data\n\n\nDeclaration of libraries\n\n\nDeclaration of private data\n\n\nMain code\n\n\nDeclaration of processes\n\n\nAll the programs must respect the previous structure with an exception: it is possible to put \nexplanatory comments\n\nin any point of the program.\n\n\n\n\nSee: \nIndex\n - \nGlossary", 
            "title": "Syntax of a program."
        }, 
        {
            "location": "/definition_of_a_namedot/", 
            "text": "A name is a sequence of alphanumeric characters used to \nidentify\n an object of the program, such as the name of a process, \nconstant\n or variable.\n\n\nThese names can be made up of the following characters:\n\n\nSymbols:\n\n\n_ # \n \n $ \u20a7 \n \n \n \n\n\nDigits:\n\n\n0123456789\n\n\nLetters:\n\n\nabcdefghijklmnopqrstuvwxyz\n\n\nLetters (extended):\n\n\n \n \n \n \n \n \n \n \n\n\nprovided that the following rules to create new names are respected:\n\n\n\n\n\n\nThe sequence of characters must not contain characters that are not in the previous list (except \ncapital\n letters corresponding to lower case letters included in the list).\n\n\n\n\n\n\nInside the sequence, it is not possible to put blanks. That is to say, \nenemy spacecraft\n is not a valid name as, for the compiler, it would imply two names. In \nthis case, the name can be declared as \nenemy_spacecraft\n.\n\n\n\n\n\n\nA name can not start with a numeric digit. That is to say, \n0a\n is not a valid name. Nevertheless, all the necessary digits can be included in the name after the first character (\na0\n is indeed a valid name).\n\n\n\n\n\n\nThe name must not coincide either with any of the language's reserved words or with any of the objects (constants, variables, etc.)\npredefined in the language. To check it, see the list of reserved words and predefined objects, being possible to access the Glossary at any moment. The reserved words appear in capital letters and the predefined objects in lower case letters.\n\n\n\n\n\n\nThere is no difference between the capital and lower case letters (for the compiler, \nABc\n and \nabC\n are the same name).\n\n\n\n\n\n\nThe same name can not be used for two different objects.\nFor instance, it is not possible to name a constant \nvalue\n and then, to declare\na process \nPROCESS value(x, y);\n.\n\n\n\n\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Definition of a name."
        }, 
        {
            "location": "/definition_of_commentsdot/", 
            "text": "A comment is an explanatory note about the program. The comments are not\nnecessary for the program's correct working.\n\n\nThere are two kinds of comments:\n\n\n\n\n\n\nOf a single line: they start with the symbol\n //\n and finish at the end of the line in which they are defined.\n\n\n\n\n\n\nOf several lines: they start with the symbol\n /\n and finish with the symbol \n/\n.\n\n\n\n\n\n\nExample\n\n\n/*\n    This is an example of a comment\n    of several lines in which explanations\n    about the program can be given\n*/\n\nPROGRAM my_game; // Example of a single line comment.\nBEGIN             // The main program starts.\n    FRAME;\nEND               // The main program finishes.\n\n\n\n\nAll the texts included in a comment are ignored by the compiler.\nAs many comments as necessary can be put, in any point of the program.\n\n\nThe comments starting with** /\n and finishing with\n \n/\n (comments of several lines) can also start and finish in the same line.\n\n\n\n\nSee: \nSyntax", 
            "title": "Definition of comments."
        }, 
        {
            "location": "/definition_of_commentsdot/#example", 
            "text": "/*\n    This is an example of a comment\n    of several lines in which explanations\n    about the program can be given\n*/\n\nPROGRAM my_game; // Example of a single line comment.\nBEGIN             // The main program starts.\n    FRAME;\nEND               // The main program finishes.  All the texts included in a comment are ignored by the compiler.\nAs many comments as necessary can be put, in any point of the program.  The comments starting with** /  and finishing with   /  (comments of several lines) can also start and finish in the same line.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/programapostrophes_headdot/", 
            "text": "PROGRAM\n \nname\n \n;\n\n\nAll the programs must start with the reserved word \nPROGRAM\n followed by the name of the program and a symbol \n; (semicolon)\n.\n\n\nThis head is obligatory in all the programs. Before it, only one or several \ncomments\n (explanatory texts preceded by the symbol\n //\n, or between the symbols** /\n and\n \n/\n) can optionally appear.\n\n\nIn the names and reserved words there is no difference between capital and lower case letters, so \nPROGRAM\n, \nprogram\n, \nProgram\n, ... are valid words.\n\n\nExample\n\n\n// -------------------\n// Listing of my game\n// -------------------\n\nPROGRAM name_of_my_game;\nBEGIN\n    //...\nEND\n\n\n\n\n\n\nSee: \nSyntax", 
            "title": "Program's head."
        }, 
        {
            "location": "/programapostrophes_headdot/#example", 
            "text": "// -------------------\n// Listing of my game\n// -------------------\n\nPROGRAM name_of_my_game;\nBEGIN\n    //...\nEND   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/declaration_of_constantsdot/", 
            "text": "CONST\n\n\n[\nlt;name\ngt;](definition_of_a_namedot.md) **=** [\nlt;constant\ngt;](definition_of_a_constantdot.md) **;**\n\n...\n\n\n\nThis section of the programs is optional, as its utility deals with setting a series of synonymous for some numeric values.\n\n\nIn a game, for instance, number 3 has been set in one or several points of the program as the maximum lives of the protagonist. If the aim is to modify this number, increasing or decreasing it, it will be necessary to look for this number and to replace it in the program. But there is a risk of replacing other '3' numbers appearing in the program with different aims.\n\n\nAn alternative is to declare a constant called, for instance,\n\nmaximum_lives\n as a synonymous of the numeric value 3 and use that constant in the program instead of the number. Now, if the aim is to replace this value by another one, it is done simply in the declaration of the constant \nmaximum_lives\n.\n\n\nThis section then establishes a list of names that are going to represent a series of numeric constants.\n\n\nThis section must obligatory start with the reserved word \nCONST\n and then, for every declared constant, its name followed by the symbol \n= (assignment symbol)\n and a constant expression (numeric value) must appear. After the declaration of every constant, the symbol \n;\n (semicolon) must appear.\n\n\nExample\n\n\nPROGRAM my_game;\nCONST\n    maximum_lives=3;\nBEGIN\n    //...\nEND\n\n\n\n\nOnce a value has been assigned to a constant, it won't later be possible to modify the former in the program.\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of constants."
        }, 
        {
            "location": "/declaration_of_constantsdot/#example", 
            "text": "PROGRAM my_game;\nCONST\n    maximum_lives=3;\nBEGIN\n    //...\nEND  Once a value has been assigned to a constant, it won't later be possible to modify the former in the program.   See:  Syntax  -  Glossary", 
            "title": "Example"
        }, 
        {
            "location": "/definition_of_a_constantdot/", 
            "text": "A constant is a constant value or a numeric expression.\n\n\nAs values, only integers within the range (\nmin_int\n ... \nmax_int\n) can be used.\n\n\nThe constant numeric expressions are mathematical formulas in which it is possible to use:\n\n\n- **Constants** previously defined.\n\n- **Numeric values**.\n\n- Arithmetic or logical **operators**.\n\n- **Literals** (texts in inverted commas).\n\n- The [sizeof()](sizeof().md) function.\n\n\n\nThese expressions will be evaluated when the program is compiled and their result will be used in the program's execution.\n\n\nThe \noperators\n that can be used in a constant expression are the following ones (the synonymous of the operator, if they exist, are shown in brackets).\n\n\n[ +](plus.md)    Addition\n\n[ -](minus.md)    Subtraction (or negative sign)\n\n[ *](asterisk.md)    Multiplication\n\n[ /](forward_slash.md)    Division\n\n[ MOD](mod__percent.md)  Module ([%](mod__percent.md))\n\n[ \nlt;\nlt;](ltlt.md)   Rotation to the right\n\n[ \ngt;\ngt;](gtgt.md)   Rotation to the left\n\n[ NOT](not__not.md)  Binary and logical negation (**!**)\n\n[ AND](and__andand.md)  AND binary and logical (**\namp;**,**\namp;\namp;**)\n\n[ OR](or__pipepipe__pipe.md)   OR binary and logical (**|**,**||**)\n\n[ XOR](xor__caretcaret.md)  Exclusive OR (**^**, **^^**)\n\n[ ==](equalequal.md)   Comparison\n\n[ \nlt;\ngt;](ltgt__notequal.md)   Different (**!=**)\n\n[ \ngt;](gt.md)    Greater than\n\n[ \ngt;=](gtequal__equalgt.md)   Bigger or equal (**=\ngt;**)\n\n[ \nlt;](lt.md)    Less\n\n[ \nlt;=](ltequal__equallt.md)   Less or equal (**=\nlt;**)\n\n[ OFFSET](offset.md) Direction or offset (**\namp;**)\n\n[ ( )]((__).md)  Brackets\n\n\n\nNow, some examples of valid constants are shown:\n\n\n 0\n\n\n -1000\n\n\n 2+2\n\n\n \nHello!\n\n\n 4*(2+1)\n\n\n...\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Definition of a constant."
        }, 
        {
            "location": "/declaration_of_global_datadot/", 
            "text": "GLOBAL\n\n\n[\nlt;declaration of variable\ngt;](declaration_of_a_variabledot.md) [;](semicolon.md)\n\n...\n\n\n\nThis section of the programs is optional. Global data, the \ndata that can be used from any point of the program\n, are declared in this section.\n\n\nA section must obligatory start with the reserved word GLOBAL followed by a series of \ndeclarations of data\n finished with a symbol \n;\n (semicolon).\n\n\nIn general, all those data that establish general conditions of the game related to several processes are declared as global data. An example could be the score obtained by the player, that could be stored in the \nscore\n global variable. Thus, any process of the game could increment it, if necessary.\n\n\nA declaration of global data will define a single data that can be used for all the program's processes. But, a declaration of local data will define a variable of this kind and name for each of the program's processes.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    score=0;\nBEGIN\n    //...\nEND\n\n\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of global data."
        }, 
        {
            "location": "/declaration_of_global_datadot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    score=0;\nBEGIN\n    //...\nEND   See:  Syntax  -  Glossary", 
            "title": "Example"
        }, 
        {
            "location": "/declaration_of_local_datadot/", 
            "text": "LOCAL\n\n\n[\nlt;declaration of data\ngt;](declaration_of_a_variabledot.md) [;](semicolon.md)\n\n...\n\n\n\nThis section of the programs is optional, as local data, the \ndata that all the program's processes have\n are declared here, each one with its own values (as the \nx\n and \ny\n predefined local variables determine the coordinates of all the processes).\n\n\nA section must obligatory start with the reserved word \nLOCAL\n\nfollowed by a series of \ndeclarations of data\n finished with a symbol \n;\n (semicolon).\n\n\nIn general, the important information of the processes, the data to be consulted or modified from other processes, are declared as local data.\n\n\nThe energy remaining a process (a spacecraft, a shotgun, the character, etc.) could be an example. This information could be stored in the \nenergy\n local variable, so any process can access or modify the energy of the rest (for instance, on colliding with them, energy could be subtracted).\n\n\nExample\n\n\nPROGRAM my_game;\nLOCAL\n    energy=0;\nBEGIN\n    //...\nEND\n\n\n\n\nIf a variable declared as local is to be used only inside one process, then the former can be defined as a private data (inside the section \nPRIVATE\n of that process).\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of local data."
        }, 
        {
            "location": "/declaration_of_local_datadot/#example", 
            "text": "PROGRAM my_game;\nLOCAL\n    energy=0;\nBEGIN\n    //...\nEND  If a variable declared as local is to be used only inside one process, then the former can be defined as a private data (inside the section  PRIVATE  of that process).   See:  Syntax  -  Glossary", 
            "title": "Example"
        }, 
        {
            "location": "/declaration_of_private_datadot/", 
            "text": "PRIVATE\n\n\n[\nlt;declaration of data\ngt;](declaration_of_a_variabledot.md) [;](semicolon.md)\n\n...\n\n\n\nThese sections of the programs are optional. Private data, \ndata that are going to be used exclusively inside a process\n, can be declared in this section.\n\n\nThis section is defined just before the \nBEGIN\n of the process that is going to use these data and must start with the reserved word PRIVATE\nfollowed by a series of \ndeclarations of data\n finished with a symbol \n;\n (semicolon).\n\n\nThe main program is also considered as a process. Its declaration of private data can go just before its \nBEGIN\n.\n\n\nIn general, all the data that are going to contain information necessary only for a process, as well as those that can not be accessed from any other process, are declared as private data.\n\n\nThose variables that are going to be used as counters in a loop, variables to contain angles or secondary identifying codes, etc. are normally defined as private data.\n\n\nExample\n\n\nPROGRAM my_game;\nPRIVATE\n    n;\nBEGIN\n    FROM n=0 TO 9;\n        //...\n    END\n    //...\nEND\n\nPROCESS my_process()\nPRIVATE\n    id2;\n    angle2;\nBEGIN\n    id2=get_id(TYPE my_process);\n    IF (id2\n0)\n        angle2=id2.angle;\n        //...\n    END\n    //...\nEND\n\n\n\n\nIf you need to consult or modify a variable declared as private from another process (variable.identifier), then that data will have to be declared local (inside the program's section \nLOCAL\n). Thus, all the processes will have the data and every process can access its value or the value that this data has in another process.\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of private data."
        }, 
        {
            "location": "/declaration_of_private_datadot/#example", 
            "text": "PROGRAM my_game;\nPRIVATE\n    n;\nBEGIN\n    FROM n=0 TO 9;\n        //...\n    END\n    //...\nEND\n\nPROCESS my_process()\nPRIVATE\n    id2;\n    angle2;\nBEGIN\n    id2=get_id(TYPE my_process);\n    IF (id2 0)\n        angle2=id2.angle;\n        //...\n    END\n    //...\nEND  If you need to consult or modify a variable declared as private from another process (variable.identifier), then that data will have to be declared local (inside the program's section  LOCAL ). Thus, all the processes will have the data and every process can access its value or the value that this data has in another process.   See:  Syntax  -  Glossary", 
            "title": "Example"
        }, 
        {
            "location": "/declaration_of_a_variabledot/", 
            "text": "name\n\n\n(or, if the aim is to initialise)\n\n\nname\n \n=\n \nconstant\n\n\nTo declare a variable inside a \nGLOBAL\n, \nLOCAL\n\nor \nPRIVATE\n section, suffice will be to indicate its name inside that section. In this case, the variable will be initialised at 0 (zero).\n\n\nTo initialise the variable at other values, the symbol \n=\n (assignment) will be put after the name of the variable. The constant value at which the variable is intended to be initialised will be put after this symbol.\n\n\nA variable is a cell (or position) of the computer's memory to which we refer by its name and that can contain whole numeric values within the range (\nmin_int\n ... \nmax_int\n).\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of a variable."
        }, 
        {
            "location": "/declaration_of_a_variabledot/", 
            "text": "name\n\n\n(or, if the aim is to initialise)\n\n\nname\n \n=\n \nconstant\n\n\nTo declare a variable inside a \nGLOBAL\n, \nLOCAL\n\nor \nPRIVATE\n section, suffice will be to indicate its name inside that section. In this case, the variable will be initialised at 0 (zero).\n\n\nTo initialise the variable at other values, the symbol \n=\n (assignment) will be put after the name of the variable. The constant value at which the variable is intended to be initialised will be put after this symbol.\n\n\nA variable is a cell (or position) of the computer's memory to which we refer by its name and that can contain whole numeric values within the range (\nmin_int\n ... \nmax_int\n).\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of a variable."
        }, 
        {
            "location": "/declaration_of_a_tabledot/", 
            "text": "name\n \n \nconstant\n []\n\n\n(or, if the aim is to initialise the table)\n\n\nname\n \n \nconstant\n []\n \n=\n \nlist of constants\n\n\n(or, if it is initialised without defining its length)\n\n\nname\n \n []\n \n=\n \nlist of constants\n\n\nTo declare a table inside a \nGLOBAL\n, \nLOCAL\n\nor \nPRIVATE\n section, suffice will be to indicate its name followed by the length of the table in square brackets (symbols \n []\n). In that case, all the positions of the table will be initialised at 0 (zero).\n\n\nThe table's length is expressed as the maximum value of its index. That is to say, all the tables range from the position 0 to the position indicated in the square brackets in their declaration. For instance, a table declared as \nmy_table[9]\n, will be a table of length \n10\n (of 10 positions, from my_table[0] to my_table[9]).\n\n\nIf the aim is to initialise the different positions of the table, it is necessary to put the symbol \n=\n (assignment) after the previous declaration and, after this symbol, a \nlist of constants\n.\n\n\nIf the table is initialised with a list, then it is not necessary to indicate\nthe table's length in square brackets, as the compiler will create a table\nwith as many positions as the number of values included in the list.\n\n\nA table is a series of cells (or positions) of the computer's memory that is called by its name, appearing after it, in square brackets, the number of cell inside the table intended to be accessed.\n\n\nEvery table's cell is a variable that can contain whole numeric values within the range (\nmin_int\n ... \nmax_int\n).\n\n\nFor instance, if we declare a table as the following one:\n\n\n**my_table[]=33, -1, 6, -3, 99;**\n\n\n\nWe will be declaring a table whose name is \nmy_table\n and that has\n\n5\n cells (or positions), from cell no. 0 to cell no. 4. In the previous declaration, cell 0 (\nmy_table[0]\n) is initialised with the value \n33\n, cell 1 (\nmy_table[1]\n) with the value\n -1\n, etc.\n\n\nThe language allows us to access cell 0 simply with the name of the table (\nmy_table\n), as if it was a variable, omitting the zero in square brackets that should appear after. That is to say, for the compiler, \nmy_table[0]\n will be the same as \nmy_table\n (the first cell of the table).\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of a table."
        }, 
        {
            "location": "/declaration_of_a_structuredot/", 
            "text": "STRUCT\n \nname\n \n \nconstant\n []\n\n\n[\nlt;declaration of data\ngt;](declaration_of_a_variabledot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\n(or, if you initialise the structure)\n\n\nSTRUCT\n \nname\n \n \nconstant\n []\n\n\n[\nlt;declaration of data\ngt;](declaration_of_a_variabledot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n \n=\n \nlist of constants\n\n\nTo declare a structure inside a \nGLOBAL\n, \nLOCAL\n or \nPRIVATE\n section, it is necessary to put the reserved word \nSTRUCT\n preceding its name. After it, the number of records of the structure must be indicated, in square brackets (symbols \n[ ]\n).\n\n\nAfter this head defining the name of the structure and the number of records, all the data that belong to the structure and that will comprise its fields, will be declared. Finally, the reserved word \nEND\n must appear to finish the declaration.\n\n\nThe records' number of the structure is expressed as the maximum records' number of the structure. That is to say, all the structures have from record 0 to the record indicated in the square brackets. For instance, a structure declared as \nSTRUCT my_structure[9]\n, will be a structure of \n10\n records (from the record my_structure[0] to my_structure[9]).\n\n\nA structure is like an index card file (records), each of them with different written information (fields). For instance, a structure in which we could include the initial and final positions of a series of processes of a game could be as follows (an index card file with 10 cards, each of them indicating the (x, y) initial\nand the (x, y) final of a process):\n\n\nSTRUCT movement_enemies[9]\n\n\n**x_initial;**\n\n**y_initial;**\n\n**x_final;**\n\n**y_final;**\n\n\n\nEND\n\n\nThis structure, that would be accessed with the name \nmovement_enemies\n, has ten records and four fields in each record (two coordinates that determine the initial position of the process [x_initial ,y_final], and two that determine the final position [x_final, y_final]).\n\nMovement_enemy[0].x_final\n would be used to access the \nx\n final of the first enemy.\n\n\nThe language allows us to access the record 0 of the structure simply with the name of the structure (\nmovement_enemies.x_final\n), omitting the zero in square brackets that should come later. That is to say, for the compiler\n\nmovement_enemies[0].x_final\n will be the same as \nmovement_enemies.x_final\n.\n\n\nEach field of the structure may be a variable, a table\nor another complete structure, with its different records and fields.\n\n\nIf the aim is to initialise the structure (establishing the initial values of its fields in the different records), the symbol \n=\n (assignment) must be put after the reserved word \nEND\n followed by a \nlist of constants\n. If the structure is not initialised in this way, all the fields will be put at 0 by default.\n\n\nKeep in mind that , in order to initialise a structure, the first values will be the values of the fields of the first record, the following ones those of the second record, and so on. \n\n\nFor instance, if the following declaration is made:\n\n\nSTRUCT a[2]\n\n\nb;\n\nc[1];\n\n\n\nEND = 1, 2, 3, 4, 5, 6, 7, 8, 9;\n\n\nFirst, it must be taken into account that the structure \na\n has 3 records\n(from a[0] to a[2]) and that there are three fields (b, c[0] \n c[1]) in each record. Then, the previous declaration will initialise the structure in the following way:\n\n\na[0].b=1;\n\n\na[0].c[0]=2;\n\n\na[0].c[1]=3;\n\n\na[1].b=4;\n\n\na[1].c[0]=5;\n\n\n...\n\n\n\n\nSee: \nSyntax\n - \nGlossary", 
            "title": "Declaration of a structure."
        }, 
        {
            "location": "/definition_of_a_list_of_constantsdot/", 
            "text": "A constant is a constant value or numeric expression (see \ndefinition of constant\n).\n\n\nThe lists of constants are basically a series of constants separated by \ncommas (,)\n and they are used to initialise the values of tables or structures.\n\n\nAn example of a list of constants is shown below:\n\n\n1, 2, 3, 4, 5;\n\n\nBut, besides this basic definition, the use of the operator \nDUP\n is allowed to repeat a series of constants a specific number of times. For instance, the following list:\n\n\n0, 100 DUP (1, 2, 3), 0;\n\n\nIt is a list of 302 constants (0, 1, 2, 3, 1, 2, 3, ..., 1, 2, 3, 0). That is to say, that\nthe operator \nDUP\n (duplication) allows us to repeat the sequence appearing after it in brackets, the indicated number of times.\n\n\nIt is possible to nest operations \nDUP\n. For instance, the following list:\n\n\n2 \nDUP\n (88, 3 DUP (0, 1), 99);\n\n\nwould be equivalent to:\n\n\n88, 0, 1, 0, 1, 0, 1, 99, 88, 0, 1, 0, 1, 0, 1, 99;\n\n\nMoreover, the omission of the operator \nDUP\n, that\n\n2 DUP (0, 1)\n is equivalent to \n2(0, 1)\n, is allowed.\n\n\nThe operator DUP is specially useful to initialise structures. If, for instance, the aim is to initialise the following 100 record structure:\n\n\nSTRUCT a[99]\n\n\n**b;**\n\n**c[9];**\n\n**d[9];**\n\n\n\nEND\n\n\nWith the fields \nb\n initialised at \n0\n, the fields \nc[9]\n at \n1\n and the fields\n\nd[9]\n at \n2\n, the following list of initialisation would be used:\n\n\n100 \nDUP\n (0, 10 DUP(1), 10 DUP(2));\n\n\n\n\nSee: \nSyntax", 
            "title": "Definition of a list of constants."
        }, 
        {
            "location": "/declaration_of_librariesdot/", 
            "text": "IMPORT\n \nname of file\n\n\nThe creation of libraries of functions for the language is a \nvery advanced\n issue,\nonly for programmers with broad experience in the \nC\n language and/or \nAssembler\n.\n\n\nThe libraries must be distributed with two files: the first one, with extension \nDLL\n, \ncontaining the own library and, the second one, with the same name but with extension \nTXT\n, \nthat must be a text file ascii (MS-DOS), explaining the purpose and working of the library. \nAll the provided functions, the installation process and the use of the library must be \nexplained in the second file.\n\n\nThe libraries must be imported from the language, by inputting the reserved word \nIMPORT\n \n(after the declaration of local and global data) followed by the path of the file \nDLL\n. \nIf the file with extension \nDLL\n has been copied in the directory of \nDIV Games Studio\n, \nthen it is not necessary to specify the library's path.\n\n\nExample\n\n\nPROGRAM my_game;\nIMPORT \nhboy.dll\n;\nBEGIN\n    //...\nEND\n\n\n\n\nFrom the moment when the libraries of functions can freely be developed, \n{the correct working of DIV Games Studio is not guaranteed if external libraries \nDLL are used}. The incorrect working of the \nprograms' debugger\n can be usual when \na DLL which modifies vital parts of the library of functions or of the processes' \nmanager of DIV Games Studio is stored in a game.\n\n\n\n\nNote 1 In the first version of the DIV programming language, this\n\n\ndeclaration had to be done between the \nLOCAL\n and \nPRIVATE\n sections of the program.\n\n\nNote 2 The libraries prepared for the first version of the language {will not\n\n\nfunction correctly} in later versions, you must first re-compile\nthese libraries with the new declarations. In other words,\nthe font code of the libraries will still be valid, but they \nmust be re-compiled with new the headline files (because they\ncontain the declarations for the new data and structures which exist in the language).\n\n\nNote 3 If you are a programming expert in C and Assembler, you can get more\n\n\ninformation about the creation of new libraries in the file DLL\\SOURCE\\Readme.TXT on the \nDIV CD.\n\n\n\n\nSee: \nSyntax", 
            "title": "Declaration of libraries."
        }, 
        {
            "location": "/declaration_of_librariesdot/#example", 
            "text": "PROGRAM my_game;\nIMPORT  hboy.dll ;\nBEGIN\n    //...\nEND  From the moment when the libraries of functions can freely be developed, \n{the correct working of DIV Games Studio is not guaranteed if external libraries \nDLL are used}. The incorrect working of the  programs' debugger  can be usual when \na DLL which modifies vital parts of the library of functions or of the processes' \nmanager of DIV Games Studio is stored in a game.", 
            "title": "Example"
        }, 
        {
            "location": "/declaration_of_librariesdot/#note-1-in-the-first-version-of-the-div-programming-language-this", 
            "text": "declaration had to be done between the  LOCAL  and  PRIVATE  sections of the program.", 
            "title": "Note 1 In the first version of the DIV programming language, this"
        }, 
        {
            "location": "/declaration_of_librariesdot/#note-2-the-libraries-prepared-for-the-first-version-of-the-language-will-not", 
            "text": "function correctly} in later versions, you must first re-compile\nthese libraries with the new declarations. In other words,\nthe font code of the libraries will still be valid, but they \nmust be re-compiled with new the headline files (because they\ncontain the declarations for the new data and structures which exist in the language).", 
            "title": "Note 2 The libraries prepared for the first version of the language {will not"
        }, 
        {
            "location": "/declaration_of_librariesdot/#note-3-if-you-are-a-programming-expert-in-c-and-assembler-you-can-get-more", 
            "text": "information about the creation of new libraries in the file DLL\\SOURCE\\Readme.TXT on the \nDIV CD.   See:  Syntax", 
            "title": "Note 3 If you are a programming expert in C and Assembler, you can get more"
        }, 
        {
            "location": "/main_codedot/", 
            "text": "BEGIN\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) **;**\n\n...\n\n\n\nEND\n\n\nThe main code of a program starts with the reserved word \nBEGIN\n. After it, any number of statements may appear. The main code finishes with the reserved word \nEND\n.\n\n\nThis code controls the main process of the program, which initialises the program, controls the loops of the menu and game, and finishes the program.\n\n\nExample\n\n\nPROGRAM my_game;\n\nGLOBAL\n    option;             // Option chosen in the menu.\n\nBEGIN                   // Beginning of the main code.\n\n    set_mode(m640x480); // Beginning.\n    set_fps(24, 4);\n    // ...              // Loads files, sounds, etc.\n\n    REPEAT              // Beginning main loop.\n\n        option=0;       // Control loop of the options menu.\n        //...           // Begins the options menu.\n        REPEAT\n            // ...\n            IF (key(_enter)) option=1; END  // Playing is chosen.\n            IF (key(_esc)) option=2; END    // Finishing is chosen.\n            FRAME;\n        UNTIL (option\n0);\n\n        IF (option==1)  // If the playing option has been chosen.\n\n            // Starts regions, scroll, etc.\n            // Creates the game processes.\n            // Loop of game's control, expecting for its end.\n\n        END\n\n    UNTIL (option==2);  // End of the main loop.\n\n    let_me_alone();     // Finishes all the processes.\n\nEND                     // End of the main code.\n\n// ...                  // Declaration of the program's processes.\n\n\n\n\nThe end of the main code's execution does not imply the end of the program's execution, as it will continue if there are alive processes. To force the end of the program when the code finishes, it is possible to use, for instance, the \nlet_me_alone()\n function just before the \nEND\n that marks the main code's end, to eliminate the rest of processes that may remain alive.\n\n\nThe execution of the program can also be finished at any of its points with the \nexit()\n function, which will automatically eliminate all the processes.\n\n\n\n\nSee: \nSyntax", 
            "title": "Main code."
        }, 
        {
            "location": "/main_codedot/#example", 
            "text": "PROGRAM my_game;\n\nGLOBAL\n    option;             // Option chosen in the menu.\n\nBEGIN                   // Beginning of the main code.\n\n    set_mode(m640x480); // Beginning.\n    set_fps(24, 4);\n    // ...              // Loads files, sounds, etc.\n\n    REPEAT              // Beginning main loop.\n\n        option=0;       // Control loop of the options menu.\n        //...           // Begins the options menu.\n        REPEAT\n            // ...\n            IF (key(_enter)) option=1; END  // Playing is chosen.\n            IF (key(_esc)) option=2; END    // Finishing is chosen.\n            FRAME;\n        UNTIL (option 0);\n\n        IF (option==1)  // If the playing option has been chosen.\n\n            // Starts regions, scroll, etc.\n            // Creates the game processes.\n            // Loop of game's control, expecting for its end.\n\n        END\n\n    UNTIL (option==2);  // End of the main loop.\n\n    let_me_alone();     // Finishes all the processes.\n\nEND                     // End of the main code.\n\n// ...                  // Declaration of the program's processes.  The end of the main code's execution does not imply the end of the program's execution, as it will continue if there are alive processes. To force the end of the program when the code finishes, it is possible to use, for instance, the  let_me_alone()  function just before the  END  that marks the main code's end, to eliminate the rest of processes that may remain alive.  The execution of the program can also be finished at any of its points with the  exit()  function, which will automatically eliminate all the processes.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/declaration_of_processesdot/", 
            "text": "Two types of code blocks exist (besides the \n main code\n):\nthe \nPROCESS\n blocks (which will be detailed below), and the \nFUNCTION\n blocks.\n\n\nPROCESS\n \nname\n \n(\n \nparameters\n \n)\n\n\nDeclaration of private data\n\n\nBEGIN\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) **;**\n\n...\n\n\n\nEND\n\n\nA process must start with the reserved word \nPROCESS\n followed by its name and its call \nparameters\n in brackets. The parameters are a list of data in which the process is going to receive different values. The brackets are obligatory even if the process has no parameters.\n\n\nAfter this header, a \nPRIVATE\n section, declaring data to be used by the process exclusively, may be put optionally.\n\n\nAnd finally, the process code, that is a sequence of statements between the reserved words \nBEGIN\n and \nEND\n, will be specified.\n\n\nA process normally corresponds with a kind of object of the\ngame, such as a spacecraft, an explosion, a shot, etc. Inside the process' code, a loop (in which all the necessary values to display this object, such as graphic, coordinates, etc., will be established) is normally implemented. Then, with the \nFRAME\n statement, the order to display the object with the established attributes is given.\n\n\nExample\n\n\nPROGRAM my_game;\nPRIVATE\n    id2;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n    id2=my_process(160, 100);\n    write_int(0,150,10,4,offset id2);\n    write(0,100,10,4,\nProcess ID=\n);\n    // ...\nEND\n\nPROCESS my_process(x, y)\nPRIVATE\n    n;\nBEGIN\n    graph=100;\n    FROM n=0 to 99;\n        x=x+2;\n        y=y+1;\n        FRAME;\n    END\nEND\n\n\n\n\nAs it can be noticed in this example, when a process is called, it returns its \nidentifying code\n (that, in the example, is stored in the \nPRIVATE\n variable of the main program \nid2\n). If the aim is to implement a process in the style of the functions of other languages that returns a numeric result, then it is necessary to use the \nRETURN(\nvalue\n)\n statement, not using the \nFRAME\n statement inside the process, as this statement returns to the father process (caller), returning the process' \nidentifying code\n as return value.\n\n\n\n\nSee: \nSyntax\n  - \nThe blocks FUNCTION", 
            "title": "Declaration of processes."
        }, 
        {
            "location": "/declaration_of_processesdot/#example", 
            "text": "PROGRAM my_game;\nPRIVATE\n    id2;\nBEGIN\n    load_fpg( help/help.fpg );\n    id2=my_process(160, 100);\n    write_int(0,150,10,4,offset id2);\n    write(0,100,10,4, Process ID= );\n    // ...\nEND\n\nPROCESS my_process(x, y)\nPRIVATE\n    n;\nBEGIN\n    graph=100;\n    FROM n=0 to 99;\n        x=x+2;\n        y=y+1;\n        FRAME;\n    END\nEND  As it can be noticed in this example, when a process is called, it returns its  identifying code  (that, in the example, is stored in the  PRIVATE  variable of the main program  id2 ). If the aim is to implement a process in the style of the functions of other languages that returns a numeric result, then it is necessary to use the  RETURN( value )  statement, not using the  FRAME  statement inside the process, as this statement returns to the father process (caller), returning the process'  identifying code  as return value.   See:  Syntax   -  The blocks FUNCTION", 
            "title": "Example"
        }, 
        {
            "location": "/declaration_of_statementsdot/", 
            "text": "A statement is an order to be executed by the computer in a program. \nThe possible types of statements are the following ones:\n\n\nAssignment statements\n\n\n[=](assignment_statementdot.md)\n\n\n\nControl statements\n\n\n[IF](if_statements.md)\n\n[SWITCH](switch_statement.md)\n\n\n\nLoop statements\n\n\n[LOOP](loop_statement.md)\n\n[FROM](from_statement.md)\n\n[REPEAT](repeat_statement.md)\n\n[WHILE](while_statement.md)\n\n[FOR](for_statement.md)\n\n\n\nBreak statements\n\n\n[BREAK](break_statement.md)\n\n[CONTINUE](_continue_statement.md)\n\n[RETURN](return_statement.md)\n\n\n\nSpecial statements\n\n\n[FRAME](frame_statement.md)\n\n[CLONE](clone_statement.md)\n\n[DEBUG](debug_statement.md)\n\n\n\nCall statements\n\n\n[Call to a process](call_to_a_process.md)\n\n\n\nThe statements always appear as a group of statements, from none (which makes no sense) to as many as necessary.\n\n\nAll the statements will sequentially be executed (the first one,\nthe second one, the third one ...), with the exception of the statements that can control the flow of the program (control, loop and break statements).\n\n\n\n\nSee: \nSyntax", 
            "title": "Declaration of statements."
        }, 
        {
            "location": "/parameters_of_a_processdot/", 
            "text": "The parameters of a process are basically a list of data in which the process will receive different information every time it is called or used from another process.\n\n\nThe processes can receive parameters in the following types of data:\n\n\n\n\n\n\nA predefined local variable (such as \nx\n, \nsize\n, \nflags\n, ...).\n\n\n\n\n\n\nA local variable defined inside the \nLOCAL\n section.\n\n\n\n\n\n\nA global variable defined inside the \nGLOBAL\n section.\n\n\n\n\n\n\nA process' private variable declared inside the \nPRIVATE\n section of the process itself.\n\n\n\n\n\n\nA private variable \nnot declared\n inside the \nPRIVATE\n section.\n\n\n\n\n\n\nIn all these cases, it is understood that a variable may be referred to a variable,\nto a specific position of a table or to an element inside a structure.\n\n\nAs an example of the different types of parameters, a program with a process that receives five parameters different from the types respectively indicated in the previous list, is now shown.\n\n\nExample\n\n\nPROGRAM my_game;\nGLOBAL\n    score=0;\nLOCAL\n    energy=0;\nBEGIN\n    my_process(1, 2, 3, 4, 5);\n    // ...\nEND\n\nPROCESS my_process(x, energy, score, n, m)\nPRIVATE\n    n;\nBEGIN\n    // ...\nEND\n\n\n\n\nThe process \nmy_process\n receives five parameters in five variables:\npredefined local, local, global, \nprivate\n declared and \nprivate\n not\ndeclared variables.\n\n\nReceiving a parameter (such as the \nGLOBAL\n \nscore\n variable) in a global data is equivalent to make the assignment (\nscore=3;\n) and then,\ncall the process.\n\n\n\n\nSee: \nSyntax", 
            "title": "Parameters of a process."
        }, 
        {
            "location": "/parameters_of_a_processdot/#example", 
            "text": "PROGRAM my_game;\nGLOBAL\n    score=0;\nLOCAL\n    energy=0;\nBEGIN\n    my_process(1, 2, 3, 4, 5);\n    // ...\nEND\n\nPROCESS my_process(x, energy, score, n, m)\nPRIVATE\n    n;\nBEGIN\n    // ...\nEND  The process  my_process  receives five parameters in five variables:\npredefined local, local, global,  private  declared and  private  not\ndeclared variables.  Receiving a parameter (such as the  GLOBAL   score  variable) in a global data is equivalent to make the assignment ( score=3; ) and then,\ncall the process.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/assignment_statementdot/", 
            "text": "The assignment statements are used to calculate expressions and\n\nto assign them\n to a variable.\n\n\nReference to a variable\n \n=\n \nexpression\n \n;\n\n\nThe data in which the result of the expression is going to be stored must be indicated, followed by the symbol \n=\n (symbol of the \nassignment\n), as well as the numeric or logical expression to evaluate when the statement is executed. After this statement, the symbol\n ;(semicolon)\n must always be put.\n\n\nIn an assignment statement it is only allowed to assign values to objects\nsuch as any kind of variables, to a \nposition of a table\n,\nor to an \nelement of a structure\n.\n\n\nIt is not possible to assign a value to a \nconstant\n, to a function\nor to a process or, in general, to any \nnumeric or logical expression\n.\n\n\nNow, a program with several assignments is shown.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    x=x+1;\n    angle=(angle*3)/2-pi/2;\n    size=(x+y)/2;\n    z=abs(x-y)*3-pow(x, 2);\n    // ...\nEND\n\n\n\n\nThis is the basic form of the assignments, even if there are other symbols of assignment that, instead of assigning a new value to the referred variable, modify its value. These are the symbols of \noperative assignments\n:\n\n\n +=\n Adds to the variable the result of the expression\n\n\n    **x=2; x+=2;** -\ngt; (x==4)\n\n\n\n -=\n Subtracts from the variable the result of the expression\n\n\n    **x=4; x-=2;** -\ngt; (x==2)\n\n\n\n *=\n Multiplies the variable by the result of the expression\n\n\n    **x=2; x*=3;** -\ngt; (x==6)\n\n\n\n /=\n Divides the variable by the result of the expression\n\n\n    **x=8; x/=2;** -\ngt; (x==4)\n\n\n\n %=\n Puts in the variable the remainder of dividing it by the result of the\nexpression\n\n\n    **x=3; x%=2;** -\ngt; (x==1)\n\n\n\n \n=\n Performs an AND (binary and/or logical) between the variable and the result of the expression, assigning it as a new variable's value\n\n\n    **x=5; x\namp;=6;** -\ngt; (x==4)\n\n\n\n |=\n Performs an OR (binary and/or logical) between the variable and the result of the expression, assigning it as a new variable's value\n\n\n    **x=5; x|=6;** -\ngt; (x==7)\n\n\n\n ^=\n Performs an exclusive OR (XOR binary and/or logical) between the data and the result of the expression, assigning it as a new variable's value\n\n\n    **x=5; x^=3;** -\ngt; (x==3)\n\n\n\n \n=\n Rotates the variable to the right as many times as indicated by the result of the expression (each rotation to the right is equivalent to dividing the variable by 2)\n\n\n    **x=8; x\ngt;\ngt;=2;** -\ngt; (x==2)\n\n\n\n \n=\n Rotates the variable to the left as many times as indicated by the result of the expression (each rotation to the left is equivalent to multiplying the variable by 2)\n\n\n    **x=2; x\nlt;\nlt;=2;** -\ngt; (x==8)\n\n\n\nWithin the category of assignment statements, the \nincrements\n and \ndecrements\n of a variable are also allowed. For instance, if we wanted to add 1\nto the local variable \nx\n we could do it either with the \nx=x+1;\n or\n\nx+=1;\n statements, or with the operator of increment: \nx++;\n o\n ++x;\n.\n\n\nThat is to say, \nincrements ( ++ )\n or \ndecrements ( -- )\n of a variable are accepted as assignment statements.\n\n\n\n\nSee: \nSyntax", 
            "title": "Assignment statement."
        }, 
        {
            "location": "/assignment_statementdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    x=x+1;\n    angle=(angle*3)/2-pi/2;\n    size=(x+y)/2;\n    z=abs(x-y)*3-pow(x, 2);\n    // ...\nEND  This is the basic form of the assignments, even if there are other symbols of assignment that, instead of assigning a new value to the referred variable, modify its value. These are the symbols of  operative assignments :   +=  Adds to the variable the result of the expression      **x=2; x+=2;** - gt; (x==4)   -=  Subtracts from the variable the result of the expression      **x=4; x-=2;** - gt; (x==2)   *=  Multiplies the variable by the result of the expression      **x=2; x*=3;** - gt; (x==6)   /=  Divides the variable by the result of the expression      **x=8; x/=2;** - gt; (x==4)   %=  Puts in the variable the remainder of dividing it by the result of the\nexpression      **x=3; x%=2;** - gt; (x==1)    =  Performs an AND (binary and/or logical) between the variable and the result of the expression, assigning it as a new variable's value      **x=5; x amp;=6;** - gt; (x==4)   |=  Performs an OR (binary and/or logical) between the variable and the result of the expression, assigning it as a new variable's value      **x=5; x|=6;** - gt; (x==7)   ^=  Performs an exclusive OR (XOR binary and/or logical) between the data and the result of the expression, assigning it as a new variable's value      **x=5; x^=3;** - gt; (x==3)    =  Rotates the variable to the right as many times as indicated by the result of the expression (each rotation to the right is equivalent to dividing the variable by 2)      **x=8; x gt; gt;=2;** - gt; (x==2)    =  Rotates the variable to the left as many times as indicated by the result of the expression (each rotation to the left is equivalent to multiplying the variable by 2)      **x=2; x lt; lt;=2;** - gt; (x==8)  Within the category of assignment statements, the  increments  and  decrements  of a variable are also allowed. For instance, if we wanted to add 1\nto the local variable  x  we could do it either with the  x=x+1;  or x+=1;  statements, or with the operator of increment:  x++;  o  ++x; .  That is to say,  increments ( ++ )  or  decrements ( -- )  of a variable are accepted as assignment statements.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/if_statements/", 
            "text": "IF\n \n(\n \ncondition\n \n)\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\n(or)\n\n\nIF\n \n(\n \ncondition\n \n)\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nELSE\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\nThe \nIF\n statement is used to run a block of statements optionally, when a condition is complied. In the second aforementioned variant,\nanother block of statements will also be executed (inside the\n\nELSE\n section) when the condition is \nnot\n complied.\n\n\nA program with several \nIF\n statements is now shown.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n\n    IF (key(_esc))\n        exit(\nGood by!\n, 0);\n    END\n\n    IF (x\n100 AND x\n220)\n        y=y+4;\n    ELSE\n        y=y-8;\n    END\n\n    IF (size\n0)\n        size=size-1;\n    END\n\n    IF (timer[5]\n1000)\n        z=1;\n    ELSE\n        z=-1;\n    END\n\n    // ...\nEND\n\n\n\n\nIt is possible to nest \nIF\n statements with no limits. That is to say, more \nIF\n statements can be put inside the part that is running when the condition is complied (\nIF part\n) or inside the one that is executed when the condition is not\ncomplied (part \nELSE\n).\n\n\n\n\nSee: \nSyntax", 
            "title": "IF statements"
        }, 
        {
            "location": "/if_statements/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n\n    IF (key(_esc))\n        exit( Good by! , 0);\n    END\n\n    IF (x 100 AND x 220)\n        y=y+4;\n    ELSE\n        y=y-8;\n    END\n\n    IF (size 0)\n        size=size-1;\n    END\n\n    IF (timer[5] 1000)\n        z=1;\n    ELSE\n        z=-1;\n    END\n\n    // ...\nEND  It is possible to nest  IF  statements with no limits. That is to say, more  IF  statements can be put inside the part that is running when the condition is complied ( IF part ) or inside the one that is executed when the condition is not\ncomplied (part  ELSE ).   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/switch_statement/", 
            "text": "SWITCH\n \n(\n \nexpression\n \n)\n\n\n[CASE](case.md) **\nlt;range of values\ngt;** [:](colon.md)\n\n    [\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n    ...\n\n[END](end.md)\n\n...\n\n[DEFAULT](default.md) [:](colon.md)\n\n    [\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n    ...\n\n[END](end.md)\n\n\n\nEND\n\n\nA \nSWITCH\n statement is made up with a series of \nCASE\n sections and, optionally, of a \nDEFAULT\n section.\n\n\nWhen a \nSWITCH\n statement is executed, the expression is first evaluated and then, if the result is within the range of values included in the first \nCASE\n section, its statements will be executed and the statement will finish. If the result of the expression is not in the first \nCASE\n, it will be looked for in the second, third, etc. \nCASE\n. Finally, if there is a \nDEFAULT\n section and the result of the expression has not coincided with any of the \nCASE\n sections, then the statements of the \nDEFAULT\n section will be executed.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    SWITCH (x)\n        CASE 1:\n            x=-1;\n        END\n        CASE 2:\n            x=-2;\n        END\n        CASE 3:\n            x=-3;\n        END\n        CASE 99:\n            x=-99;\n        END\n        DEFAULT:\n            x=0;\n        END\n    END\nEND\n\n\n\n\nThe \nSWITCH\n statement of this program will change the sign of the \nx\n variable if it is equal to \n1\n, \n2\n, \n3\n or \n99\n. Otherwise, the statement will put the variable at \n0\n.\n\n\nRange of values of a case section\n---------------------------------------\n\n\nA value, a range of values (minimum \n..\n maximum), or a list of values and/or ranges separated by \ncommas (,)\n may be specified in a case section. For instance, the previous statement could have been expressed as follows:\n\n\nSWITCH (x)\n\n\n  **CASE 1..3, 99:**\n\n      **x=-x;**\n\n  **END**\n\n  ### DEFAULT\n\n      **x=0;**\n\n  **END**\n\n\n\nEND\n\n\nOnce one of the \nCASE\n sections of a \nSWITCH\n statement has been executed \nno more sections will be executed\n, even if they also specify the\nresult of the expression, for instance, in the following statement:\n\n\nSWITCH (2+2)\n\n\n  **CASE 3..5:**\n\n      **x=x+1;**\n\n  **END**\n\n  **CASE 2, 4, 6:**\n\n      **y=y-1;**\n\n  **END**\n\n\n\nEND\n\n\nThe \nx=x+1;\n section will be executed and then, the statement will finish and the \ny=y-1;\n section won't be executed as, even if the result of the evaluated expression (\n4\n) is included in it, it is also included in the previous section,\n(as 4 is within the range 3..5).\n\n\nIt is not necessary to arrange the \nCASE\n sections according to their values (smaller to larger, or larger to smaller), but it is indispensable that the \nDEFAULT\n section (if it exits) is the last section. There can only be one \nDEFAULT\n section.\n\n\nIt is possible to nest \nSWITCH\n statements with no limits. That is to say, new \nSWITCH\n statements (and any other kind of statement) can be put inside a \nCASE\n section.\n\n\n\n\nSee: \nSyntax", 
            "title": "SWITCH statement"
        }, 
        {
            "location": "/switch_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    SWITCH (x)\n        CASE 1:\n            x=-1;\n        END\n        CASE 2:\n            x=-2;\n        END\n        CASE 3:\n            x=-3;\n        END\n        CASE 99:\n            x=-99;\n        END\n        DEFAULT:\n            x=0;\n        END\n    END\nEND  The  SWITCH  statement of this program will change the sign of the  x  variable if it is equal to  1 ,  2 ,  3  or  99 . Otherwise, the statement will put the variable at  0 .  Range of values of a case section ---------------------------------------  A value, a range of values (minimum  ..  maximum), or a list of values and/or ranges separated by  commas (,)  may be specified in a case section. For instance, the previous statement could have been expressed as follows:  SWITCH (x)    **CASE 1..3, 99:**\n\n      **x=-x;**\n\n  **END**\n\n  ### DEFAULT\n\n      **x=0;**\n\n  **END**  END  Once one of the  CASE  sections of a  SWITCH  statement has been executed  no more sections will be executed , even if they also specify the\nresult of the expression, for instance, in the following statement:  SWITCH (2+2)    **CASE 3..5:**\n\n      **x=x+1;**\n\n  **END**\n\n  **CASE 2, 4, 6:**\n\n      **y=y-1;**\n\n  **END**  END  The  x=x+1;  section will be executed and then, the statement will finish and the  y=y-1;  section won't be executed as, even if the result of the evaluated expression ( 4 ) is included in it, it is also included in the previous section,\n(as 4 is within the range 3..5).  It is not necessary to arrange the  CASE  sections according to their values (smaller to larger, or larger to smaller), but it is indispensable that the  DEFAULT  section (if it exits) is the last section. There can only be one  DEFAULT  section.  It is possible to nest  SWITCH  statements with no limits. That is to say, new  SWITCH  statements (and any other kind of statement) can be put inside a  CASE  section.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/while_statement/", 
            "text": "WHILE\n \n(\n \ncondition\n \n)\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\nThe \nWHILE\n statement implements a \nloop\n. That is to say, it is capable of {repeating a group \nof statements a specific number of times}.\n\n\nIn order to implement this loop, the condition that has to be complied for the group of \nstatements to be executed must be specified in brackets, after the reserved word \nWHILE\n. \nAll the statements that necessarily have to be repeated will be put after the specification \nof this condition. Finally, the end of the loop will be marked with the reserved word \nEND\n \n(It doesn't matter whether\nmore words \nEND\n appear inside the loop when they belong to internal statements of that loop).\n\n\nWhen a \nWHILE\n statement is executed, the specified verification will be carried out. \nIf the result is true, the internal statements will be executed. Otherwise, the program will \ncontinue from the \nEND\n, that marks the end of the \nWHILE\n.\n\n\nIf the internal statements have been executed (what is called to make a loop's \niteration\n), \nthe condition will be verified again. If it is true, another \niteration\n will be made \n(the internal statements will be executed again). This process will be repeated until it is \nverified that the condition of the \nWHILE\n is false.\n\n\nIf the condition turns to be false directly while a \nWHILE\n statement is executed, then \nthe internal statements will never be executed.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    x=0;\n    WHILE (x\n320)\n        x=x+10;\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, the \nx\n local variable ( x coordinate of the process) will be put at \nzero and then, providing that x is less than 320, 10 will be added to \nx\n and a \nFRAME\n will be performed.\n\n\nA \nBREAK\n statement inside a \nWHILE\n loop will immediately finish it, continuing the program from the following statement to that loop.\n\n\nA \nCONTINUE\n statement inside a \nWHILE\n loop will force the program to\nverify the initial condition immediately and, if it is true, to execute again the internal statements from the beginning (after the \nWHILE\n).\nIf the condition turns to be false, the \nCONTINUE\n statement will finish the loop.\n\n\nThe internal statements of a \nWHILE\n loop can be as many as desired, and of any kind, obviously including new \nWHILE\n loops.\n\n\n\n\nSee: \nSyntax", 
            "title": "WHILE statement"
        }, 
        {
            "location": "/while_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    x=0;\n    WHILE (x 320)\n        x=x+10;\n        FRAME;\n    END\nEND  In this example, the  x  local variable ( x coordinate of the process) will be put at \nzero and then, providing that x is less than 320, 10 will be added to  x  and a  FRAME  will be performed.  A  BREAK  statement inside a  WHILE  loop will immediately finish it, continuing the program from the following statement to that loop.  A  CONTINUE  statement inside a  WHILE  loop will force the program to\nverify the initial condition immediately and, if it is true, to execute again the internal statements from the beginning (after the  WHILE ).\nIf the condition turns to be false, the  CONTINUE  statement will finish the loop.  The internal statements of a  WHILE  loop can be as many as desired, and of any kind, obviously including new  WHILE  loops.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/repeat_statement/", 
            "text": "REPEAT\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nUNTIL\n \n(\n \ncondition\n \n)\n\n\nThe \nREPEAT\n (REPEAT ... UNTIL( ... )) statement implements a \nloop\n. That is to say, it is capable of \nrepeating a group of statements a specific number of times\n.\n\n\nIn order to implement this loop, it is necessary to start with the reserved word \nREPEAT\n, followed by the statements that you want to repeat once or more times, and the end of the statement will be determined by putting the reserved word \nUNTIL\n, followed by the condition that has to be complied for \nthe statement to finish\n.\n\n\nWhen a \nREPEAT\n statement is executed, the internal statements (those placed between the \nREPEAT\n and the \nUNTIL\n) will be executed first and then, the condition specified in the \nUNTIL\n will be verified. If it is still false, the internal statements will be executed again. The process will be repeated until the condition of the \nUNTIL\n turns to be true, continuing then the execution of the program after this statement.\n\n\nEvery time that the internal statements are executed, a loop's \niteration\n has been made. The \nREPEAT\n ... \nUNTIL\n (the \ncondition\n is complied) statement will always execute the internal statements at least once, so it always verifies the condition after the execution.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    x=0;\n    REPEAT\n        x=x+10;\n        FRAME;\n    UNTIL (x\n320)\nEND\n\n\n\n\nIn this example, the \nx\n local variable (x coordinate of the process) will be put at \nzero and then, 10 will be added to \nx\n and a \nFRAME\n will be performed \nuntil\n \nx\n becomes a number bigger than 320.\n\n\nA \nBREAK\n statement inside a \nREPEAT\n loop will immediately finish it, continuing the program from the following statement to that loop.\n\n\nA \nCONTINUE\n statement inside a \nREPEAT\n loop will force the program to immediately make the verification of the \nUNTIL\n and, if it is true, it will execute again the internal statements from the beginning (after the reserved word \nREPEAT\n). If the condition turns to be true, the \nCONTINUE\n statement will finish the loop.\n\n\nThe internal statements of a \nREPEAT \n loop can be as many as desired, and of any kind, obviously including new \nREPEAT\n loops.\n\n\n\n\nSee: \nSyntax", 
            "title": "REPEAT statement"
        }, 
        {
            "location": "/repeat_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    x=0;\n    REPEAT\n        x=x+10;\n        FRAME;\n    UNTIL (x 320)\nEND  In this example, the  x  local variable (x coordinate of the process) will be put at \nzero and then, 10 will be added to  x  and a  FRAME  will be performed  until   x  becomes a number bigger than 320.  A  BREAK  statement inside a  REPEAT  loop will immediately finish it, continuing the program from the following statement to that loop.  A  CONTINUE  statement inside a  REPEAT  loop will force the program to immediately make the verification of the  UNTIL  and, if it is true, it will execute again the internal statements from the beginning (after the reserved word  REPEAT ). If the condition turns to be true, the  CONTINUE  statement will finish the loop.  The internal statements of a  REPEAT   loop can be as many as desired, and of any kind, obviously including new  REPEAT  loops.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/loop_statement/", 
            "text": "LOOP\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\nThe \nLOOP\n statement implements an \ninfinite loop\n. That is to say, it \nindefinitely repeats a group of statements\n.\n\n\nIn order to implement this loop, it is necessary to start with the reserved word \nLOOP\n, followed by the statements intended to be repeated continuously, putting the reserved word \nEND\n at the end.\n\n\nWhen a \nLOOP\n ... \nEND\n statement is found in a program, all the internal statements of that loop will repeatedly be executed from this position.\n\n\nIn order to finish a \nLOOP\n loop, it is possible to use the \nBREAK\n statement which, on being executed inside a loop of this kind, will force the program to continue from the \nEND\n.\n\n\nEvery time that the internal statements are executed, a loop's \niteration\n has been made. The \nCONTINUE\n statement inside a loop will finish the current \niteration\n and will start the following one (the program will go on running after the reserved word \nLOOP\n.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    x=0;\n    LOOP\n        IF (key(_esc))\n            BREAK;\n        END\n        x=x+1;\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, the \nx\n local variable (x coordinate of the process) will be put at \nzero and then, 1 will be added to \nx\n and a \nFRAME\n will continuously be done. If the escape key (\nESC\n) is pressed, then the \nBREAK\n statement will be executed, finishing the \nLOOP\n loop.\n\n\nThe internal statements of a \nLOOP\n loop can be as many as desired, and of any kind, obviously including new \nLOOP\n loops.\n\n\n\n\nSee: \nSyntax", 
            "title": "LOOP statement"
        }, 
        {
            "location": "/loop_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    x=0;\n    LOOP\n        IF (key(_esc))\n            BREAK;\n        END\n        x=x+1;\n        FRAME;\n    END\nEND  In this example, the  x  local variable (x coordinate of the process) will be put at \nzero and then, 1 will be added to  x  and a  FRAME  will continuously be done. If the escape key ( ESC ) is pressed, then the  BREAK  statement will be executed, finishing the  LOOP  loop.  The internal statements of a  LOOP  loop can be as many as desired, and of any kind, obviously including new  LOOP  loops.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/for_statement/", 
            "text": "FOR\n \n(\ninitialisation\n;\n \ncondition\n;\n \nincrement\n)\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\nThe \nFOR\n statement (replica of the C language) implements a \nloop\n and is capable of {repeating \na group of statements a specific number of times}.\n\n\nIn order to implement this loop, three different parts must be specified in brackets, \nseparated by symbols \n;\n (semicolon) after the reserved word \nFOR\n. \nThese three parts, that are optional (they can be omitted), are the following ones:\n\n\n\n\n\n\nInitialisation\n. An assignment statement is normally codified in this part. This kind of statement establishes the initial value of the variable that is going to be used as a counter of the loop's \niterations\n (each execution of the inner group of statements is called a loop's \niteration\n).  The assignment statement \nx=0\n, that would put the \nx\n variable at zero at the beginning of the loop (value\nfor the first iteration), is an example.\n\n\n\n\n\n\nCondition\n. A condition is specified in this part. Just before each iteration, this condition will be checked and, if it is true, the group of statements will be executed. If the condition is false, the \nFOR\n loop will finish, continuing the program after the \nEND\n of the \nFOR\n loop.\nAn example of condition can be \nx\n10\n, that would allow the inner group of statements to be executed only when the \nx\n variable is a number\nless than \n10\n.\n\n\n\n\n\n\nIncrement\n. The increment of the variable used as a counter for each iteration of the loop is indicated in the third part. It is normally expressed with an assignment statement. For instance, the \nx=x+1\n statement would add \n1\n to the \nx\n variable after each iteration of the loop.\n\n\n\n\n\n\nThe group of inner statements of the loop that are going to sequentially be repeated while the condition of continuance (second part) is complied, must appear after the definition of the \nFOR\n loop with its three parts. After this group of statements, the reserved word \nEND\n will determine the end of the \nFOR\n loop.\n\n\nWhen a \nFOR\n statement appears in a program, the part of the initialisation will be executed first, \nchecking the condition. If it is true, the inner group of statements first and, the part of the \nincrement then, will be executed, being the condition checked again, etc. If, before any iteration, \nthe condition turns to be false, the \nFOR\n loop will immediately finish.\n\n\nA program with a \nFOR\n loop containing the three parts mentioned in the previous sections is now shown.\n\n\nExample:}\n\n\nPROGRAM my_game;\nBEGIN\n    FOR ( x=0 ; x\n10 ; x=x+1 )\n        // The internal statements would be put here.\n    END\nEND\n\n-\n\n\nThis loop would first run with the \nx\n variable equal to \n0\n, the second one equal to \n1\n, ..., and the last variable equal to \n9\n. The part of the increment would be executed after this iteration, becoming \nx\n equal to \n10\n. Then, on\nchecking the condition of continuance in the loop (\nx\n is less than \n10\n), if it is false, the loop would finish.\n\n\nAs it has been mentioned, the three parts in the definition of the loop are optional. If the three were omitted:\n\n\nFOR ( ; ; )\n\n\n  // ...\n\n\n\nEND\n\n\nThen, this loop would be equivalent to a \nLOOP\n ... \nEND\n loop.\n\n\nMoreover, several parts of initialisation, condition or increment can be put in a \nFOR\n loop, separated by commas (\n,\n). At first, all the initialisations will be executed. Then, all the conditions of continuance will be checked (if any of them turns to be false, the loop will finish). The inner statements and, after every iteration, all the increments, will finally be checked.\n\n\nExample:\n\nPROGRAM my_game;\nBEGIN\n    FOR ( x=0, y=1000 ; x\ny ; x=x+2, y=y+1 )\n        // The internal statements would be put here.\n    END\nEND\n\n-\n\n\nA \nBREAK\n statement inside a \nFOR\n loop will immediately finish it, continuing the program from the following statement of this loop.\n\n\nA \nCONTINUE\n statement inside a \nFOR\n loop will force to execute the part of the increment directly and then, to verify the condition of continuance. If it is true, then the inner statements will be executed again from the beginning. If the condition turns to be false, then the \nCONTINUE\n statement will finish the \nFOR\n loop.\n\n\nA \nFOR\n loop is practically equivalent to a \nWHILE\n loop, implemented\nin the following way:\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nBEGIN\n    x=0;\n    WHILE (x\n10)\n        // The internal statements would be put here.\n        x=x+1;\n    END\nEND\n\n\n\n\nWith the only exception that a \nCONTINUE\n statement, inside this \nWHILE\n loop, would not execute the part of the increment, while it would do so inside a \nFOR\n loop.\n\n\nIf, after the execution of the initialisation, the condition turns to be false directly inside a \nFOR\n loop, no inner statements will ever be executed.\n\n\nThe internal statements of a \nFOR\n loop can be as many as desired, and of any kind, obviously including new \nFOR \n loops.\n\n\n\n\nSee: \nSyntax", 
            "title": "FOR statement"
        }, 
        {
            "location": "/for_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    FOR ( x=0 ; x 10 ; x=x+1 )\n        // The internal statements would be put here.\n    END\nEND -  This loop would first run with the  x  variable equal to  0 , the second one equal to  1 , ..., and the last variable equal to  9 . The part of the increment would be executed after this iteration, becoming  x  equal to  10 . Then, on\nchecking the condition of continuance in the loop ( x  is less than  10 ), if it is false, the loop would finish.  As it has been mentioned, the three parts in the definition of the loop are optional. If the three were omitted:  FOR ( ; ; )    // ...  END  Then, this loop would be equivalent to a  LOOP  ...  END  loop.  Moreover, several parts of initialisation, condition or increment can be put in a  FOR  loop, separated by commas ( , ). At first, all the initialisations will be executed. Then, all the conditions of continuance will be checked (if any of them turns to be false, the loop will finish). The inner statements and, after every iteration, all the increments, will finally be checked.  Example: \nPROGRAM my_game;\nBEGIN\n    FOR ( x=0, y=1000 ; x y ; x=x+2, y=y+1 )\n        // The internal statements would be put here.\n    END\nEND -  A  BREAK  statement inside a  FOR  loop will immediately finish it, continuing the program from the following statement of this loop.  A  CONTINUE  statement inside a  FOR  loop will force to execute the part of the increment directly and then, to verify the condition of continuance. If it is true, then the inner statements will be executed again from the beginning. If the condition turns to be false, then the  CONTINUE  statement will finish the  FOR  loop.  A  FOR  loop is practically equivalent to a  WHILE  loop, implemented\nin the following way:  {#9999,Example  PROGRAM my_game;\nBEGIN\n    x=0;\n    WHILE (x 10)\n        // The internal statements would be put here.\n        x=x+1;\n    END\nEND  With the only exception that a  CONTINUE  statement, inside this  WHILE  loop, would not execute the part of the increment, while it would do so inside a  FOR  loop.  If, after the execution of the initialisation, the condition turns to be false directly inside a  FOR  loop, no inner statements will ever be executed.  The internal statements of a  FOR  loop can be as many as desired, and of any kind, obviously including new  FOR   loops.   See:  Syntax", 
            "title": "Example:}"
        }, 
        {
            "location": "/break_statement/", 
            "text": "A \nBREAK\n statement inside a loop will immediately finish it, continuing the program from the following statement to that loop.\nThis statement can only be put inside the following loops:\n\n\nLOOP\n ... \nEND\n\n\nFROM\n .. \nTO\n .. \nSTEP\n .. ... \nEND\n\n\nREPEAT\n ... \nUNTIL\n \n(\n .. \n)\n\n\nWHILE\n \n(\n .. \n)\n ... \nEND\n\n\nFOR\n \n(\n .. \n#1068;\n .. \n;\n .. \n)\n ... \nEND\n\n\nA \nBREAK\n sentence will make the program continue its execution after the \nEND\n or the \nUNTIL\n of the loop closer to the statement.\n\n\nIf there are several nested loops (one inside another one), the \nBREAK\n statement will only exit the inner loop.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    LOOP\n        REPEAT\n            IF (key(_esc)) BREAK; END\n            //...\n            FRAME;\n        UNTIL (x==0);\n        //...\n    END\nEND\n\n\n\n\nIn this example, the \nBREAK\n statement will exit the \nREPEAT\n ... \nUNTIL\n (when the \n\nESC\n key is pressed), but not the \nLOOP\n ... \nEND\n.\n\n\nImportant\n---------------------------------------\n\n\nThe \nBREAK\n statement is not valid to finish \nIF\n,\n\nSWITCH\n (or the \nCASE\n sections of this statement), or\n\nCLONE\n statements.\n\n\nBREAK\n can only finish the statements that implement a loop.\n\n\n\n\nSee: \nSyntax", 
            "title": "BREAK statement"
        }, 
        {
            "location": "/break_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    LOOP\n        REPEAT\n            IF (key(_esc)) BREAK; END\n            //...\n            FRAME;\n        UNTIL (x==0);\n        //...\n    END\nEND  In this example, the  BREAK  statement will exit the  REPEAT  ...  UNTIL  (when the  ESC  key is pressed), but not the  LOOP  ...  END .  Important ---------------------------------------  The  BREAK  statement is not valid to finish  IF , SWITCH  (or the  CASE  sections of this statement), or CLONE  statements.  BREAK  can only finish the statements that implement a loop.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/_continue_statement/", 
            "text": "A \nCONTINUE\n statement inside a loop will force the program to\nfinish its current iteration and start the following iteration.\n\n\nWe call \niteration\n to each execution of the set of statements internal to a loop (the statements between a \nLOOP\n and its \nEND\n, for instance).\n\n\nThis statement can only be put inside one of the following loops:\n\n\nLOOP\n ... \nEND\n\n\nA CONTINUE inside this loop will jump to the LOOP.\n\n\nFROM\n .. \nTO\n .. \nSTEP\n .. ... \nEND\n\n\nA CONTINUE inside this loop will perform the increment (STEP) and, if the value indicated in the TO has not been passed, the program will continue at the beginning of the loop.\n\n\nREPEAT\n ... \nUNTIL\n \n(\n .. \n)\n\n\nA CONTINUE inside this loop will jump to the UNTIL.\n\n\nWHILE\n \n(\n .. \n)\n ... \nEND\n\n\nA CONTINUE inside this loop will jump to the WHILE.\n\n\nFOR\n \n(\n .. \n;\n .. \n;\n .. \n)\n ... \nEND\n\n\nA CONTINUE inside this loop will perform the increment\nand the comparison. If the latter is true, the program will continue at the beginning of the loop. But if it is false, the program will continue after the END of the FOR.\n\n\nIf there are several nested loops (one inside another), the \nCONTINUE\n statement will take effect only in the inner loop.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    FOR (x=0, y=0;x\n10;x++)\n        IF (x\n5) CONTINUE; END\n        y++;\n    END\nEND\n\n\n\n\nIn this example, after the whole loop has been executed, \nx\n will be equal to \n10\n and \ny\n will be equal to \n5\n as, providing that \nx\n is less than 5, the \nCONTINUE\n statement prevents the \ny++;\n statement from being executed.\n\n\nImportant\n---------------------------------------\n\n\nThe \nCONTINUE\n statement is not valid inside \nIF\n,\n\nSWITCH\n (or the \nCASE\n sections of this statement), or\n\nCLONE\n statements (as these statements do not implement loops and, therefore, they do not make iterations).\n\n\n\n\nSee: \nSyntax", 
            "title": " CONTINUE statement"
        }, 
        {
            "location": "/_continue_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    FOR (x=0, y=0;x 10;x++)\n        IF (x 5) CONTINUE; END\n        y++;\n    END\nEND  In this example, after the whole loop has been executed,  x  will be equal to  10  and  y  will be equal to  5  as, providing that  x  is less than 5, the  CONTINUE  statement prevents the  y++;  statement from being executed.  Important ---------------------------------------  The  CONTINUE  statement is not valid inside  IF , SWITCH  (or the  CASE  sections of this statement), or CLONE  statements (as these statements do not implement loops and, therefore, they do not make iterations).   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/return_statement/", 
            "text": "The \nRETURN\n statement immediately finishes the current process, as if the \nEND\n of its \nBEGIN\n was reached.\n\n\nWhen this statement is included in the main code, it will finish the current process. But if there are alive processes, they will go on running. For instance, the \nexit()\n function can be used to finish a program and all its processes.\n\n\nA \nRETURN\n inside a process will finish it, killing this process.\n\n\nExample:}\n\n\nPROGRAM my_game;\nBEGIN\n    LOOP\n        IF (key(_esc))\n            RETURN;\n        END\n        FRAME;\n    END\nEND\n\n-\n\n\nIn this example, the \nRETURN\n statement will be executed by pressing the escape key (\nESC\n), finishing the program.\n\n\nUse of RETURN to return a value\n---------------------------------------\n\n\nIt is possible to design processes with a performance similar to the functions\nof other programming languages, that {receive a series of parameters and\nreturn a value}. For instance, a process receiving two numeric values and returning the biggest one.\n\n\nFor that, this statement must be used with the following syntax:\n\n\nRETURN(\nexpression\n)\n\n\nIt is also important not to use the \nFRAME\n statement inside the process,\nas this statement will immediately return to the calling process. When the compiler finds the \nFRAME\n statement inside a \nPROCESS\n, it directly classes it as a process, ruling out its hypothetical use as a function.\n\n\nImportant To return a value with the \nRETURN\n statement after execution of one or more\n\n\nFRAME\n statements , you must make a block of this type, ie. a \nFUNCTION\n.\n\n\n\n\nThe example proposed before is shown now: an implementation of the\nmathematical function \nmax\n that returns the greater of its two parameters.\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nBEGIN\n    x=max(2, 3)+max(5, 4);\nEND\nPROCESS max(a, b)\nBEGIN\n    IF (a\nb)\n        RETURN(a);\n    ELSE\n        RETURN(b);\n    END\nEND\n\n\n\n\nAfter the execution of this program, the \nx\n variable of the main process will be equal to \n8\n (3+5).\n\n\nImportant\n---------------------------------------\n\n\nBy default, if the \nRETURN\n statement is used without the expression\nin brackets or the \nFRAME\n statement is used in a process, its return value will be its \n\nidentifying code\n of the process}.\n\n\n\n\nSee: \nSyntax", 
            "title": "RETURN statement"
        }, 
        {
            "location": "/return_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    LOOP\n        IF (key(_esc))\n            RETURN;\n        END\n        FRAME;\n    END\nEND -  In this example, the  RETURN  statement will be executed by pressing the escape key ( ESC ), finishing the program.  Use of RETURN to return a value ---------------------------------------  It is possible to design processes with a performance similar to the functions\nof other programming languages, that {receive a series of parameters and\nreturn a value}. For instance, a process receiving two numeric values and returning the biggest one.  For that, this statement must be used with the following syntax:  RETURN( expression )  It is also important not to use the  FRAME  statement inside the process,\nas this statement will immediately return to the calling process. When the compiler finds the  FRAME  statement inside a  PROCESS , it directly classes it as a process, ruling out its hypothetical use as a function.", 
            "title": "Example:}"
        }, 
        {
            "location": "/return_statement/#important-to-return-a-value-with-the-return-statement-after-execution-of-one-or-more", 
            "text": "FRAME  statements , you must make a block of this type, ie. a  FUNCTION .   The example proposed before is shown now: an implementation of the\nmathematical function  max  that returns the greater of its two parameters.  {#9999,Example  PROGRAM my_game;\nBEGIN\n    x=max(2, 3)+max(5, 4);\nEND\nPROCESS max(a, b)\nBEGIN\n    IF (a b)\n        RETURN(a);\n    ELSE\n        RETURN(b);\n    END\nEND  After the execution of this program, the  x  variable of the main process will be equal to  8  (3+5).  Important ---------------------------------------  By default, if the  RETURN  statement is used without the expression\nin brackets or the  FRAME  statement is used in a process, its return value will be its  identifying code  of the process}.   See:  Syntax", 
            "title": "Important To return a value with the RETURN statement after execution of one or more"
        }, 
        {
            "location": "/frame_statement/", 
            "text": "The \nFRAME\n statement is an essential part of the language. A program's working is described below \nin general terms:\n\n\n\n\n\n\nThe main program starts its execution. This process may create more processes (objects of the game) \nat any point. All the processes may finish at any moment, and they may create or eliminate other processes.\n\n\n\n\n\n\nThe games will always be displayed frame by frame. In each frame, the system will execute all the \nprocesses existing at that moment, one by one, until each one executes the \nFRAME\n statement, which \nwill indicate that it is ready for the next display (frame).\n\n\n\n\n\n\nIn the preparation of each frame, all the processes will be executed in the established priority \norder (the \npriority\n local variable of the processes determines this order).\n\n\nTherefore, this statement is similar to an order for the processes to be displayed.\n\n\nIf a process starts its execution and it neither finishes nor executes this statement, then the program \nwill become blocked, as there is a process that is never ready for the next display. Therefore, the \nsystem won't be capable of showing the following frame.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    my_process();\n    my_process();\n    LOOP\n        IF (key(_esc))\n            my_second_process();\n        END\n        FRAME;\n    END\nEND\nPROCESS my_process()\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND\nPROCESS my_second_process()\nBEGIN\n    LOOP\n    END\nEND\n\n\n\n\nIn this program, the main process (a \nmy_game\n type process) creates other two\nprocesses (\nmy_process\n type). From that moment, the three processes\nwill continuously be executed, each one to their \nFRAME\n statement. But if the escape key (\nESC\n) is pressed, then the main process will create a new process (\nmy_second_process\n type) that will remain in a \nLOOP\n loop indefinitely, without executing any \nFRAME\n. Consequently, the program will be interrupted (the system will report such a situation after few seconds; see \nmax_process_time\n).\n\n\nBasically, all the processes that correspond with objects of a game\nconstruct a loop inside which, every frame establishes all its display values (\nx\n, \ny\n, \ngraph\n, \nsize\n, \nangle\n, ...), executing then the \nFRAME\n statement.\n\n\nSynchronisation of processes\n---------------------------------------\n\n\nIt is possible to use this statement with the following syntax:\n\n\nFRAME(\npercentage\n)\n\n\nBy putting in brackets a whole percentage, from 0 to 100 or bigger, after the reserved word \nFRAME\n.\n\n\nThis figure will indicate the percentage of the following frame, completed by the  process. That is to say, the absence of this percentage is equivalent to putting \nFRAME(100)\n (100% of the work previous to the following display has been completed by the process).\n\n\nFor instance, if a process executes the \nFRAME(25)\n statement in a loop, it will need to execute it \n4 times\n before it is ready for the next display (as 4*25% is the 100%).\n\n\nOn the other hand, if a process executes the \nFRAME(400)\n statement inside its loop, after its first execution, it will have completed 400% the display. Therefore,even after the display, a completed 300% of display will still be missing. For that, in the preparation of the following \n3\n frames the system won't execute this process, as it is ready for the display. Then, this process would be executed just once every 4 frames (unlike the example of the previous paragraph, in which it was executed 4 times every game's frame).\n\n\nThe processes won't reach the next display unless they give \n100%, at least\n. For instance, if a process always executes \nFRAME(80)\n statements, it will execute them twice before the first display, so it will have completed 160% (2*80%) the display. Therefore, it will have pre calculated 60% (160%-100%) for the next display. For that reason, in the second display it will only require a \nFRAME(80)\n statement to be displayed, as this 80%, plus the remaining 60% of the first display, will be equal to a 140% completed. Therefore, it will immediately be displayed ,and a 40% will be left to prepare the next frame.\n\n\n\n\nA \nFRAME(0)\n statement completing a 0% of the next display only makes sense in the two following cases:\n\n\n\n\n\n\nIt can be a way to force the system to execute in this point the rest of the processes having the same priority as the current one and, after them, the system will execute the latter again.\n\n\n\n\n\n\nIt can also be a way to initialise functions such as \nget_id()\n or\n\ncollision()\n, as they return some specific values for every frame. If the aim is to obtain values again, it is possible to execute a \nFRAME(0)\n statement that will be interpreted as a new frame by these functions.\n\n\n\n\n\n\n\n\nSee: \nSyntax", 
            "title": "FRAME statement"
        }, 
        {
            "location": "/frame_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    my_process();\n    my_process();\n    LOOP\n        IF (key(_esc))\n            my_second_process();\n        END\n        FRAME;\n    END\nEND\nPROCESS my_process()\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND\nPROCESS my_second_process()\nBEGIN\n    LOOP\n    END\nEND  In this program, the main process (a  my_game  type process) creates other two\nprocesses ( my_process  type). From that moment, the three processes\nwill continuously be executed, each one to their  FRAME  statement. But if the escape key ( ESC ) is pressed, then the main process will create a new process ( my_second_process  type) that will remain in a  LOOP  loop indefinitely, without executing any  FRAME . Consequently, the program will be interrupted (the system will report such a situation after few seconds; see  max_process_time ).  Basically, all the processes that correspond with objects of a game\nconstruct a loop inside which, every frame establishes all its display values ( x ,  y ,  graph ,  size ,  angle , ...), executing then the  FRAME  statement.  Synchronisation of processes ---------------------------------------  It is possible to use this statement with the following syntax:  FRAME( percentage )  By putting in brackets a whole percentage, from 0 to 100 or bigger, after the reserved word  FRAME .  This figure will indicate the percentage of the following frame, completed by the  process. That is to say, the absence of this percentage is equivalent to putting  FRAME(100)  (100% of the work previous to the following display has been completed by the process).  For instance, if a process executes the  FRAME(25)  statement in a loop, it will need to execute it  4 times  before it is ready for the next display (as 4*25% is the 100%).  On the other hand, if a process executes the  FRAME(400)  statement inside its loop, after its first execution, it will have completed 400% the display. Therefore,even after the display, a completed 300% of display will still be missing. For that, in the preparation of the following  3  frames the system won't execute this process, as it is ready for the display. Then, this process would be executed just once every 4 frames (unlike the example of the previous paragraph, in which it was executed 4 times every game's frame).  The processes won't reach the next display unless they give  100%, at least . For instance, if a process always executes  FRAME(80)  statements, it will execute them twice before the first display, so it will have completed 160% (2*80%) the display. Therefore, it will have pre calculated 60% (160%-100%) for the next display. For that reason, in the second display it will only require a  FRAME(80)  statement to be displayed, as this 80%, plus the remaining 60% of the first display, will be equal to a 140% completed. Therefore, it will immediately be displayed ,and a 40% will be left to prepare the next frame.   A  FRAME(0)  statement completing a 0% of the next display only makes sense in the two following cases:    It can be a way to force the system to execute in this point the rest of the processes having the same priority as the current one and, after them, the system will execute the latter again.    It can also be a way to initialise functions such as  get_id()  or collision() , as they return some specific values for every frame. If the aim is to obtain values again, it is possible to execute a  FRAME(0)  statement that will be interpreted as a new frame by these functions.     See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/clone_statement/", 
            "text": "CLONE\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\nThis statement creates a new process identical to the current one, with the exception that the statement between the reserved words \nCLONE\n and \nEND\n will only be executed in the new process, but not in the current one.\n\n\nFor instance, if any process of the program, with specific coordinates (\nx\n, \ny\n) and with a specific graphic (\ngraph\n), executes the following statement:\n\n\nCLONE\n\n\n  x=x+100;\n\n\n\nEND\n\n\nA new process will be created, identical to the former, with the same graphic and the same values in all its variables, with the exception of the \nx\n coordinate that, in the new process, will be placed \n100\n pixels farther to the right.\n\n\nThis statement is used to create replicas of a process, dividing it into two processes (almost) similar.\n\n\nExample:}\n\n\nPROGRAM my_game;\nBEGIN\n    // ...\n    x=0;\n    y=0;\n    CLONE\n        x=x+10;\n    END\n    CLONE\n        y=y+10;\n    END\n    // ...\nEND\n\n-\n\n\nIn this example, the \n2\n \nCLONE\n statements will create \n3\n copies of the main process (and not 2, as it could have been expected).\n\n\nOn executing the first \nCLONE\n statement, a new process will be created. Thus, there will be \n2\n processes: one in (x=0, y=0) and the other in (x=10, y=0). These two processes will execute the second \nCLONE\n statement. The first one (the original one) will create a new process in (x=0, y=10), and the second one will create the new process in (x=10, y=10).\n\n\nTo create only \n2\n copies of the original process, the program could have been constructed, for instance, in the following way:\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nBEGIN\n    // ...\n    x=0;\n    y=0;\n    CLONE\n        x=x+10;\n        CLONE\n            y=y+10;\n        END\n    END\n    // ...\nEND\n\n\n\n\nThe original process (x=0, y=0) will create one in (x=10, y=0) and the latter will create another one in (x=10, y=10). Therefore, only two copies of the original will be created.\n\n\nMuch care must be taken when it comes to using the \nCLONE\n statement sequentially or inside a \nloop\n,\nas it is necessary to take into account that the first '\nclones\n' may also create new '\nclones\n'.\n\n\nThis statement can be used without putting statements between the words \nCLONE\n and \nEND\n.\nBut, intending to have two identical processes with the same coordinates, the same graphic and\nexecuting the same code, seems to make little sense, at least at first.\n\n\n\n\nSee: \nSyntax", 
            "title": "CLONE statement"
        }, 
        {
            "location": "/clone_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    // ...\n    x=0;\n    y=0;\n    CLONE\n        x=x+10;\n    END\n    CLONE\n        y=y+10;\n    END\n    // ...\nEND -  In this example, the  2   CLONE  statements will create  3  copies of the main process (and not 2, as it could have been expected).  On executing the first  CLONE  statement, a new process will be created. Thus, there will be  2  processes: one in (x=0, y=0) and the other in (x=10, y=0). These two processes will execute the second  CLONE  statement. The first one (the original one) will create a new process in (x=0, y=10), and the second one will create the new process in (x=10, y=10).  To create only  2  copies of the original process, the program could have been constructed, for instance, in the following way:  {#9999,Example  PROGRAM my_game;\nBEGIN\n    // ...\n    x=0;\n    y=0;\n    CLONE\n        x=x+10;\n        CLONE\n            y=y+10;\n        END\n    END\n    // ...\nEND  The original process (x=0, y=0) will create one in (x=10, y=0) and the latter will create another one in (x=10, y=10). Therefore, only two copies of the original will be created.  Much care must be taken when it comes to using the  CLONE  statement sequentially or inside a  loop ,\nas it is necessary to take into account that the first ' clones ' may also create new ' clones '.  This statement can be used without putting statements between the words  CLONE  and  END .\nBut, intending to have two identical processes with the same coordinates, the same graphic and\nexecuting the same code, seems to make little sense, at least at first.   See:  Syntax", 
            "title": "Example:}"
        }, 
        {
            "location": "/debug_statement/", 
            "text": "The \nDEBUG\n statement will call the interactive debugger when it is executed.\n\n\nIt is normally used to debug programs, to find possible\nerrors of the programs. On some occasions, it is normally put in the following points.\n\n\n\n\n\n\nWhere you want to verify that a part of the program has done what was expected. After the execution of that part, \nDEBUG\n will call the debugger, from which it is possible to check all the active processes and the value of all their variables.\n\n\n\n\n\n\nWhen you are not very sure whether something can happen in a program, you can put this statement in that point to report you whether what we are expecting actually happens.\n\n\n\n\n\n\nThis statement is only used temporarily, until the error that is looked for is found. From that moment, the statement won't be necessary. Thus, it can be removed from the program since it has no additional effect.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    // ...\n    IF (x\n0)\n        DEBUG;\n    END\n    // ...\nEND\n\n\n\n\nIn this example, it is verified that, in a specific point of the program, the \nx\n coordinate of the process is not a negative number (less than zero). If this happens, the debugger will be called to find out why it has happened.\n\n\nWhen this statement is executed, a dialog box appears, offering us the following options:\n\n\n\n\n\n\nTo disable the \nDEBUG\n statement, preventing it from being activated in this execution of the program.\n\n\n\n\n\n\nTo stop the program and enter the debugger, to be able to examine all the processes and their variables.\n\n\n\n\n\n\nOr to finish the execution of the program immediately, returning to its edition in the windows' graphic environment.\n\n\n\n\n\n\nMoreover, if the escape key \nESC\n is pressed in that box, the \nDEBUG\n statement will simply be ignored, and the program will continue to be executed as usual.\n\n\n\n\nWhen a program is executed from the windows' graphic environment, the debugger can be called at any moment by pressing the \nF12\n key.\n\n\nOn invoking the debugger in this way, the program will always be interrupted just before starting the processing of a new frame. All the processes to be executed will appear before the next display.\n\n\n\n\nSee: \nSyntax", 
            "title": "DEBUG statement"
        }, 
        {
            "location": "/debug_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    // ...\n    IF (x 0)\n        DEBUG;\n    END\n    // ...\nEND  In this example, it is verified that, in a specific point of the program, the  x  coordinate of the process is not a negative number (less than zero). If this happens, the debugger will be called to find out why it has happened.  When this statement is executed, a dialog box appears, offering us the following options:    To disable the  DEBUG  statement, preventing it from being activated in this execution of the program.    To stop the program and enter the debugger, to be able to examine all the processes and their variables.    Or to finish the execution of the program immediately, returning to its edition in the windows' graphic environment.    Moreover, if the escape key  ESC  is pressed in that box, the  DEBUG  statement will simply be ignored, and the program will continue to be executed as usual.   When a program is executed from the windows' graphic environment, the debugger can be called at any moment by pressing the  F12  key.  On invoking the debugger in this way, the program will always be interrupted just before starting the processing of a new frame. All the processes to be executed will appear before the next display.   See:  Syntax", 
            "title": "Example"
        }, 
        {
            "location": "/list_of_functions_of_the_languagedot/", 
            "text": "Process interaction functions\n\n\n[collision()](collision().md)\n\n[get_angle()](get_angle().md)\n\n[get_dist()](get_dist().md)\n\n[get_distx()](get_distx().md)\n\n[get_disty()](get_disty().md)\n\n[get_id()](get_id().md)\n\n[let_me_alone()](let_me_alone().md)\n\n[signal()](signal().md)\n\n\n\nGeometry functions\n\n\n[advance()](advance().md)\n\n[fget_angle()](fget_angle().md)\n\n[fget_dist()](fget_dist().md)\n\n[near_angle()](near_angle().md)\n\n[xadvance()](xadvance().md)\n\n\n\nPath finding functions\n\n\n[path_find()](path_find().md)\n\n[path_free()](path_free().md)\n\n[path_line()](path_line().md)\n\n\n\nMathematical functions\n\n\n[abs()](abs().md)\n\n[acos()](acos().md)\n\n[asin()](asin().md)\n\n[atan()](atan().md)\n\n[atan2()](atan2().md)\n\n[cos()](cos().md)\n\n[pow()](pow().md)\n\n[sin()](sin().md)\n\n[sqrt()](sqrt().md)\n\n[tan()](tan().md)\n\n\n\nRandom number functions\n\n\n[rand()](rand().md)\n\n[rand_seed()](rand_seed().md)\n\n\n\nGraphics functions\n\n\n[clear_screen()](clear_screen().md)\n\n[get_pixel()](get_pixel().md)\n\n[map_block_copy()](map_block_copy().md)\n\n[map_get_pixel()](map_get_pixel().md)\n\n[map_put()](map_put().md)\n\n[map_put_pixel()](map_put_pixel().md)\n\n[map_xput()](map_xput().md)\n\n[new_map()](new_map().md)\n\n[put()](put().md)\n\n[put_pixel()](put_pixel().md)\n\n[put_screen()](put_screen().md)\n\n[screen_copy()](screen_copy().md)\n\n[xput()](xput().md)\n\n\n\nPrimitive graphics drawing functions\n\n\n[delete_draw()](delete_draw().md)\n\n[draw()](draw().md)\n\n[move_draw()](move_draw().md)\n\n\n\nAudio system functions\n\n\n[change_channel()](change_channel().md)\n\n[change_sound()](change_sound().md)\n\n[reset_sound()](reset_sound().md)\n\n[set_volume()](set_volume().md)\n\n\n\nSound effect functions\n\n\n[is_playing_sound()](is_playing_sound().md)\n\n[load_pcm()](load_pcm()_forward_slash_load_wav().md)\n\n[load_wav()](load_pcm()_forward_slash_load_wav().md)\n\n[sound()](sound().md)\n\n[stop_sound()](stop_sound().md)\n\n[unload_pcm()](unload_pcm()_forward_slash_unload_wav().md)\n\n[unload_wav()](unload_pcm()_forward_slash_unload_wav().md)\n\n\n\nCD music functions\n\n\n[is_playing_cd()](is_playing_cd().md)\n\n[play_cd()](play_cd().md)\n\n[stop_cd()](stop_cd().md)\n\n\n\nDigital music functions\n\n\n[get_song_line()](get_song_line().md)\n\n[get_song_pos()](get_song_pos().md)\n\n[is_playing_song()](is_playing_song().md)\n\n[load_song()](load_song().md)\n\n[set_song_pos()](set_song_pos().md)\n\n[song()](song().md)\n\n[stop_song()](stop_song().md)\n\n[unload_song()](unload_song().md)\n\n\n\nInput functions\n\n\n[get_joy_button()](get_joy_button().md)\n\n[get_joy_position()](get_joy_position().md)\n\n[key()](key().md)\n\n\n\nPalette control functions\n\n\n[convert_palette()](convert_palette().md)\n\n[fade()](fade().md)\n\n[fade_off()](fade_off().md)\n\n[fade_on()](fade_on().md)\n\n[find_color()](find_color().md)\n\n[force_pal()](force_pal().md)\n\n[load_pal()](load_pal().md)\n\n[roll_palette()](roll_palette().md)\n\n[set_color()](set_color().md)\n\n\n\nMode7 and scroll functions\n\n\n[move_scroll()](move_scroll().md)\n\n[refresh_scroll()](refresh_scroll().md)\n\n[start_mode7()](start_mode7().md)\n\n[start_scroll()](start_scroll().md)\n\n[stop_mode7()](stop_mode7().md)\n\n[stop_scroll()](stop_scroll().md)\n\n\n\nMode 8 Functions (3D mode)\n\n\n[get_point_m8()](get_point_m8().md)\n\n[get_sector_height()](get_sector_height().md)\n\n[get_sector_texture()](get_sector_texture().md)\n\n[get_wall_texture()](get_wall_texture().md)\n\n[go_to_flag()](go_to_flag().md)\n\n[load_wld()](load_wld().md)\n\n[set_env_color()](set_env_color().md)\n\n[set_fog()](set_fog().md)\n\n[set_point_m8()](set_point_m8().md)\n\n[set_sector_height()](set_sector_height().md)\n\n[set_sector_texture()](set_sector_texture().md)\n\n[set_wall_texture()](set_wall_texture().md)\n\n[start_mode8()](start_mode8().md)\n\n[stop_mode8()](stop_mode8().md)\n\n\n\nText display functions\n\n\n[delete_text()](delete_text().md)\n\n[load_fnt()](load_fnt().md)\n\n[move_text()](move_text().md)\n\n[write()](write().md)\n\n[unload_fnt()](unload_fnt().md)\n\n[write_int()](write_int().md)\n\n[write_in_map()](write_in_map().md)\n\n\n\nString handling functions\n\n\n[char()](char().md)\n\n[lower()](lower().md)\n\n[strcat()](strcat().md)\n\n[strchr()](strchr().md)\n\n[strcmp()](strcmp().md)\n\n[strcpy()](strcpy().md)\n\n[strdel()](strdel().md)\n\n[strlen()](strlen().md)\n\n[strset()](strset().md)\n\n[strstr()](strstr().md)\n\n[upper()](upper().md)\n\n\n\nString conversion functions\n\n\n[calculate()](calculate().md)\n\n[itoa()](itoa().md)\n\n\n\nAnimation functions\n\n\n[end_fli()](end_fli().md)\n\n[frame_fli()](frame_fli().md)\n\n[reset_fli()](reset_fli().md)\n\n[start_fli()](start_fli().md)\n\n\n\nScreen region functions\n\n\n[define_region()](define_region().md)\n\n[out_region()](out_region().md)\n\n\n\nGraphics information functions\n\n\n[get_point()](get_point().md)\n\n[get_real_point()](get_real_point().md)\n\n[graphic_info()](graphic_info().md)\n\n\n\nInitialisation functions\n\n\n[set_fps()](set_fps().md)\n\n[set_mode()](set_mode().md)\n\n\n\nResource handling functions\n\n\n[load_fpg()](load_fpg().md)\n\n[load_map()](load_map()_forward_slash_load_pcx().md)\n\n[load_pcx()](load_map()_forward_slash_load_pcx().md)\n\n[unload_fpg()](unload_fpg().md)\n\n[unload_map()](unload_map()_forward_slash_unload_pcx().md)\n\n[unload_pcx()](unload_map()_forward_slash_unload_pcx().md)\n\n[save_map()](save_map()_forward_slash_save_pcx().md)\n\n[save_pcx()](save_map()_forward_slash_save_pcx().md)\n\n\n\nData IO functions\n\n\n[load()](load().md)\n\n[save()](save().md)\n\n\n\nFile-handling functions \n\n\n[fclose()](fclose().md)\n\n[filelength()](filelength().md)\n\n[flush()](flush().md)\n\n[fopen()](fopen().md)\n\n[fread()](fread().md)\n\n[fseek()](fseek().md)\n\n[ftell()](ftell().md)\n\n[fwrite()](fwrite().md)\n\n\n\nDirectory-handling functions \n\n\n[chdir()](chdir().md)\n\n[disk_free()](disk_free().md)\n\n[get_dirinfo()](get_dirinfo().md)\n\n[get_fileinfo()](get_fileinfo().md)\n\n[getdrive()](getdrive().md)\n\n[mkdir()](mkdir().md)\n\n[remove()](remove().md)\n\n[setdrive()](setdrive().md)\n\n\n\nFile compression functions\n\n\n[compress_file()](compress_file().md)\n\n[uncompress_file()](uncompress_file().md)\n\n\n\nFile encryption functions\n\n\n[decode_file()](decode_file().md)\n\n[encode()](encode().md)\n\n[encode_file()](encode_file().md)\n\n\n\nSystem functions\n\n\n[exit()](exit().md)\n\n[ignore_error()](ignore_error().md)\n\n[system()](system().md)\n\n\n\nDynamic memory allocation functions\n\n\n[free()](free().md)\n\n[malloc()](malloc().md)\n\n[memory_free()](memory_free().md)\n\n\n\nNetwork functions \n\n\n[net_get_games()](net_get_games().md)\n\n[net_join_game()](net_join_game().md)\n\n\n\n\n\nNote To obtain help about a specific function directly, place the edit\n\n\ncursor on the name of the function (in the programs editor) and press \nF1\n.\n\n\n\n\nSee: \nSyntax", 
            "title": "List of functions of the language."
        }, 
        {
            "location": "/list_of_functions_of_the_languagedot/#note-to-obtain-help-about-a-specific-function-directly-place-the-edit", 
            "text": "cursor on the name of the function (in the programs editor) and press  F1 .   See:  Syntax", 
            "title": "Note To obtain help about a specific function directly, place the edit"
        }, 
        {
            "location": "/call_to_a_process/", 
            "text": "process_name\n(\nlist of parameters\n)\n\n\nTo call a process, put the \nname\n of the process, followed by a list including as \nmany expressions separated by \ncommas (,)\n, as \nparameters\n of the process, \nin \nbrackets (())\n. The brackets are obligatory, even if the process has no call \nparameters\n.\n\n\nA call to a process will always return a value that depends on which one of the following \nactions is performed first by the called process.\n\n\n\n\n\n\nIf the \nFRAME\n statement is executed, then the process will return its \nidentifying code\n.\n\n\n\n\n\n\nIf the process executes the \nRETURN\n(\nexpression\n)\n statement, \nthen the former will return the result of this expression.\n\n\n\n\n\n\nIf the process finishes, either because the \nEND\n of its \nBEGIN\n is reached \nor because a \nRETURN\n statement is executed with no expression, the process will \nreturn the \nidentifying code\n of itself, but as the process has now finished (killed), \nit is necessary to take into account that this \nidentifying code\n can be assigned by the system \nto any new process created from now on.\n\n\n\n\n\n\nThe return value can be ignored, assigned to a variable or used inside an expression.\n\n\nExample\n\n\nPROGRAM my_game;\nPRIVATE\n  id2;\nBEGIN\n    my_process(0, 0);\n    id2=my_process(320, 200);\n    // ...\nEND\nPROCESS my_process(x, y)\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND\n\n\n\n\nIn this example, the main process \nmy_game\n makes two calls to the process \nmy_process\n, which receives two parameters in its \nx\n and \ny\n local variables.\n\n\nAs the process executes the \nFRAME\n statement, it will return its \nidentifying code\n.\n\n\nIt can be noticed how the value returned in the first call to the process\nis ignored (it is not used at all), and how, in the second call, the \nidentifying code\n of \nmy_process(320, 200)\n is assigned to the private variable of the main process \nid2\n.\n\n\nWhen a call to a process is made, the execution of the current process is momentarily stopped, and the code of the called process is executed, until it is returned through one of the three mentioned cases (until it finishes or executes a \nFRAME\n or \nRETURN\n statement).\n\n\nIf the process has finished with a \nFRAME\n statement, it will be displayed in the following frame according to the values established in its local variables (\nx\n, \ny\n, \ngraph\n, ...) and, in the preparation of the following frame, this process will go on running from the \nFRAME\n statement.\n\n\n\n\nSee: \nSyntax\n - \nParameters of a process", 
            "title": "Call to a process"
        }, 
        {
            "location": "/call_to_a_process/#example", 
            "text": "PROGRAM my_game;\nPRIVATE\n  id2;\nBEGIN\n    my_process(0, 0);\n    id2=my_process(320, 200);\n    // ...\nEND\nPROCESS my_process(x, y)\nBEGIN\n    LOOP\n        FRAME;\n    END\nEND  In this example, the main process  my_game  makes two calls to the process  my_process , which receives two parameters in its  x  and  y  local variables.  As the process executes the  FRAME  statement, it will return its  identifying code .  It can be noticed how the value returned in the first call to the process\nis ignored (it is not used at all), and how, in the second call, the  identifying code  of  my_process(320, 200)  is assigned to the private variable of the main process  id2 .  When a call to a process is made, the execution of the current process is momentarily stopped, and the code of the called process is executed, until it is returned through one of the three mentioned cases (until it finishes or executes a  FRAME  or  RETURN  statement).  If the process has finished with a  FRAME  statement, it will be displayed in the following frame according to the values established in its local variables ( x ,  y ,  graph , ...) and, in the preparation of the following frame, this process will go on running from the  FRAME  statement.   See:  Syntax  -  Parameters of a process", 
            "title": "Example"
        }, 
        {
            "location": "/reference_to_a_variable/", 
            "text": "A reference to a variable is any expression making reference to a cell or a position of the computer's memory. It is normally understood as one of the following aspects:\n\n\n\n\nIf the variable is a variable, in order to refer to the variable in this way, we must simply specify its name.\n\n\n\n\nExample of a reference to a variable: \nx\n\n\n\n\nIf the variable is a table, reference to it is normally made with its name followed by an expression in square brackets (\n[ ]\n).That expression will determine the position of the table intended to be accessed.\nIf the index in square brackets is omitted, the first position of the table (position 0) will be accessed.\n\n\n\n\nExample of a reference to a table: \ntimer[0]\n\n\n\n\nIf the variable is a structure, reference to it will be made with its name followed by an expression in square brackets (\n[ ]\n) that will determine the number of records that will be accessed. After it, the symbol\n . (period)\n will be put, preceding the specific name of the structure's field that is going to be accessed. If the record number in square brackets is omitted, the first record of the structure (number 0) will be accessed. \n\n\n\n\nExample of a reference to a structure: \nscroll[0].z\n\n\nThese three cases deal with accessing data of the process itself or global data. To access an alien variable (a local variable of another process), it will be preceded by the \nidentifying code\n of the alien process and the symbol\n . (period)\n, operator of access to local data and structures).\n\n\nExample of a reference to an alien local variable: \nfather.x\n\n\n\n\nSee: \nSyntax", 
            "title": "Reference to a variable"
        }, 
        {
            "location": "/definition_of_an_expression/", 
            "text": "An expression is basically a mathematical formula involving one or more \noperands\n (\nx\n, \n2\n, \nid\n, ...) through different \noperators\n (\n*\n, \nAND\n, \n, ...); some examples of expressions would be:\n\n2\n, \n2+3\n or \n(x\n4)/-3\n*.\n\n\nOnly integers within the range (\nmin_int\n ... \nmax_int\n) can be used as values. The result of the expression will always be truncated within this range.\n\n\nThese expressions will be evaluated when the statement containing them inside the program is executed.\n\n\nThe \noperands\n that can be used in an expression are the following ones:\n\n\n- [Constants](declaration_of_constantsdot.md).\n\n- **Numeric values**.\n\n- **Literals** (texts in inverted commas).\n\n- Variables, tables or structures of any kind.\n\n- Any kind of function or process.\n\n- [Identifying code](_identifying_codes_of_processesdot.md) of the process.\n\n- Type of process ([type \nlt;name\ngt;](types_of_processesdot.md)).\n\n\n\nThe \noperators\n that can be used in an expression are the following ones (the synonymous of the operator, if they exist, are shown in brackets):\n\n\n[ +](plus.md)    Addition\n\n[ -](minus.md)    Subtraction (or sign negation)\n\n[ *](asterisk.md)    Multiplication\n\n[ /](forward_slash.md)    Division\n\n[ MOD](mod__percent.md)  Module ([%](mod__percent.md))\n\n[ \nlt;\nlt;](ltlt.md)   Rotation to the right\n\n[ \ngt;\ngt;](gtgt.md)   Rotation to the left\n\n[ NOT](not__not.md)  Binary and logical negation ([!](not__not.md))\n\n[ AND](and__andand.md)  Binary and logical AND([\namp;](and.md), [\namp;\namp;](and__andand.md))\n\n[ OR](or__pipepipe__pipe.md)   Binary and logical OR([|](or__pipepipe__pipe.md), [||](or__pipepipe__pipe.md))\n\n[ XOR](xor__caretcaret.md)  Exclusive OR ([^](caret.md), [^^](xor__caretcaret.md))\n\n[ ==](equalequal.md)   Comparison\n\n[ \nlt;\ngt;](ltgt__notequal.md)   Different ([!=](ltgt__notequal.md))\n\n[ \ngt;](gt.md)    Greater than\n\n[ \ngt;=](gtequal__equalgt.md)   Bigger or equal ([=\ngt;](gtequal__equalgt.md))\n\n[ \nlt;](lt.md)    Less\n\n[ \nlt;=](ltequal__equallt.md)   Less or equal ([=\nlt;](ltequal__equallt.md))\n\n[ OFFSET](offset.md) Direction or offset ([\namp;](and.md))\n\n[ ++](plusplus.md)   Operator of increment\n\n[ --](minusminus.md)   Operator of decrement\n\n[ POINTER](pointer__[__].md) Addressing operator ([*](asterisk.md), [^](caret.md), [[ ]](pointer__[__].md))\n\n[ ( )]((__).md)  Brackets\n\n\n\nClick on \nEvaluation of an expression\n to see the order in which the calculations are made inside an expression and when the brackets must be used.\n\n\nSome examples of valid expressions are now shown:\n\n\n    -33\n\n\n    44-2*22\n\n\n    id\n\n\n    x+1\n\n\n    (angle*3)/2-pi/2\n\n\n    (x+y)/2\n\n\n    abs(x-y)*3-pow(x, 2)\n\n\n...\n\n\n\n\n\nSee: \nSyntax\n - \nEvaluation of an expression", 
            "title": "Definition of an expression"
        }, 
        {
            "location": "/evaluation_of_an_expression/", 
            "text": "It is important to know the way in which the expressions are evaluated in order to know where it is necessary to put brackets indicating the way in which the expression is intended to be evaluated.\n\n\nIn the language, an expression can contain operators of different levels of priority.\n\n\nIn the evaluation of an expression, the operators of \npriority 1\n (if they exist), will always be processed first, and then, those of \npriority 2\n, \npriority 3\n and so on.\n\n\nPriority 1\n\n\n[ ( )]((__).md)  Brackets, beginning and end of a sub expression\n\n\n\nPriority 2\n\n\n[ .](dot__minusgt.md)    Period, access' operator to local data and structures\n\n\n\nPriority 3\n\n\n[ NOT](not__not.md)  Binary and logical negation (#1045,**!**)\n\n[ OFFSET](offset.md) Offset (#1050,**\namp;**)\n\n[ POINTER](pointer__[__].md) Addressing operator ([*](asterisk.md), [^](caret.md), [[ ]](pointer__[__].md))\n\n** -**  Sign negation\n\n[ ++](plusplus.md)   Operator of increment\n\n[ --](minusminus.md)   Operator of decrement\n\n\n\nPriority 4\n\n\n[ *](asterisk.md)    Multiplication\n\n[ /](forward_slash.md)    Division\n\n[ MOD](mod__percent.md)  Module ([%](mod__percent.md))\n\n\n\nPriority 5\n\n\n[ +](plus.md)    Addition\n\n[ -](minus.md)    Subtraction\n\n\n\nPriority 6\n\n\n[ \nlt;\nlt;](ltlt.md)   Rotation to the right\n\n[ \ngt;\ngt;](gtgt.md)   Rotation to the left\n\n\n\nPriority 7\n\n\n[ AND](and__andand.md)  Binary and logical AND ([\namp;](and.md), [\namp;\namp;](and__andand.md))\n\n[ OR](or__pipepipe__pipe.md)   Binary and logical OR ([|](or__pipepipe__pipe.md), [||](or__pipepipe__pipe.md))\n\n[ XOR](xor__caretcaret.md)  Exclusive OR ([^](caret.md), [^^](xor__caretcaret.md))\n\n\n\nPriority 8\n\n\n[ ==](equalequal.md)   Comparison\n\n[ \nlt;\ngt;](ltgt__notequal.md)   Different ([!=](ltgt__notequal.md)\n\n[ \ngt;](gt.md)    Greater than\n\n[ \ngt;=](gtequal__equalgt.md)   Bigger or equal ([=\ngt;](gtequal__equalgt.md)\n\n[ \nlt;](lt.md)    Less\n\n[ \nlt;=](ltequal__equallt.md)   Less or equal ([=\nlt;](ltequal__equallt.md)\n\n\n\nPriority 9\n\n\n[ =](equal.md)    Assignment\n\n[ +=](plusequal.md)   Addition-assignment\n\n[ -=](minusequal.md)   Subtraction-assignment\n\n[ *=](asteriskequal.md)   Multiplication-assignment\n\n[ /=](forward_slashequal.md)   Division-assignment\n\n[ %=](percentequal.md)   Module-assignment\n\n[ \namp;=](andequal.md)   AND-assignment\n\n[ |=](pipeequal.md)   OR-assignment\n\n[ ^=](caretequal.md)   XOR-assignment\n\n[ \ngt;\ngt;=](gtgtequal.md)  Rotation to the right-assignment\n\n[ \nlt;\nlt;=](ltltequal.md)  Rotation to the left-assignment\n\n\n\nThe operators of \npriority 3\n are known as \nunary\n operators. They do not link two operands (unlike the \nbinary\n operators such as, for instance, a multiplication), but they just affect the value of an operator. Inside the \nunary\n operators, those closest to the operand will be executed first. For instance, in the expression:\n\n\nNOT -x\n\n\nThe operand \nx\n has two \nunary\n operators, the negation of sign\n -\n and\nthe logical and/or binary \nNOT\n. Among them, the negation of sign will be executed first, as it is closer to the operand.\n\n\nFrom \npriority 4\n, all the operators are \nbinary\n and they will be executed according to their level of priority. Therefore, when in an expression there is more than one operator of the same level (for instance, a multiplication and a division, both of priority 4), they will be processed from left to right. That is to say, in the following expression:\n\n\n8/2*2\n\n\nThe division will be executed first and then, the multiplication (it is the natural way to evaluate the expressions mathematically).\n\n\nThe only exception are the operators of \npriority 9\n (\nassignment\n operators),\nthat will be evaluated from right to left (instead of from left to right). That is to say, in the expression:\n\n\nx=y=0\n\n\ny=0\n will be processed first (\ny\n will be put at \n0\n) and then, \nx=y\n (\nx\n will also be put at \n0\n, as \ny\n will now be equal to \n0\n).\n\n\nAs it can be noticed, the assignments work like an operator\nAfter the assignment, they return the value they have assigned as a result of the operation.\n\n\n\n\nSee: \nSyntax\n - \nDefinition of an expression", 
            "title": "Evaluation of an expression"
        }, 
        {
            "location": "/definition_of_a_condition/", 
            "text": "The conditions are expressions normally similar to the following ones:\n\n\nx\n320\n\n\nsize==100 AND graph\n10\n\n\ny==0 OR (x\n=100 AND x\n=200)\n\n\n...\n\n\nIn general, any expression is valid as a condition. In the language, all the \nODD\n expressions are interpreted as \ntrue\n and all the \nEVEN\n expressions are interpreted as \nfalse\n.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    IF (20*2+1)\n        x=x+1;\n    END\nEND\n\n\n\n\nIn this example, the \nx=x+1;\n statement will always be executed, as the expression \n20*2+1\n is equal to \n41\n, an \nodd\n number.\n\n\nAll the available operators are valid inside a condition. It is even possible to perform assignments inside a condition (the assignments are operations that return the assigned value as a result).\n\n\nAll the \nidentifying codes\n of processes are \nodd\n numbers. That is to say, all of them are \ntrue\n. Therefore, it is possible to implement conditions\nas the following one (supposing that \nid2\n has been declared as a variable,\nand that \nshot\n is a type of process of the program).\n\n\nid2=get_id(type shot);\n\n\nWHILE (id2)\n\n\n  **id2.size=id2.size-1;**\n\n  **id2=get_id(type shot);**\n\n\n\nEND\n\n\nIn the \nid2=get_id(type shot)\n condition, the result of the \nget_id\n function is being assigned to the \nid2\n variable. If that function has returned an \nidentifying code\n, it will be an \nodd\n number and the condition will be evaluated as \ntrue\n (if \nget_id()\n does not find (more) identifiers of \nshot\n type\n processes, then it will return \n0\n (an \neven\n number), and the condition will be interpreted as \nfalse\n, finishing the \nWHILE\n statement.\n\n\nThe previous statements would decrement the \nsize\n variable of all the \nshot\n type processes existing in the program.\n\n\n\n\nSee: \nSyntax\n - \nDefinition of an expression", 
            "title": "Definition of a condition"
        }, 
        {
            "location": "/definition_of_a_condition/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    IF (20*2+1)\n        x=x+1;\n    END\nEND  In this example, the  x=x+1;  statement will always be executed, as the expression  20*2+1  is equal to  41 , an  odd  number.  All the available operators are valid inside a condition. It is even possible to perform assignments inside a condition (the assignments are operations that return the assigned value as a result).  All the  identifying codes  of processes are  odd  numbers. That is to say, all of them are  true . Therefore, it is possible to implement conditions\nas the following one (supposing that  id2  has been declared as a variable,\nand that  shot  is a type of process of the program).  id2=get_id(type shot);  WHILE (id2)    **id2.size=id2.size-1;**\n\n  **id2=get_id(type shot);**  END  In the  id2=get_id(type shot)  condition, the result of the  get_id  function is being assigned to the  id2  variable. If that function has returned an  identifying code , it will be an  odd  number and the condition will be evaluated as  true  (if  get_id()  does not find (more) identifiers of  shot  type  processes, then it will return  0  (an  even  number), and the condition will be interpreted as  false , finishing the  WHILE  statement.  The previous statements would decrement the  size  variable of all the  shot  type processes existing in the program.   See:  Syntax  -  Definition of an expression", 
            "title": "Example"
        }, 
        {
            "location": "/ways_to_obtain_the_identifying_code_of_a_processdot/", 
            "text": "All the processes have their own \nidentifying code\n in \nID\n\n(reserved word in the language that is equivalent to the \nidentifying code\n of the process).\n\n\nWhen a process is created (is called), it returns its own \nidentifying code\n as return value, unless it has finished with a \nRETURN\n(\nexpression\n)\n. That is to say, a process will always return its \nidentifying code\n when it finishes (when its \nEND\n is reached), when it executes the \nFRAME\n or the \nRETURN\n statements without expression in brackets.\n\n\nIn the following example, a process (\nmy_process\n type) is created from the main program, and its identifier is stored in the \nid2\n variable.\n\n\nExample:}\n\n\nPROGRAM my_game;\nPRIVATE id2;\nBEGIN\n    id2=my_process();\n    // ...\nEND\nPROCESS my_process()\nBEGIN\n    // ...\nEND\n\n-\n\n\nAll the processes have the following local variables predefined with identifiers of other processes:\n\n\nfather\n - father, identifier of the process that created it (the one that made the call).\n\n\nson\n - son, identifier of the last process created by it (last called process).\n\n\nbigbro\n - Elder brother, identifier of the last process created by the father before creating it.\n\n\nsmallbro\n - Younger brother, identifier of the following process created by the father after having created it.\n\n\nThese variables can be equal to \n0\n if they have not been defined (for instance,\n\nson\n will be equal to \n0\n until a process is not created or if this process has disappeared).\n\n\nThe processes' identifying codes allow us to access their local variables (\nidentifier\n.\nvariable\n) and, as \nfather\n, \nson\n, etc. are also local variables, it is possible to make combinations such as \nson.bigbro\n to access the identifier of the penultimate process created (as \nson\n is the last one; therefore, its elder brother will be the penultimate one).\n\n\nBesides creation or direct relationship, there are other ways to obtain identifying codes of processes, as indicated below:\n\n\n\n\n\n\nThe \nget_id()\n function to obtain the identifiers of the processes of a specific type (spacecraft, shot, etc.) existing at a specific moment in the game.\n\n\n\n\n\n\nThe \ncollision()\n function to obtain the identifiers of the\nprocesses with which it is colliding.\n\n\n\n\n\n\nWhen a specific process needs to access from many others, as it is an important process such as, for instance, the protagonist spacecraft of a game,\nthen it can be more useful to assign its identifier to a \nGLOBAL\n variable of the program (that can be accessed by any process at any point). Thus, any process will be able to interact with it, as it will have its identifier.\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nGLOBAL\n  id_spacecraft;\nBEGIN\n    id_spacecraft=spacecraft();\n    // ...\nEND\nPROCESS spacecraft()\nBEGIN\n    // ...\nEND\nPROCESS enemy()\nBEGIN\n    // ...\n    id_spacecraft.z=0;\n    // ...\nEND\n\n\n\n\nIn this example, at a specific point the \nenemy\n type processes access the \nz\n variable of the \nspacecraft\n created by the main program, using for that purpose its identifier, that is included in the \nid_spacecraft\n global variable.\n\n\n\n\nSee: \nIdentifying codes of processes.", 
            "title": "Ways to obtain the identifying code of a process."
        }, 
        {
            "location": "/ways_to_obtain_the_identifying_code_of_a_processdot/#example", 
            "text": "PROGRAM my_game;\nPRIVATE id2;\nBEGIN\n    id2=my_process();\n    // ...\nEND\nPROCESS my_process()\nBEGIN\n    // ...\nEND -  All the processes have the following local variables predefined with identifiers of other processes:  father  - father, identifier of the process that created it (the one that made the call).  son  - son, identifier of the last process created by it (last called process).  bigbro  - Elder brother, identifier of the last process created by the father before creating it.  smallbro  - Younger brother, identifier of the following process created by the father after having created it.  These variables can be equal to  0  if they have not been defined (for instance, son  will be equal to  0  until a process is not created or if this process has disappeared).  The processes' identifying codes allow us to access their local variables ( identifier . variable ) and, as  father ,  son , etc. are also local variables, it is possible to make combinations such as  son.bigbro  to access the identifier of the penultimate process created (as  son  is the last one; therefore, its elder brother will be the penultimate one).  Besides creation or direct relationship, there are other ways to obtain identifying codes of processes, as indicated below:    The  get_id()  function to obtain the identifiers of the processes of a specific type (spacecraft, shot, etc.) existing at a specific moment in the game.    The  collision()  function to obtain the identifiers of the\nprocesses with which it is colliding.    When a specific process needs to access from many others, as it is an important process such as, for instance, the protagonist spacecraft of a game,\nthen it can be more useful to assign its identifier to a  GLOBAL  variable of the program (that can be accessed by any process at any point). Thus, any process will be able to interact with it, as it will have its identifier.  {#9999,Example  PROGRAM my_game;\nGLOBAL\n  id_spacecraft;\nBEGIN\n    id_spacecraft=spacecraft();\n    // ...\nEND\nPROCESS spacecraft()\nBEGIN\n    // ...\nEND\nPROCESS enemy()\nBEGIN\n    // ...\n    id_spacecraft.z=0;\n    // ...\nEND  In this example, at a specific point the  enemy  type processes access the  z  variable of the  spacecraft  created by the main program, using for that purpose its identifier, that is included in the  id_spacecraft  global variable.   See:  Identifying codes of processes.", 
            "title": "Example:}"
        }, 
        {
            "location": "/_identifying_codes_of_processesdot/", 
            "text": "A process is an object independent of the program, that executes its own code and that can have its own coordinates, graphics, etc. Processes of a program can be, for instance, a shot, spacecraft or enemy.\n\n\nWhen something similar to what is below is input inside a program:\n\n\nPROCESS shot(\n...\n);\n\n\nBEGIN\n\n\n // \nstatements\n ...\n\n\nEND\n\n\nThe statements that are going to execute the \nshot\n type\n processes (the code ruling their performance), are specified.\n\n\nAs it can be noticed, more than one \nshot\n type process may exist in a program. Then, how can they be distinguished? Simply by their identifying code.\n\n\nEvery time that a new process is created in a game, an identifying code is assigned to this process. This code is going to be the exclusive reference of the process until it disappears.\n\n\nTwo different processes will never have the same identifying code at the same time. However, the code that belonged to a process that has already disappeared can be assigned to a new process (something similar to what happens in relation to an i.d.).\n\n\nThe identifying codes are always whole, positive, odd numbers, like 471, 1937 or 10823.\n\n\nAll the processes have their own identifying code in \nID\n, that is something similar to a process' local variable local, with the proviso that it can not be modified.\n\n\nMoreover, the processes have the identifying code of the process that created them (that called them) in \nfather\n. They have the identifying code of the last process they created (the last one they called) in \nson\n. And so on.\n(see \nHierarchies of processes\n).\n\n\nWhat are the identifying codes for?\n---------------------------------------\n\n\nNormally, all the processes need the identifying code of the other processes in order to interact with them (to see where they are, to modify them, ...).\n\n\nFor instance, it is not possible to subtract energy from the \nenemy\n type\n process, as many or none of this type of processes may exist. It is necessary to have the specific identifying code of the \nenemy\n process from which you want to subtract energy.\n\n\nA process accesses all its own variables simply by their names, such as \nx\n, \nsize\n or \ngraph\n. Thus, if the identifier of a process is known (in \nson\n, \nfather\n or any variable defined by the user, such as \nid2\n), then it is possible to access the variables of that process, like (\nson.x\n, \nfather.size\n or \nid2.graph\n). That is to say, the syntax to access local variables of another process is as follows:\n\n\nidentifying_code\n . \nname_variable\n\n\nThese variables can normally be used to consult them modify them.\n\n\nIt is not at all possible to access \nPRIVATE\n variables of another process at any rate\n. In order to access a private variable of another process, it is necessary to change its declaration to the \nLOCAL\n section to transform it into a local variable. Then, any process will be able to access that variable just having the identifying code of the process, as all the processes will have that variable.\n\n\nThe identifiers have more utilities other than the access to alien local variables,\nsuch as the \nsignal()\n function, that can send specific signals to a process if its identifying code is known (for instance, to eliminate the process).\n\n\nThere are also other functions, such as \ncollision()\n, used to detect collisions with other processes. When this function detects a collision, it returns the identifying code of the process with which it is colliding. Once this code is known, it is possible to access the variables of the process and send them signals.\n\n\nThe \nget_id()\n function operates in a similar way to \ncollision()\n,\nobtaining the identifying code of a process. But in this case, no collision with it is necessary.\n\n\n\n\nSee: \nWays to obtain the identifying code of a process.", 
            "title": " Identifying codes of processes."
        }, 
        {
            "location": "/states_of_a_processdot/", 
            "text": "Processes are the different elements of a program (objects of the game). They may experience different states on creating, destroying or receiving specific signals with the \nsignal()\n function.\n\n\nalive or awake.\n process\n\n\nA process is alive when it is running (when it is interpreting the statements\nlocated between its \nBEGIN\n and its \nEND\n).\n\n\ndead.\n process\n\n\nA process is dead when it finishes (either because its \nEND\n is reached in  the execution, a \nRETURN\n is executed or because it receives a signal \ns_kill\n or \ns_kill_tree\n).\n\n\nasleep.\n process\n\n\nA process may receive the signal \ns_sleep\n (or \ns_sleep_tree\n), then becoming asleep. In this state, this process will appear to be dead. But it is not as, at any moment, it may receive a signal \ns_wakeup\n and return to the alive or awake states. It is also possible to kill an asleep process.\n\n\nfrozen.\n process\n\n\nThe signal \ns_freeze\n (or \ns_freeze_tree\n) freezes a process. In the frozen state, the process, that is still visible, remain blocked. It may be detected by the rest of the processes (for instance, as for collisions), but it is not executed (it stops interpreting its code statements). It will remain in this state until it receives another signal that changes its state or that kills it.\n\n\nA frozen process may be controlled (moved) by another process,\ndirectly manipulating its variables.\n\n\n\n\nWhen a signal is sent to a process, aiming at changing its state, this signal will have no effect before its following display (\nFRAME\n) is reached if the process is running. If the process is not running, then the signal will have an immediate effect.\n\n\nNo signal must be sent to nonexistent processes (to an \nidentifying code\n that does not correspond with any process).\n\n\nThis signal will be ignored when the aim is to put a process in the state in which it is already.\n\n\n\n\nSee: \nHierarchy of processes.", 
            "title": "States of a process."
        }, 
        {
            "location": "/hierarchies_of_processesdot/", 
            "text": "A process is an independent object of the program, that executes its own code and that may have its own coordinates, graphics, etc. For instance, a shot, spacecraft or enemy can be processes of a program.\n\n\nWhen a program starts to run there is only one process: the initial process, which starts the execution of the main code's statements. But, from this moment, this process can create new processes that, at the same time can create other processes, destroy them, etc.\n\n\nIn order to clarify the events appearing through a program, we use a simile, treating the processes as if they were alive beings that are born and killed (when they are created or destroyed). For that reason, the following terms are established:\n\n\nFather\n, name given to the process that has created another one (mother would have been a more appropriate name).\n\n\nSon\n, process created by another one.\n\n\nBrothers\n, processes created by the same father.\n\n\nOrphan\n, process whose father has died (as it has been either eliminated or finished).\n\n\nThis vocabulary may be spread as far as your imagination desires \ngrandfathers\n, \ngrandsons\n, \nuncles\n, etc.\n\n\nAll the processes have direct access to the identifying codes of the processes with which they have direct relationship (see: \nWays to obtain the **#1039,identifying code\n of a process**.\n\n\nOccasionally, reference is made to actions performed by  \nthe system\n. This process, called \ndiv_main\n, controls the rest. Therefore, it is in charge of creating the initial process at the beginning of the execution, of setting the speed execution, the debugger, etc. All the processes that are orphaned become sons of this process.\n\n\nThe \ndiv_main identifier\n can be obtained with \nget_id(0)\n. It can be used to send a tree signal to all the processes, but this process won't be displayed on screen , even if its \nx\n, \ny\n, \ngraph\n, etc. variables are defined.\n\n\n\n\nSee: \nStates of a process", 
            "title": "Hierarchies of processes."
        }, 
        {
            "location": "/types_of_processesdot/", 
            "text": "The blocks of the programs starting with the reserved word \nPROCESS\n\ndetermine the performance of a specific process type. Then, when the program is executed,  any number of processes of this type will be able to exist at a specific moment. Each of these processes will have a different \nidentifying code\n, but all of them are of the same type.\n\n\nExample\n\n\nPROGRAM my_game;\nBEGIN\n    // ...\nEND\nPROCESS spacecraft()\nBEGIN\n    // ...\nEND\nPROCESS enemy()\nBEGIN\n    // ...\nEND\nPROCESS shot()\nBEGIN\n    // ...\nEND\n\n\n\n\nIn this example, four types of processes are defined: \nmy_game\n (the type of the program's initial process), \nspacecraft\n, \nenemy\n and \nshot\n.\n\n\nThe number of processes of each of these types existing in the game depends on the number of calls made to these processes.\n\n\nAll the processes of \nspacecraft\n type will always execute the statements defined in the \nPROCESS spacecraft()\n of the program.\n\n\nA \nprocess type\n is a numeric code referred to the name of the PROCESS that determines how the\n process \nworks\n \nduring the game. This numeric code can be obtained with: TYPE \nname_of_the_process\n.\n\n\nTYPE\n is an operator defined in the language that, applied to a process name,\nreturns this numeric code.\n\n\nFor instance, \nTYPE spacecraft\n will be equivalent to a specific numeric constant and \nTYPE enemy\n will be equivalent to another one.\n\n\nAll the processes have a local variable containing this numeric code, which is: \nreserved.process_type\n.\n\n\nWhat is the process type for?\n---------------------------------------\n\n\nThe process type is used for several things, as it is mentioned below:\n\n\n\n\n\n\nFor the \nget_id()\n function that receives a process type (for instance, \nget_id(TYPE enemy)\n) as a parameter and returns the identifying codes of the processes of this type existing in the game at that moment.\n\n\n\n\n\n\nFor the \ncollision()\n function is similar to the previous one, with the proviso that it returns the identifying codes of the processes with which it is colliding (the graphics of both processes are partially superposed).\n\n\n\n\n\n\nFor the \nsignal()\n function, that may send a signal to all the existing processes of a specific type.\n\n\n\n\n\n\nOr to verify, from a process' \nidentifying code\n, what kind of process it is (type spacecraft, type shot, etc.).\n\n\n\n\n\n\n\n\nThe operator TYPE can only be used preceding a process name of the program or the word \nmouse\n, to detect collisions with the mouse pointer (with \ncollision(TYPE mouse)\n).\n\n\n\n\nSee: \nIdentifying codes of processes.", 
            "title": "Types of processes."
        }, 
        {
            "location": "/types_of_processesdot/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    // ...\nEND\nPROCESS spacecraft()\nBEGIN\n    // ...\nEND\nPROCESS enemy()\nBEGIN\n    // ...\nEND\nPROCESS shot()\nBEGIN\n    // ...\nEND  In this example, four types of processes are defined:  my_game  (the type of the program's initial process),  spacecraft ,  enemy  and  shot .  The number of processes of each of these types existing in the game depends on the number of calls made to these processes.  All the processes of  spacecraft  type will always execute the statements defined in the  PROCESS spacecraft()  of the program.  A  process type  is a numeric code referred to the name of the PROCESS that determines how the  process  works   during the game. This numeric code can be obtained with: TYPE  name_of_the_process .  TYPE  is an operator defined in the language that, applied to a process name,\nreturns this numeric code.  For instance,  TYPE spacecraft  will be equivalent to a specific numeric constant and  TYPE enemy  will be equivalent to another one.  All the processes have a local variable containing this numeric code, which is:  reserved.process_type .  What is the process type for? ---------------------------------------  The process type is used for several things, as it is mentioned below:    For the  get_id()  function that receives a process type (for instance,  get_id(TYPE enemy) ) as a parameter and returns the identifying codes of the processes of this type existing in the game at that moment.    For the  collision()  function is similar to the previous one, with the proviso that it returns the identifying codes of the processes with which it is colliding (the graphics of both processes are partially superposed).    For the  signal()  function, that may send a signal to all the existing processes of a specific type.    Or to verify, from a process'  identifying code , what kind of process it is (type spacecraft, type shot, etc.).     The operator TYPE can only be used preceding a process name of the program or the word  mouse , to detect collisions with the mouse pointer (with  collision(TYPE mouse) ).   See:  Identifying codes of processes.", 
            "title": "Example"
        }, 
        {
            "location": "/from_statement/", 
            "text": "FROM\n \nvariable\n=\nconstant\n \nTO\n \nconstant\n;\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\n(or)\n\n\nFROM\n \nvariable\n=\nconstant\n \nTO\n \nconstant\n \nSTEP\n \nconstant\n;\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) [;](semicolon.md)\n\n...\n\n\n\nEND\n\n\nThe \nFROM\n statement implements a \nloop\n. That is to say, it is capable of \nrepeating a group of statements a specific number of times\n.\n\n\nA \nGLOBAL\n, \nLOCAL\n or \nPRIVATE\n variable of the process itself that can be used as a loop counter is needed to implement this loop.\n\n\nThe reserved word \nFROM\n must be put before the statements that will comprise the inner group of statements. This word will be followed by the \nname of the counter variable\n, the symbol of assignment (\n=\n), the \ninitial value\n of the variable, the reserved word \nTO\n and, finally, the \nfinal value\n of the variable.\nThe symbol \n;\n (semicolon) must be put after this declaration of the loop \nFROM\n.\n\n\nThe inner group of statements that is intended to be repeated a specific number of times is put after this head defining the conditions of the loop. Finally, the reserved word \nEND\n will be put.\n\n\nThe name of \niteration\n of the loop is referred to the number of times that the inner set of statements is executed.\n\n\nThe first iteration will be performed with the \ninitial value\n\nin the variable used as a counter. After this iteration, \n1 will be added\n\nto this variable (if the initial value \nis less\n that the final value). Otherwise \n1 will be subtracted\n from it. After having updated the value of the variable, it is necessary to pass to the following iteration, provided that the value of this variable has not reached (or exceeded) the \nfinal value\n of the loop.\n\n\nThe reserved word \nSTEP\n can be put as second meaning of the \nFROM\n statement, after the initial and final values of the statement. This word must be followed by a \nconstant value\n indicating the increment of the counter variable after every iteration of the loop, instead of \n1\n or\n -1\n, which are the increments\nthat will be performed by default if the \nSTEP\n declaration is omitted.\n\n\nThe following example shows a program with two loops \nFROM\n: one without \n\nSTEP\n declaration (with increment or decrement by default) and the other with it.\n\n\nExample:}\n\n\nPROGRAM my_game;\nBEGIN\n    FROM x=9 TO 0;\n        // Inner statements ...\n    END\n    FROM x=0 TO 9 STEP 2;\n        // Inner statements ...\n    END\nEND\n\n-\n\n\nThe first loop will be executed \n10\n times with the \nx\n variable . Its value will range between \n9\n and \n0\n in the different iterations. By default, 1 will be subtracted from the variable each time, as the initial value (9) is bigger than the final value (0).\n\n\nIn the second loop, constant \n2\n is indicated as the increment of the variable. Thus, the loop will be executed \n5\n times with the \nx\n variable, whose values will be \n0\n, \n2\n, \n4\n, \n6\n and \n8\n, respectively, in the consecutive iterations.\nAs it can be noticed, no iteration will be performed with \nx\n being equivalent to \n9\n, even if it is the loop's \nfinal value\n.\n\n\nBy default, if \n2\n had not been specified as \nSTEP\n of the loop,\n\n1\n would have been added to the \nx\n variable after each iteration.\n\n\nA loop \nFROM\n can always be performed with the \nFOR\n statement,\nas it is now shown (with two loops equivalent to those of the previous example).\n\n\n{#9999,Example\n\n\nPROGRAM my_game;\nBEGIN\n    FOR ( x=9 ; x\n=0 ; x=x-1 )\n        // Inner statements ...\n    END\n    FOR ( x=0 ; x\n=9 ; x=x+2 )\n        // Inner statements ...\n    END\nEND\n\n\n\n\nThe \ninitial\n and \nfinal\n values of a loop \nFROM\n must be different.\n\n\nIf the initial value \nis less\n than the final value, it is not possible to specify a negative value in the \nSTEP\n declaration.\n\n\nIf the initial value \nis bigger\n than the final value, it is not possible to specify a positive value in the \nSTEP\n declaration.\n\n\nA \nBREAK\n statement inside a loop \nFROM\n will immediately finish it, continuing the program from the following statement to this loop (after the \nEND\n).\n\n\nA \nCONTINUE\n statement inside a \nFROM\n loop will force the program to increment the variable used as a counter immediately and then, if the final value has not been exceeded, to start the following iteration.\n\n\nThe statements inner to a loop \nFROM\n may be as many as desired, of any kind, obviously including new loops \nFROM\n.\n\n\n\n\nSee: \nSyntax", 
            "title": "FROM statement"
        }, 
        {
            "location": "/from_statement/#example", 
            "text": "PROGRAM my_game;\nBEGIN\n    FROM x=9 TO 0;\n        // Inner statements ...\n    END\n    FROM x=0 TO 9 STEP 2;\n        // Inner statements ...\n    END\nEND -  The first loop will be executed  10  times with the  x  variable . Its value will range between  9  and  0  in the different iterations. By default, 1 will be subtracted from the variable each time, as the initial value (9) is bigger than the final value (0).  In the second loop, constant  2  is indicated as the increment of the variable. Thus, the loop will be executed  5  times with the  x  variable, whose values will be  0 ,  2 ,  4 ,  6  and  8 , respectively, in the consecutive iterations.\nAs it can be noticed, no iteration will be performed with  x  being equivalent to  9 , even if it is the loop's  final value .  By default, if  2  had not been specified as  STEP  of the loop, 1  would have been added to the  x  variable after each iteration.  A loop  FROM  can always be performed with the  FOR  statement,\nas it is now shown (with two loops equivalent to those of the previous example).  {#9999,Example  PROGRAM my_game;\nBEGIN\n    FOR ( x=9 ; x =0 ; x=x-1 )\n        // Inner statements ...\n    END\n    FOR ( x=0 ; x =9 ; x=x+2 )\n        // Inner statements ...\n    END\nEND  The  initial  and  final  values of a loop  FROM  must be different.  If the initial value  is less  than the final value, it is not possible to specify a negative value in the  STEP  declaration.  If the initial value  is bigger  than the final value, it is not possible to specify a positive value in the  STEP  declaration.  A  BREAK  statement inside a loop  FROM  will immediately finish it, continuing the program from the following statement to this loop (after the  END ).  A  CONTINUE  statement inside a  FROM  loop will force the program to increment the variable used as a counter immediately and then, if the final value has not been exceeded, to start the following iteration.  The statements inner to a loop  FROM  may be as many as desired, of any kind, obviously including new loops  FROM .   See:  Syntax", 
            "title": "Example:}"
        }, 
        {
            "location": "/use_of_angles_in_the_languagedot/", 
            "text": "In the language, all the angles are specified in degree thousandths.\nFor instance:\n\n\n0\n is \n0 degrees\n (to the right)\n\n\n90000\n are \n90 degrees\n (up)\n\n\n -45000\n are\n -45 degrees\n (down right diagonal)\n\n\nIf \n360 degrees\n (360000) are added to or subtracted from any angle, an equivalent angle is obtained. For instance, the angles -90000 and 270000 are equivalent (the angles of \n-90 degrees\n and \n270 degrees\n\ngo both downwards)\n\n\nThe constant \nPI\n predefined as \n180000\n, \n3.1415 radians\n or, what is the same, \n180 degrees\n, can be used as reference. For instance, \nPI/2\n will be equal to 90 degrees (90000).\n\n\nSome of the functions dealing with angles are mentioned below:\n\n\nget_angle()\n\n\nget_distx()\n\n\nget_disty()\n\n\nfget_angle()\n\n\nnear_angle()\n\n\nadvance()\n\n\nxadvance()\n\n\nAll the processes have a predefined local variable called \nangle\n\nwhich, by default, will be equal to \n0\n. If its value is modified, the display's angle of the graphic of the process will be changed (the graphic will rotate in the indicated degrees, from the original graphic).\n\n\n\n\nSee: \nSyntax", 
            "title": "Use of angles in the language."
        }, 
        {
            "location": "/not__not/", 
            "text": "Unary operator of logical and binary \nnegation\n used in expressions and\nconditions.\n\n\nThe reserved word \nNOT\n and the symbol \n!\n are synonymous.\n\n\nNOT logical If the operand is \ntrue\n, on applying this operator to it, a \nfalse\n expression will be obtained, and vice versa.\n\n\nTRUE  -\n  FALSE\n\n\nFALSE   -\n  TRUE\n\n\nNOT binary Changes all the bits of the operand. That is to say, it passes 0 to 1 and 1 to 0.\n\n\n\n\nNote This operator indistinctly works as logical and binary as, in the language, the \ntrue\n logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the \nfalse\n logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...).\n\n\nOn changing the \nNOT\n operator, all the bits also change the last one, transforming then the even numbers into odd numbers (false expressions into\ntrue ones) and the odd numbers into even numbers (true expressions into false ones).\n\n\n\n\nSee: \nSyntax\n - \nExpression\n - \nCondition", 
            "title": "NOT  !"
        }, 
        {
            "location": "/not__not/#not-logical-if-the-operand-is-true-on-applying-this-operator-to-it-a-false-expression-will-be-obtained-and-vice-versa", 
            "text": "TRUE  -   FALSE  FALSE   -   TRUE", 
            "title": "NOT logical If the operand is true, on applying this operator to it, a false expression will be obtained, and vice versa."
        }, 
        {
            "location": "/not__not/#not-binary-changes-all-the-bits-of-the-operand-that-is-to-say-it-passes-0-to-1-and-1-to-0", 
            "text": "", 
            "title": "NOT binary Changes all the bits of the operand. That is to say, it passes 0 to 1 and 1 to 0."
        }, 
        {
            "location": "/not__not/#note-this-operator-indistinctly-works-as-logical-and-binary-as-in-the-language-the-true-logical-expressions-are-interpreted-as-those-that-have-their-last-bit-at-1-bit-0-weight-1-or-in-other-words-the-odd-numbers-1-1-3-3-and-the-false-logical-expressions-are-interpreted-as-those-having-their-last-bit-at-0-the-even-numbers-0-2-2-4-4", 
            "text": "On changing the  NOT  operator, all the bits also change the last one, transforming then the even numbers into odd numbers (false expressions into\ntrue ones) and the odd numbers into even numbers (true expressions into false ones).   See:  Syntax  -  Expression  -  Condition", 
            "title": "Note This operator indistinctly works as logical and binary as, in the language, the true logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the false logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...)."
        }, 
        {
            "location": "/ltgt__notequal/", 
            "text": "Logical operator [\ndifferent from\n] used in conditions. The symbols\n\n and \n!=\n are synonymous.\n\n\nIt must be used between two numeric expressions, and it returns a logical result:\n\n\nFalse\n - If both expressions have the same result (if these two expressions are equivalent), as they ARE NOT different.\n\n\nTrue\n - If the expressions have different results, as they ARE different.\n\n\nExamples\n\n\n2+2 \n 4\n will return \nfalse\n.\n  \n0 \n -1\n  will return \ntrue\n.\n\n\n\n\nSee: \nSyntax\n - \nCondition", 
            "title": "<>  !="
        }, 
        {
            "location": "/ltgt__notequal/#examples", 
            "text": "2+2   4  will return  false .\n   0   -1   will return  true .   See:  Syntax  -  Condition", 
            "title": "Examples"
        }, 
        {
            "location": "/double_quote__apostrophe/", 
            "text": "Symbols delimiting literals.\n\n\nLiterals are the \ntexts in inverted commas\n. Literals may start and finish with the character [\n'\n] or even with the character [\n] (but they have to start and finish with the same character). There are two ways to include the character [\n] in a literal, supposing that the aim is to define a literal containing the text: a\nB\nc\n\n\n\n\n\n\nDuplicating the character: \na\nB\nc\n\n\n\n\n\n\nDefining it with the simple inverted comma: 'a\nB\nc'\n\n\n\n\n\n\nIt happens the same regarding the character [\n'\n], that can be included in a literal if it is duplicated, or if the literal is delimited with the character [\n].\n\n\nAll the literals must be closed in the same line as they started. It is not possible to define literals occupying more than one line.\n\n\n\n\nLiterals of several lines.\n\n\nIt is possible to define the literals over several lines, to do this you just need to divide the\ntext into several lines, and put them successively (do not separate them with any symbol). \nFor example, you could define a constant as:\n\n\nsalute=\nHo\n\n\n       \nla!\n;\n\n\nThis also can be used to initiate the data of type \nSTRING\n.\nThere is no limit in the number of lines. Only \nComments\n\ncan appear between two successive literals.\n\n\n\n\nSee: \nSyntax", 
            "title": "\"  '"
        }, 
        {
            "location": "/mod__percent/", 
            "text": "Arithmetic operator of \nmodule\n or \nremainder of a whole division\n. The reserved word \nMOD\n \nand the symbol\n %\n are synonymous.\nThis operator is used in the \narithmetic expressions\n between two\noperands, to obtain the module of the first one divided by the second one.\n\n\nFor instance, \n7 MOD 3\n will return 1, as the whole division of 7\nby 3 give us 2 as quotient and \n1\n as \nremainder\n.\n\n\nThat is to say, \nn MOD m\n will always return a number within the range (0..m-1).\n\n\nTo understand easily how to obtain the remainder of an operation\n\nn MOD m\n, the following steps may be followed:\n\n\nStep 1\n - If \nn\n is less than \nm\n, then the result of the operation \nMOD\n is \nn\n.\n\n\nStep 2\n - (When \nn\n is bigger than or equal to \nm\n), subtract \nm\n from \nn\n and go to \nstep 1\n.\n\n\n\n\nUse On some occasions, this operator is used in the programs requiring that a counter variable always changes between \n0\n and \nother number\n. For instance, if the aim is that the \nx\n variable indefinitely varies between 0 and 319 (x=0, x=1, x=2, ..., x=319, x=0, x=1, ...), then there would be the following option:\n\n\nx=0;\n\n\nLOOP\n\n\n    x=x+1;\n\n\n    IF (x==320) x=0;\n\n\n    // ...\n\n\nEND\n\n\nBut many programs replace these statements by the following ones:\n\n\nx=0;\n\n\nLOOP\n\n\n    x=(x+1) MOD 320;\n\n\n    // ...\n\n\nEND\n\n\nthat fulfills the same function, as the operator \nMOD\n will truncate \nthe expression when it is bigger than or equal to 320 at a lesser value.\n\n\n\n\nThe \nquotient\n of a whole division is obtained through the operator \n/\n\n(division).\n\n\n\n\nSee: \nSyntax\n - \nExpression", 
            "title": "MOD  %"
        }, 
        {
            "location": "/mod__percent/#use-on-some-occasions-this-operator-is-used-in-the-programs-requiring-that-a-counter-variable-always-changes-between-0-and-other-number-for-instance-if-the-aim-is-that-the-x-variable-indefinitely-varies-between-0-and-319-x0-x1-x2-x319-x0-x1-then-there-would-be-the-following-option", 
            "text": "x=0;  LOOP      x=x+1;      IF (x==320) x=0;      // ...  END  But many programs replace these statements by the following ones:  x=0;  LOOP      x=(x+1) MOD 320;      // ...  END  that fulfills the same function, as the operator  MOD  will truncate \nthe expression when it is bigger than or equal to 320 at a lesser value.   The  quotient  of a whole division is obtained through the operator  / \n(division).   See:  Syntax  -  Expression", 
            "title": "Use On some occasions, this operator is used in the programs requiring that a counter variable always changes between 0 and other number. For instance, if the aim is that the x variable indefinitely varies between 0 and 319 (x=0, x=1, x=2, ..., x=319, x=0, x=1, ...), then there would be the following option:"
        }, 
        {
            "location": "/percentequal/", 
            "text": "Operative assignment. Operation of \nmodule\n or \nremainder of a\n whole \ndivision\n.\n\n\nThe \nassignment statements\n are used to calculate expressions and\n\nto assign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n%=\n is used instead of \n=\n to perform the assignment,\nthe following \nmodule\n or \nremainder of the division\n will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] / [\nresult_of_the_expression\n]\n\n\nExample: \nx=3; x%=2;\n -\n (x=1)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, a \nn %= m;\n type statement will be equivalent to this other \nn = n MOD m;\n statement.\n\n\nSee the operator \nMOD\n for further information about the \nmodule\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "%="
        }, 
        {
            "location": "/percentequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-a-n-m-type-statement-will-be-equivalent-to-this-other-n-n-mod-m-statement", 
            "text": "See the operator  MOD  for further information about the  module .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, a n %= m; type statement will be equivalent to this other n = n MOD m; statement."
        }, 
        {
            "location": "/and/", 
            "text": "Bi functional symbol, that has two different uses depending on whether it is used as an unary or binary operator.\n\n\nAn \nUNARY\n operator appears inside an expression, simply preceding an operand (as if it was its sign). In this case, the operator\n \n will be a synonymous of \nOFFSET\n.\n\n\nExample: \nx\n is equivalent to \nOFFSET x\n\n\nA \nBINARY\n operator appears inside an expression, concatenating\ntwo operands (showing an operation between both). In this case, the\noperator\n \n will be a synonymous of \nAND\n.\n\n\nExample: x\n2\n is equivalent to \nx AND 2\n\n\n\n\nSee: \nSyntax\n - \nOFFSET\n - \nAND", 
            "title": "&"
        }, 
        {
            "location": "/and__andand/", 
            "text": "Binary operator of the \nlogical product\n used in expressions and conditions.\n\n\nThe reserved word \nAND\n and the symbol\n \n are synonymous.\n\n\nAND logical The conditions to the right and left of the operator are first\n\n\nevaluated and, if both are \ntrue\n, this operator will return \ntrue\n. Otherwise, \nthe operator will always return \nfalse\n.\n\n\nFALSE  AND FALSE  = FALSE\n\n\nFALSE AND TRUE = FALSE\n\n\nTRUE AND FALSE  = FALSE\n\n\nTRUE AND TRUE = TRUE\n\n\nThese are used to verify that more than one condition is satisfied; for instance:\n\n\n(x\n0 AND x\n100)\n\n\nTo verify that the variable is bigger than 0 \nAND\n less than 100.\n\n\nAND binary Evaluates the bits of the expressions appearing before\n\n\nand after the operator, returning the value of the bits that are common to both expressions as follows:\n\n\n0 AND 0 = 0\n\n\n0 AND 1 = 0\n\n\n1 AND 0 = 0\n\n\n1 AND 1 = 1\n\n\nThis rule will be applied to all the bits of the operands (in the language, these are 32 bit integers).\n\n\n\n\nNote This operator indistinctly works as logical and binary as, in the language, the \ntrue\n logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the \nfalse\n logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...).\n\n\nThe operator \nAND\n will only leave the last bit at 1 (it will only return \ntrue\n\nas a result} when both operands have this bit at 1 (when both are \ntrue\n expressions).\n\n\n\n\nNote The symbol\n \n can also be used as another synonymous of \nAND\n and  \n \n.\n\n\n\n\nSee: \nSyntax\n - \nExpression\n - \nCondition", 
            "title": "AND  &&"
        }, 
        {
            "location": "/and__andand/#and-logical-the-conditions-to-the-right-and-left-of-the-operator-are-first", 
            "text": "evaluated and, if both are  true , this operator will return  true . Otherwise, \nthe operator will always return  false .  FALSE  AND FALSE  = FALSE  FALSE AND TRUE = FALSE  TRUE AND FALSE  = FALSE  TRUE AND TRUE = TRUE  These are used to verify that more than one condition is satisfied; for instance:  (x 0 AND x 100)  To verify that the variable is bigger than 0  AND  less than 100.", 
            "title": "AND logical The conditions to the right and left of the operator are first"
        }, 
        {
            "location": "/and__andand/#and-binary-evaluates-the-bits-of-the-expressions-appearing-before", 
            "text": "and after the operator, returning the value of the bits that are common to both expressions as follows:  0 AND 0 = 0  0 AND 1 = 0  1 AND 0 = 0  1 AND 1 = 1  This rule will be applied to all the bits of the operands (in the language, these are 32 bit integers).", 
            "title": "AND binary Evaluates the bits of the expressions appearing before"
        }, 
        {
            "location": "/and__andand/#note-this-operator-indistinctly-works-as-logical-and-binary-as-in-the-language-the-true-logical-expressions-are-interpreted-as-those-that-have-their-last-bit-at-1-bit-0-weight-1-or-in-other-words-the-odd-numbers-1-1-3-3-and-the-false-logical-expressions-are-interpreted-as-those-having-their-last-bit-at-0-the-even-numbers-0-2-2-4-4", 
            "text": "The operator  AND  will only leave the last bit at 1 (it will only return  true \nas a result} when both operands have this bit at 1 (when both are  true  expressions).", 
            "title": "Note This operator indistinctly works as logical and binary as, in the language, the true logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the false logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...)."
        }, 
        {
            "location": "/and__andand/#note-the-symbol-can-also-be-used-as-another-synonymous-of-and-and", 
            "text": "See:  Syntax  -  Expression  -  Condition", 
            "title": "Note The symbol &amp; can also be used as another synonymous of AND and   &amp;&amp;."
        }, 
        {
            "location": "/andequal/", 
            "text": "Operative assignment. Binary operation of \nlogical product\n (\nAND\n).\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n=\n is used instead of \n=\n to perform the assignment,\nthe following \nlogical product\n will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] AND [\nresult_of_the_expression\n]\n\n\nExample: \nx=5; x\n=6;\n -\n (x=4)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn \n= m;\n type statement will be equivalent to this other \nn = n AND m;\n statement.\n\n\nSee the operator \nAND\n for further information about the \nlogical product\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "&="
        }, 
        {
            "location": "/andequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-and-m-statement", 
            "text": "See the operator  AND  for further information about the  logical product .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n &amp;= m; type statement will be equivalent to this other n = n AND m; statement."
        }, 
        {
            "location": "/(__)/", 
            "text": "The symbols \n(\n and \n)\n, called brackets, must always appear in pairs and in this same order.\n\n\nThey are used to delimit some calculations, parameters or conditions\nof the programs, marking their beginning with the symbol \n(\n and\nthe end with the symbol \n)\n.\n\n\n\n\nInside an expression, they indicate that the calculation within them must be done before the calculation out of them.\n\n\nFor instance, the expression \n2*3+2\n will be evaluated as \n8\n, as the multiplication (2 by 3 equals 6) will be done first and then, the addition (6 plus 2 equals 8).\n\n\nUsing brackets, it is possible to force to do the addition at first,\nexpressing the calculation as \n2*(3+2)\n, that will be evaluated as \n10\n, as now the addition (3 plus 2 equals 5) will be done first and then, the multiplication (2 by 5 equals 10).\n\n\n\n\nThe brackets are also use to delimit the call parameters of the \nprocesses\n or the functions and inside the syntax of different statements of the language.\n\n\n\n\nSee: \nSyntax\n - \nExpression", 
            "title": "(  )"
        }, 
        {
            "location": "/asterisk/", 
            "text": "Arithmetic operator of whole \nmultiplication\n. This operator is used in the \narithmetic expressions\n between two operands, to obtain the result of their multiplication.\n\n\nFor instance, \n2 * 8\n will return \n16\n, \n99 * 0\n will return \n0\n, \n2 * -1\n\nwill return\n -2\n, etc.\n\n\nAll the variables are 32 bit \nintegers\n with sign in the language.\nTherefore, only integers within the range (\nmin_int\n ... \nmax_int\n)} can be used. Then, when the result of the \nmultiplication\n must exceed that range, \nincorrect results will be shown\n. In this case, the system won't report any error. Hence, much care must be taken.\n\n\n\n\nThis symbol is bi functional; it has two different uses depending on whether it is used as an unary or binary operator.\n\n\nA \nUNARY\n operator appears inside an expression, simply preceding an operand (as if it was its sign). In this case, the operator \n*\n will be a synonymous of \nPOINTER\n.\n\n\nExample: \nx\n is equivalent to \nPOINTER x\n\n\nA \nBINARY\n operator appears inside an expression, concatenating\ntwo operands (showing an operation between both). In this case, the\noperator \n*\n will be the arithmetic operator of \nmultiplication** previously explained.\n\n\n\n\nSee: \nSyntax\n - \nExpression\n - \nPOINTER", 
            "title": "*"
        }, 
        {
            "location": "/asteriskequal/", 
            "text": "Operative assignment. Arithmetic operation of \nmultiplication\n.\n\n\nThe \nassignment statements\n are used to calculate expressions and\n\nto assign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n=\n* is used instead of \n=\n to perform the assignment,\nthen the following \nmultiplication** will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] * [\nresult_of_the_expression\n]\n\n\nExample: \nx=2; x*=3;\n -\n (x=6)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, a \nn *= m;\n type statement will be equivalent to this other \nn = n * m;\n statement.\n\n\nSee the operator \n*\n for further information about the \nmultiplication\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "*="
        }, 
        {
            "location": "/asteriskequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-a-n-m-type-statement-will-be-equivalent-to-this-other-n-n-m-statement", 
            "text": "See the operator  *  for further information about the  multiplication .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, a n *= m; type statement will be equivalent to this other n = n * m; statement."
        }, 
        {
            "location": "/plus/", 
            "text": "Arithmetic operator of \naddition\n. This operator is used in the \narithmetic expressions\n between two operands, to obtain their addition.\n\n\nFor instance \n2 + 6\n will return 8, the result of 2 plus 6.\n\n\nAll the variables are 32 bit \nintegers\n with sign in the language.\nTherefore, only integers within the range (\nmin_int\n ... \nmax_int\n)} can be used. Then, when the result of the \naddition\n must exceed that range, \nincorrect results will be shown\n. In this case, the system won't report any error. Hence, much care must be taken.\n\n\n\n\nSee: \nSyntax\n - \nExpression", 
            "title": "+"
        }, 
        {
            "location": "/plusplus/", 
            "text": "Operator of increment. This operator, derived from the C language, allows us to increment the value \nof a variable (to add 1 to it) without requiring an\n\nassignment statement\n for that purpose.\n\n\nThe variable can be a variable, a \nposition of a table\n, or a \nfield of a structure\n.\n\n\nThis operator can be included in an expression with two forms:\n\npre-increment\n and \npost-increment\n.\n\n\nOperator of pre-increment.\n\n\nWhen the symbol \n ++\n is put just before a variable, 1 will be added to it \nbefore the execution of the statement\n. As examples, see the following statements:\n\n\n ++x;\n - statement that will add 1 to the \nx\n variable.\n\n\n z=++x+y;\n - statement that will add 1 to the \nx\n variable and then, it will assign\nthe addition between \nx\n (already incremented) and \ny\n to the \nz\n variable.\n\n\nOperator of post-increment.\n\n\nWhen the symbol\n ++\n is put just after a variable, 1 will be added to it \nafter the execution of the statement\n. As examples, see the following statements:\n\n\n x++;\n - statement that will add 1 to the \nx\n variable.\n\n\n z=x+y++;\n - statement that will assign the addition between \nx\n and \ny\n to the \nz\n variable, incrementing then the \ny\n variable.\n\n\n\n\nSummary\n\n\nGenerally, a\n ++variable;\n or \nvariable++;\n type statement is always equivalent\nto the following statement: \nvariable=variable+1;\n (or \nvariable+=1;\n).\n\n\nThe difference between the \npre-increment\n and the \npost-increment\n is that in the first case, the value of the variable already incremented is taken to evaluate the rest of the expression, while in the second case, the expression is evaluated with the value that the variable had before being incremented.\n\n\n\n\nSee: \nSyntax\n - \nExpression\n - \nDecrement(--)", 
            "title": "++"
        }, 
        {
            "location": "/plusplus/#summary", 
            "text": "Generally, a  ++variable;  or  variable++;  type statement is always equivalent\nto the following statement:  variable=variable+1;  (or  variable+=1; ).  The difference between the  pre-increment  and the  post-increment  is that in the first case, the value of the variable already incremented is taken to evaluate the rest of the expression, while in the second case, the expression is evaluated with the value that the variable had before being incremented.   See:  Syntax  -  Expression  -  Decrement(--)", 
            "title": "Summary"
        }, 
        {
            "location": "/plusequal/", 
            "text": "Operative assignment. Arithmetic operation of \naddition\n.\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n+=\n is used instead of \n=\n to perform the assignment,\nthe result of the following \naddition\n will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] + [\nresult_of_the_expression\n]\n\n\nExample: \nx=2; x+=2;\n -\n (x=4)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn += m;\n type statement will be equivalent to this other \nn = n + m;\n statement.\n\n\nSee the operator \n+\n for further information about the \naddition\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "+="
        }, 
        {
            "location": "/plusequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-m-statement", 
            "text": "See the operator  +  for further information about the  addition .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n += m; type statement will be equivalent to this other n = n + m; statement."
        }, 
        {
            "location": "/comma/", 
            "text": "The symbol of the comma ( \n,\n ) is used inside the programming language,\nin different points of a program, \nto separate\n two consecutive elements of a list.\n\n\nIt is used, for instance, in the following points:\n\n\n\n\n\n\nIn the \nlists of constants\n to separate their different numeric values.\n\n\n\n\n\n\nIn the definition of the \nparameters of a process\n to separate\nthe names of the different parameters.\n\n\n\n\n\n\nIn the \ncall to a function\n and in the \ncall to a process\n to also separate different expressions that will be assigned to the parameters of the function or process.\n\n\n\n\n\n\nIn the \nFOR statement\n to separate different initialisations,\nconditions or increments.\n\n\n\n\n\n\nIn the \nSWITCH statement\n to define the different values\naccepted in a block \nCASE ... END\n.\n\n\n\n\n\n\n\n\nThe symbol of the comma can also be used to separate several\n\ndeclarations of data\n, instead of finishing each of them with a symbol \nsemicolon\n (\n;\n).\n\n\n\n\nSee: \nSyntax", 
            "title": ","
        }, 
        {
            "location": "/minus/", 
            "text": "Arithmetic operator of \nsubtraction\n. This operator is used in the \narithmetic expressions\n between two operands, to obtain the result of this subtraction.\n\n\nFor instance, \n2 - 6\n will return -4, the result of subtracting 6 from 2.\n\n\nAll the variables are 32 bit \nintegers\n with sign in the language.\nTherefore, only integers within the range (\nmin_int\n ... \nmax_int\n)} can be used. Then, when the result of the \nsubtraction\n must exceed that range, \nincorrect results will be shown\n. In this case, the system won't report any error. Hence, much care must be taken.\n\n\n\n\nThis symbol is bi functional. That is to say, it has two different uses depending on whether it is used as an unary or binary operator.\n\n\nA \nUNARY\n operator appears inside an expression, simply preceding an operand (as if it was its sign). In this case, the operator \n -\n will be the \nminus sign\n.\n\n\nExample: -7\n the negative integer \nminus seven\n.\n\n\nA \nBINARY\n operator appears inside an expression, concatenating\ntwo operands (showing an operation between both). In this case, the\noperator\n -\n will be the arithmetic operator of \nsubtraction\n previously explained.\n\n\n\n\nSee: \nSyntax\n - \nExpression", 
            "title": "-"
        }, 
        {
            "location": "/minusminus/", 
            "text": "Operator of decrement. This operator, derived from the C language, allows us to decrement the value of a variable (to subtract 1 from it) without requiring an\n\nassignment statement\n for that purpose.\n\n\nThe variable can be a variable, a \nposition of a table\n, or a \nfield of a structure\n.\n\n\nThis operator can be included in an expression with two forms:\n\npre-decrement\n and \npost-decrement\n.\n\n\nOperator of pre-decrement.\n\n\nWhen the symbol\n --\n is put just before a variable, 1 will be subtracted from it \nbefore the execution of the statement\n. As examples, see the following statements:\n\n\n --x;\n - statement that will subtract 1 from the \nx\n variable.\n\n\n z=--x+y;\n - statement that will subtract 1 from the \nx\n variable and then, it will assign the addition between \nx\n (already decremented) and \ny\n to the \nz\n variable.\n\n\nOperator of post-decrement.\n\n\nWhen the symbol\n --\n is put just after a variable, 1 will be subtracted from it \nafter the execution of the statement\n. As examples, see the following statements:\n\n\n x--;\n - statement that will subtract 1 from the \nx\n variable.\n\n\n z=x+y--;\n - statement that will assign the addition between \nx\n and \ny\n to the \nz\n variable, decrementing then the \ny\n variable.\n\n\n\n\nSummary\n\n\nGenerally, a\n --variable;\n or \nvariable--;\n type statement is always equivalent\nto the following statement: \nvariable=variable-1;\n (or \nvariable-=1;\n).\n\n\nThe difference between the \npre-decrement\n and the \npost-decrement\n is that, in the first case, the value of the variable already decremented is taken to evaluate the rest of the expression, while in the second case, the expression is evaluated with the value that the variable had before being decremented.\n\n\n\n\nSee: \nSyntax\n - \nExpression\n - \nIncrement(++)", 
            "title": "--"
        }, 
        {
            "location": "/minusminus/#summary", 
            "text": "Generally, a  --variable;  or  variable--;  type statement is always equivalent\nto the following statement:  variable=variable-1;  (or  variable-=1; ).  The difference between the  pre-decrement  and the  post-decrement  is that, in the first case, the value of the variable already decremented is taken to evaluate the rest of the expression, while in the second case, the expression is evaluated with the value that the variable had before being decremented.   See:  Syntax  -  Expression  -  Increment(++)", 
            "title": "Summary"
        }, 
        {
            "location": "/minusequal/", 
            "text": "Operative assignment. Arithmetic operation of \nsubtraction\n.\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n-=\n is used instead of \n=\n to perform the assignment,\nthe result of the following \nsubtraction\n will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] + [\nresult_of_the_expression\n]\n\n\nExample: \nx=4; x-=2;\n -\n (x=2)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn -= m;\n type statement will be equivalent to this other \nn = n - m;\n statement.\n\n\nSee the operator \n-\n for further information about the \nsubtraction\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "-="
        }, 
        {
            "location": "/minusequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-m-statement", 
            "text": "See the operator  -  for further information about the  subtraction .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n -= m; type statement will be equivalent to this other n = n - m; statement."
        }, 
        {
            "location": "/dot__minusgt/", 
            "text": "Operator of access to structures or to alien local data. The symbols\n .\n and\n -\n\nare synonymous. Therefore, they can indistinctly be used.\n\n\n\n\nAccess to structures.\n\n\nTo access a field of a structure, this operator must be used in the following way:\n\n\nname of the structure\n[\nno. record\n]\n . \nname of the field\n\n\n(or, using the other symbol)\n\n\nname of the structure\n[\nno. record\n]\n -\n \nname of the field\n\n\nExamples\n\n\nscroll[0].camera\n\n\nm7[1]-\nz\n\n\nNote Keep in mind that the record number in square brackets can be omitted when record number 0 is accessed. For instance, \nscroll[0].camera\n will always be equivalent to \nscroll.camera\n.\n\n\n\n\nAccess to alien local data (belonging to another process).\n\n\nTo access a \nLOCAL\n variable of a process from another one, the \nidentifying code\n of the process whose variable is going to be read or modified must be known. Then, it will be possible to access it in the following way:\n\n\nidentifying code\n . \nlocal variable name\n\n\n(or using the other symbol)\n\n\nidentifying code\n -\n \nlocal variable name\n\n\nExamples\n\n\nfather.x\n\n\nson-\ngraph\n\n\n\n\nSee: \nDeclaration of a structure\n - \nIdentifying codes\n - \nSyntax", 
            "title": ".  ->"
        }, 
        {
            "location": "/dot__minusgt/#examples", 
            "text": "scroll[0].camera  m7[1]- z", 
            "title": "Examples"
        }, 
        {
            "location": "/dot__minusgt/#note-keep-in-mind-that-the-record-number-in-square-brackets-can-be-omitted-when-record-number-0-is-accessed-for-instance-scroll0camera-will-always-be-equivalent-to-scrollcamera", 
            "text": "Access to alien local data (belonging to another process).  To access a  LOCAL  variable of a process from another one, the  identifying code  of the process whose variable is going to be read or modified must be known. Then, it will be possible to access it in the following way:  identifying code  .  local variable name  (or using the other symbol)  identifying code  -   local variable name", 
            "title": "Note Keep in mind that the record number in square brackets can be omitted when record number 0 is accessed. For instance, scroll[0].camera will always be equivalent to scroll.camera."
        }, 
        {
            "location": "/dot__minusgt/#examples_1", 
            "text": "father.x  son- graph   See:  Declaration of a structure  -  Identifying codes  -  Syntax", 
            "title": "Examples"
        }, 
        {
            "location": "/dotdot/", 
            "text": "Range of values of a section CASE\n---------------------------------------\n\n\nThe symbol\n ..\n (double period) is used to define a range of values. That is to say, to express the numbers ranging between two values (inclusive).\n\n\nThis symbol is \nonly used in the\n \nSWITCH\n \nstatements\n, inside the \nsections CASE\n, to specify a range of values.\n\n\nIt doesn't matter to express a range either as \nminimum..maximum\n or as \nmaximum..minimum\n.\n\n\nFor instance, the range defined as\n -2 .. 1\n would be made up of the numbers\n -2\n,\n -1\n, \n0\n \n \n1\n.\n\n\n\n\nSee: \nSyntax\n - \nSWITCH statement", 
            "title": ".."
        }, 
        {
            "location": "/forward_slash/", 
            "text": "Arithmetical operator of whole \ndivision\n. This operator is used in the \narithmetic expressions\n between two operands, to obtain the quotient\nof the first one divided by the second one.\n\n\nFor instance \n7 / 3\n will return 2 as, on doing the whole division of 7\nby 3, the quotient will equal \n2\n (and the remainder will be 1).\n\n\nThat is to say, \nn / m\n will always return the result of the division of \nn\n by \nm\n, but with no decimals (as all the variables are 32 bit \nintegers\n with sign in the language).\n\n\n\n\nThe \nremainder\n of a whole division is obtained through the operator \nMOD\n (module).\n\n\n\n\nSee: \nSyntax\n - \nExpression", 
            "title": "/"
        }, 
        {
            "location": "/forward_slashequal/", 
            "text": "Operative assignment. Operation of \nwhole division\n.\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n/=\n is used instead of \n=\n to perform the assignment,\nthe \nwhole result\n (quotient) of the following \ndivision\n will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] / [\nresult_of_the_expression\n]\n\n\nExample: \nx=8; x/=2;\n -\n (x=4)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn/-= m;\n type statement will be equivalent to this other \nn = n / m;\n statement.\n\n\nSee the operator \n/\n for further information about the \nwhole division\n.\n\n\n\n\nSee: \nsyntax\n - \nAssignation", 
            "title": "/="
        }, 
        {
            "location": "/forward_slashequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-m-statement", 
            "text": "See the operator  /  for further information about the  whole division .   See:  syntax  -  Assignation", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n/-= m; type statement will be equivalent to this other n = n / m; statement."
        }, 
        {
            "location": "/colon/", 
            "text": "The symbol \n:\n (colon) is used to finish a \nCASE\n or \nDEFAULT\n declaration of a \nSWITCH statement\n.\n\n\nActually, the symbols \n:\n (colon) and \n;\n (semicolon) are synonymous\nin this language. That is to say, they can be used indistinctly.\n\n\nHowever, similarly to what happens in other programming languages,\nthe symbol \nsemicolon\n is normally used to finish statements and the symbol \ncolon\n is normally used inside the syntax of the \nSWITCH statement\n.\n\n\n\n\nSee: \nSyntax\n - \nCASE\n -  \nDEFAULT\n - \nSWITCH statement", 
            "title": ":"
        }, 
        {
            "location": "/semicolon/", 
            "text": "The symbol \n;\n (semicolon) is used in many points of a program to indicate always that a statement or any kind of declaration finishes. This is called \nfinishing\n symbol, whose only purpose is to indicate the end of something.\n\n\nIn the language, the following points of the program must be indicated with semicolon:\n\n\n\n\n\n\nThe end of the \nPROGRAM declaration\n.\n\n\n\n\n\n\nThe end of a \ndeclaration of a variable\n.\n\n\n\n\n\n\nThe end of an \nIMPORT declaration\n.\n\n\n\n\n\n\nThe end of the following statements:\n\n\nAssignments or increments of data\n.\n\n\nCalls to processes\n.\n\n\nCalls to functions\n.\n\n\nFRAME\n, \nRETURN\n, \nDEBUG\n, \nBREAK\n and \nCONTINUE\n.\n\n\n\n\n\n\nThe end of the beginning of a loop \nFROM\n.\n\n\n\n\n\n\nAnd separating the different parts of a \nFOR\n statement.\n\n\n\n\n\n\nThe compiler will indicate the lacking of the symbol \n;\n in any of these points.\n\n\nIt is also possible to put this symbol in other specific points of the programs, such as after any other kind of statement, even if it will be optional in this case and, therefore, the compiler won't report its lacking.\n\n\n\n\nActually, the symbols \n;\n (semicolon) and \n:\n (colon) are synonymous\nin this language. That is to say, they can be used indistinctly.\n\n\nHowever, similarly to what happens in other programming languages,\nthe symbol \nsemicolon\n is normally used to finish statements and the symbol \ncolon\n \nis normally used inside the syntax of the \nSWITCH statement\n.\n\n\n\n\nSee: \nSyntax", 
            "title": ";"
        }, 
        {
            "location": "/lt/", 
            "text": "Logical operator [\nless than\n] used in conditions. It must be used between two numeric expressions, and it returns a logical result:\n\n\nFalse\n - If the first expression ISN'T less than the second one.\n\n\nTrue\n - If the first expression IS less than the second one.\n\n\nExamples\n\n\n2+2 \n 4\n will return \nfalse\n.\n  \n1 \n 2\n   will return \ntrue\n.\n\n\n\n\nSee: \nSyntax\n - \nCondition", 
            "title": "<"
        }, 
        {
            "location": "/lt/#examples", 
            "text": "2+2   4  will return  false .\n   1   2    will return  true .   See:  Syntax  -  Condition", 
            "title": "Examples"
        }, 
        {
            "location": "/ltlt/", 
            "text": "Binary operator of \nrotation to the left\n. This operator is used in the \narithmetic expressions\n, \nbetween two operands, to obtain the result of rotating the first operand to the left as \nmany times as indicated by the second. For instance, the following rotation:\n\n\nn\n \n \nm\n\n\nWill return \nn\n rotated to the left \nm\n times. Every rotation to the left is equivalent to multiplying the number by 2. That is to say, rotating to the left once, is equivalent to multiplying by 2; rotating to the left twice is equivalent to multiplying by 4; 3 times is equivalent to multiplying by 8, and so on.\n\n\nOr, what is the same, (the \nPOW function\n(2, m)\n returns \n2\n raised to \nm\n):\n\n\nn\n * POW(2, \nm\n)\n\n\nFor instance, \n2\n3\n will return 16, \n4\n1\n will return 8, \n100\n0\n will return 100, etc.\n\n\nAll the variables are 32 bit \nintegers\n with sign in the language.\nTherefore, only integers within the range (\nmin_int\n ... \nmax_int\n)} can be used. \nThen, when the result of the \nrotation\n must exceed that range, \nincorrect results will be shown\n. \nIn this case, the system won't report any error. Hence, much care must be taken.\n\n\n\n\nThe operator of rotation to the right (the contrary operation) is the\n\nsymbol \n.\n\n\n\n\nSee: \nSyntax\n - \nExpression", 
            "title": "<<"
        }, 
        {
            "location": "/ltltequal/", 
            "text": "Operative assignment. Binary operation of \nrotation to the left\n.\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n=\n is used instead of \n=\n to perform the assignment,\nthe result of the following rotation will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] \n [\nresult_of_the_expression\n]\n\n\nOr, what is the same, (the \nPOW function\n(2, n)\n returns \n2\n raised to \nn\n):\n\n\n[\nprevious_value_of_the_variable\n] * POW(2, [\nresult_of_the_expression\n]\n\n\nThat is to say, if the result of the expression is:\n\n\n0 -\n the variable will maintain its value.\n\n\n1 -\n the variable will be multiplied by 2.\n\n\n2 -\n the variable will be multiplied by 4.\n\n\n3 -\n the variable will be multiplied by 8.\n\n\n...\n\n\nExample: \nx=2; x\n=2;\n -\n (x=8)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn \n= m;\n type statement will be equivalent to this other \nn = n \n m;\n statement.\n\n\nSee the operator \n for further information about the \nrotation to the left\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "<<="
        }, 
        {
            "location": "/ltltequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-m-statement", 
            "text": "See the operator   for further information about the  rotation to the left .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n &lt;&lt;= m; type statement will be equivalent to this other n = n &lt;&lt; m; statement."
        }, 
        {
            "location": "/ltequal__equallt/", 
            "text": "Logical operator [\nless than or equal to\n] used in conditions. The symbols \n=\n and \n=\n are synonymous.\n\n\nIt must be used between two numeric expressions, and it returns a logical result:\n\n\nFalse\n - If the first expression ISN'T less than or equal to the second one.\n\n\nTrue\n - If the first expression IS less than or equal to the second one.\n\n\nExamples\n\n\n2+2 \n= 3\n will return \nfalse\n.\n  \n2+2 \n= 4\n will return \ntrue\n.\n\n\n\n\nSee: \nSyntax\n - \nCondition", 
            "title": "<=  =<"
        }, 
        {
            "location": "/ltequal__equallt/#examples", 
            "text": "2+2  = 3  will return  false .\n   2+2  = 4  will return  true .   See:  Syntax  -  Condition", 
            "title": "Examples"
        }, 
        {
            "location": "/equal/", 
            "text": "The symbol \n=\n (symbol of \nassignment\n) is used in the language inside the \ndata declarations\n\nto initialise them to their initial value. In the \nassignment statements\n, this symbol is used\nto separate the reference to the variable from the assigned expression.\n\n\nInside an expression, this operator can be used as a conventional binary arithmetic operator, \nwhich is placed between two operands, returning\nthe second operand's value as a result (besides assigning this result to the variable defined as first operand).\n\n\nThis operator represents an \nimperative order\n according to which, on executing the statement that contained it, the first operand (before the symbol) will take the value of the second operand (or expression after the symbol).\n\n\nOn evaluating an expression, the assignment operands are always those of \nless priority\n (the last ones that are interpreted in the expression),\nbeing possible to use brackets to force a bigger priority. If, in an expression (or statement) several assignment operands have been used,\nthey will be evaluated (executed) from right to left.\n\n\nFor instance, in the statement:\n\n\nx=y=x+y;\n\n\nThe addition (\nx+y\n) will first be done. Then, the result will be assigned as the new value of the \ny\n variable (\ny=x+y\n) and, finally, this same value will be assigned to the \nx\n variable (\nx=y\n).\n\n\n\n\nSee: \nSyntax\n - \nData declarations\n - \nAssignment statements", 
            "title": "="
        }, 
        {
            "location": "/equalequal/", 
            "text": "Logical operator [\nequal to\n] used in conditions. It must be used between two numeric expressions and it returns a logical result:\n\n\nFalse\n - If the expressions give different results, as they AREN'T equal\n(or equivalent).\n\n\nTrue\n - If both expressions give the same result (if they are equivalent expressions), as they ARE equal.\n\n\nExamples\n\n\n0 == -1\n  will return \nfalse\n.\n  \n2+2 == 4\n will return \ntrue\n.\n\n\n\n\nNote The symbol \n=\n can not be used to compare two expressions\n\n\nor numeric values, as it is the assignment symbol.\n\n\n\n\nSee: \nSyntax\n - \nCondition", 
            "title": "=="
        }, 
        {
            "location": "/equalequal/#examples", 
            "text": "0 == -1   will return  false .\n   2+2 == 4  will return  true .", 
            "title": "Examples"
        }, 
        {
            "location": "/equalequal/#note-the-symbol-can-not-be-used-to-compare-two-expressions", 
            "text": "or numeric values, as it is the assignment symbol.   See:  Syntax  -  Condition", 
            "title": "Note The symbol = can not be used to compare two expressions"
        }, 
        {
            "location": "/gtequal__equalgt/", 
            "text": "Logical operator [\nbigger than or equal to\n] used in conditions. The symbols \n=\n and \n=\n are synonymous.\n\n\nIt must be used between two numeric expressions, and it returns a logical result:\n\n\nFalse\n - If the first expression ISN'T bigger than or equal to the second one.\n\n\nTrue\n - If the first expression IS bigger than or equal to the second one.\n\n\nExamples\n\n\n2+2 \n= 3\n will return \nfalse\n.\n  \n2+2 \n= 4\n will return \ntrue\n.\n\n\n\n\nSee: \nSyntax\n - \nCondition", 
            "title": ">=  =>"
        }, 
        {
            "location": "/gtequal__equalgt/#examples", 
            "text": "2+2  = 3  will return  false .\n   2+2  = 4  will return  true .   See:  Syntax  -  Condition", 
            "title": "Examples"
        }, 
        {
            "location": "/gt/", 
            "text": "Logical operator [\nbigger than\n] used in conditions. It must be used between two numeric \nexpressions, and it returns a logical result:\n\n\nFalse\n - If the first expression ISN'T bigger than the second one.\n\n\nTrue\n - If the first expression IS bigger than the second one.\n\n\nExamples\n\n\n2+2 \n 4\n will return \nfalse\n.\n  \n2 \n 1\n will return \ntrue\n.\n\n\n\n\nSee: \nSyntax\n - \nCondition", 
            "title": ">"
        }, 
        {
            "location": "/gt/#examples", 
            "text": "2+2   4  will return  false .\n   2   1  will return  true .   See:  Syntax  -  Condition", 
            "title": "Examples"
        }, 
        {
            "location": "/gtgt/", 
            "text": "Binary operator of \nrotation to the right\n. This operator is used in the \narithmetic expressions\n, between two operands, to obtain the result\nof rotating the first operand to the right as many times as indicated by the second one. For instance, the following rotation:\n\n\nn\n \n \nm\n\n\nWill return \nn\n rotated to the right \nm\n times. Every rotation to the right is equivalent to dividing the number by 2. That is to say, rotating to the right once, is equivalent to dividing by 2; rotating to the right twice is equivalent to dividing by 4; 3 times is equivalent to dividing by 8, and so on.\n\n\nKeep in mind that all the numbers used in this language are \nintegers\n  (with no decimals). Therefore, an \ninteger\n will always be returned as a result of the division (for instance, 7 divided by 2 will return 3).\n\n\nOr, what is the same, (the \nPOW function\n(2, m)\n returns \n2\n raised to \nm\n):\n\n\nn\n / POW(2, \nm\n)\n\n\nFor instance, \n16\n3\n will return 2, \n2\n1\n will return 1, \n100\n0\n will return 100, etc.\n\n\n\n\nThe operator of rotation to the left (the contrary operation) is the\n\nsymbol \n.\n\n\n\n\nSee: \nSyntax\n - \nExpression", 
            "title": ">>"
        }, 
        {
            "location": "/gtgtequal/", 
            "text": "Operative assignment. Binary operation of \nrotation to the right\n.\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nVariable reference\n \n=\n \nexpression\n \n;\n\n\nIf the symbol \n=\n is used instead of \n=\n to perform the assignment,\nthe result of the following rotation will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] \n [\nresult_of_the_expression\n]\n\n\nOr, what is the same, (the \nPOW function\n(2, n)\n returns \n2\n raised to \nn\n):\n\n\n[\nprevious_value_of_the_variable\n] / POW(2, [\nresult_of_the_expression\n]\n\n\nThat is to say, if the result of the expression is:\n\n\n0 -\n the variable will maintain its value.\n\n\n1 -\n the variable will be divided by 2.\n\n\n2 -\n the variable will be divided by 4.\n\n\n3 -\n the variable will be divided by 8.\n\n\n...\n\n\nExample: \nx=8; x\n=2;\n -\n (x=2)\n\n\nThe result of a rotation to the right will always be an integer,\nwith no decimals or, what is the same, the quotient of the previous whole division.\n\n\nExample: \nx=9; x\n=2;\n -\n (x=2)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn \n= m;\n type statement will be equivalent to this other \nn = n \n m;\n statement.\n\n\nSee the operator \n for further information about the \nrotation to the right\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": ">>="
        }, 
        {
            "location": "/gtgtequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-m-statement", 
            "text": "See the operator   for further information about the  rotation to the right .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n &gt;&gt;= m; type statement will be equivalent to this other n = n &gt;&gt; m; statement."
        }, 
        {
            "location": "/pointer__[__]/", 
            "text": "Addressing operator. This operator requires a slightly advanced level in programming techniques. The use of pointers is a characteristic of other languages that, even if it may be very useful, is not indispensable to make programs, no matter how difficult they are.\n\n\nThe reserved word \nPOINTER\n is used to make reference to a specific position of the computer's memory.\n\n\nPractical case.\n---------------------------------------\n\n\nFor instance, having a variable named \nmy_variable\n with value \n3\n, which will be stored in an offset of the memory (all the variables have an offset), the operator \nOFFSET\n is used to obtain this offset.\n\n\nSupposing that there is another variable named \noffset_of_my_variable\n used\nto store the offset of the previous variable, which would be done with the following statement:\n\n\noffset_of_my_variable = OFFSET my_variable;\n\n\nThis offset will be an integer, for instance \n12345\n. In order to obtain or modify the value of the variable (\n3\n), having only the offset (position) of the variable (and not its name) in the memory, the operator \nPOINTER\n must be used. The statement to obtain the value of the variable from its offset would be as follows:\n\n\nmy_variable = POINTER offset_of_my_variable;\n\n\nA series of expressions and their numeric equivalents are now shown in order to clarify the concepts of \nname of the variable\n, \noffset of the variable\n and \nvalue of the variable\n.\n\n\nmy_variable\n = \n3\n\n\nOFFSET my_variable\n = \n12345\n\n\noffset_of_my_variable\n = \n12345\n\n\nPOINTER offset_of_my_variable\n = \n3\n\n\nThe offset of a variable may vary as a program is expanded (by adding new data and statements to it).\n\n\nIn short, {the operator POINTER accesses the value that is in the\nposition of the computer's memory indicated after it}. That is to say:\n\n\nPOINTER 12345\n = \n3\n\n\nIt means that value \n3\n is in the offset \n12345\n of the computer's memory, as it is in this offset where the value of the \nmy_variable\n variable is \nstored\n, and it is its value.\n\n\n\n\nThe \nsymbol *\n and the \nsymbol ^\n may be used as \nsynonyms\n of the reserved word \nPOINTER\n (in the previous example \n12345\n* = \n3\n or \n^12345\n = \n3**).\n\n\n\n\nThe square brackets (symbols \n[ ]\n) work in a similar way to the operator\n\nPOINTER\n, with the proviso that they access the variable whose offset is indicated in them (in the previous example \n[12345]\n = \n3\n).\n\n\nThe square brackets are also used to specify the index in the tables and structures.\n\n\n\n\nSee: \nSyntax\n - \nOFFSET", 
            "title": "POINTER  [  ]"
        }, 
        {
            "location": "/caret/", 
            "text": "This symbol is bi functional; it has two different uses, depending on whether it is used as an unary or binary operator.\n\n\nA \nUNARY\n operator appears inside an expression, simply preceding an operand (as if it was its sign). In this case, the operator\n ^\n will be a synonymous of \nPOINTER\n.\n\n\nExample: ^x\n is equivalent to a \nPOINTER x\n\n\nA \nBINARY\n operator appears inside an expression, concatenating\ntwo operands (showing an operation between both). In this case, the\noperator\n ^\n will be a synonymous of \nXOR\n.\n\n\nExample: x^2\n is equivalent to \nx XOR 2\n\n\n\n\nSee: \nSyntax\n - \nPOINTER\n - \nXOR", 
            "title": "^"
        }, 
        {
            "location": "/caretequal/", 
            "text": "Operative assignment. Logical and binary operation of \nexclusive OR\n (\nXOR\n).\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol\n ^=\n is used instead of \n=\n to perform the assignment,\nthe following \nexclusive OR\n will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] XOR [\nresult_of_the_expression\n]\n\n\nExample: \nx=5; x^=3;\n -\n (x=3)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn ^= m;\n type statement will be equivalent to this other \nn = n XOR m;\n statement.\n\n\nSee the operator \nXOR\n for further information about the \nexclusive OR\n.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "^="
        }, 
        {
            "location": "/caretequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-xor-m-statement", 
            "text": "See the operator  XOR  for further information about the  exclusive OR .   See:  Syntax  -  Assignment", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n ^= m; type statement will be equivalent to this other n = n XOR m; statement."
        }, 
        {
            "location": "/xor__caretcaret/", 
            "text": "Logical and binary operator of \nexclusive OR\n used in expressions and conditions.\n\n\nThe reserved word \nXOR\n and the symbol\n ^^\n are synonymous.\n\n\nXOR logical The conditions on the right and left of the operator are first evaluated and, if (only one) is \ntrue\n, this operator will return \ntrue\n. Otherwise, the operator will always return \nfalse\n.\n\n\nFALSE  XOR FALSE  = FALSE\n\n\nFALSE XOR TRUE = TRUE\n\n\nTRUE XOR FALSE  = TRUE\n\n\nTRUE XOR TRUE = FALSE\n\n\nIt is used to verify that one (and only one) of the two specified conditions is complied; for instance:\n\n\n(y\n0 XOR x\n0)\n\n\nTo verify either that the first variable is bigger than 0, or (exclusive\nor\n) that the second variable (but not the first one) is bigger than 0.\n\n\nXOR binary Evaluates the bits of the results of the expressions appearing before and after the operator, giving as a result a value of 1\n\n\nonly for those bits that had at 1 one (and only one) of the expressions.\n\n\n0 XOR 0 = 0\n\n\n0 XOR 1 = 1\n\n\n1 XOR 0 = 1\n\n\n1 XOR 1 = 0\n\n\nThis rule will be applied to all the bits of the operands (in the language, they are integers of 32 bits).\n\n\n\n\nNote This operator indistinctly works as logical and binary as, in the language, the \ntrue\n logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the \nfalse\n logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...).\n\n\nThe operator \nXOR\n will only leave the last bit at 1 (it will only return \ntrue\n\nas a result} when one (and only one) of both operands have this bit at 1 (when only one of the two expressions is \ntrue\n).\n\n\n\n\nNote The symbol\n ^\n can also be used as another synonymous of \nXOR \n  and\n ^^\n.\n\n\n\n\nSee: \nSyntax\n - \nExpression\n - \nCondition\n - \nOR", 
            "title": "XOR  ^^"
        }, 
        {
            "location": "/xor__caretcaret/#xor-logical-the-conditions-on-the-right-and-left-of-the-operator-are-first-evaluated-and-if-only-one-is-true-this-operator-will-return-true-otherwise-the-operator-will-always-return-false", 
            "text": "FALSE  XOR FALSE  = FALSE  FALSE XOR TRUE = TRUE  TRUE XOR FALSE  = TRUE  TRUE XOR TRUE = FALSE  It is used to verify that one (and only one) of the two specified conditions is complied; for instance:  (y 0 XOR x 0)  To verify either that the first variable is bigger than 0, or (exclusive or ) that the second variable (but not the first one) is bigger than 0.", 
            "title": "XOR logical The conditions on the right and left of the operator are first evaluated and, if (only one) is true, this operator will return true. Otherwise, the operator will always return false."
        }, 
        {
            "location": "/xor__caretcaret/#xor-binary-evaluates-the-bits-of-the-results-of-the-expressions-appearing-before-and-after-the-operator-giving-as-a-result-a-value-of-1", 
            "text": "only for those bits that had at 1 one (and only one) of the expressions.  0 XOR 0 = 0  0 XOR 1 = 1  1 XOR 0 = 1  1 XOR 1 = 0  This rule will be applied to all the bits of the operands (in the language, they are integers of 32 bits).", 
            "title": "XOR binary Evaluates the bits of the results of the expressions appearing before and after the operator, giving as a result a value of 1"
        }, 
        {
            "location": "/xor__caretcaret/#note-this-operator-indistinctly-works-as-logical-and-binary-as-in-the-language-the-true-logical-expressions-are-interpreted-as-those-that-have-their-last-bit-at-1-bit-0-weight-1-or-in-other-words-the-odd-numbers-1-1-3-3-and-the-false-logical-expressions-are-interpreted-as-those-having-their-last-bit-at-0-the-even-numbers-0-2-2-4-4", 
            "text": "The operator  XOR  will only leave the last bit at 1 (it will only return  true \nas a result} when one (and only one) of both operands have this bit at 1 (when only one of the two expressions is  true ).", 
            "title": "Note This operator indistinctly works as logical and binary as, in the language, the true logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the false logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...)."
        }, 
        {
            "location": "/xor__caretcaret/#note-the-symbol-can-also-be-used-as-another-synonymous-of-xor-and", 
            "text": "See:  Syntax  -  Expression  -  Condition  -  OR", 
            "title": "Note The symbol ^ can also be used as another synonymous of XOR   and ^^."
        }, 
        {
            "location": "/or__pipepipe__pipe/", 
            "text": "Binary operator of \nlogical addition\n used in expressions and conditions.\n\n\nThe reserved word \nOR\n and the symbols\n ||\n and\n |\nare synonymous.\n\n\nOR logical The conditions to the right and left of the operator are first evaluated and if, at least, one of them is \ntrue\n, this operator will return \ntrue\n. Otherwise, the operator will always return \nfalse\n (when both conditions are \nfalse\n).\n\n\nFALSE  OR FALSE  = FALSE\n\n\nFALSE OR TRUE = TRUE\n\n\nTRUE OR FALSE  = TRUE\n\n\nTRUE OR TRUE = TRUE\n\n\nIt is used to verify that one of the specified conditions is complied; for instance:\n\n\n(x\n0 OR y\n0)\n\n\nTo verify that, at least, one of both variables is bigger than 0. That is to say, it is verified that the first \nOR\n the second conditions are complied.\n\n\nOR binary Evaluates the bits of the results of the expressions appearing before and after the operator, giving as a result a value that will have at 1 the bits that any of the expressions would have at 1.\n\n\n0 OR 0 = 0\n\n\n0 OR 1 = 1\n\n\n1 OR 0 = 1\n\n\n1 OR 1 = 1\n\n\nThis rule will be applied to all the bits of the operands (in the language, they are 32 bit integers).\n\n\n\n\nNote This operator indistinctly works as logical and binary as, in the language, the \ntrue\n logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the \nfalse\n logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...).\n\n\nThe operator \nOR\n will leave the last bit at 1 (it will return \ntrue\n\nas a result) when one of any of the operands have this bit at 1 (when, at least, one of the two expressions is \ntrue\n).\n\n\n\n\nSee: \nSyntax\n - \nExpression\n - \nCondition\n - \nXOR", 
            "title": "OR  ||  |"
        }, 
        {
            "location": "/or__pipepipe__pipe/#or-logical-the-conditions-to-the-right-and-left-of-the-operator-are-first-evaluated-and-if-at-least-one-of-them-is-true-this-operator-will-return-true-otherwise-the-operator-will-always-return-false-when-both-conditions-are-false", 
            "text": "FALSE  OR FALSE  = FALSE  FALSE OR TRUE = TRUE  TRUE OR FALSE  = TRUE  TRUE OR TRUE = TRUE  It is used to verify that one of the specified conditions is complied; for instance:  (x 0 OR y 0)  To verify that, at least, one of both variables is bigger than 0. That is to say, it is verified that the first  OR  the second conditions are complied.", 
            "title": "OR logical The conditions to the right and left of the operator are first evaluated and if, at least, one of them is true, this operator will return true. Otherwise, the operator will always return false (when both conditions are false)."
        }, 
        {
            "location": "/or__pipepipe__pipe/#or-binary-evaluates-the-bits-of-the-results-of-the-expressions-appearing-before-and-after-the-operator-giving-as-a-result-a-value-that-will-have-at-1-the-bits-that-any-of-the-expressions-would-have-at-1", 
            "text": "0 OR 0 = 0  0 OR 1 = 1  1 OR 0 = 1  1 OR 1 = 1  This rule will be applied to all the bits of the operands (in the language, they are 32 bit integers).", 
            "title": "OR binary Evaluates the bits of the results of the expressions appearing before and after the operator, giving as a result a value that will have at 1 the bits that any of the expressions would have at 1."
        }, 
        {
            "location": "/or__pipepipe__pipe/#note-this-operator-indistinctly-works-as-logical-and-binary-as-in-the-language-the-true-logical-expressions-are-interpreted-as-those-that-have-their-last-bit-at-1-bit-0-weight-1-or-in-other-words-the-odd-numbers-1-1-3-3-and-the-false-logical-expressions-are-interpreted-as-those-having-their-last-bit-at-0-the-even-numbers-0-2-2-4-4", 
            "text": "The operator  OR  will leave the last bit at 1 (it will return  true \nas a result) when one of any of the operands have this bit at 1 (when, at least, one of the two expressions is  true ).   See:  Syntax  -  Expression  -  Condition  -  XOR", 
            "title": "Note This operator indistinctly works as logical and binary as, in the language, the true logical expressions are interpreted as those that have their last bit at 1 (bit 0, weight 1) or, in other words, the odd numbers (1, -1, 3, -3, ...). And the false logical expressions are interpreted as those having their last bit at 0 (the even numbers: 0, 2, -2, 4, -4, ...)."
        }, 
        {
            "location": "/pipeequal/", 
            "text": "Operative assignment. Binary operation of \nlogical addition\n (\nOR\n).\n\n\nThe \nassignment statements\n are used to calculate expressions and \nassign them\n to a variable.\n\n\nreference to a variable\n \n=\n \nexpression\n \n;\n\n\nIf the symbol\n |=\n is used instead of \n=\n to perform the assignment,\nthe following \nlogical addition\n will be assigned to the variable:\n\n\n[\nprevious_value_of_the_variable\n] OR [\nresult_of_the_expression\n]\n\n\nExample: \nx=5; x|=6;\n -\n (x=7)\n\n\n\n\nNote This symbol is a simple abbreviation derived from the \nC language\n. Anyhow, the \nn  |= m;\n type statement will be equivalent to this other \nn = n OR m;\n statement.\n\n\nSee the operator \nOR\n for further information about the \nlogical addition\n.\n\n\n\n\nNote don't confuse this symbol with that of [\ndifferent from\n] expressed as \n!=\n, that is used to compare whether two expressions have different results.\n\n\n\n\nSee: \nSyntax\n - \nAssignment", 
            "title": "|="
        }, 
        {
            "location": "/pipeequal/#note-this-symbol-is-a-simple-abbreviation-derived-from-the-c-language-anyhow-the-n-m-type-statement-will-be-equivalent-to-this-other-n-n-or-m-statement", 
            "text": "See the operator  OR  for further information about the  logical addition .", 
            "title": "Note This symbol is a simple abbreviation derived from the C language. Anyhow, the n  |= m; type statement will be equivalent to this other n = n OR m; statement."
        }, 
        {
            "location": "/pipeequal/#note-dont-confuse-this-symbol-with-that-of-different-from-expressed-as-that-is-used-to-compare-whether-two-expressions-have-different-results", 
            "text": "See:  Syntax  -  Assignment", 
            "title": "Note don't confuse this symbol with that of [different from] expressed as !=, that is used to compare whether two expressions have different results."
        }, 
        {
            "location": "/offset/", 
            "text": "The reserved word \nOFFSET\n allows us to obtain the offset of a\nvariable inside the computer's memory.\n\n\nAll the data of a program correspond with any specific position of the memory in which its value is stored. The operator \nOFFSET\n allows us to obtain this position as a numeric value.\n\n\nThis operator is mainly used in the parameters of any of the language's functions. Thus, these functions are able to modify these parameters.\n\n\nIf you have a variable (called, for instance, \nmy_variable\n) with value \n321\n and this variable is passed, as a parameter, to a parameter function, the number 321 is being passed to the function. Then, the function won't be able to modify the variable, as it knows its value but not \nwhere the variable is\n (because many\n\n321\n values may exist in the whole computer's memory, and it won't know which of them is the variable).\n\n\nIf \nOFFSET my_variable\n is passed to this function as a parameter, it is receiving information about the place in which the variable value is stored. Then, the function will be able to access this value in order to consult it or modified it.\n\n\nFor further information about this operator, it is possible to access the\n\noperator POINTER\n that does the operation opposite to that of the operator \nOFFSET\n (it obtains the value stored in a specific position of the memory).\n\n\n\n\nThe \nsymbol \n can be used as \nsynonymous\n of the reserved word \nOFFSET\n.\n\n\n\n\nSee: \nSyntax\n - \nPOINTER", 
            "title": "OFFSET"
        }, 
        {
            "location": "/begin/", 
            "text": "This reserved word shows the beginning of the program or process.\n\n\nThat is to say, the word \nBEGIN\n is used to separate the area of data declaration of the main program or of a process, from the area of statements.\n\n\nThe \nBEGIN\n declaration is obligatory in the main program and in all the processes.\n\n\nWhen a program or process are executed, they will always start with the statement coming after \nBEGIN\n.\n\n\nThe \nBEGIN\n statement \ndoes nothing\n. It is only used as a delimiting element inside the structure of the programs.\n\n\n\n\nEvery \nBEGIN\n is directly linked to an \nEND\n  that will mark the end of the area of statements of the program or process.\n\n\n\n\nSee: \nSyntax\n - \nMain Code\n - \nDeclaration of processes\n - \nFUNCTION", 
            "title": "BEGIN"
        }, 
        {
            "location": "/case/", 
            "text": "This reserved word is a part of the \nSWITCH\n statement. It is used as the beginning of the different sections of statements that can or can not be executed, depending of the result of the evaluated expression.\n\n\nEvery \nCASE\n must have a word \nEND\n indicating the end of the section.\n\n\nThe \nSWITCH\n statement evaluates an expression, and the word \nCASE\n means \nin case that the result of the expression is ..., then the following statements must be executed ...\n.\n\n\n\n\nSee: \nSyntax\n - \nSWITCH statement", 
            "title": "CASE"
        }, 
        {
            "location": "/default/", 
            "text": "This reserved word is a part of the \nSWITCH\n statement, that is used to begin a section of statements that must be executed when the result of the evaluated expression is not contemplated in any of the sections \nCASE\n of the statement.\n\n\nEvery \nDEFAULT\n must have a word \nEND\n indicating the end of the section.\n\n\nThe \nSWITCH\n statement evaluates an expression. Every section\n\nCASE\n of the statement will contemplate one of several results in which that section must be executed. Finally, a section \nDEFAULT\n appears to express \nin case that the result of the expression is none of the previous ones, then the following statements must be executed ...\n.\n\n\n\n\nSee: \nSyntax\n - \nSWITCH statement", 
            "title": "DEFAULT"
        }, 
        {
            "location": "/dup/", 
            "text": "This word is used to define \nlists of constants\n (numeric values),\nby repeating a simple pattern. It is used to initialise the initial values of tables and structures.\n\n\nIts syntax is as follows:\n\n\nnumber of times\n \nDUP (\nsequence to repeat\n)\n\n\nIt is equivalent of putting the \nsequence to repeat\n the indicated \nnumber of times\n.\n\n\nFor instance, the sequence \n1, 2, 3, 1, 2, 3, 1, 2, 3\n would be equivalent to the sequence \n3 DUP (1, 2, 3)\n.\n\n\n\n\nSee: \nSyntax\n - \nDefinition  of a list of constants", 
            "title": "DUP"
        }, 
        {
            "location": "/else/", 
            "text": "This word is a part of the \nIF\n statement, and is used to specify where the block of statements that must be executed starts when the condition specified in the \nIF\n is not complied.\n\n\nThe format of the \nIF\n statement is the following one:\n\n\nIF (\ncondition\n)\n\n\n// Code to execute when the condition is complied\n\n\n\nELSE\n\n\n// Code to execute when the condition  **isn't** complied\n\n\n\nEND\n\n\nThe meaning of \nELSE\n is \notherwise ...\n.\n\n\n\n\nThe section \nELSE\n is optional. The \nIF\n statement can be formulated in the following way:\n\n\nIF (\ncondition\n)\n\n\n// Code to execute when the condition is complied\n\n\n\nEND\n\n\nWhen no statement is required to be executed \nin the opposite case\n.\n\n\n\n\nSee: \nSyntax\n - \nIF statement", 
            "title": "ELSE"
        }, 
        {
            "location": "/end/", 
            "text": "This reserved word marks the end of one of the following statements:\n\n\nBEGIN\n\n\nIF\n\n\nWHILE\n\n\nSWITCH\n\n\nCASE\n\n\nDEFAULT\n\n\nFOR\n\n\nFROM\n\n\nLOOP\n\n\nCLONE\n\n\nThat is to say, the function of the word \nEND\n is \nto delimit where a statement finishes\n.\n\n\nKeep in mind that the statements may be nested (they may be included one inside another). Therefore, if a program is not well structured (tabulating the code), it can be difficult to find out to which statement each \nEND\n corresponds.\n\n\nFor instance, in the following code it is possible to see clearly to which statement each \nEND\n belongs.\n\n\nBEGIN\n\n\n**IF (x\ngt;0)**\n\n    **x=x-1;**\n\n**END**\n\n\n\nEND\n\n\nBut this same code could have been expressed as follows:\n\n\nBEGIN\n\n\n**IF (x\ngt;0)**\n\n**x=x-1;**\n\n\n\nEND\n\n\n**END**\n\n\n\nbeing much more complicated the reading of the program, even if for the compiler of the language \nboth code blocks are exactly the same\n (the compiler will continue to interpret that the first \nEND\n is that of the \nIF\n statement and the second one that of the \nBEGIN\n statement, even if they are incorrectly tabulated).\n\n\n\n\nSee: \nSyntax", 
            "title": "END"
        }, 
        {
            "location": "/id/", 
            "text": "The reserved word \nID\n is used to obtain the \nidentifying code\n of a process while executing.\n\n\nAn \nidentifying code\n is a numeric value that \nidentifies\n each of the active processes at any moment (each of the game's objects).\n\n\nThat is to say, \nID\n is like a numeric constant, with the only difference that its value will be different for each consulted process.\n\n\nIt is not possible to change the value of \nID\n, as it is a simple object of\nreading.\n\n\nNormally, a process accesses this value when it intends to report\nto other processes its \nidentifying code\n.\n\n\n\n\nSee: \nSyntax\n - \nIdentifying codes", 
            "title": "ID"
        }, 
        {
            "location": "/setup_program/", 
            "text": "This reserved word is used to designate  special kinds of programs, related to the \nsound hardware setup\n.\n\n\nThe special characteristic of these programs is that they start with the reserved word \nSETUP_PROGRAM\n instead of \nPROGRAM\n.\n\n\nThis topic is very advanced, for expert users only.\n\n\nA program of this type can be observed in the \nSETUP\n directory of DIV Games Studio. These programs, once they have been compiled, will automatically be included in the installations of the rest of the programs, when the box \nInclude sound setup\n is activated during the installation process.\n\n\nNote In the installations, the last setup program compiled in DIV Games Studio will always be included.\n\n\n\n\nHowever, keep in mind that it is not indispensable to create sound setup programs, as the games created with DIV Games\nStudio will automatically detect whether the computer in which they are executed is provided with a sound card compatible with \nSound Blaster\n or \nGravis Ultrasound\n, providing that it is correctly configured.\n\n\n\n\nThis kind of programs normally modify the \nsetup global structure\n, that controls the parameters of the sound system.\n\n\n\n\nSee: \nSyntax\n - \nSetup structure", 
            "title": "SETUP_PROGRAM"
        }, 
        {
            "location": "/setup_program/#note-in-the-installations-the-last-setup-program-compiled-in-div-games-studio-will-always-be-included", 
            "text": "However, keep in mind that it is not indispensable to create sound setup programs, as the games created with DIV Games\nStudio will automatically detect whether the computer in which they are executed is provided with a sound card compatible with  Sound Blaster  or  Gravis Ultrasound , providing that it is correctly configured.   This kind of programs normally modify the  setup global structure , that controls the parameters of the sound system.   See:  Syntax  -  Setup structure", 
            "title": "Note In the installations, the last setup program compiled in DIV Games Studio will always be included."
        }, 
        {
            "location": "/sizeof()/", 
            "text": "SIZEOF(\nname of the variable\n)\n\n\nReturns\n\n\nThe numbers of elements contained in the variable.\n\n\nDescription\n\n\nThe reserved word \nSIZEOF\n is used to calculate the number of elements that a  table or a structure have.\n\n\nThis reserved word \nis used as if it was a function\n of the language,\nindicating in brackets, the \nname\n of the variable and returning the number of elements (positions) of the latter.\n\n\nIt can be used to obtain the number of elements of a variable but, in this case, \nSIZEOF\n will always return \n1\n as the number of elements (as a variable is a single element).\n\n\nExample program\n\n\nPROGRAM example_sizeof;\n\nPRIVATE\n    table1[]=0, 1, 2, 3;\n    table2[]=4, 5, 6, 7, 8;\n    variable=9;\n\nBEGIN\n    // ...\n\n    save(\nhelp.dat\n, OFFSET table1, SIZEOF(table1)+SIZEOF(table2)+SIZEOF(variable));\n\n    // ...\nEND\n\n\n\n\nIn this example, \nSIZEOF\n is used to obtain the number of elements\nof the following three data:\n\n\ntable1\n of \n4\n elements.\n\n\ntable2\n of \n5\n elements.\n\n\nvariable\n (\n1\n element).\n\n\nIn this case, it is used to save in the \nhelp.dat\n file the contents of these three data with the \nsave()\n function that requires the number of elements intended to be stored in the file, as a third parameter.\n\n\nIn this case, \n10\n elements will be stored in the \nhelp.dat\n file, numbers from \n0\n to \n9\n, according to the initialisation of the data in the example.\n\n\nThe \nsave()\n statement of the previous example could have also been expressed without using \nSIZEOF\n, in the following way:\n\n\nsave(\nhelp.dat\n, OFFSET table1, 10);\n\n\nThere is only one difference: if, in the program of the example, some elements were added to any of the two tables, it would be not necessary to modify the call to the \nsave()\n function, as \nSIZEOF\n will always return the current size of the tables.\n\n\n\n\nSee: \nSyntax\n - \nDeclaration of a table\n - \nDeclaration of a structure", 
            "title": "SIZEOF()"
        }, 
        {
            "location": "/sizeof()/#returns", 
            "text": "The numbers of elements contained in the variable.", 
            "title": "Returns"
        }, 
        {
            "location": "/sizeof()/#description", 
            "text": "The reserved word  SIZEOF  is used to calculate the number of elements that a  table or a structure have.  This reserved word  is used as if it was a function  of the language,\nindicating in brackets, the  name  of the variable and returning the number of elements (positions) of the latter.  It can be used to obtain the number of elements of a variable but, in this case,  SIZEOF  will always return  1  as the number of elements (as a variable is a single element).", 
            "title": "Description"
        }, 
        {
            "location": "/sizeof()/#example-program", 
            "text": "PROGRAM example_sizeof;\n\nPRIVATE\n    table1[]=0, 1, 2, 3;\n    table2[]=4, 5, 6, 7, 8;\n    variable=9;\n\nBEGIN\n    // ...\n\n    save( help.dat , OFFSET table1, SIZEOF(table1)+SIZEOF(table2)+SIZEOF(variable));\n\n    // ...\nEND  In this example,  SIZEOF  is used to obtain the number of elements\nof the following three data:  table1  of  4  elements.  table2  of  5  elements.  variable  ( 1  element).  In this case, it is used to save in the  help.dat  file the contents of these three data with the  save()  function that requires the number of elements intended to be stored in the file, as a third parameter.  In this case,  10  elements will be stored in the  help.dat  file, numbers from  0  to  9 , according to the initialisation of the data in the example.  The  save()  statement of the previous example could have also been expressed without using  SIZEOF , in the following way:  save( help.dat , OFFSET table1, 10);  There is only one difference: if, in the program of the example, some elements were added to any of the two tables, it would be not necessary to modify the call to the  save()  function, as  SIZEOF  will always return the current size of the tables.   See:  Syntax  -  Declaration of a table  -  Declaration of a structure", 
            "title": "Example program"
        }, 
        {
            "location": "/step/", 
            "text": "The reserved word \nSTEP\n is a part of the \nFROM\n statement and it is used to indicate the increment (step) that has to be made in every loop iteration.\n\n\nThe \nFROM\n statement implements a loop, a group of statements that are going to be repeated a specific number of times. For that, it uses a variable as a counter of the number of repetitions.\n\n\nBoth the initial and final values of the variable are defined. The loop will be repeated until the variable reaches the final value, starting from the initial value.\n\n\nBy default, the variable will pass through all the whole numeric values ranging between the initial and final values. But it is possible to indicate a \nSTEP\n declaration to establish a different variable increment.\n\n\nFor instance, if a loop in which the \nx\n variable is going to have the values ranged from \n1\n to \n10\n is defined, this loop will be executed a total of \n10\n times. But if \nSTEP\n is established as \n2\n, then the loop will only be executed \n5\n times, in which the \nx\n variable will take the \n1\n, \n3\n, \n5\n, \n7\n and \n9\n values, as it has been established that the variable must be incremented \n2\n by \n2\n. This loop would be implemented in the following way:\n\n\nFROM x=1 TO 10 STEP 2\n\n\n// Statements that are going to be repeated five times\n\n\nEND\n\n\nIf the \nSTEP\n declaration is omitted from the \nFROM\n statement, then the increment will always be 1 by 1, adding 1 to the variable after every loop\niteration (or subtracting 1, in case that the final value is less than the initial value).\n\n\nNote Only whole increments can be established.\n\n\n\n\nSee: \nSyntax\n - \nFROM statement", 
            "title": "STEP"
        }, 
        {
            "location": "/step/#note-only-whole-increments-can-be-established", 
            "text": "See:  Syntax  -  FROM statement", 
            "title": "Note Only whole increments can be established."
        }, 
        {
            "location": "/to/", 
            "text": "The reserved word \nTO\n is a part of the \nFROM\n statement and it is used to separate the constants that indicate the initial and final values that the variable used as a loop counter must take.\n\n\nThe \nFROM\n statement implements a loop, a set of statements that are going to be repeated a specific number of times. For that, it uses a variable as a counter of the number of repetitions.\n\n\nBoth the initial and final values of the variable are defined. The loop will be repeated until the variable reaches the final value, starting from the initial value.\n\n\nExample\n\n\nFROM x=1 TO 10\n\n\n// Statements that will be repeated 10 times\n\n\n\nEND\n\n\nBy default, the variable will take all the whole numeric values ranging between the initial and final values. But it is possible to indicate a \nSTEP\n declaration to establish a different increment of the variable.\n\n\n\n\nSee: \nSyntax\n - \nFROM statement\n - \nSTEP", 
            "title": "TO"
        }, 
        {
            "location": "/to/#example", 
            "text": "FROM x=1 TO 10  // Statements that will be repeated 10 times  END  By default, the variable will take all the whole numeric values ranging between the initial and final values. But it is possible to indicate a  STEP  declaration to establish a different increment of the variable.   See:  Syntax  -  FROM statement  -  STEP", 
            "title": "Example"
        }, 
        {
            "location": "/until/", 
            "text": "The reserved word \nUNTIL\n is a part of the \nREPEAT\n statement,\nwhose syntax is, broadly speaking, the following one:\n\n\nREPEAT\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md);\n\n...\n\n\n\nUNTIL (\ncondition\n}\n)\n\n\nThe \nREPEAT\n statement implements a loop, it is capable of repeating a set of statements a specific number of times.\n\n\nThe end of the statement is determined by putting the reserved word \nUNTIL\n\nfollowed by the condition that must be complied so that the \nstatement finishes\n.\n\n\n\n\nSee: \nSyntax\n - \nREPEAT statement", 
            "title": "UNTIL"
        }, 
        {
            "location": "/global_struct_mouse/", 
            "text": "STRUCT mouse;\n\n\n**x, y;**                // Coordinates\n\n**graph;**               // Graphic code\n\n**file;**                // File code\n\n**z;**                   // Depth plane\n\n**angle;**               // angle\n\n**size;**                // Size (%)\n\n**flags;**               // Mirrors indicator\n\n**region;**              // Clipping region\n\n**left, middle, right;** // State of buttons\n\n**cursor;**              // Emulation with cursors\n\n**speed;**               // Speed of mouse\n\n\n\nEND\n\n\nThis global structure is used to control the mouse. It contains a series of fields related to the programming of this driver, such as the screen position, the pointer graphic, the state of the buttons, etc.\n\n\nIn order to access these fields, the name of the field must be preceded by the word \nmouse\n  and by the symbol \n. (period)\n. For instance, in order to\naccess the field \nx\n (horizontal coordinate of the mouse pointer), it is necessary to use \nmouse.x\n.\n\n\n\n\nx\n, \ny\n - Horizontal and vertical coordinates of the mouse. It will be necessary to read only these two fields (\nmouse.x\n and \nmouse.y\n) to know the position of the mouse cursor on screen.\n\n\nTo \nlocate the mouse at other coordinates\n (to force its position),\nsuffice will be to assign the new coordinates to these two fields.\n\n\n\n\ngraph\n - \nGraphic code\n assigned as a mouse pointer. By default \nthe mouse won't be visible\n. To make it visible, it is necessary to create the graphic that is going to be used as a pointer in the \ngraphic editor\n, to load it in the program (with the \nload_fpg()\n or \nload_map()\n  or \nload_pcx()\n functions, depending on whether this graphic has been stored in a \nfile FPG\n or in an \nfile MAP/PCX\n) and finally, to assign its \ngraphic code\n to this variable (\nmouse.graph\n). Then, the mouse pointer will be seen on screen.\n\n\nThe centre of the graphic will appear at the \nmouse.x\n, \nmouse.y\n coordinates, unless its \ncontrol point\n number \n0\n has been defined in the \ngraphic editor\n. If this point (usually called \nhot spot\n) is defined, then it will appear at the coordinates indicated in the fields \nmouse.x\n and \nmouse.y\n.\n\n\nFor instance, if an arrow is created to depict the mouse pointer (as it happens dealing with the mouse pointer of DIV Games Studio), the hot spot (control point number \n0\n) will be defined in the upper left corner of the graphic, as it is the \nactive point\n inside the graphic. Then, when the mouse was located\nat the (0, 0) coordinates, for instance, the \ntip of this arrow\n would precisely be located at those coordinates\n\n\n\n\nfile\n - \nFile code\n containing the graphic. The \nfile code\n containing the graphic of the mouse pointer is defined in this field.\n\nIt is not necessary\n to indicate a value here if the graphic was loaded from an\n\nfile MAP or PCX\n, or if it is stored in the first \nfile FPG\n loaded in the program. Otherwise, \nmouse.file\n will have to be assigned the \nfile code\n that returned the \nload_fpg()\n function on loading the file that contains the graphic of the mouse pointer.\n\n\n\n\nz\n - Priority of the graphic display. Indicates the depth plane in which the graphic of the mouse pointer must be displayed. \nBy default\n this field will be equal to\n -512\n, which implies that \nthe pointer will be seen above the rest of graphics and texts\n. The bigger this field is, the deeper the mouse pointer will be located.\n\n\nIf the aim was to make a graphic of a process appear above the mouse pointer,  suffice would be to assign an integer lesser than\n -512\n \n(for instance,\n -600\n) to the \nlocal z\n variable of that process.\n\n\n\n\nangle\n - angle with which the graphic of the mouse pointer will be seen.\nThe value of \nmouse.angle\n by default is \n0\n, which implies that this graphic won't be seen rotated, unless a new angle is assigned to this field.\n\n\nKeep in mind that the angles must be specified in degree thousandths. For instance, the \nmouse.angle=90000;\n statement will make the pointer appear rotated \n90 degrees\n (see the \nuse of angles in the language\n).\n\n\n\n\nsize\n - Size of the graphic in percentage. By default, this field will be equal to \n100\n (the graphic will be seen 100%). Then, it is not necessary to indicate another value here, unless the aim is to scale the graphic (to display it expanded or reduced).\n\n\nIf, for instance, the aim was to double the original size of the graphic (being displayed at 200%), the \nmouse.size=200;\n statement should be used.\n\n\n\n\nflags\n - In this field, different values will be indicated when the aim is to\nmirror the graphic of the mouse (horizontally or vertically inverted), or to display it as a (semi) transparent graphic. The possible values that can be assigned to the \nmouse.flags\n are the following ones:\n\n\n0\n-Normal graphic (value by default).\n\n\n1\n-Horizontal mirror.\n\n\n2\n-Vertical mirror.\n\n\n3\n-Horizontal and vertical mirror (180\n).\n\n\n4\n-Transparent graphic.\n\n\n5\n-Transparent and horizontal mirror.\n\n\n6\n-Transparent and vertical mirror.\n\n\n7\n-Transparent, horizontal and vertical mirror.\n\n\n\n\nregion\n - Graphic's clipping region. A value must be assigned to this field \njust when the aim is to make the mouse pointer visible only inside a region\n (a rectangular zone of the screen). In order to achieve it, it is necessary first to\ndefine this region with the \ndefine_region()\n function and then, to assign the number of the region that has been defined to this field (\nmouse.region\n).\n\n\nBy default, this value will be equal to \n0\n, that is a number of region referred to the entire screen. Therefore, the graphic will be seen on the whole screen.\n\n\n\n\nleft\n, \nmiddle\n and \nright\n - These three fields store logical values (\n0\n or \n1\n) depending on whether the mouse buttons are pressed or not (they correspond with the left, central and right mouse buttons). Normally, only two buttons of the mouse (\nleft\n and \nright\n) are activated, being ignored the state of the central button. This depends on the mouse \ndriver\n installed in the computer.\n\n\nFor instance, to perform an action in a program \nwhen the mouse left button is pressed\n (\nmouse.left\n), it is necessary to include the following statement in the code:\n\n\nIF (mouse.left)\n\n\n// Action to perform (statements)\n\n\n\nEND\n\n\ncursor\n - indicates if the mouse emulator is active with the \nCursors\n and \nEnter\n keys, \nyou can move the pointer with the mouse or with the cursors. By default,\nthis emulation will be deactivated (\nmouse.cursor=0;\n). If the\nprogram doesn't detect a mouse connected to the system, the emulation automatically in this case\nwill be activated (this means, that if \nmouse.cursor\n values are \n1\n at the beginning of the program, \nthen there is no mouse connected to the pc).\n\n\n\n\nspeed\n - it is now possible to regulate the speed at which the mouse pointer functions in the programs. \nThis is a value between \n0\n (maximum speed) and \n9\n (minimum), by default \nmouse.speed\n will have the value \n2\n.\n\n\n\n\nSee: \nGlobal data", 
            "title": "GLOBAL STRUCT mouse"
        }, 
        {
            "location": "/global_struct_scroll/", 
            "text": "STRUCT scroll[9];\n\n\n**x0, y0;**    // Foreground's coordinates\n\n**x1, y1;**    // Background's coordinates\n\n**z;**         // Depth plane\n\n**camera;**    // [Identifying code](_identifying_codes_of_processesdot.md) of the camera\n\n**ratio;**     // Relative speed of the background\n\n**speed;**     // Maximum speed of the foreground\n\n**region1;**   // First screen region\n\n**region2;**   // Second screen region\n\n\n\nEND\n\n\nThis \n10\n record structure contains certain fields related to changeable parameters of the \nscroll windows\n. These ten records have the same field names, but each of them modifies the parameters of a different scroll window\n(as up to 10 windows of this type can be activated).\n\n\nA \nscroll window\n could be defined as a screen region that only shows a part of a graphic bigger than that window (this graphic is normally the \ndecor\n or \nbackground\n of the game). The \nscroll\n is the movement of that window through the graphic in any direction, being displayed the entire graphic little by little, section by section.\n\n\nFor a record (from \n0\n to \n9\n) of the \nscroll structure\n to make sense,\nthat \nscroll window\n (from \n0\n to \n9\n) must first be activated with the\n\nstart_scroll\n function (for further information about the scroll windows, see this function}.\n\n\nIt is understood that the fields of this structure are complementary to those of the call parameters of this last function.\n\n\n\n\nHow to use the scroll structure\n\n\nTo access these fields, the field name must be preceded by the word \nscroll\n, the record's number in square brackets and the symbol \n.\n (period).\n\n\nFor instance, if two scroll windows, number 0 and number 1, are initialised, it could be possible to access the \ncamera\n field of both windows as\n\nscroll[0].camera\n and \nscroll[1].camera\n, respectively. Moreover, when the scroll window number 0 is accessed, it is possible to omit the window's number in square brackets. That is to say, the \nscroll.camera\n and the \nscroll[0].camera\n variables are, to all intents and purposes, the same for the language.\n\n\n\n\nA detailed description of every field is now shown.\n\n\nx0, y0\n - Coordinates of the scroll's foreground, when the scroll \nISN'T\n automatic (the \ncamera\n field has not been defined), \nThese are the fields that will have to be modified in order to move the scroll window's foreground\n.\n\n\nThese two fields store the horizontal and vertical coordinates of the upper left corner of the scroll window (the point of the foreground's graphic that will be seen in the window's upper left corner).\n\n\nWhen the \ncamera\n field of this structure has been defined, the movement of the scroll window will be automatic; thus, they are read-only fields. In order to check where the scroll is at every moment (see the \nmove_scroll()\n function).\n\n\n\n\nx1, y1\n - Background's coordinates, when a graphic for the background has been defined. When the scroll \nISN'T\n automatic (the \ncamera\n field has not been defined), \nthese are the fields to modify in order to move the background of the scroll window\n.\n\n\nWhen the \ncamera\n field of this structure has been defined, the movement of the\nscroll window will be automatic; thus, they will be read-only fields, and the definition of the background's movement speed will depend on the \nratio\n field of the same structure.\n\n\n\n\nz\n - Scroll display priority, to indicate the depth plane in which this window must be painted, with respect to the rest of processes. By default, this variable will equal \n512\n, which implies that, as the processes have their \nlocal z\n variable at \n0\n by default, the scroll window will be painted in a greater (deeper) depth plane, being the graphics of the processes displayed above the window. In order to vary this situation, it is possible to modify either the \nz\n window's variable (for instance, putting it at\n -1\n) or the \nz\n processes' variable (for instance, putting it at \n600\n).\n\n\n\n\ncamera\n - It is not necessary to initialise this field, as it will be initialised when the aim is that the scroll is \nautomatic\n, that the system deals with it to always follow a process (a game's graphic). For that, it is necessary to put\nthe process' \nidentifying code\n in this field. Thus, the shift of the scroll window will pass to be controlled automatically by the system, always trying to centre the graphic of this process in the window. This process must have the \nctype\n local variable with the value \nc_scroll\n.\n\n\nBy default, this field will equal \n0\n, which implies that the scroll won't follow any process, unless the \n\nidentifying code\n of a process is assigned to \ncamera\n. When it is done, this process will be known \nas the scroll's \ncamera process\n.\n\n\nNote A series of fields are now shown \nonly for automatic scroll windows\n. It means that for those fields to make sense (and, therefore, effect), the \ncamera\n field of this structure has to be defined previously with the \nidentifying code\n of the process that is going to be centred in the scroll. These values will affect the way in which the process called \nscroll camera\n is going to be followed.\n\n\n\n\nratio\n - \nAutomatic scroll windows\n. When two scroll planes have been defined in the call to the \nstart_scroll()\n function, in this field it is possible to define the \nmovement speed of the background\n with respect to that of the foreground. By default, this value will equal \n200\n, which implies that the background will move half the speed of the foreground; if it is defined as \n400\n, it will move at the fourth part (four times slower), \n100\n at the same speed, \n50\n at double speed of the foreground, etc.\n\n\n\n\nspeed\n - \nAutomatic scroll windows\n. Maximum speed of the scroll foreground, which will equal \n0\n by default. It means that no speed limit is imposed. If a limit is imposed, specifying the maximum number of points that the foreground can be shifted for every game's frame, the \ncamera process\n will be off centre in the scroll window when it is moved at a higher speed.\n\n\n\n\nregion1\n - \nAutomatic scroll windows\n. Scroll lock region, whose value by default equals\n -1\n, which means that there is no lock region.\nIf this field is defined with a number of region (a rectangular zone of the screen previously defined with the \ndefine_region()\n function), then the system won't scroll as long as the \ncamera process\n remained inside it.\n\n\n\n\nregion2\n - \nAutomatic scroll windows\n. External region of the scroll. By default, its value is equal to\n -1\n, which means that there is no external region.\nIf this field is defined with a region's number and a \nmaximum speed\n has been defined in the \nspeed\n field, then the system will ignore that speed limit when the \ncamera\n process is going to exceed from this region (it is done in order to continue to see the process (for its graphic to be visible always within the scroll window).\n\n\nNote If the two regions (\nregion1\n and \nregion2\n) are defined, region 1 is normally lesser than region 2 (the first one is contained in the second one). It will imply that:\n\n\n\n\n\n\nThe background won't shift (the scroll won't be performed) while the camera process' graphic is inside region 1.\n\n\n\n\n\n\nIf a maximum \nspeed\n has been defined, then a scroll will be performed\nto try to restore the graphic of the camera process to region 1, but without exceeding the imposed speed limit.\n\n\n\n\n\n\nIf the graphic of the camera process tried to exceed from region 2, the imposed speed limit would be ignored in order not to allow it.\n\n\n\n\n\n\n\n\nSee: \nGlobal data\n - \nstart_scroll()\n - \nstop_scroll()", 
            "title": "GLOBAL STRUCT scroll"
        }, 
        {
            "location": "/global_struct_scroll/#how-to-use-the-scroll-structure", 
            "text": "To access these fields, the field name must be preceded by the word  scroll , the record's number in square brackets and the symbol  .  (period).  For instance, if two scroll windows, number 0 and number 1, are initialised, it could be possible to access the  camera  field of both windows as scroll[0].camera  and  scroll[1].camera , respectively. Moreover, when the scroll window number 0 is accessed, it is possible to omit the window's number in square brackets. That is to say, the  scroll.camera  and the  scroll[0].camera  variables are, to all intents and purposes, the same for the language.   A detailed description of every field is now shown.  x0, y0  - Coordinates of the scroll's foreground, when the scroll  ISN'T  automatic (the  camera  field has not been defined),  These are the fields that will have to be modified in order to move the scroll window's foreground .  These two fields store the horizontal and vertical coordinates of the upper left corner of the scroll window (the point of the foreground's graphic that will be seen in the window's upper left corner).  When the  camera  field of this structure has been defined, the movement of the scroll window will be automatic; thus, they are read-only fields. In order to check where the scroll is at every moment (see the  move_scroll()  function).   x1, y1  - Background's coordinates, when a graphic for the background has been defined. When the scroll  ISN'T  automatic (the  camera  field has not been defined),  these are the fields to modify in order to move the background of the scroll window .  When the  camera  field of this structure has been defined, the movement of the\nscroll window will be automatic; thus, they will be read-only fields, and the definition of the background's movement speed will depend on the  ratio  field of the same structure.   z  - Scroll display priority, to indicate the depth plane in which this window must be painted, with respect to the rest of processes. By default, this variable will equal  512 , which implies that, as the processes have their  local z  variable at  0  by default, the scroll window will be painted in a greater (deeper) depth plane, being the graphics of the processes displayed above the window. In order to vary this situation, it is possible to modify either the  z  window's variable (for instance, putting it at  -1 ) or the  z  processes' variable (for instance, putting it at  600 ).   camera  - It is not necessary to initialise this field, as it will be initialised when the aim is that the scroll is  automatic , that the system deals with it to always follow a process (a game's graphic). For that, it is necessary to put\nthe process'  identifying code  in this field. Thus, the shift of the scroll window will pass to be controlled automatically by the system, always trying to centre the graphic of this process in the window. This process must have the  ctype  local variable with the value  c_scroll .  By default, this field will equal  0 , which implies that the scroll won't follow any process, unless the  identifying code  of a process is assigned to  camera . When it is done, this process will be known \nas the scroll's  camera process .", 
            "title": "How to use the scroll structure"
        }, 
        {
            "location": "/global_struct_scroll/#note-a-series-of-fields-are-now-shown-only-for-automatic-scroll-windows-it-means-that-for-those-fields-to-make-sense-and-therefore-effect-the-camera-field-of-this-structure-has-to-be-defined-previously-with-the-identifying-code-of-the-process-that-is-going-to-be-centred-in-the-scroll-these-values-will-affect-the-way-in-which-the-process-called-scroll-camera-is-going-to-be-followed", 
            "text": "ratio  -  Automatic scroll windows . When two scroll planes have been defined in the call to the  start_scroll()  function, in this field it is possible to define the  movement speed of the background  with respect to that of the foreground. By default, this value will equal  200 , which implies that the background will move half the speed of the foreground; if it is defined as  400 , it will move at the fourth part (four times slower),  100  at the same speed,  50  at double speed of the foreground, etc.   speed  -  Automatic scroll windows . Maximum speed of the scroll foreground, which will equal  0  by default. It means that no speed limit is imposed. If a limit is imposed, specifying the maximum number of points that the foreground can be shifted for every game's frame, the  camera process  will be off centre in the scroll window when it is moved at a higher speed.   region1  -  Automatic scroll windows . Scroll lock region, whose value by default equals  -1 , which means that there is no lock region.\nIf this field is defined with a number of region (a rectangular zone of the screen previously defined with the  define_region()  function), then the system won't scroll as long as the  camera process  remained inside it.   region2  -  Automatic scroll windows . External region of the scroll. By default, its value is equal to  -1 , which means that there is no external region.\nIf this field is defined with a region's number and a  maximum speed  has been defined in the  speed  field, then the system will ignore that speed limit when the  camera  process is going to exceed from this region (it is done in order to continue to see the process (for its graphic to be visible always within the scroll window).", 
            "title": "Note A series of fields are now shown only for automatic scroll windows. It means that for those fields to make sense (and, therefore, effect), the camera field of this structure has to be defined previously with the identifying code of the process that is going to be centred in the scroll. These values will affect the way in which the process called scroll camera is going to be followed."
        }, 
        {
            "location": "/global_struct_scroll/#note-if-the-two-regions-region1-and-region2-are-defined-region-1-is-normally-lesser-than-region-2-the-first-one-is-contained-in-the-second-one-it-will-imply-that", 
            "text": "The background won't shift (the scroll won't be performed) while the camera process' graphic is inside region 1.    If a maximum  speed  has been defined, then a scroll will be performed\nto try to restore the graphic of the camera process to region 1, but without exceeding the imposed speed limit.    If the graphic of the camera process tried to exceed from region 2, the imposed speed limit would be ignored in order not to allow it.     See:  Global data  -  start_scroll()  -  stop_scroll()", 
            "title": "Note If the two regions (region1 and region2) are defined, region 1 is normally lesser than region 2 (the first one is contained in the second one). It will imply that:"
        }, 
        {
            "location": "/global_struct_m7/", 
            "text": "STRUCT m7[9];\n\n\n**camera;**   // [Identifying code](_identifying_codes_of_processesdot.md) of the camera\n\n**height;**   // Height of the camera\n\n**distance;** // Distance of the camera\n\n**horizon;**  // Height of the horizon\n\n**focus;**    // Focus\n\n**z;**        // Depth plane\n\n**colour;**    // colour of the exterior\n\n\n\nEND\n\n\nThis \n10\n record structure contains certain fields dealing with changeable parameters of the \nmode 7 window\n. The ten records have the same fields names, but each of them modifies the parameters of a different mode 7 window (as up to 10 windows of this type may be activated).\n\n\nA \nmode 7 window\n could be defined as a screen region that shows a graphic plane three-dimensionally folded (for instance, like a sheet of paper with a picture horizontally positioned, displayed on screen with a virtual bottom (or top).\n\n\nFor a record (numbered from \n0\n to \n9\n) of the \nm7 structure\n to make sense,\nthat \nmode 7 window\n (from \n0\n to \n9\n) must first be activated with the \nstart_mode7()\n function (see this function for further information about the mode 7 windows}.\n\n\nIt is understood that the fields of this structure are complementary to the call parameters of this function. In order to observe a practical example\nof a mode 7, it is possible to access the help about the \nstart_mode7()\n function.\n\n\n\n\nHow to use the m7 structure\n\n\nTo access these fields, the field name must be preceded by the word \nm7\n, the number of record in square brackets and the symbol \n. (period)\n.\n\n\nFor instance, if two mode-7 windows, number 0 and number 1, were initialised the \ncamera\n variable of both windows could be accessed as \nm7[0].camera\n and \nm7[1].camera\n, respectively. When the mode-7 window number 0 is accessed, it is also possible to omit the number of windows in square brackets. The \nm7.camera\n variable and the \nm7[0].camera\n variable are, to all ends, the same for the language.\n\n\n\n\nA detailed description of each field is now shown.\n\n\ncamera\n - \nIdentifying code of the process\n followed by the camera. To move the camera that controls the mode-7 view, only a mode-7 process must be created, a process having its local variable \nctype\n \n=\n \nc_m7\n, and its \nidentifying code\n must be put in the \ncamera\n variable of this structure. After so, only the \nx\n, \ny\n and \nangle\n local variables of this process must be modified  and, for instance, the \nadvance()\n function must be used to move forward the camera.\n\n\nFor the mode 7 window to be activated, it is \nindispensable\n to initialise the \ncamera\n field. Without this field, the window can not determine from where the folded plane must be \nseen\n.\n\n\n\n\nheight\n - Height of the camera. This variable of the structure manages the distance to which the camera is placed from the bottom. By default, its value equals \n32\n. Any positive number will make the camera be placed upper as the number is greater. If a negative number (less than zero) is put in the \nheight\n field of this structure, then the camera will be placed below the folded plane, showing a \ntop\n instead of a \nbottom\n.\n\n\nTwo mode-7 must be created within the same region: one as top and the other as bottom (one with positive \nheight\n and the other with negative height). In\nthis case, it is important to establish the \nz\n variable of the \nm7 structure\n of both, to thus determine the depth plane in which each one must be painted.\n\n\n\n\ndistance\n - Distance from the camera to the followed process. The perspective of the camera will always be positioned slightly behind the process whose identifier has been put in the \ncamera\n field of the structure. This is done for the graphic of the process used as a camera to be seen, just in case this process has defined it (in its \ngraph\n or \nxgraph\n local variable).\n\n\nBy default, the camera will be positioned at \n64\n points behind the process. \nBehind\n means a point placed at the indicated distance from the graphic\nin the angle opposite to that one to which the process is orientated. For instance, if the process is facing right, 64 points to its left.\n\n\n\n\nhorizon\n - Horizon's height. This is the same value as that indicated as last parameter of the \nstart_mode7()\n function. Its initial value will equal to the one indicated in the call to this function. The utility of this variable is to make the horizon go up or down in every frame of the game, depending on the needs of the latter.\n\n\nOn changing the \nhorizon's height\n, the \nfacing up\n and \nfacing down\n effects will be obtained in the \nmode 7 window\n.\n\n\n\n\nfocus\n - Focus for the camera. This variable controls the perspective of the camera. By default, its value equals 256, but any value ranging from \n0\n and \n512\n may be put, obtaining different distortion effects of the three-dimensional plane.\n\n\nThis field controls the angle got by the camera focus. The greater this value is, the closer all the objects (processes) placed in the folded plane will be seen.\n\n\n\n\nz\n - Mode-7 display priority. To indicate the depth plane in which this window must be painted, with respect to the rest of processes. By default, this variable will equal \n256\n, which means that, as the processes have their \nlocal z\n variable at \n0\n by default, the mode-7 window will be painted in a greater (deeper) depth plane, being the graphics of the processes painted above the window. This situation may change by modifying the \nz\n variable of the window (for instance, putting it at\n -1\n) or the \nz\n variable of the processes (for instance, putting it at \n257\n).\n\n\n\n\ncolour\n - colour for the mode-7 exterior. When, in the call to the \nstart_mode7()\n\nfunction, any \nexternal graphic\n is not specified (the fourth call parameter is put at \n0\n), this variable will control the colour in which it is aim to paint the exterior. In other words, the colour that the screen must be painted in beyond the graphic that is being folded (beyond its limits).\n\n\nBy default, this field is initialised at \n0\n, which is normally the black colour\nin the colour palette, Therefore, if this field is not assigned another value (and an external graphic is not defined) the screen will be seen in black beyond the foreground.\n\n\n\n\nSee: \nGlobal data\n - \nstart_mode7()\n - \nstop_mode7()", 
            "title": "GLOBAL STRUCT m7"
        }, 
        {
            "location": "/global_struct_m7/#how-to-use-the-m7-structure", 
            "text": "To access these fields, the field name must be preceded by the word  m7 , the number of record in square brackets and the symbol  . (period) .  For instance, if two mode-7 windows, number 0 and number 1, were initialised the  camera  variable of both windows could be accessed as  m7[0].camera  and  m7[1].camera , respectively. When the mode-7 window number 0 is accessed, it is also possible to omit the number of windows in square brackets. The  m7.camera  variable and the  m7[0].camera  variable are, to all ends, the same for the language.   A detailed description of each field is now shown.  camera  -  Identifying code of the process  followed by the camera. To move the camera that controls the mode-7 view, only a mode-7 process must be created, a process having its local variable  ctype   =   c_m7 , and its  identifying code  must be put in the  camera  variable of this structure. After so, only the  x ,  y  and  angle  local variables of this process must be modified  and, for instance, the  advance()  function must be used to move forward the camera.  For the mode 7 window to be activated, it is  indispensable  to initialise the  camera  field. Without this field, the window can not determine from where the folded plane must be  seen .   height  - Height of the camera. This variable of the structure manages the distance to which the camera is placed from the bottom. By default, its value equals  32 . Any positive number will make the camera be placed upper as the number is greater. If a negative number (less than zero) is put in the  height  field of this structure, then the camera will be placed below the folded plane, showing a  top  instead of a  bottom .  Two mode-7 must be created within the same region: one as top and the other as bottom (one with positive  height  and the other with negative height). In\nthis case, it is important to establish the  z  variable of the  m7 structure  of both, to thus determine the depth plane in which each one must be painted.   distance  - Distance from the camera to the followed process. The perspective of the camera will always be positioned slightly behind the process whose identifier has been put in the  camera  field of the structure. This is done for the graphic of the process used as a camera to be seen, just in case this process has defined it (in its  graph  or  xgraph  local variable).  By default, the camera will be positioned at  64  points behind the process.  Behind  means a point placed at the indicated distance from the graphic\nin the angle opposite to that one to which the process is orientated. For instance, if the process is facing right, 64 points to its left.   horizon  - Horizon's height. This is the same value as that indicated as last parameter of the  start_mode7()  function. Its initial value will equal to the one indicated in the call to this function. The utility of this variable is to make the horizon go up or down in every frame of the game, depending on the needs of the latter.  On changing the  horizon's height , the  facing up  and  facing down  effects will be obtained in the  mode 7 window .   focus  - Focus for the camera. This variable controls the perspective of the camera. By default, its value equals 256, but any value ranging from  0  and  512  may be put, obtaining different distortion effects of the three-dimensional plane.  This field controls the angle got by the camera focus. The greater this value is, the closer all the objects (processes) placed in the folded plane will be seen.   z  - Mode-7 display priority. To indicate the depth plane in which this window must be painted, with respect to the rest of processes. By default, this variable will equal  256 , which means that, as the processes have their  local z  variable at  0  by default, the mode-7 window will be painted in a greater (deeper) depth plane, being the graphics of the processes painted above the window. This situation may change by modifying the  z  variable of the window (for instance, putting it at  -1 ) or the  z  variable of the processes (for instance, putting it at  257 ).   colour  - colour for the mode-7 exterior. When, in the call to the  start_mode7() \nfunction, any  external graphic  is not specified (the fourth call parameter is put at  0 ), this variable will control the colour in which it is aim to paint the exterior. In other words, the colour that the screen must be painted in beyond the graphic that is being folded (beyond its limits).  By default, this field is initialised at  0 , which is normally the black colour\nin the colour palette, Therefore, if this field is not assigned another value (and an external graphic is not defined) the screen will be seen in black beyond the foreground.   See:  Global data  -  start_mode7()  -  stop_mode7()", 
            "title": "How to use the m7 structure"
        }, 
        {
            "location": "/global_struct_joy/", 
            "text": "STRUCT joy;\n\n\n**left;**    // Left control\n\n**right;**   // Right control\n\n**up;**      // Up control\n\n**down;**    // Down control\n\n**button1;** // First button\n\n**button2;** // Second button\n\n**button3;** // Third button\n\n**button4;** // Fourth button\n\n\n\nEND\n\n\nThis global structure is used to control the \njoystick\n. It contains a series of logical fields related to the programming of this device: the state of the buttons (whether they are pressed or not) and the state of the main four control directions.\n\n\nTo access these fields, the name of the field must be preceded by the word \njoy\n and the symbol \n. (period)\n. For instance, to access the \nleft\n field (which indicates whether the left control is pressed), it is necessary to use \njoy.left\n.\n\n\n\n\nleft\n - This field will be at \n1\n when the \njoystick\n is orientated to the \nleft\n, and at \n0\n in the opposite case.\n\n\nright\n  - This field will be at \n1\n when the \njoystick\n is orientated to the \nright\n, and at \n0\n in the opposite case.\n\n\nup\n  - This field will be at \n1\n when the \njoystick\n is orientated \nup\n, and at \n0\n in the opposite case.\n\n\ndown\n  - This field will be at \n1\n when the \njoystick\n is orientated \ndown\n, and at \n0\n in the opposite case.\n\n\nFor instance, to perform an action in a program \nwhen the joystick is moved to the right\n (\njoy.right\n), a statement like the following one must be included in the code:\n\n\nIF (joy.right)\n\n\n// Action to perform (statements)\n\n\n\nEND\n\n\nFor diagonal positions, the two fields comprising this diagonal must be verified. For instance, to perform an action when the \njoystick\n is in the upper right diagonal, the following statement will be used:\n\n\nIF (joy.up AND joy.right)\n\n\n// Action to perform (statements)\n\n\n\nEND\n\n\n\n\nbutton1\n, \nbutton2\n, \nbutton3\n and \nbutton4\n - These fields indicate the state\nof up to four joystick's buttons, being at \n1\n when the respective button is pressed, and at \n0\n, when it is not.\n\n\nSome joysticks only have 2 buttons. In this case, they will be buttons number 0 and 1. In computers with two connected joysticks, the second joystick\nwill have the buttons number 2 and 3.\n\n\n\n\nNote When an analogical reading of the \njoystick\n is required (to know the exact coordinates at which the joystick is located), it will be necessary to use the \nget_joy_position()\n function. Obviously, this function will only be useful in an analogical \njoystick\n, and it won't work in the digital ones.\n\n\n\n\nSee: \nGlobal data\n - \nget_joy_position()\n - \nget_joy_button()", 
            "title": "GLOBAL STRUCT joy"
        }, 
        {
            "location": "/global_struct_joy/#note-when-an-analogical-reading-of-the-joystick-is-required-to-know-the-exact-coordinates-at-which-the-joystick-is-located-it-will-be-necessary-to-use-the-get_joy_position-function-obviously-this-function-will-only-be-useful-in-an-analogical-joystick-and-it-wont-work-in-the-digital-ones", 
            "text": "See:  Global data  -  get_joy_position()  -  get_joy_button()", 
            "title": "Note When an analogical reading of the joystick is required (to know the exact coordinates at which the joystick is located), it will be necessary to use the get_joy_position() function. Obviously, this function will only be useful in an analogical joystick, and it won't work in the digital ones."
        }, 
        {
            "location": "/global_struct_setup/", 
            "text": "STRUCT setup;\n\n\n**card;**     // Type of card\n\n**port;**     // Access port\n\n**irq;**      // Interruption request\n\n**dma;**      // Direct memory access channel\n\n**dma2;**     // 16 bit channel of access\n\n**mixer;**    // Type of mixer\n\n**rate;**     // Max frequency\n\n**master;**   // Master (general) volume\n\n**sound_fx;** // Effects volume\n\n**cd_audio;** // CD audio volume\n\n\n\nEND\n\n\nThis is a very advanced data structure, which is not at all necessary to create a game, no matter how difficult it is, as DIV Games Studio's process manager will normally take charge of the sound hardware automatically.\n\n\nAll the fields referred to the sound hardware are automatically updated by the program if you have a sound card, provided that the \nBLASTER\n or \nGRAVIS\n environment variable is properly initialised.\n\n\nThis one record structure contains a series of fields divided into two\ngroups: the first one, to activate new parameters of the sound hardware installed in the computer, and the second one to adjust the different volume controls managed by the sound system's \nmixer\n.\n\n\n\n\nImportant\n\n\nThe \nreset_sound()\n function must be called to activate the new parameters of the sound hardware inserted in this structure (in the \ncard\n, \nport\n, \nirq\n, \ndma\n and \ndma2\n fields).\n\n\nThe \nset_volume()\n function must be called to activate the new volume levels inserted in the structure (in the \nmaster\n, \nsound_fx\n and \ncd_audio\n fields). \n\n\nThis structure is normally used inside the sound system setup programs (see \nsetup_program\n).\n\n\nNote To access these fields, the field name must be preceded by the word \nsetup\n and by the symbol \n. (period)\n. For instance, \nsetup.master\n must be used to access the \nmaster\n field (which indicates the mixer's general volume level).\n\n\n\n\nA more detailed description of every field of this structure is now shown.\n\n\ncard\n - Indicates the type of sound card installed in the computer.\nThe program accepts cards of the \nSound Blaster\n (tm) and \nGravis Ultra Sound\n (tm) families, as well as all those \n100%\n compatible with them.\n\n\nThe values that this field can take are the following ones, depending on the sound card type:\n\n\nWithout card or sound    = **0**\n\nSound Blaster 1.5        = **1**\n\nSound Blaster 2.0        = **2**\n\nSound Blaster Pro        = **3**\n\nSound Blaster 16         = **4**\n\nSound Blaster AWE        = **5**\n\nGravis Ultra Sound       = **6**\n\nGravis Ultra Sound MAX   = **7**\n\n\n\n\n\nport\n - Indicates the computer's communications port in which\nthe data of the sound card must be written and read.\n\n\nThe values that this field can take are the following ones, depending on the port assigned to the sound hardware:\n\n\n0x210 = **0**\n\n0x220 = **1**\n\n0x230 = **2**\n\n0x240 = **3**\n\n0x250 = **4**\n\n0x260 = **5**\n\n\n\n\n\nirq\n - This field indicates the number of IRQ (Interrupt request) assigned to the active sound card.\n\n\nThe values that this field can take are the following ones, depending on the IRQ used by the card:\n\n\nIRQ 2   = **0**\n\nIRQ 3   = **1**\n\nIRQ 5   = **2**\n\nIRQ 7   = **3**\n\nIRQ 10  = **4**\n\nIRQ 11  = **5**\n\nIRQ 12  = **6**\n\nIRQ 13  = **7**\n\nIRQ 14  = **8**\n\nIRQ 15  = **9**\n\n\n\n\n\ndma\n - The direct memory access (DMA) channel's number used by the sound card must be indicated in this field.\n\n\nThis field can take values from 0 to 10, directly depending on the channel's number.\n\n\n\n\ndma2\n - Some sound cards have a second direct memory access channel\nfaster than the previous one, of 16 bits, commonly named HDMA, DMA2 or DMA16.\n\n\nLike in the previous field of this structure, this second channel can take values from 0 to 10 depending on the 16 bit channel's number used by the card.\n\n\n\n\nmixer\n - Type of mixer used by the sound system, can be one of these two constants:\n\n\nfast_mixer\n - Fast mixer with two sound channels (1).\n\n\nquality_mixer\n - Max quality mixer (2).\n\n\nBy default, all programs will be initialised with the fast mixer setting activated \n(\nsetup.mixer=fast_mixer;\n) because this is the faster mode.\n\n\n\n\nrate\n - Max permitted frequency (bit rate), a value between \n11025\nHz (the min permitted quality of sound) and \n44100\nHz (quality CD). By default, all programs are configured as 44100 (\nsetup.rate=44100;\n), \nbut it can be changed, because with the best quality, \nthe sound system will be slower and will consume more processor time.\n\n\nThe value specified in \nsetup.rate\n is the \nmax quality\n\nof sound, this means all loaded effects of sound will\nreconfigure to this quality if they have a better quality. This means, all effects\nsaved to a frequency of 11025 will play with poor quality, although\nthe max permitted frequency may be bigger.\n\n\n\n\nbits\n - Resolution of the digital effects samples and musical modules,\nthis field can have one of these constants as its value :\n\n\nsound_bits_8\n - 8 bit samples.\n\n\nsound_bits_16\n - 16 bit samples.\n\n\nThe effect is similar to the value specified in the field \nrate\n, the \n8 bit\n sounds will sound\nworse (and occupy less space) than those of \n16 bit\n quality. The value\nindicated in \nsetup.bits\n indicates the max depth of the sample.\n\n\nBy default, all programs activate \n16 bit\n samples ({setup.bits=sound_bits_16;)), \nbecause the difference in quality is considerable.\n\n\n\n\nmaster\n - This field contains the output general or master volume of the card. A number ranging from 0 (minimum volume) and 15 (maximum volume) must be here indicated. By default, the value equals \n15\n, the maximum volume.\n\n\nTurning the master volume down will affect the sound effects' volume as well as the CD audio music reproduction's volume.\n\n\n\n\nsound_fx\n - This field controls the volume to which the sound effects executed with the \nsound()\n functions are reproduced.\n\n\nThis volume is independent from that used with the sound functions. The former is general for all the sound effects. On the contrary, the latter (volume indicated in the functions) is specific for every sound.\n\n\nThe values of this field also range from 0 (minimum volume) and 15 (maximum volume). By default, the value will be equal to the maximum volume.\n\n\n\n\ncd_audio\n - This field controls the volume of the music that will be reproduced from the audio tracks of a CD ROM or Compact Disc.\n\n\nSimilar to the two previous fields, the values of this field can also rage from 0 (minimum volume) and 15 (maximum volume). By default, the value will be equal to the maximum volume.\n\n\n\n\nSee: \nGlobal data\n - \nreset_sound()\n - \nset_volume()", 
            "title": "GLOBAL STRUCT setup"
        }, 
        {
            "location": "/global_struct_setup/#important", 
            "text": "The  reset_sound()  function must be called to activate the new parameters of the sound hardware inserted in this structure (in the  card ,  port ,  irq ,  dma  and  dma2  fields).  The  set_volume()  function must be called to activate the new volume levels inserted in the structure (in the  master ,  sound_fx  and  cd_audio  fields).   This structure is normally used inside the sound system setup programs (see  setup_program ).", 
            "title": "Important"
        }, 
        {
            "location": "/global_struct_setup/#note-to-access-these-fields-the-field-name-must-be-preceded-by-the-word-setup-and-by-the-symbol-period-for-instance-setupmaster-must-be-used-to-access-the-master-field-which-indicates-the-mixers-general-volume-level", 
            "text": "A more detailed description of every field of this structure is now shown.  card  - Indicates the type of sound card installed in the computer.\nThe program accepts cards of the  Sound Blaster  (tm) and  Gravis Ultra Sound  (tm) families, as well as all those  100%  compatible with them.  The values that this field can take are the following ones, depending on the sound card type:  Without card or sound    = **0**\n\nSound Blaster 1.5        = **1**\n\nSound Blaster 2.0        = **2**\n\nSound Blaster Pro        = **3**\n\nSound Blaster 16         = **4**\n\nSound Blaster AWE        = **5**\n\nGravis Ultra Sound       = **6**\n\nGravis Ultra Sound MAX   = **7**   port  - Indicates the computer's communications port in which\nthe data of the sound card must be written and read.  The values that this field can take are the following ones, depending on the port assigned to the sound hardware:  0x210 = **0**\n\n0x220 = **1**\n\n0x230 = **2**\n\n0x240 = **3**\n\n0x250 = **4**\n\n0x260 = **5**   irq  - This field indicates the number of IRQ (Interrupt request) assigned to the active sound card.  The values that this field can take are the following ones, depending on the IRQ used by the card:  IRQ 2   = **0**\n\nIRQ 3   = **1**\n\nIRQ 5   = **2**\n\nIRQ 7   = **3**\n\nIRQ 10  = **4**\n\nIRQ 11  = **5**\n\nIRQ 12  = **6**\n\nIRQ 13  = **7**\n\nIRQ 14  = **8**\n\nIRQ 15  = **9**   dma  - The direct memory access (DMA) channel's number used by the sound card must be indicated in this field.  This field can take values from 0 to 10, directly depending on the channel's number.   dma2  - Some sound cards have a second direct memory access channel\nfaster than the previous one, of 16 bits, commonly named HDMA, DMA2 or DMA16.  Like in the previous field of this structure, this second channel can take values from 0 to 10 depending on the 16 bit channel's number used by the card.   mixer  - Type of mixer used by the sound system, can be one of these two constants:  fast_mixer  - Fast mixer with two sound channels (1).  quality_mixer  - Max quality mixer (2).  By default, all programs will be initialised with the fast mixer setting activated \n( setup.mixer=fast_mixer; ) because this is the faster mode.   rate  - Max permitted frequency (bit rate), a value between  11025 Hz (the min permitted quality of sound) and  44100 Hz (quality CD). By default, all programs are configured as 44100 ( setup.rate=44100; ), \nbut it can be changed, because with the best quality, \nthe sound system will be slower and will consume more processor time.  The value specified in  setup.rate  is the  max quality \nof sound, this means all loaded effects of sound will\nreconfigure to this quality if they have a better quality. This means, all effects\nsaved to a frequency of 11025 will play with poor quality, although\nthe max permitted frequency may be bigger.   bits  - Resolution of the digital effects samples and musical modules,\nthis field can have one of these constants as its value :  sound_bits_8  - 8 bit samples.  sound_bits_16  - 16 bit samples.  The effect is similar to the value specified in the field  rate , the  8 bit  sounds will sound\nworse (and occupy less space) than those of  16 bit  quality. The value\nindicated in  setup.bits  indicates the max depth of the sample.  By default, all programs activate  16 bit  samples ({setup.bits=sound_bits_16;)), \nbecause the difference in quality is considerable.   master  - This field contains the output general or master volume of the card. A number ranging from 0 (minimum volume) and 15 (maximum volume) must be here indicated. By default, the value equals  15 , the maximum volume.  Turning the master volume down will affect the sound effects' volume as well as the CD audio music reproduction's volume.   sound_fx  - This field controls the volume to which the sound effects executed with the  sound()  functions are reproduced.  This volume is independent from that used with the sound functions. The former is general for all the sound effects. On the contrary, the latter (volume indicated in the functions) is specific for every sound.  The values of this field also range from 0 (minimum volume) and 15 (maximum volume). By default, the value will be equal to the maximum volume.   cd_audio  - This field controls the volume of the music that will be reproduced from the audio tracks of a CD ROM or Compact Disc.  Similar to the two previous fields, the values of this field can also rage from 0 (minimum volume) and 15 (maximum volume). By default, the value will be equal to the maximum volume.   See:  Global data  -  reset_sound()  -  set_volume()", 
            "title": "Note To access these fields, the field name must be preceded by the word setup and by the symbol . (period). For instance, setup.master must be used to access the master field (which indicates the mixer's general volume level)."
        }, 
        {
            "location": "/global_timer[]/", 
            "text": "timer[9];\n // Counters of time---------------------------------------\n.\n\n\nThis is a 10 position global table, from \ntimer[0]\n to \ntimer[9]\n,\nand each of these 10 positions is a counter of \nsecond hundredth\n that is automatically incremented.\n\n\nAt the beginning of the program, these 10 counters will be put at  zero. They are use to time within a program. For that purpose, they can be put at zero at any time.\n\n\nThere are 10 counters so that the user can dedicate each of them to perform a different action inside the game, no matter which ones of the 10 counters are used. Normally, if the program only needs one counter (most of the times), that numbered \n0\n (\ntimer[0]\n) is used, as the language allows us to omit the zero in square brackets in this case. If only one counter is needed, it is possible to use \ntimer\n simply.\n\n\nFor instance, to implement a process that 5 seconds after the beginning of its execution (if it had been called) performed a specific action, it would be constructed in a way similar to the following one (by using, for instance,\nthe counter timer[9]):\n\n\nPROCESS process_example();\n\n\nBEGIN\n\n\n **timer[9]=0;**\n\n // ...\n\n **LOOP**\n\n     **IF (timer[9]\ngt;=500)**\n\n         // Action to perform ...\n\n     **END**\n\n     // ...\n\n     **FRAME;**\n\n **END**\n\n\n\nEND\n\n\n\n\nNote 1 As timing is performed in second hundredths, these counters can be incremented in \n1\n hundredth, \n2\n, \n3\n, \n4\n, etc. in every frame of the game In an example like the previous one, the user can not wait for \ntimer[9]\n to equal \n500\n exactly, as a frame could indicate \n497\n hundredths passed (since it was put at zero with \ntimer[9]=0;\n) and the following frame \n502\n hundredths, without having passed through value \n500\n.\n\n\n\n\nNote 2 It is also important to underline that much care must be taken to prevent several processes of the program from using the same counter for different purposes.\n\n\nIf, for instance, a \nprocess_example()\n (like the previous one) was created, in every frame of the game these processes would never manage to execute the action of the five seconds, as each of them would put the counter \ntimer[9]\n at \n0\n at the beginning of their execution, thus invalidating the timing of the previous processes.\n\n\nKeeping in mind that the counter timer[9] is \nGLOBAL\n, it is the same for all the game's processes, if a process puts it at \n0\n, it will be put at \n0\n for the rest of the processes.\n\n\n\n\nNote 3 Finally, much care must be taken regarding the conditions similar to those of the previous example (\nIF (timer[9]\n=500) ... \n), as these conditions\n\n\nwon't only be activated \nonce every 5 seconds\n, but they will be activated\n\nalways after the first 5 seconds\n.\n\n\nTo understand the problem better, a process performing one action, \nonly once\n, five seconds after the beginning of its execution, is now shown.\n\n\nPROCESS process_example();\n\n\nPRIVATE\n\n\n **action_performed=FALSE;**\n\n\n\nBEGIN\n\n\n **timer[9]=0;**\n\n // ...\n\n **LOOP**\n\n     **IF (timer[9]\ngt;=500) AND NOT action_performed)**\n\n         // Action to perform ...\n\n         **action_performed=TRUE;**\n\n     **END**\n\n     // ...\n\n     **FRAME;**\n\n **END**\n\n\n\nEND\n\n\nA private variable called \naction_performed\n which, at first, will be \nfalse\n is used. \nTo perform an action now, it will be necessary that more than five \nseconds have passed and that \nthe action has not been performed yet\n.\nTherefore, after its performance the \naction_performed\n variable will become \ntrue\n.\n\n\nFor the previous example to execute the action \nevery five seconds\n\n(indefinitely), suffice will be to put the statement \ntimer[9]=0;\n again after the\n\naction to perform\n, not being necessary, in this case, the \naction_performed\n private variable, as other \n5\n seconds would be necessary for \ntimer[9]\n to be again bigger than or equal to \n500\n.\n\n\n\n\nSee: \nGlobal data", 
            "title": "GLOBAL timer[]"
        }, 
        {
            "location": "/global_timer[]/#note-1-as-timing-is-performed-in-second-hundredths-these-counters-can-be-incremented-in-1-hundredth-2-3-4-etc-in-every-frame-of-the-game-in-an-example-like-the-previous-one-the-user-can-not-wait-for-timer9-to-equal-500-exactly-as-a-frame-could-indicate-497-hundredths-passed-since-it-was-put-at-zero-with-timer90-and-the-following-frame-502-hundredths-without-having-passed-through-value-500", 
            "text": "", 
            "title": "Note 1 As timing is performed in second hundredths, these counters can be incremented in 1 hundredth, 2, 3, 4, etc. in every frame of the game In an example like the previous one, the user can not wait for timer[9] to equal 500 exactly, as a frame could indicate 497 hundredths passed (since it was put at zero with timer[9]=0;) and the following frame 502 hundredths, without having passed through value 500."
        }, 
        {
            "location": "/global_timer[]/#note-2-it-is-also-important-to-underline-that-much-care-must-be-taken-to-prevent-several-processes-of-the-program-from-using-the-same-counter-for-different-purposes", 
            "text": "If, for instance, a  process_example()  (like the previous one) was created, in every frame of the game these processes would never manage to execute the action of the five seconds, as each of them would put the counter  timer[9]  at  0  at the beginning of their execution, thus invalidating the timing of the previous processes.  Keeping in mind that the counter timer[9] is  GLOBAL , it is the same for all the game's processes, if a process puts it at  0 , it will be put at  0  for the rest of the processes.", 
            "title": "Note 2 It is also important to underline that much care must be taken to prevent several processes of the program from using the same counter for different purposes."
        }, 
        {
            "location": "/global_timer[]/#note-3-finally-much-care-must-be-taken-regarding-the-conditions-similar-to-those-of-the-previous-example-if-timer9500-as-these-conditions", 
            "text": "won't only be activated  once every 5 seconds , but they will be activated always after the first 5 seconds .  To understand the problem better, a process performing one action,  only once , five seconds after the beginning of its execution, is now shown.  PROCESS process_example();  PRIVATE   **action_performed=FALSE;**  BEGIN   **timer[9]=0;**\n\n // ...\n\n **LOOP**\n\n     **IF (timer[9] gt;=500) AND NOT action_performed)**\n\n         // Action to perform ...\n\n         **action_performed=TRUE;**\n\n     **END**\n\n     // ...\n\n     **FRAME;**\n\n **END**  END  A private variable called  action_performed  which, at first, will be  false  is used. \nTo perform an action now, it will be necessary that more than five \nseconds have passed and that  the action has not been performed yet .\nTherefore, after its performance the  action_performed  variable will become  true .  For the previous example to execute the action  every five seconds \n(indefinitely), suffice will be to put the statement  timer[9]=0;  again after the action to perform , not being necessary, in this case, the  action_performed  private variable, as other  5  seconds would be necessary for  timer[9]  to be again bigger than or equal to  500 .   See:  Global data", 
            "title": "Note 3 Finally, much care must be taken regarding the conditions similar to those of the previous example (IF (timer[9]&gt;=500) ... ), as these conditions"
        }, 
        {
            "location": "/global_text_z/", 
            "text": "text_z=-256;\n // Texts' depth planes---------------------------------------\n.\n\n\nThe depth plane in which the texts must appear on screen is indicated in this global variable. It indicates what must appear above and below the text.\n\n\nThe depth planes can be any integer within the range (\nmin_int\n ... \nmax_int\n) and, the greater the number is, the deeper the text or graphic will be placed.\n\n\nBy default, the processes' graphics have their \nlocal z\n variable at \n0\n , the texts \ntext_z\n at\n -256\n and the mouse pointer has \nmouse.z\n at\n -512\n by default.\n\n\nThat means that, by default, if these values are not modified,\nthe texts will appear above the processes' graphics and the mouse pointer above the texts.\n\n\nIf, for instance, the aim was that the texts appeared above the mouse pointer (opposite to which has been established by default), two things could have been done:\n\n\na)\n To place the pointer's plane lower than the texts' plane (a\ngreater number), such as, for instance: \nmouse.z=-200;\n (as\n -200\n is a number\nbigger than\n -256\n).\n\n\nb)\n To place the texts' plane upper that the pointer's plane such as,\nfor instance, \ntext_z=-600;\n as\n -600\n is a number lesser than\n -512\n and,\nthus, a less depth plane (less deep).\n\n\n\n\nNote 1 The \ntext_z\n variable is \nGLOBAL\n for all the texts. It is not possible to define texts in different depth planes.\n\n\nNote 2 The texts can only be displayed with the \nwrite()\n\n\n(alphanumeric texts) function or with the \nwrite_int()\n (variables' numeric values) function.\n\n\n\n\nSee: \nGlobal data\n - \nwrite()\n - \nwrite_int()", 
            "title": "GLOBAL text_z"
        }, 
        {
            "location": "/global_text_z/#note-1-the-text_z-variable-is-global-for-all-the-texts-it-is-not-possible-to-define-texts-in-different-depth-planes", 
            "text": "", 
            "title": "Note 1 The text_z variable is GLOBAL for all the texts. It is not possible to define texts in different depth planes."
        }, 
        {
            "location": "/global_text_z/#note-2-the-texts-can-only-be-displayed-with-the-write", 
            "text": "(alphanumeric texts) function or with the  write_int()  (variables' numeric values) function.   See:  Global data  -  write()  -  write_int()", 
            "title": "Note 2 The texts can only be displayed with the write()"
        }, 
        {
            "location": "/global_fading/", 
            "text": "fading=FALSE;\n // Indicator of screen fading---------------------------------------\n.\n\n\nThis global variable indicates if a screen fading (a gradual change of the game's palette colours) is being performed at a specific moment. Its value will be:\n\n\nfalse (0)\n - If a fading is \nnot\n being performed.\n\n\ntrue (1)\n - If a fading is being performed.\n\n\nThe purpose of this variable is to be able to determine the end of a screen fading started with the \nfade()\n or \nfade_on()\n functions.\n\n\nOn using these functions, a fading of the palette's colours will start, gradually coming closer to the definitive colours in the next frames of the game. In every \nFRAME\n statement a part of the fading will be performed.\n\n\nWhen a fading is started, the \nfading\n variable will automatically become equal to \ntrue\n (1) and when it is finished, it will recover its original value, \nfalse\n (0).\n\n\n\n\nNote 1 Generally, this variable is used to control the \nfade()\n function,\n\n\nand verify whether the fading has already been executed (performed). For instance, to stop the program's execution until the fading is finished, which can be done with a statement as follows (just after the call to the \nfade()\n function):\n\n\nWHILE (fading)\n\n\n  **FRAME;**\n\n\n\nEND\n\n\nLiterally this statement defines: \nwhile the fading continues to be performed, a new frame must be displayed\n.\n\n\nNote 2 All the programs perform a fading (\nfade_on()\n) at\n\n\nthe beginning of their execution (automatically). Therefore, this variable will be put at \ntrue (1)\n at the beginning of all the programs until this initial fading doesn't finish (while the screen \nfading on\n is being performed).\n\n\n\n\nSee: \nGlobal data\n - \nfade()\n - \nfade_on()", 
            "title": "GLOBAL fading"
        }, 
        {
            "location": "/global_fading/#note-1-generally-this-variable-is-used-to-control-the-fade-function", 
            "text": "and verify whether the fading has already been executed (performed). For instance, to stop the program's execution until the fading is finished, which can be done with a statement as follows (just after the call to the  fade()  function):  WHILE (fading)    **FRAME;**  END  Literally this statement defines:  while the fading continues to be performed, a new frame must be displayed .", 
            "title": "Note 1 Generally, this variable is used to control the fade() function,"
        }, 
        {
            "location": "/global_fading/#note-2-all-the-programs-perform-a-fading-fade_on-at", 
            "text": "the beginning of their execution (automatically). Therefore, this variable will be put at  true (1)  at the beginning of all the programs until this initial fading doesn't finish (while the screen  fading on  is being performed).   See:  Global data  -  fade()  -  fade_on()", 
            "title": "Note 2 All the programs perform a fading (fade_on()) at"
        }, 
        {
            "location": "/global_shift_status/", 
            "text": "shift_status=0;\n // State of the special keys---------------------------------------\n.\n\n\nThe state of different special keys, such as [\nALT\n], [\nCONTROL\n], etc. is indicated in this predefined global variable.\n\n\nEach of these keys have the following code assigned:\n\n\nRight SHIFT key        = \n1\n\n\nLeft SHIFT key         = \n2\n\n\nCONTROL keys           = \n4\n\n\nALT and/or ALT GR keys = \n8\n\n\nSCROLL LOCK key        = \n16\n\n\nNUM LOCK key           = \n32\n\n\nCAPS LOCK key          = \n64\n\n\nINSERT key             = \n128\n\n\nThe \nshift_status\n variable will contain the \naddition of all the codes of the pressed or activated keys\n.\n\n\nFor instance, if the [\nALT\n] key was pressed ant the [\nCAPS LOCK\n] was activated, the \nshift_status\n variable's value would equal \n72\n (8+64).\n\n\nIn order to verify whether a key like [\nALT\n] is pressed, it is not possible to check that \nshift_status\n is equal to \n8\n, as it would imply that [\nALT\n] is\nthe \nonly\n pressed or activated special key.\n\n\nA correct verification would be carried out as follows:\n\n\nIF (shift_status AND 8 == 8)\n\n\n  // The [ALT] key is pressed ...\n\n\n\nEND\n\n\n\n\nNote The \nkey()\n function is normally used to verify whether a key is pressed. But it is not possible to determine with this same function whether keys such as \nCAPS LOCK\n are activated, but only if they are pressed or not.\n\n\nThere are two variables containing the code of the last pressed key;\n\nscan_code\n (\nscan\n code of the last pressed key) and \nascii\n\n(\nascii\n code of the last pressed key).\n\n\n\n\nSee: \nGlobal data\n - \nkey()\n - \nascii\n - \nscan_code", 
            "title": "GLOBAL shift_status"
        }, 
        {
            "location": "/global_shift_status/#note-the-key-function-is-normally-used-to-verify-whether-a-key-is-pressed-but-it-is-not-possible-to-determine-with-this-same-function-whether-keys-such-as-caps-lock-are-activated-but-only-if-they-are-pressed-or-not", 
            "text": "There are two variables containing the code of the last pressed key; scan_code  ( scan  code of the last pressed key) and  ascii \n( ascii  code of the last pressed key).   See:  Global data  -  key()  -  ascii  -  scan_code", 
            "title": "Note The key() function is normally used to verify whether a key is pressed. But it is not possible to determine with this same function whether keys such as CAPS LOCK are activated, but only if they are pressed or not."
        }, 
        {
            "location": "/global_ascii/", 
            "text": "ascii=0;\n // ASCII code of the last pressed key---------------------------------------\n.\n\n\nThis global variable always indicates the ASCII code of the \nlast pressed key\n in the last game's frame.\n\n\nThe \nascii\n variable will be at \n0\n if no key has been pressed in the previous frame of the game.\n\n\nThe ASCII codes are a list of characters (letters, numbers and symbols)\nnumbered from \n0\n to \n255\n that have been standardised. The codes less than 32 are called control characters; from 32 to 127 appears the international set of characters; and from number 128, appears the expanded set of characters (according to the PC standard). The international and expanded ASCII characters are shown below.\n\n\nSummary of the standard PC ASCII codes.\n---------------------------------------\n033 21\n !\n\u2502097 61\n a\n\u2502161 A1\n \n\u2502225 E1\n \n\n\n034 22\n \n\u2502098 62\n b\n\u2502162 A2\n \n\u2502226 E2\n \n\n\n035 23\n #\n\u2502099 63\n c\n\u2502163 A3\n \n\u2502227 E3\n \n\n\n036 24\n $\n\u2502100 64\n d\n\u2502164 A4\n \n\u2502228 E4\n \n\n\n037 25\n %\n\u2502101 65\n e\n\u2502165 A5\n \n\u2502229 E5\n \n\n\n038 26\n \n\u2502102 66\n f\n\u2502166 A6\n \n\u2502230 E6\n \n\n\n039 27\n '\n\u2502103 67\n g\n\u2502167 A7\n \n\u2502231 E7\n \n\n\n040 28\n (\n\u2502104 68\n h\n\u2502168 A8\n \n\u2502232 E8\n \n\n\n041 29\n )\n\u2502105 69\n i\n\u2502169 A9\n \u2310\n\u2502233 E9\n \n\n\n042 2A\n \n\u2502106 6A\n* j\n\u2502170 AA\n \n\u2502234 EA\n \n**\n\n\n043 2B\n +\n\u2502107 6B\n k\n\u2502171 AB\n \n\u2502235 EB\n \n\n\n044 2C\n ,\n\u2502108 6C\n l\n\u2502172 AC\n \n\u2502236 EC\n \n\n\n045 2D\n -\n\u2502109 6D\n m\n\u2502173 AD\n \n\u2502237 ED\n \n\n\n046 2E\n .\n\u2502110 6E\n n\n\u2502174 AE\n \n\u2502238 EE\n \n\n\n047 2F\n /\n\u2502111 6F\n o\n\u2502175 AF\n \n\u2502239 EF\n \n\n\n048 30\n 0\n\u2502112 70\n p\n\u2502176 B0\n \u2591\n\u2502240 F0\n \n\n\n049 31\n 1\n\u2502113 71\n q\n\u2502177 B1\n \u2592\n\u2502241 F1\n \n\n\n050 32\n 2\n\u2502114 72\n r\n\u2502178 B2\n \u2593\n\u2502242 F2\n \n\n\n051 33\n 3\n\u2502115 73\n s\n\u2502179 B3\n \u2502\n\u2502243 F3\n \n\n\n052 34\n 4\n\u2502116 74\n t\n\u2502180 B4\n \u2524\n\u2502244 F4\n \u2320\n\n\n053 35\n 5\n\u2502117 75\n u\n\u2502181 B5\n \u2561\n\u2502245 F5\n \u2321\n\n\n054 36\n 6\n\u2502118 76\n v\n\u2502182 B6\n \u2562\n\u2502246 F6\n \n\n\n055 37\n 7\n\u2502119 77\n w\n\u2502183 B7\n \u2556\n\u2502247 F7\n \n\n\n056 38\n 8\n\u2502120 78\n x\n\u2502184 B8\n \u2555\n\u2502248 F8\n \n\n\n057 39\n 9\n\u2502121 79\n y\n\u2502185 B9\n \u2563\n\u2502249 F9\n \u2219\n\n\n058 3A###  \u2502122 7A\n z\n\u2502186 BA\n \u2551\n\u2502250 FA\n \u2219\n\n\n059 3B\n ;\n\u2502123 7B\n {{\n}\u2502187 BB\n \u2557\n\u2502251 FB\n \n\n\n060 3C\n \n\u2502124 7C\n |\n\u2502188 BC\n \u255d\n\u2502252 FC\n \u207f\n\n\n061 3D\n =\n\u2502125 7D\n {\n}}\u2502189 BD\n \u255c\n\u2502253 FD\n \n\n\n062 3E\n \n\u2502126 7E\n ~\n\u2502190 BE\n \u255b\n\u2502254 FE\n \u25a0\n\n\n063 3F\n ?\n\u2502127 7F\n \u007f\n\u2502191 BF\n \u2510\n\u2502255 FF\n \n\n\n064 40\n @\n\u2502128 80\n \n\u2502192 C0\n \u2514\n\n\n065 41\n A\n\u2502129 81\n \n\u2502193 C1\n \u2534\n\n\n066 42\n B\n\u2502130 82\n \n\u2502194 C2\n \u252c\n\n\n067 43\n C\n\u2502131 83\n \n\u2502195 C3\n \u251c\n\n\n068 44\n D\n\u2502132 84\n \n\u2502196 C4\n \u2500\n\n\n069 45\n E\n\u2502133 85\n \n\u2502197 C5\n \u253c\n\n\n070 46\n F\n\u2502134 86\n \n\u2502198 C6\n \u255e\n\n\n071 47\n G\n\u2502135 87\n \n\u2502199 C7\n \u255f\n\n\n072 48\n H\n\u2502136 88\n \n\u2502200 C8\n \u255a\n\n\n073 49\n I\n\u2502137 89\n \n\u2502201 C9\n \u2554\n\n\n074 4A\n J\n\u2502138 8A\n \n\u2502202 CA\n \u2569\n\n\n075 4B\n K\n\u2502139 8B\n \n\u2502203 CB\n \u2566\n\n\n076 4C\n L\n\u2502140 8C\n \n\u2502204 CC\n \u2560\n\n\n077 4D\n M\n\u2502141 8D\n \n\u2502205 CD\n \u2550\n\n\n078 4E\n N\n\u2502142 8E\n \n\u2502206 CE\n \u256c\n\n\n079 4F\n O\n\u2502143 8F\n \n\u2502207 CF\n \u2567\n\n\n080 50\n P\n\u2502144 90\n \n\u2502208 D0\n \u2568\n\n\n081 51\n Q\n\u2502145 91\n \n\u2502209 D1\n \u2564\n\n\n082 52\n R\n\u2502146 92\n \n\u2502210 D2\n \u2565\n\n\n083 53\n S\n\u2502147 93\n \n\u2502211 D3\n \u2559\n\n\n084 54\n T\n\u2502148 94\n \n\u2502212 D4\n \u2558\n\n\n085 55\n U\n\u2502149 95\n \n\u2502213 D5\n \u2552\n\n\n086 56\n V\n\u2502150 96\n \n\u2502214 D6\n \u2553\n\n\n087 57\n W\n\u2502151 97\n \n\u2502215 D7\n \u256b\n\n\n088 58\n X\n\u2502152 98\n \n\u2502216 D8\n \u256a\n\n\n089 59\n Y\n\u2502153 99\n \n\u2502217 D9\n \u2518\n\n\n090 5A\n Z\n\u2502154 9A\n \n\u2502218 DA\n \u250c\n\n\n091 5B\n [\n\u2502155 9B\n \n\u2502219 DB\n \u2588\n\n\n092 5C\n **\u2502156 9C\n \n\u2502220 DC\n \u2584**\n\n\n093 5D\n ]\n\u2502157 9D\n \n\u2502221 DD\n \u258c\n\n\n094 5E\n ^\n\u2502158 9E\n \u20a7\n\u2502222 DE\n \u2590\n\n\n095 5F\n _\n\u2502159 9F\n \n\u2502223 DF\n \u2580\n\n\n096 60\n '\n\u2502160 A0\n \n\u2502224 E0\n \n---------------------------------------\n\n\nTherefore, an ASCII code is referred to the \ncharacter that has been created with the last keystroke\n (or keystroke combinations, in those cases such as letters bearing a stress mark).\n\n\n\n\nImportant There is another predefined global variable, called \nscan_code\n, which also contains the code of the last pressed key. But, unlike \nascii\n, this new variable stores the \nscan code\n of the key. This indicates \nwhich key has been pressed\n and not \nwhich character has been generated\n by it (like \nascii\n).\n\n\nThere is a series of constants designating these \nkeys codes\n (keytable scan codes). \nAccess the help about these \nkeys codes\n\nto observe, moreover, a \nsample program\n with the \nascii\n and \nscan_code\n variables.\n\n\nThe \nkey()\n function of the language is normally used in order to verify whether a key is being pressed or not. This function receives one of these \nkeys codes\n as a parameter, and returns \n0\n if the key is not pressed or \n1\n if it is pressed.\n\n\n\n\nSee: \nGlobal data\n - \nscan_code\n - \nkey()", 
            "title": "GLOBAL ascii"
        }, 
        {
            "location": "/global_ascii/#important-there-is-another-predefined-global-variable-called-scan_code-which-also-contains-the-code-of-the-last-pressed-key-but-unlike-ascii-this-new-variable-stores-the-scan-code-of-the-key-this-indicates-which-key-has-been-pressed-and-not-which-character-has-been-generated-by-it-like-ascii", 
            "text": "There is a series of constants designating these  keys codes  (keytable scan codes). \nAccess the help about these  keys codes \nto observe, moreover, a  sample program  with the  ascii  and  scan_code  variables.  The  key()  function of the language is normally used in order to verify whether a key is being pressed or not. This function receives one of these  keys codes  as a parameter, and returns  0  if the key is not pressed or  1  if it is pressed.   See:  Global data  -  scan_code  -  key()", 
            "title": "Important There is another predefined global variable, called scan_code, which also contains the code of the last pressed key. But, unlike ascii, this new variable stores the scan code of the key. This indicates which key has been pressed and not which character has been generated by it (like ascii)."
        }, 
        {
            "location": "/global_scan_code/", 
            "text": "scan_code=0;\n // Scan code of the last pressed key---------------------------------------\n.\n\n\nThis global variable always indicates the scan code of the \nlast pressed key\n in the last frame of the game.\n\n\nThe \nscan_code\n variable will be at \n0\n if no key has been pressed in the previous frame of the game.\n\n\nThis variable is often used to wait in a program for the user to press any key with a statement similar to the following one:\n\n\nWHILE (scan_code == 0)\n\n\n  **FRAME;**\n\n\n\nEND\n\n\nThis statement indicates that, while no key has been pressed in the previous frame (while \nscan_code\n equals \n0\n), the frames of the game must continue to be displayed.\n\n\nThe \nscan codes\n are simply a numeric list of the PC's keys. These codes can slightly vary (in any key) regarding different keytables, as there are keytables of different languages, with a varied number of keys, etc.\n\n\nHowever, almost all the codes of the main keys remain constant. There is a predefined list \nof constants (synonymous for these codes)\nin the language that can be seen by accessing the help about \nkeys codes\n (or keytable scan codes). These numeric values will precisely be assigned to the \nscan_code\n variable when the respective keys are pressed in the program.\n\n\n\n\nImportant There is another predefined global variable, called \nascii\n, which also contains the code of the last pressed key. But, unlike \nscan_code\n, this new variable stores the \nASCII code\n (character) generated by the key. This indicates \nwhich character has been generated by the last pressed key\n and not \nwhich key has been pressed\n (like \nscan_code\n).\n\n\nAccess the help about the \nkeys codes\n to observe a \nsample program\n with the \nascii\n and \nscan_code\n variables.\n\n\nThe \nkey()\n function of the language is normally used in order to verify whether a key is being pressed or not. This function receives one of these \nkeys codes\n as a parameter, and returns \n0\n if the key is not pressed or \n1\n if it is pressed.\n\n\n\n\nSee: \nGlobal data\n - \nascii\n - \nkey()", 
            "title": "GLOBAL scan_code"
        }, 
        {
            "location": "/global_scan_code/#important-there-is-another-predefined-global-variable-called-ascii-which-also-contains-the-code-of-the-last-pressed-key-but-unlike-scan_code-this-new-variable-stores-the-ascii-code-character-generated-by-the-key-this-indicates-which-character-has-been-generated-by-the-last-pressed-key-and-not-which-key-has-been-pressed-like-scan_code", 
            "text": "Access the help about the  keys codes  to observe a  sample program  with the  ascii  and  scan_code  variables.  The  key()  function of the language is normally used in order to verify whether a key is being pressed or not. This function receives one of these  keys codes  as a parameter, and returns  0  if the key is not pressed or  1  if it is pressed.   See:  Global data  -  ascii  -  key()", 
            "title": "Important There is another predefined global variable, called ascii, which also contains the code of the last pressed key. But, unlike scan_code, this new variable stores the ASCII code (character) generated by the key. This indicates which character has been generated by the last pressed key and not which key has been pressed (like scan_code)."
        }, 
        {
            "location": "/global_joy_filter/", 
            "text": "joy_filter=10;\n // Filter applied to the joystick---------------------------------------\n.\n\n\nThis global variable is used to define the filter applied to the read\njoystick's coordinates.\n\n\nIt is defined as a percentage from \n0 %\n to \n99 %\n. By default, \njoy_filter\n\nwill equal \n10\n (a 10% filter will be applied).\n\n\nThe purpose of applying this filter to the joystick's coordinates is to make its movements gentler and to avoid possible \nirregularities\n in the coordinates' reading. Those joystick's coordinates must be obtained with the \nget_joy_position()\n function. The \njoy_filter\n variable will only be useful when the latter function is being used.\n\n\nThe bigger the filter applied to the joystick is, the gentler the movements of the latter will be. But, at the same time, its answer will take longer.\n\n\nAs the task performed by this \nfilter\n is somewhat difficult to understand,\nan example is now shown.\n\n\nExample program\n\n\nPROGRAM example_joy_filter;\nBEGIN\n    write(0, 0, 0, 0, \njoy_filter=\n);\n    write_int(0, 70, 0, 0, offset joy_filter);\n    write(0, 160, 180, 1, \nThe graphic is shown at the joystick's coordinates\n);\n    write(0, 160, 190, 1, \nUse the up/down keys to vary the filter\n);\n    load_fpg(\nhelp/help.fpg\n);\n    put_screen(0, 1);\n    graph=100;\n    LOOP\n        IF (scan_code==_up AND joy_filter\n99)\n            joy_filter++;\n        END\n        IF (scan_code==_down AND joy_filter\n0)\n            joy_filter--;\n        END\n        x=get_joy_position(0);\n        y=get_joy_position(1);\n        FRAME;\n    END\nEND\n\n\n\n\nThis program displays the graphic of a ball at the coordinates returned by the main joystick with the \n\nget_joy_position()\n function.\n\n\nIt can be notice how, for small values of \njoy_filter\n, many \nirregularities\n appear in the reading, and for very big values (like 95%) the coordinates' read is much gentler and regular, but slightly slower.\n\n\nNote It is indispensable to have a joystick (or gamepad) connected to the computer for this variable to be useful. If the joystick is connected during the program's execution, the system won't detect it (it must be connected from the beginning). See the \njoy_status\n global variable.\n\n\n\n\nSee: \nGlobal data\n - \nget_joy_position()\n - \njoy_status", 
            "title": "GLOBAL joy_filter"
        }, 
        {
            "location": "/global_joy_filter/#example-program", 
            "text": "PROGRAM example_joy_filter;\nBEGIN\n    write(0, 0, 0, 0,  joy_filter= );\n    write_int(0, 70, 0, 0, offset joy_filter);\n    write(0, 160, 180, 1,  The graphic is shown at the joystick's coordinates );\n    write(0, 160, 190, 1,  Use the up/down keys to vary the filter );\n    load_fpg( help/help.fpg );\n    put_screen(0, 1);\n    graph=100;\n    LOOP\n        IF (scan_code==_up AND joy_filter 99)\n            joy_filter++;\n        END\n        IF (scan_code==_down AND joy_filter 0)\n            joy_filter--;\n        END\n        x=get_joy_position(0);\n        y=get_joy_position(1);\n        FRAME;\n    END\nEND  This program displays the graphic of a ball at the coordinates returned by the main joystick with the  get_joy_position()  function.  It can be notice how, for small values of  joy_filter , many  irregularities  appear in the reading, and for very big values (like 95%) the coordinates' read is much gentler and regular, but slightly slower.", 
            "title": "Example program"
        }, 
        {
            "location": "/global_joy_filter/#note-it-is-indispensable-to-have-a-joystick-or-gamepad-connected-to-the-computer-for-this-variable-to-be-useful-if-the-joystick-is-connected-during-the-programs-execution-the-system-wont-detect-it-it-must-be-connected-from-the-beginning-see-the-joy_status-global-variable", 
            "text": "See:  Global data  -  get_joy_position()  -  joy_status", 
            "title": "Note It is indispensable to have a joystick (or gamepad) connected to the computer for this variable to be useful. If the joystick is connected during the program's execution, the system won't detect it (it must be connected from the beginning). See the joy_status global variable."
        }, 
        {
            "location": "/global_joy_status/", 
            "text": "joy_status=0;\n // State of the joystick---------------------------------------\n\n\nThe state of the joystick (or gamepad) connected to the computer is indicated in this global variable. These are the values that this variable takes by default:\n\n\n0\n - If the joystick reading system is disabled. This value means that a joystick connected to the computer either has not been found at the beginning of the program's execution, or has been disconnected.\n\n\n1\n - If the joystick reading system is active. This is the initial value by default, but if the joystick is disconnected (or there is no joystick connected), the reading system will be disabled (indicating \n0\n in the joy_status variable).\n\n\nIf the system is disabled, it can be reactivated by simply assigning \n1\n to \njoy_status\n (with the \njoy_status=1;\n statement). But if, after a limited time, no joystick is detected, the system will be disabled again.\n\n\n\n\nThere is a \nspecial mode\n in which the joystick reading system \nwon't be ever disabled\n. This mode is simply defined by {assigning 2 to\njoy_status}.\n\n\njoy_status=2;\n // Activates special mode\n\n\nNevertheless, much care must be taken as, if the joystick reading system is activated in this way, and there is no joystick connected to the computer, \nthe game's execution may be slowed down\n.\n\n\n\n\nNote To read the joystick in the programs, the \nglobal joy structure\n is normally accessed. This structure always indicates its offset and the state of its\n\n\nbuttons (whether they are pressed or not).\n\n\n\n\nSee: \nGlobal data\n - \nJoy structure\n - \njoy_filter", 
            "title": "GLOBAL joy_status"
        }, 
        {
            "location": "/global_joy_status/#note-to-read-the-joystick-in-the-programs-the-global-joy-structure-is-normally-accessed-this-structure-always-indicates-its-offset-and-the-state-of-its", 
            "text": "buttons (whether they are pressed or not).   See:  Global data  -  Joy structure  -  joy_filter", 
            "title": "Note To read the joystick in the programs, the global joy structure is normally accessed. This structure always indicates its offset and the state of its"
        }, 
        {
            "location": "/global_restore_type/", 
            "text": "restore_type=complete_restore;\n // Restoring type---------------------------------------\n.\n\n\nThis global variable indicates the restoring type that must be performed after each frame on screen.\n\n\nThe term \nbackground restoring\n means to recover the screen zones in which graphics have been painted or texts have been written in the previous frame. \n\n\nThere are three applicable restoring types which directly correspond to three constants that can be assigned to the \nrestore_type\n variable.\n\n\nno_restore\n       - The fastest one, the background is not restored (-1)\n\n\npartial_restore\n  - Average, partial restoring (0)\n\n\ncomplete_restore\n - The slowest one, complete restoring (1)\n\n\nBy default, the value of \nrestore_type\n equals \ncomplete_restore\n. If a different value is not indicated in this variable, a complete screen restoring will take place after each frame of the game.\n\n\nThis restoring mode (complete) is the slowest one out of these three modes. Thus, it will surely be possible to gain speed in the game's execution (for it to be faster in slow computers), if a different value is assigned to this variable.\nFor instance, the following statement must be used to indicate a partial restoring:\n\n\nrestore_type=partial_restore;\n\n\nThis statements orders the process' manager of DIV Games\nStudio to partially restore the screen background (only those screen zones where graphics or texts have been put) after the following frames of the game.\n\n\nThe \nno_restore\n type (not restoring the screen background) is the fastest mode. However, it is only applicable when the game develops inside a scroll or mode 7 window occupying the entire screen. Otherwise, the graphics will leave signs (of the previous frames) on moving through the screen.\n\n\nThe restoring mode can be changed under a program's execution as often as necessary, according to the requirements of the stages (or sections) under execution at each moment.\n\n\n\n\nNote There is another global variable also related to DIV\n\n\nGames Studio's management on screen. This is called \ndump_type\n and it defines the \ntype of frames \ndump\n that must be performed (what information\nmust be sent to the monitor after every frame of the game).\n\n\n\n\nSee: \nGlobal data\n - \ndump_type", 
            "title": "GLOBAL restore_type"
        }, 
        {
            "location": "/global_restore_type/#note-there-is-another-global-variable-also-related-to-div", 
            "text": "Games Studio's management on screen. This is called  dump_type  and it defines the \ntype of frames  dump  that must be performed (what information\nmust be sent to the monitor after every frame of the game).   See:  Global data  -  dump_type", 
            "title": "Note There is another global variable also related to DIV"
        }, 
        {
            "location": "/global_dump_type/", 
            "text": "dump_type=complete_dump;\n // Type of dump---------------------------------------\n\n\nThis global variable indicates the frame dump on screen types that must be performed in every frame of the game.\n\n\nThe term \ndump\n means that the game's frames are sent to the monitor (to the video memory of the graphic card).\n\n\n\n\nThere are two applicable types of dump which directly correspond with two constants that can be assigned to the \ndump_type\n variable.\n\n\npartial_dump\n - When indicated with the following statement, \npartial dumps\n will be performed:\n\n\ndump_type=partial_dump;\n\n\nOnly the graphics that are updated, that have changed with respect to the previous frame, will be dumped on screen in this mode. It is advisable to activate this dump \nin order to gain speed\n when a game (or one section of it) is programmed without a scroll or mode 7 window occupying the entire screen. \n\n\ncomplete_dump\n - When indicated with the following statement, \ncomplete dumps\n will be performed:\n\n\ndump_type=complete_dump;\n\n\nIn this mode, the entire screen will be dumped no matter whether the graphics have changed or not. This mode is slower than the \npartial dump\n. Nevertheless, it must be used when the game has a scroll or mode 7 window occupying all the screen.\n\n\n\n\nBy default, the value of \ndump_type\n is \ncomplete_dump\n. If no other value is indicated in this variable, \ncomplete dumps\n on the screen will be performed after each game's frame (which is normally \nslower\n than performing partial dump).\n\n\nThe dump type can be changed during a program's execution as often as necessary, according to the requirements of the stages (or sections) under execution at each moment.\n\n\n\n\nNote There is another global variable also related to DIV\n\n\nGames Studio's management on screen. This is called \nrestore_type\n  and it defines the type of \nrestoring\n that must be performed on screen after every game's frame (which graphics or texts must be deleted).\n\n\n\n\nSee: \nGlobal data\n - \nrestore_type", 
            "title": "GLOBAL dump_type"
        }, 
        {
            "location": "/global_dump_type/#note-there-is-another-global-variable-also-related-to-div", 
            "text": "Games Studio's management on screen. This is called  restore_type   and it defines the type of  restoring  that must be performed on screen after every game's frame (which graphics or texts must be deleted).   See:  Global data  -  restore_type", 
            "title": "Note There is another global variable also related to DIV"
        }, 
        {
            "location": "/global_max_process_time/", 
            "text": "max_process_time=500;\n // Maximum execution time---------------------------------------\n.\n\n\nPrograms are provided with an \nanti-blocking\n system that will make the manager of processes of DIV Games Studio interrupts its execution when a process exceeds the \nmaximum execution time\n in a game's frame.\n\n\nThis maximum time is indicated in the \nmax_process_time\n global variable in \nhundredths of second\n. By default, its value is \n500 hundredths\n (\n5 seconds\n).\n\n\nWhen a process takes longer than the indicated time in\nexecuting a \nFRAME\n statement (which indicates that the process\nis ready for the following frame of the game), an execution error will arise.\n\n\nNote The utility of the possibility of changing this variable, assigning a new value to it, is to avoid this error in the programs in which there is a process that must be doing calculations for a long time.\n\n\nThe following statement must be used to order the process' manager, for instance, not to interrupt a process, unless its execution in a frame is longer that 30 seconds:\n\n\nmax_process_time=3000;\n\n\nAs 30 seconds are 3000 hundredths of second.\n\n\n\n\nImportant Keep in mind that the time used by every computer to do the program's calculations is different. Therefore, this value must be defined with a certain margin, in order to avoid to exceed  the \nmaximum execution time\n\n\nwhen the game is executed in slower computers.\n\n\n\n\nSee: \nGlobal data\n - \nFRAME statement", 
            "title": "GLOBAL max_process_time"
        }, 
        {
            "location": "/global_max_process_time/#note-the-utility-of-the-possibility-of-changing-this-variable-assigning-a-new-value-to-it-is-to-avoid-this-error-in-the-programs-in-which-there-is-a-process-that-must-be-doing-calculations-for-a-long-time", 
            "text": "The following statement must be used to order the process' manager, for instance, not to interrupt a process, unless its execution in a frame is longer that 30 seconds:  max_process_time=3000;  As 30 seconds are 3000 hundredths of second.", 
            "title": "Note The utility of the possibility of changing this variable, assigning a new value to it, is to avoid this error in the programs in which there is a process that must be doing calculations for a long time."
        }, 
        {
            "location": "/global_max_process_time/#important-keep-in-mind-that-the-time-used-by-every-computer-to-do-the-programs-calculations-is-different-therefore-this-value-must-be-defined-with-a-certain-margin-in-order-to-avoid-to-exceed-the-maximum-execution-time", 
            "text": "when the game is executed in slower computers.   See:  Global data  -  FRAME statement", 
            "title": "Important Keep in mind that the time used by every computer to do the program's calculations is different. Therefore, this value must be defined with a certain margin, in order to avoid to exceed  the maximum execution time"
        }, 
        {
            "location": "/local_struct_reserved/", 
            "text": "STRUCT reserved;\n\n\n**process_id;**    // Identifier of the process\n\n**id_scan;**       // Index of processes\n\n**process_type;**  // Type of process\n\n**type_scan;**     // Index of types\n\n**status;**        // State of the process\n\n**param_offset;**  // Offset of the parameters\n\n**program_index;** // Program counter\n\n**is_executed;**   // executed process\n\n**is_painted;**    // painted process\n\n**distance_1;**    // Mode 7 reserved\n\n**distance_2;**    // Mode 7 reserved\n\n**frame_percent;** // Percentage of frame\n\n**box_x0, box_y0;** // Beginning of the process' graphic\n\n**box_x1, box_y1;** // End of the process' graphic\n\n**m8_object;**      // Object inside the world m8\n\n**old_ctype;**      // Old Ctype\n\n**f_count;**        // Accumulating function counter\n\n**caller_id;**      // Process or function caller\n\n**stack_pointer;**  // Stack pointer for the process\n\n\n\nEND\n\n\nIn this structure, different \nvariables of internal use\n (used by the \nmanager of processes of DIV Games Studio\n) are stored.\n\n\nThey are local variables reserved for the system. It is not necessary to know these variables, as most of them are not useful to create programs.\n\n\nImportant The modification of the values of these variables will probably provoke \ncrashing\n the computer, an incorrect working of the \nmanager of processes\n or problems on using many of the internal functions. Therefore, no responsibility is assumed for the problems derived from an incorrect use of the \nreserved\n structure.\n\n\n\n\nA \nbrief description\n of each of these fields is now shown, just for information.\n\n\nprocess_id\n - \nIdentifying code\n of the process. This value is normally obtained with the reserved word \nID\n and the value of this field must not be modified.\n\n\nid_scan\n - It is internally used for detecting collisions in order to save the \nidentifying code\n of the last process that has collided with the current process.\n\n\nprocess_type\n - Type of the current process, normally obtained with the operator \nTYPE\n, later indicating  the process name (see \nTypes of processes\n).\n\n\ntype_scan\n - It is internally used to detect collisions or obtain identifying codes of processes of a specific type.\n\n\nstatus\n - Present state of the process. The values that this field can adopt are the following ones:\n\n\n0\n - non-existent process.\n\n\n1\n - process that has received a signal \ns_kill\n.\n\n\n2\n - alive or awake process (s_wakeup).\n\n\n3\n - asleep process (s_sleep).\n\n\n4\n - frozen process (s_freeze).\n\n\nparam_offset\n - Offset of the computer's memory in which the parameters received by the process are located.\n\n\nprogram_index\n - Program's counter. Offset of the computer's memory in which the first statement that must execute the process in the next frame is located.\n\n\nis_executed\n - It indicates whether this process has already been executed in the current frame.\n\n\nis_painted\n - It indicates whether the graphic of the process has already been painted in the current frame of the game.\n\n\ndistance_1\n - Vertical distance of the process (reserved for processes displayed in a mode 7 window).\n\n\ndistance_2\n - Horizontal distance of the process (reserved for processes displayed in a mode 7 window).\n\n\nframe_percent\n - Percentage of the following frame completed by the process. This value will be useful when the \nFRAME\n statement is used indicating a percentage. Otherwise, it will simply be equal to 0 (0%) when the process has not been executed and 100 (100%) when it has already been executed.\n\n\nbox_x0, box_y0\n - Upper left coordinate of the graphic in the previous frame of the game (where the graphic was placed at screen coordinates).\n\n\nbox_x1, box_y1\n - Lower right coordinate of the graphic in the previous frame of the game.\n\n\nm8_object\n - number of object inside the mode 8, indicates an ordinal\nrelative to the map of sectors.\n\n\nold_ctype\n - old value of the local variable ctype, is used to\ncontrol changes in the coordinates of the process.\n\n\nf_count\n - accumulation counter of the function, to control the number\nof returns and level the battery for each process.\n\n\ncaller_id\n - identification code of the process or function which invoked\nthis.\n\n\nstack_pointer\n  - pointer of local stack of each process, maintains\nthe direction of the stack at the start of the process, with the stacked parameters\n\n\n\n\nSee: \nLocal data\n - \nSyntax", 
            "title": "LOCAL STRUCT reserved"
        }, 
        {
            "location": "/local_struct_reserved/#important-the-modification-of-the-values-of-these-variables-will-probably-provoke-crashing-the-computer-an-incorrect-working-of-the-manager-of-processes-or-problems-on-using-many-of-the-internal-functions-therefore-no-responsibility-is-assumed-for-the-problems-derived-from-an-incorrect-use-of-the-reserved-structure", 
            "text": "A  brief description  of each of these fields is now shown, just for information.  process_id  -  Identifying code  of the process. This value is normally obtained with the reserved word  ID  and the value of this field must not be modified.  id_scan  - It is internally used for detecting collisions in order to save the  identifying code  of the last process that has collided with the current process.  process_type  - Type of the current process, normally obtained with the operator  TYPE , later indicating  the process name (see  Types of processes ).  type_scan  - It is internally used to detect collisions or obtain identifying codes of processes of a specific type.  status  - Present state of the process. The values that this field can adopt are the following ones:  0  - non-existent process.  1  - process that has received a signal  s_kill .  2  - alive or awake process (s_wakeup).  3  - asleep process (s_sleep).  4  - frozen process (s_freeze).  param_offset  - Offset of the computer's memory in which the parameters received by the process are located.  program_index  - Program's counter. Offset of the computer's memory in which the first statement that must execute the process in the next frame is located.  is_executed  - It indicates whether this process has already been executed in the current frame.  is_painted  - It indicates whether the graphic of the process has already been painted in the current frame of the game.  distance_1  - Vertical distance of the process (reserved for processes displayed in a mode 7 window).  distance_2  - Horizontal distance of the process (reserved for processes displayed in a mode 7 window).  frame_percent  - Percentage of the following frame completed by the process. This value will be useful when the  FRAME  statement is used indicating a percentage. Otherwise, it will simply be equal to 0 (0%) when the process has not been executed and 100 (100%) when it has already been executed.  box_x0, box_y0  - Upper left coordinate of the graphic in the previous frame of the game (where the graphic was placed at screen coordinates).  box_x1, box_y1  - Lower right coordinate of the graphic in the previous frame of the game.  m8_object  - number of object inside the mode 8, indicates an ordinal\nrelative to the map of sectors.  old_ctype  - old value of the local variable ctype, is used to\ncontrol changes in the coordinates of the process.  f_count  - accumulation counter of the function, to control the number\nof returns and level the battery for each process.  caller_id  - identification code of the process or function which invoked\nthis.  stack_pointer   - pointer of local stack of each process, maintains\nthe direction of the stack at the start of the process, with the stacked parameters   See:  Local data  -  Syntax", 
            "title": "Important The modification of the values of these variables will probably provoke crashing the computer, an incorrect working of the manager of processes or problems on using many of the internal functions. Therefore, no responsibility is assumed for the problems derived from an incorrect use of the reserved structure."
        }, 
        {
            "location": "/local_father/", 
            "text": "father;\n // \nIdentifying code\n of the father---------------------------------------\n process.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nfather\n variable.\n\n\nThis variable always contains the \nidentifying code\n of the process that created (called) the current process (the one that has this variable).\n\n\nInside the language, father process is the name given to the process that calls another one. The process that has been called receives the name of son process. For further information, see the \nhierarchies of processes\n in the language.\n\n\nThe DIV's \nmanager of processes\n is the process named \ndiv_main\n. Its function is to create the main process of the program (\nPROGRAM\n) at the beginning of the game's execution. Therefore, it will be the father of the main program, as well as the father of all the processes that become orphan (processes whose father has been killed or finished before them, see \nstates of a process\n).\n\n\n\n\nNote The \nidentifying code\n of the son process is indicated in the\n\n\npredefined \nson\n local variable.\n\n\n\n\nSee: \nLocal data\n - \nIdentifying code\n - \nHierarchies of processes", 
            "title": "LOCAL father"
        }, 
        {
            "location": "/local_father/#note-the-identifying-code-of-the-son-process-is-indicated-in-the", 
            "text": "predefined  son  local variable.   See:  Local data  -  Identifying code  -  Hierarchies of processes", 
            "title": "Note The identifying code of the son process is indicated in the"
        }, 
        {
            "location": "/local_son/", 
            "text": "son=0;\n // \nIdentifying code\n of the son---------------------------------------\n process.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nson\n variable.\n\n\nThis variable always contains the \nidentifying code\n of the \nlast\n process  created (called) by the current process. \n\n\nInside the language, father process is the name given to the process that calls another one. On the other hand, son process is the name given to the process that has been called. For further information, see the \nhierarchies of processes\n in the language.\n\n\nBy default, this variable will be equal to \n0\n until the process makes a call to another process. At this moment, the new process will be created indicating its \nidentifying code\n in \nson\n.\n\n\n\n\nNote The \nidentifying code\n of the father process is indicated in the predefined \nfather\n local variable.\n\n\n\n\nSee: \nLocal data\n - \nIdentifying code\n - \nHierarchies of processes", 
            "title": "LOCAL son"
        }, 
        {
            "location": "/local_son/#note-the-identifying-code-of-the-father-process-is-indicated-in-the-predefined-father-local-variable", 
            "text": "See:  Local data  -  Identifying code  -  Hierarchies of processes", 
            "title": "Note The identifying code of the father process is indicated in the predefined father local variable."
        }, 
        {
            "location": "/local_smallbro/", 
            "text": "smallbro=0;\n // \nIdentifying code\n of the younger brother---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nsmallbro\n variable.\n\n\nThis variable always contains the \nidentifying code\n of the \nfollowing\n process  created by the father of the current process after it.\n\n\nInside the language, \nyounger brother\n is the name given to this process. For further information, see the \nhierarchies of processes\n in the language.\n\n\nBy default, this variable will be equal to \n0\n until the father process makes a call to another process. At this moment, the new process (the younger brother of this one) will be created, indicating its \nidentifying code\n in \nsmallbro\n.\n\n\n\n\nNote The \nidentifying code\n of the \nelder brother\n is indicated\n\n\nin the predefined \nbigbro\n local variable.\n\n\n\n\nSee: \nLocal data\n - \nIdentifying code\n - \nHierarchies of processes", 
            "title": "LOCAL smallbro"
        }, 
        {
            "location": "/local_smallbro/#note-the-identifying-code-of-the-elder-brother-is-indicated", 
            "text": "in the predefined  bigbro  local variable.   See:  Local data  -  Identifying code  -  Hierarchies of processes", 
            "title": "Note The identifying code of the elder brother is indicated"
        }, 
        {
            "location": "/local_bigbro/", 
            "text": "bigbro=0;\n // \nIdentifying code\n of the elder brother---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nbigbro\n variable.\n\n\nThis variable always contains the \nidentifying code\n of the process  created by the father just before creating the current process after it. \n\n\nInside the language, \nelder brother\n is the name given to this process. \nFor further information, see the \nhierarchies of processes\n in the language.\n\n\nBy default, this variable will be equal to \n0\n if the father process (the one that called the current one) has not created any other process before. If it has created one, or more than one, \nbigbro\n will indicate the \nidentifying code\n of the last one.\n\n\n\n\nNote The \nidentifying code\n of the \nyounger brother\n is indicated\n\n\nin the predefined \nsmallbro\n local variable.\n\n\n\n\nSee: \nLocal data\n - \nIdentifying code\n - \nHierarchies of processes", 
            "title": "LOCAL bigbro"
        }, 
        {
            "location": "/local_bigbro/#note-the-identifying-code-of-the-younger-brother-is-indicated", 
            "text": "in the predefined  smallbro  local variable.   See:  Local data  -  Identifying code  -  Hierarchies of processes", 
            "title": "Note The identifying code of the younger brother is indicated"
        }, 
        {
            "location": "/local_priority/", 
            "text": "priority=0;\n // Level of priority of the process---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \npriority\n variable.\n\n\nIn the preparation of each frame, all the processes will be executed in\nthe priority order established by the \npriority\n local variable.\n\n\nThe higher the value of \npriority\n in a process is, the sooner it will be processed in each frame. The priority value may be established as any integer within the (\nmin_int\n ... \nmax_int\n) range. For instance, to establish the priority level of a process at \n10\n, the following statement must be used:\n\n\npriority=10;\n\n\nAll the processes active in the program having \nthe same level of priority\n will be executed in a \nundetermined order\n that, moreover, may vary from some executions of the game to others.\n\n\nBy default, the \npriority\n local variable will be initialised at \n0\n\nin all the processes created in the program. Thus, it will be possible to execute them in any order, if the value of this variable is not defined.\n\n\nIf the \npriority\n of a single process is fixed at a positive number, such as 1, it will be executed before the rest of the of the processes. On the other hand, if it is fixed at a negative number, such as -1, then it will be executed after the rest (supposing that the \npriority\n variable of the rest has not been modified, so its value is still equal to \n0\n).\n\n\nWhen the processes priority must be established?\n---------------------------------------\n\n\nWhen a process needs to use data of another process for its calculations, it is normally advisable to execute it after the latter, defining its lowest priority for the data of the second process to be updated when they are read.\n\n\nFor instance, if process \nB\n must place its graphic 8 pixels lower than the graphic of process \nA\n, the priority of \nA\n must be greater than that of \nB\n, for the latter to be executed first.\n\n\nThus, when process \nB\n obtains its \ny\n coordinate by adding 8 to the one of process \nA\n, this calculation is done with the \ny\n coordinate of process \nA\n\nalready updated for the following frame (to ensure that in each frame, the \ny\n coordinate of process \nA\n first, and then that of process \nB\n will be established).\n\n\nFor that purpose, suffice would be to define either the priority of \nA\n as \n1\n or the priority of \nB\n as\n -1\n, since by default both priorities are at \n0\n.\n\n\n\n\nNote The priority level of the process has nothing to do with the depth plane in which its graphic appears on screen, as this plane is indicated in the \nlocal z\n variable.\n\n\n\n\nSee: \nLocal data", 
            "title": "LOCAL priority"
        }, 
        {
            "location": "/local_priority/#note-the-priority-level-of-the-process-has-nothing-to-do-with-the-depth-plane-in-which-its-graphic-appears-on-screen-as-this-plane-is-indicated-in-the-local-z-variable", 
            "text": "See:  Local data", 
            "title": "Note The priority level of the process has nothing to do with the depth plane in which its graphic appears on screen, as this plane is indicated in the local z variable."
        }, 
        {
            "location": "/local_ctype/", 
            "text": "ctype=c_screen;\n // System of coordinates---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its  \nctype\n variable.\n\n\nThe \nsystem of coordinates\n used by the process is indicated in this variable. \n\n\nIt is possible to use three different systems of coordinates, directly corresponding with three constants that can be assigned to the \nctype\n variable.\n\n\nc_screen\n - Screen coordinates\n\n\nc_scroll\n - Scroll coordinates\n\n\nc_m7\n     - Mode 7 coordinates\n\n\nc_m8\n     - Mode 8 coordinates\n\n\nBy default, the ctype value is\n \nc_screen\n, used for the process' graphic coordinates to be interpreted as referred to the screen, where the upper left corner is (0, 0).\n\n\nWith the following statement, \nc_scroll\n will be assigned to \nctype\n:\n\n\nctype=c_scroll;\n\n\nFor the process' graphic coordinates to be interpreted as referred to a scroll window, with coordinates located above the foreground's graphic.\n\n\nWith the following statement, \nc_m7\n will be assigned to \nctype\n:\n\n\nctype=c_m7;\n\n\nFor the process graphic coordinates to be interpreted as referred to a mode 7 window, with coordinates located above the main graphic, three-dimensionally folded in that window.\n\n\nc_m8\n will be assigned to \nctype\n with the following statement:\n\n\nctype=c_m8;\n\n\nFor the coordinates of the process graphic to be interpreted as referred \na mode 8 window, with coordinates located above the main graphic, three-dimensionally \nfolded in that window.\n\n\n\n\nNote There is another local variable that also affects the way in which the process coordinates must be interpreted, This variable is \nresolution\n, which establishes the resolution (scale) in which the coordinates are defined.\n\n\n\n\nSee: \nLocal data\n - \nc_screen\n - \nc_scroll\n - \nc_m7\n - \nc_m8", 
            "title": "LOCAL ctype"
        }, 
        {
            "location": "/local_ctype/#note-there-is-another-local-variable-that-also-affects-the-way-in-which-the-process-coordinates-must-be-interpreted-this-variable-is-resolution-which-establishes-the-resolution-scale-in-which-the-coordinates-are-defined", 
            "text": "See:  Local data  -  c_screen  -  c_scroll  -  c_m7  -  c_m8", 
            "title": "Note There is another local variable that also affects the way in which the process coordinates must be interpreted, This variable is resolution, which establishes the resolution (scale) in which the coordinates are defined."
        }, 
        {
            "location": "/local_x/", 
            "text": "x=0;\n // Horizontal coordinate of the graphic---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nx\n variable.\n\n\nThe \nx\n and \ny\n local variables of the processes define where their graphic (defined in the \ngraph\n local variable) must be placed.\n\n\nThe \nx\n local variable defines the process' \nhorizontal coordinate\n,\nwhich may be defined as an integer within the range (\nmin_int\n ...\n\nmax_int\n), putting the positive coordinates to the right and the negative ones, to the left.\n\n\nBy default, these coordinates will be specified in \npixels\n,\nreferred to screen coordinates, where the upper left corner is the point placed at (\n0\n, \n0\n).\n\n\nType of coordinates.\n---------------------------------------\n\n\nThere are several systems of coordinates that may be used by the processes and that are defined with the \nctype\n local variable. The coordinates related to the screen are the system by default.\n\n\nResolution of the coordinates.\n---------------------------------------\n\n\nThe \nresolution\n local variable indicates the precision of the process coordinates. By default, this variable will be equal to \n0\n and the (\nx\n, \ny\n) coordinates will be specified in pixels.\n\n\nThe higher the value of \nresolution\n is, the smaller (and more precise) the drive in which the coordinates are interpreted will be. Some examples are now shown:\n\n\nresolution=1;\n - The coordinates are specified in pixels.\n\n\nresolution=10;\n - They are specified in tenths of pixels.\n\n\nresolution=100;\n - They are specified in hundredths of pixels.\n\n\nresolution=2;\n - They are specified in half pixel.\n\n\n...\n\n\n\n\nNote A different type and resolution of coordinates may be either defined for each\n\n\nprocess or changed while executing if necessary.\n\n\n\n\nImportant When a graphic is placed at some specific coordinates, it is the graphic \ncentre\n that will normally be placed at these coordinates.\n\n\nThis can be changed by defining in the \ngraphic editor\n the \ncontrol point\n number \n0\n of the graphic of the process (whose \ngraphic code\n is indicated in the \ngraph\n variable).\n\n\nIf the control point has been defined, it will be placed at the specified coordinates.\n\n\nFor instance, if control point number \n0\n is placed in the upper left corner of the graphic, and then, the graphic is put at the (100, 100) coordinates, the upper left corner of the graphic will be placed at these coordinates.\n\n\n\n\nSee: \nLocal data\n - \nctype\n - \nresolution", 
            "title": "LOCAL x"
        }, 
        {
            "location": "/local_x/#note-a-different-type-and-resolution-of-coordinates-may-be-either-defined-for-each", 
            "text": "process or changed while executing if necessary.", 
            "title": "Note A different type and resolution of coordinates may be either defined for each"
        }, 
        {
            "location": "/local_x/#important-when-a-graphic-is-placed-at-some-specific-coordinates-it-is-the-graphic-centre-that-will-normally-be-placed-at-these-coordinates", 
            "text": "This can be changed by defining in the  graphic editor  the  control point  number  0  of the graphic of the process (whose  graphic code  is indicated in the  graph  variable).  If the control point has been defined, it will be placed at the specified coordinates.  For instance, if control point number  0  is placed in the upper left corner of the graphic, and then, the graphic is put at the (100, 100) coordinates, the upper left corner of the graphic will be placed at these coordinates.   See:  Local data  -  ctype  -  resolution", 
            "title": "Important When a graphic is placed at some specific coordinates, it is the graphic centre that will normally be placed at these coordinates."
        }, 
        {
            "location": "/local_y/", 
            "text": "y=0;\n // Vertical coordinate of the graphic---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \ny\n variable.\n\n\nThe \nx\n and \ny\n local variables of the processes define where their graphic (defined in the \ngraph\n local variable) must be placed.\n\n\nThe \ny\n local variable defines the process' \nvertical coordinate\n,\nwhich may be defined as an integer within the range (\nmin_int\n ...\n\nmax_int\n), placing the positive coordinates downwards and the negative ones, upwards.\n\n\nBy default, these coordinates will be specified in \npixels\n,\nreferred to screen coordinates, where the upper left corner is the point placed at (\n0\n, \n0\n).\n\n\nType of coordinates.\n---------------------------------------\n\n\nThere are several systems of coordinates that may be used by the processes and that are defined with the \nctype\n local variable. The system by default defines the coordinates related to the screen.\n\n\nResolution of the coordinates.\n---------------------------------------\n\n\nThe \nresolution\n local variable indicates the precision of the process coordinates. By default, this variable will be equal to \n0\n and the (\nx\n,\ny\n) coordinates will be specified in pixels.\n\n\nThe higher the value of \nresolution\n is, the smaller (and more precise) the drive in which the coordinates are interpreted will be. Some examples are now shown:\n\n\nresolution=1;\n - The coordinates are specified in pixels.\n\n\nresolution=10;\n - They are specified in tenths of pixels.\n\n\nresolution=100;\n - They are specified in hundredths of pixels.\n\n\nresolution=2;\n - They are specified in half pixels.\n\n\n...\n\n\n\n\nNote A different type and resolution of coordinates may be either defined for each process or changed while executing if necessary.\n\n\n\n\nImportant When a graphic is placed at some specific coordinates, it is the graphic \ncentre\n that will normally be placed at these coordinates.\n\n\nThis can be changed by defining in the \ngraphic editor\n the \ncontrol point\n number \n0\n of the graphic of the process (whose \ngraphic code\n is indicated in the \ngraph\n variable).\n\n\nIf the control point has been defined, it will be placed at the specified coordinates.\n\n\nFor instance, if control point number \n0\n is placed in the upper left corner of the graphic, and then, the graphic is put at the (100, 100) coordinates, the upper left corner of the graphic will be placed at these coordinates.\n\n\n\n\nSee: \nLocal data\n - \nctype\n - \nresolution", 
            "title": "LOCAL y"
        }, 
        {
            "location": "/local_y/#note-a-different-type-and-resolution-of-coordinates-may-be-either-defined-for-each-process-or-changed-while-executing-if-necessary", 
            "text": "", 
            "title": "Note A different type and resolution of coordinates may be either defined for each process or changed while executing if necessary."
        }, 
        {
            "location": "/local_y/#important-when-a-graphic-is-placed-at-some-specific-coordinates-it-is-the-graphic-centre-that-will-normally-be-placed-at-these-coordinates", 
            "text": "This can be changed by defining in the  graphic editor  the  control point  number  0  of the graphic of the process (whose  graphic code  is indicated in the  graph  variable).  If the control point has been defined, it will be placed at the specified coordinates.  For instance, if control point number  0  is placed in the upper left corner of the graphic, and then, the graphic is put at the (100, 100) coordinates, the upper left corner of the graphic will be placed at these coordinates.   See:  Local data  -  ctype  -  resolution", 
            "title": "Important When a graphic is placed at some specific coordinates, it is the graphic centre that will normally be placed at these coordinates."
        }, 
        {
            "location": "/local_z/", 
            "text": "z=0;\n // Depth plane of the process graphic---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nz\n variable.\n\n\nThe \nz\n local variable defines the depth plane in which the process graphic must be placed on screen (the graphic is defined in the \ngraph\n local variable). \n\n\nAny integer within the range (\nmin_int\n ... \nmax_int\n) may be used as a depth plane. The greater the number is, the deeper the graphic will be placed.\n\n\n\n\nBy default, the depth planes are arranged in the following way:\n\n\n (+) Greater depth\n\n\n +512\n - Scroll windows (see \nscroll[].z\n)\n\n\n +256\n - Mode 7 windows (see \nm7[].z\n)\n\n\n  0\n   - Graphics of the processes (local \nz\n)\n\n\n -256\n - Texts (see \ntext_z\n)\n\n\n -512\n - Mouse pointer (see \nmouse.z\n)\n\n\n (-) Less depth\n\n\nThe \nz\n local variable that defines the depth plane of the processes' graphics will be initialised at \n0\n. The processes' graphics will be placed below the mouse pointer and texts, and above the scroll and mode 7 windows (if the values are not modified by default).\n\n\n\n\nAll the objects (texts, graphics, windows, ...) placed in the same depth plane will appear on screen (on being superimposed) in an \nundetermined order\n, that may vary from some program's executions to some others.\n\n\nIf the aim was, for instance, that the graphic of a process appeared above all the objects of the program, a depth plane could be fixed for it above the rest (as -1000}, with the following statement:\n\n\nz=-1000;\n\n\nAt the beginning, all the processes have their \nz\n variable at \n0\n,\nthen the graphic of the processes will appear in any order if the plane in which \neach of them must be placed is not defined.\n\n\nThe depth plane of a process may be modified (by assigning a new value to its \nz\n \nvariable) as often as necessary inside a program.\n\n\nThe depth planes of the rest of the objects (windows, texts\nand mouse pointer) may also be modified at any stage of the program.\n\n\n\n\nNote 1 The processes that belong to a \nscroll window\n (having its variable \nctype\n=\nc_scroll\n) will be painted in the \ndepth plane of the scroll window\n. Nevertheless, inside that window, all the graphics of the processes will appear \nin order, according to their depth plane\n.\n\n\nThe process' depth plane (indicated as usual in the \nz\n variable) will be \nreferred to the scroll window\n\nin which the process appears (see \nstart_scroll()\n).\n\n\n\n\nNote 2 The processes that belong to a \nmode 7 window\n (having its variable \nctype\n=\nc_m7\n) will appear in that window \nin order, according to the depth order in the three-dimensional plane\n ignoring the value of their \nz\n local variable.\n\n\nThe only sense of the \nz\n local variable in \nmode 7\n processes is to define the order in which the processes \nexactly\n placed at the same coordinates of the folded plane must be superposed. If two processes are placed in the three-dimensional plane at the same coordinates, then it will be possible to define, through the \nz\n variable, which one must appear above the other (see \nstart_mode7()\n).\n\n\n\n\nSee: \nLocal data\n - \nmouse.z\n - \nscroll[].z\n - \nm7[].z\n - \ntext_z", 
            "title": "LOCAL z"
        }, 
        {
            "location": "/local_z/#note-1-the-processes-that-belong-to-a-scroll-window-having-its-variable-ctypec_scroll-will-be-painted-in-the-depth-plane-of-the-scroll-window-nevertheless-inside-that-window-all-the-graphics-of-the-processes-will-appear-in-order-according-to-their-depth-plane", 
            "text": "The process' depth plane (indicated as usual in the  z  variable) will be  referred to the scroll window \nin which the process appears (see  start_scroll() ).", 
            "title": "Note 1 The processes that belong to a scroll window (having its variable ctype=c_scroll) will be painted in the depth plane of the scroll window. Nevertheless, inside that window, all the graphics of the processes will appear in order, according to their depth plane."
        }, 
        {
            "location": "/local_z/#note-2-the-processes-that-belong-to-a-mode-7-window-having-its-variable-ctypec_m7-will-appear-in-that-window-in-order-according-to-the-depth-order-in-the-three-dimensional-plane-ignoring-the-value-of-their-z-local-variable", 
            "text": "The only sense of the  z  local variable in  mode 7  processes is to define the order in which the processes  exactly  placed at the same coordinates of the folded plane must be superposed. If two processes are placed in the three-dimensional plane at the same coordinates, then it will be possible to define, through the  z  variable, which one must appear above the other (see  start_mode7() ).   See:  Local data  -  mouse.z  -  scroll[].z  -  m7[].z  -  text_z", 
            "title": "Note 2 The processes that belong to a mode 7 window (having its variable ctype=c_m7) will appear in that window in order, according to the depth order in the three-dimensional plane ignoring the value of their z local variable."
        }, 
        {
            "location": "/local_graph/", 
            "text": "graph=0;\n // Code of the process graphic---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process \nwill have its own value in its \ngraph\n variable.\n\n\nNormally, most of the processes correspond with a graphic object\ndisplayed on screen that will be placed at the indicated coordinates\nin the \nx\n and \ny\n local variables. It is necessary to define which graphic corresponds with this process by assigning a \ngraphic code\n to the \ngraph\n local variable.\n\n\nBy default, this variable will be equal to \n0\n, which implies that no graphic will be displayed for this process.\n\n\nThe graphics must first be created in the \ngraphic editor\n of DIV\nGames Studio (with the option \nNew...\n of the maps menu) and then, they can be \nsaved in an \nfile MAP\n (containing this graphic),\nor in a \nfile FPG\n together with other graphics (it is possible to create a new \nfile with the option \nNew...\n of the files menu).\n\n\nThe graphics used in a program may come from an \nfile MAP\n (that contain just one graphic) or from a \nfile FPG\n(that may contain many graphics).\n\n\nNote The same graphic may be used in a program by many processes at the same time.\n\n\nfiles MAP or PCX\n---------------------------------------\n\n\nIn order to use a graphic from an \nfile MAP\n in the program, it must be loaded by calling the \nload_map()\n  or \nload_pcx()\n function, which will return the \ngraphic code\n that must be assigned to the \ngraph\n variable.\n\n\nA \nGLOBAL\n variable is normally used to save this \ngraphic code\n and then, it is assigned to the \ngraph\n variable.\n\n\nExample program:}\n\n\nPROGRAM example_graph;\n\n\nGLOBAL\n    graphic1;\n\n\nBEGIN\n    graphic1=load_map(\nhelp/help.map\n);\n\n\ngraph=graphic1; // The graphic of the process is defined.\n\nLOOP\n    x=mouse.x;\n    y=mouse.y;\n    FRAME;\nEND\n\n\n\nEND\n\n-\n\n\nEven if in the previous example, the \ngraphic1\n global variable could have been omitted, having directly assigned the code returned by the \nload_map()\n function to the \ngraph\n variable with the following statement:\n\n\ngraph=load_map(\nhelp/help.map\n);\n\n\nthe \ngraphic code\n returned by this function are simply integers from \n1000\n.\n\n\nFiles FPG\n---------------------------------------\n\n\nIn order to include a graphic that has been done in the \ngraphic editor\n\nin a \nfile FPG\n, it is necessary to \ndrag the graphic window to the file window\n (click on the graphic, move to the file and release). Then, the program will ask for the \ngraphic code\n, so an integer ranging from \n1\n and \n999\n must be included here.\n\n\nThus, to use the graphic in a program, the \nfile FPG\n that contains it must first be loaded with the \nload_fpg()\n function, assigning then the \ngraphic code\n to the \ngraph\n variable.\n\n\nAn example is now shown. Before, it is necessary to know that a \nbrown ball\n graphic was stored in the \nfile HELP.FPG\n\nindicating the \ngraphic 100 code\n.\n\n\n{#9999,Example program\n\n\nPROGRAM example_graph;\nBEGIN\n    load_fpg(\nhelp/help.fpg\n);\n\n    graph=100; // The graphic of the process is defined.\n\n    LOOP\n        x=mouse.x;\n        y=mouse.y;\n        FRAME;\n    END\nEND\n\n\n\n\nSeveral files FPG\n can be loaded in a program. In this case, it will be necessary to indicate, besides the \ngraphic code\n in the \ngraph\n local variable, the \nfile code\n returned by the \nload_fpg()\n function in the \nfile\n local variable.\n\n\nIt won't be necessary if only one file is loaded, as the \nfile\n variable equals \n0\n by default in all the processes and \n0\n will always be the \nfirst file's code\n loaded in the program.\n\n\n\n\nThere are more local variables related to the graphic of a process. The most important ones are mentioned below:\n\n\ngraph\n  - Graphic code\n\n\nfile\n   - File code\n\n\nx\n, \ny\n   - Graphic coordinates\n\n\nz\n      - Depth plane\n\n\nangle\n  - graphic angle\n\n\nsize\n   - graphic size\n\n\nflags\n  - Mirrors and transparencies\n\n\nregion\n - Display window\n\n\n\n\nSee: \nLocal data", 
            "title": "LOCAL graph"
        }, 
        {
            "location": "/local_graph/#note-the-same-graphic-may-be-used-in-a-program-by-many-processes-at-the-same-time", 
            "text": "files MAP or PCX ---------------------------------------  In order to use a graphic from an  file MAP  in the program, it must be loaded by calling the  load_map()   or  load_pcx()  function, which will return the  graphic code  that must be assigned to the  graph  variable.  A  GLOBAL  variable is normally used to save this  graphic code  and then, it is assigned to the  graph  variable.", 
            "title": "Note The same graphic may be used in a program by many processes at the same time."
        }, 
        {
            "location": "/local_graph/#example-program", 
            "text": "PROGRAM example_graph;  GLOBAL\n    graphic1;  BEGIN\n    graphic1=load_map( help/help.map );  graph=graphic1; // The graphic of the process is defined.\n\nLOOP\n    x=mouse.x;\n    y=mouse.y;\n    FRAME;\nEND  END -  Even if in the previous example, the  graphic1  global variable could have been omitted, having directly assigned the code returned by the  load_map()  function to the  graph  variable with the following statement:  graph=load_map( help/help.map );  the  graphic code  returned by this function are simply integers from  1000 .  Files FPG ---------------------------------------  In order to include a graphic that has been done in the  graphic editor \nin a  file FPG , it is necessary to  drag the graphic window to the file window  (click on the graphic, move to the file and release). Then, the program will ask for the  graphic code , so an integer ranging from  1  and  999  must be included here.  Thus, to use the graphic in a program, the  file FPG  that contains it must first be loaded with the  load_fpg()  function, assigning then the  graphic code  to the  graph  variable.  An example is now shown. Before, it is necessary to know that a  brown ball  graphic was stored in the  file HELP.FPG \nindicating the  graphic 100 code .  {#9999,Example program  PROGRAM example_graph;\nBEGIN\n    load_fpg( help/help.fpg );\n\n    graph=100; // The graphic of the process is defined.\n\n    LOOP\n        x=mouse.x;\n        y=mouse.y;\n        FRAME;\n    END\nEND  Several files FPG  can be loaded in a program. In this case, it will be necessary to indicate, besides the  graphic code  in the  graph  local variable, the  file code  returned by the  load_fpg()  function in the  file  local variable.  It won't be necessary if only one file is loaded, as the  file  variable equals  0  by default in all the processes and  0  will always be the  first file's code  loaded in the program.   There are more local variables related to the graphic of a process. The most important ones are mentioned below:  graph   - Graphic code  file    - File code  x ,  y    - Graphic coordinates  z       - Depth plane  angle   - graphic angle  size    - graphic size  flags   - Mirrors and transparencies  region  - Display window   See:  Local data", 
            "title": "Example program:}"
        }, 
        {
            "location": "/local_flags/", 
            "text": "flags=0;\n // Indicator of mirrors and transparency---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that every process will have its own value in its \nflags\n variable.\n\n\nThe \nflags\n local variable indicates the mirrors and transparencies of the displayed graphic in the processes. The possible values are the following ones:\n\n\n0\n-Normal graphic.\n\n\n1\n-Horizontal mirror.\n\n\n2\n-Vertical mirror.\n\n\n3\n-Horizontal and vertical mirror (180\n).\n\n\n4\n-Transparent graphic.\n\n\n5\n-Transparent and horizontal mirror.\n\n\n6\n-Transparent and vertical mirror.\n\n\n7\n-Transparent, horizontal and vertical mirror.\n\n\nBy default, the value of the \nflags\n variable is \n0\n. If it is not modified, the graphic will be displayed opaque (not transparent or mirror).\n\n\nThe terms \nmirror\n and \ntransparency\n are now defined:\n\n\n\n\n\n\nHorizontal mirror\n, the graphic will be horizontally flipped. If it was facing left, it will face now right and vice versa.\n\n\n\n\n\n\nVertical mirror\n, the graphic will be vertically flipped. If it was facing up, it will face now down and vice versa.\n\n\n\n\n\n\nTransparency\n (or \nghost-layering\n), the graphic will be displayed semi-transparent. It will be possible to see what is placed behind the graphic, as if it was a coloured window, unlike the opaque graphics normally displayed.\n\n\n\n\n\n\nFor instance, the following statement must be used to display a transparent graphic of a process:\n\n\nflags=4;\n\n\n\n\nNote The graphic of a process must be indicated assigning a \ngraphic code\n to the \ngraph\n local variable.\n\n\n\n\nSee: \nLocal data", 
            "title": "LOCAL flags"
        }, 
        {
            "location": "/local_flags/#note-the-graphic-of-a-process-must-be-indicated-assigning-a-graphic-code-to-the-graph-local-variable", 
            "text": "See:  Local data", 
            "title": "Note The graphic of a process must be indicated assigning a graphic code to the graph local variable."
        }, 
        {
            "location": "/local_size/", 
            "text": "size=100;\n // Size (percentage) of the graphic---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nsize\n variable.\n\n\nThe \nsize\n local variable defines the size in which the graphic of the process must be seen. This size is a percentage related to its original size.\n\n\nBy default, the value of this variable will be equal to \n100\n (100%) for all the processes, and when the graphic is modified, it will \nscale\n (reducing or expanding its size) to adjust to the new size.\n\n\nTo \ndouble\n the size of the graphic displayed, it will be necessary to specify \n200%\n. The following statement will be used for this purpose:\n\n\nsize=200;\n\n\nTherefore, if this value is lesser than \n100\n, the graphic will be seen smaller; otherwise, it will be seen bigger.\n\n\nAt first, there is no limit for the graphic size, but if the \nsize\n local variable is put at \n0\n (0%), then the graphic of the process won't be seen.\n\n\n\n\nNote The graphic of a process must be indicated assigning \na graphic code\n to the \ngraph\n local variable.\n\n\n\n\nSee: \nLocal data", 
            "title": "LOCAL size"
        }, 
        {
            "location": "/local_size/#note-the-graphic-of-a-process-must-be-indicated-assigning-a-graphic-code-to-the-graph-local-variable", 
            "text": "See:  Local data", 
            "title": "Note The graphic of a process must be indicated assigning a graphic code to the graph local variable."
        }, 
        {
            "location": "/local_angle/", 
            "text": "angle=0;\n // angle of the process' graphic---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nangle\n variable.\n\n\nThe \nangle\n local variable defines the angle in which the graphic of the process must be seen, indicating an angle with regard to the original graphic in \ndegree thousandths\n (see \nUse of angles in the language\n).\n\n\nBy default, the value of this variable will be equal to \n0\n (0 degrees) for all the processes, but when the graphic is modified, it will \nrotate\n to adjust to the new angle.\n\n\nThe angle may be defined as any integer within the range (\nmin_int\n ... \nmax_int\n).\n\n\nSome examples of the angles that define certain values in the \nangle\n local variable are now shown (keep in mind that the angles are expressed in degree \nthousandths\n):\n\n\n  ...\n\n\n\n -180000\n - \nAngle\n to the left\n\n\n  -90000\n - \nAngle\n downwards\n\n\n  -45000\n - \nAngle\n of the diagonal down/right\n\n\n       0\n - \nAngle\n to the right\n\n\n  +45000\n - \nAngle\n of the diagonal right/up\n\n\n  +90000\n - \nAngle\n upwards\n\n\n +180000\n - \nAngle\n to the left\n\n\n +270000\n - \nAngle\n downwards\n\n\n  ...\n\n\n\nImportant When the aim is to rotate the graphic of a process,\n\n\nit is advisable to paint it orientated to the right\n, as it will be displayed like this by default (with the \nangle\n local variable equal to \n0\n).\n\n\nThus, when another angle is specified, the graphic will appear exactly orientated towards it.\n\n\nFor instance, a graphic that has been drawn to the right can be seen orientated upwards (to the angle of 90 degrees) by indicating the following statement:\n\n\nangle=90000;\n // 90 degree thousandths (90 degrees).\n\n\nIf a graphic was painted orientated towards another angle,\n(for instance, downwards), it would become orientated downwards by default,\n\nin the angle 0\n, which can provoke confusions when it comes to orientating the graphic towards another angle.\n\n\n\n\nTo make the graphic of a process advance its coordinates (\nx\n, \ny\n) towards its angle (the one specified \nangle\n in the local variable of the process) a specific distance, the \nadvance()\n function can be used.\n\n\n\n\nNote The graphic of a process must be indicated assigning a \ngraphic code\n to the \ngraph\n local variable.\n\n\n\n\nSee: \nLocal data\n - \nUse of angles in the language", 
            "title": "LOCAL angle"
        }, 
        {
            "location": "/local_angle/#important-when-the-aim-is-to-rotate-the-graphic-of-a-process", 
            "text": "it is advisable to paint it orientated to the right , as it will be displayed like this by default (with the  angle  local variable equal to  0 ).  Thus, when another angle is specified, the graphic will appear exactly orientated towards it.  For instance, a graphic that has been drawn to the right can be seen orientated upwards (to the angle of 90 degrees) by indicating the following statement:  angle=90000;  // 90 degree thousandths (90 degrees).  If a graphic was painted orientated towards another angle,\n(for instance, downwards), it would become orientated downwards by default, in the angle 0 , which can provoke confusions when it comes to orientating the graphic towards another angle.   To make the graphic of a process advance its coordinates ( x ,  y ) towards its angle (the one specified  angle  in the local variable of the process) a specific distance, the  advance()  function can be used.", 
            "title": "Important When the aim is to rotate the graphic of a process,"
        }, 
        {
            "location": "/local_angle/#note-the-graphic-of-a-process-must-be-indicated-assigning-a-graphic-code-to-the-graph-local-variable", 
            "text": "See:  Local data  -  Use of angles in the language", 
            "title": "Note The graphic of a process must be indicated assigning a graphic code to the graph local variable."
        }, 
        {
            "location": "/local_region/", 
            "text": "region=0;\n // Screen region assigned to the process---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have it own value in its \nregion\n variable.\n\n\nThe \nregion\n local variable defines the zone of the screen in which the graphic of the process must be visible, indicating the \nnumber of region\n.\n\n\nA region is a rectangular zone of the screen, such as a window,\nassociated to a number.\n\n\nBy default, this variable will be equal to \n0\n in all the processes, making reference to \nregion number 0\n that is the \nentire screen\n.\n\n\nBy default the graphics of the process will be visible\nin the whole screen (at any point of the screen in which they are placed).\n\n\nAt the beginning, only \nregion number 0\n is defined.\nTo define new screen regions, it is necessary to use the \ndefine_region()\n function.\n\n\n\n\nFor instance, for the graphic of a process  to be visible only inside a 100 by 100 pixel box placed in the upper left corner of the screen (at the coordinates 0, 0), first the new region should be defined in the following way, supposing that region number \n1\n is defined:\n\n\ndefine_region(1, 0, 0, 100, 100);\n\n\nand then, the number of region (\n1\n) should be assigned to the \nregion\n local variable of the process with the following statement:\n\n\nregion=1;\n\n\nThe regions may be redefined at any moment inside a program.\n\n\n\n\nNote The graphic of a process must be indicated assigning a \ngraphic code\n to the \ngraph\n local variable.\n\n\n\n\nSee: \nLocal data\n - \ndefine_region()", 
            "title": "LOCAL region"
        }, 
        {
            "location": "/local_region/#note-the-graphic-of-a-process-must-be-indicated-assigning-a-graphic-code-to-the-graph-local-variable", 
            "text": "See:  Local data  -  define_region()", 
            "title": "Note The graphic of a process must be indicated assigning a graphic code to the graph local variable."
        }, 
        {
            "location": "/local_file/", 
            "text": "file=0;\n // File code of the process' graphic---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that every process will have its own value in its \nfile\n variable.\n\n\nIn the case that several graphics files \nfiles FPG\n have been loaded in a program, the \nfile\n local variable indicates which file contains the graphic that the process is using.\n\n\nThe graphic of a process must be indicated by assigning a \ngraphic's code\n to the \ngraph\n local variable.\n\n\nIf just one file has been loaded in the program, it won't be necessary\nto assign any value to \nfile\n, as the \ncode of the first loaded file\n\nwill equal \n0\n and this is the value of the variable by default.\n\n\nIf the graphic has been loaded with the \nload_map()\n or \nload_pcx()\n function, it won't be necessary to assign any value to \nfile\n either, as the graphics loaded with this function are used as if they belonged to file number \n0\n\n(to the first one that is loaded in the program).\n\n\nWhen more than a file is loaded, it is necessary to indicate in each process\nin which one its graphic is stored. It is done by assigning\nthe \nfile code\n returned by the \nload_fpg()\n function\n(on loading this \nfile FPG\n) to the \nfile\n local variable.\n\n\nNote Normally, if several files are sequentially loaded in a program,\n\n\nthe first one will have the code \n0\n, the second, the code \n1\n, the third, the code \n2\n and so on.\n\n\n\n\nIn general, if several files are used, it is a good practice to have the same number of global variables (named, for instance, \nfile1\n, \nfile2\n, ...) containing the code of each of the files, to use them in the processes when it comes to defining\nits \nfile\n variable (the \nfile FPG\n that must be used).\n\n\nThe variables would be defined inside the section \nGLOBAL\n in the following way:\n\n\nGLOBAL\n\n\n  **file1;** // First file's code\n\n  **file2;** // Second file's code\n\n  ...\n\n\n\nNext, these variables would be assigned the \nfile codes\n\non loading them with the \nload_fpg()\n function in the following way (supposing that the names of the files is \nname1.fpg\n,\n\nname2.fpg\n, etc.):\n\n\nfile1=load_fpg(\nname1.fpg\n);\n // Files loading\n\n\nfile2=load_fpg(\nname2.fpg\n);\n\n\n...\n\n\nThese files are generally loaded at the beginning of the program. Later, the used file would only have to be defined inside each process with the following statement (supposing that the process uses graphics stored in the file \nname1.fpg\n):\n\n\nfile=file1;\n // The first file is used\n\n\n\n\nNote Keep in mind that defining the \nfile\n local variable is futile,\n\n\nunless a \ngraphic's code\n is assigned to the \ngraph\n local variable.\n\n\n\n\nSee: \nLocal data", 
            "title": "LOCAL file"
        }, 
        {
            "location": "/local_file/#note-normally-if-several-files-are-sequentially-loaded-in-a-program", 
            "text": "the first one will have the code  0 , the second, the code  1 , the third, the code  2  and so on.   In general, if several files are used, it is a good practice to have the same number of global variables (named, for instance,  file1 ,  file2 , ...) containing the code of each of the files, to use them in the processes when it comes to defining\nits  file  variable (the  file FPG  that must be used).  The variables would be defined inside the section  GLOBAL  in the following way:  GLOBAL    **file1;** // First file's code\n\n  **file2;** // Second file's code\n\n  ...  Next, these variables would be assigned the  file codes \non loading them with the  load_fpg()  function in the following way (supposing that the names of the files is  name1.fpg , name2.fpg , etc.):  file1=load_fpg( name1.fpg );  // Files loading  file2=load_fpg( name2.fpg );  ...  These files are generally loaded at the beginning of the program. Later, the used file would only have to be defined inside each process with the following statement (supposing that the process uses graphics stored in the file  name1.fpg ):  file=file1;  // The first file is used", 
            "title": "Note Normally, if several files are sequentially loaded in a program,"
        }, 
        {
            "location": "/local_file/#note-keep-in-mind-that-defining-the-file-local-variable-is-futile", 
            "text": "unless a  graphic's code  is assigned to the  graph  local variable.   See:  Local data", 
            "title": "Note Keep in mind that defining the file local variable is futile,"
        }, 
        {
            "location": "/local_xgraph/", 
            "text": "xgraph=0;\n // OFFSET of the process' graphic table---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nxgraph\n variable.\n\n\nThis is an advanced level variable. Thus, its use requires certain experience.\n\n\nThe \nxgraph\n local variable (\nextended graphic\n) allows us to use \nmultiple graphics\n. This variable is used to define the graphic of a process as a \ngraphics set\n among which it is necessary to see \nthe most appropriate with the process' angle\n (specified in the \nangle\n local variable).\n\n\nIf the \nxgraph\n variable is defined, the \ngraph\n local variable which normally defines the graphic of the process \nwill be ignored\n and one graphic or another will be used depending on the \nangle\n variable.\n\n\nTherefore, on changing the process' angle \nthe graphic of the process won't appear rotated\n, but it will use this angle to select the process' graphic (inside the defined set).\n\n\nBy default the \nxgraph\n variable will equal \n0\n in all the processes,\nwhich indicates that they are not going to use \nmultiple graphics\n.\n\n\n\n\nThe utility of the multiple graphics lies on the possibility of creating games in \nperspective\n, where the change of an angle in the process doesn't implied\na rotation of its graphic, but the replacement of the graphic by another one painted in a different \nperspective\n (painted with another angle inside that perspective).\n\n\nHow to use the multiple graphics.\n---------------------------------------\n\n\n1 - First, the different pictures that are going to represent the process' graphic have to be painted with different angles in perspective. The latter will be a finite number of graphic's views, such as \n4\n, \n8\n, \n12\n, etc., (or any other integer bigger than \n1\n).\n\n\nTake into account that if 4 views are defined, a different view will be defined every 90 degrees, if 8 views are defined, every 45 degrees, etc.\n\n\n2 - It is necessary to put these graphics in order according to their angles. First, the graphic corresponding with angle 0 (towards the right) and then, the rest in a clockwise direction.\n\n\n3 - A table, generally \nGLOBAL\n, must be created and initialised with the following values:\n\n\nNumber of graphic's views\n,\n\n\nGraphic's code for \nangle \n0 (first view)\n,\n\n\nCode of the following angle (second view)\n,\n\n\n...\n\n\nNote This table must contain simple data (of type \nINT\n, 32-bit whole numbers with sign).\n\n\nThe name given to this table makes no difference. For instance,\nif a multiple graphic is defined with 4 views, which must be the graphics with the codes 10, 11, 12, and 13, the definition of the table could be as follows:\n\n\nGLOBAL\n\n\n  **table_graphic1[]=4, 10, 11, 12, 13;**\n\n  ....\n\n\n\n4 - Finally, the offset of this table must be assigned inside the computer's memory to the \nxgraph\n local variable of the process, which is done with the following statement (inside the process in question):\n\n\nxgraph=OFFSET table_graphic1;\n\n\nThe \nOFFSET\n operator is used to obtain the offset of a program's variable in the memory.\n\n\n\n\nOnce the \nmultiple graphic\n has been defined, in each frame of the game the system will use the graphic corresponding with the angle \nclosest to the process' angle\n (the one indicated in its \nangle\n variable).\n\n\nThe \nxgraph\n variable must be put at \n0\n again in order to disable the \nmultiple graphic\n system in a process,\n\n\nImportant If any graphic's code is put with a \nnegative sign\n inside the table that defines the set of graphics, then this graphic will appear \nhorizontally flipped\n. If the graphic was facing right, it will appear facing left, and vice versa.\n\n\n\n\nNote The multiple graphic system is normally used in \nmode 7 windows\n, as in the folded three-dimensional plane the graphics must be seen in a different way, according to the angle from which they are observed.\n\n\nFor further information about this technique, see the \nstart_mode7()\n function used to activate a \nmode 7 window\n in the program.\n\n\n\n\nSee: \nLocal data", 
            "title": "LOCAL xgraph"
        }, 
        {
            "location": "/local_xgraph/#note-this-table-must-contain-simple-data-of-type-int-32-bit-whole-numbers-with-sign", 
            "text": "The name given to this table makes no difference. For instance,\nif a multiple graphic is defined with 4 views, which must be the graphics with the codes 10, 11, 12, and 13, the definition of the table could be as follows:  GLOBAL    **table_graphic1[]=4, 10, 11, 12, 13;**\n\n  ....  4 - Finally, the offset of this table must be assigned inside the computer's memory to the  xgraph  local variable of the process, which is done with the following statement (inside the process in question):  xgraph=OFFSET table_graphic1;  The  OFFSET  operator is used to obtain the offset of a program's variable in the memory.   Once the  multiple graphic  has been defined, in each frame of the game the system will use the graphic corresponding with the angle  closest to the process' angle  (the one indicated in its  angle  variable).  The  xgraph  variable must be put at  0  again in order to disable the  multiple graphic  system in a process,", 
            "title": "Note This table must contain simple data (of type INT, 32-bit whole numbers with sign)."
        }, 
        {
            "location": "/local_xgraph/#important-if-any-graphics-code-is-put-with-a-negative-sign-inside-the-table-that-defines-the-set-of-graphics-then-this-graphic-will-appear-horizontally-flipped-if-the-graphic-was-facing-right-it-will-appear-facing-left-and-vice-versa", 
            "text": "", 
            "title": "Important If any graphic's code is put with a negative sign inside the table that defines the set of graphics, then this graphic will appear horizontally flipped. If the graphic was facing right, it will appear facing left, and vice versa."
        }, 
        {
            "location": "/local_xgraph/#note-the-multiple-graphic-system-is-normally-used-in-mode-7-windows-as-in-the-folded-three-dimensional-plane-the-graphics-must-be-seen-in-a-different-way-according-to-the-angle-from-which-they-are-observed", 
            "text": "For further information about this technique, see the  start_mode7()  function used to activate a  mode 7 window  in the program.   See:  Local data", 
            "title": "Note The multiple graphic system is normally used in mode 7 windows, as in the folded three-dimensional plane the graphics must be seen in a different way, according to the angle from which they are observed."
        }, 
        {
            "location": "/local_height/", 
            "text": "height=0;\n // Graphic's height (in mode 7)---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nheight\n variable.\n\n\nThe local \nheight\n variable is \nexclusively\n used in the processes that belong to\n\nmode 7 windows\n. That is to say, processes that have their coordinates' system inside a three-dimensional window (its local variable \nctype\n=\nc_m7\n).\n\n\nIt is used to define the height at which the graphics of the processes must be placed above the three-dimensional plane. The \nlocal z\n variable is not used for this purpose, as it is used to define the depth plane of the graphics (even if it is now useful only for processes placed at the same coordinates).\n\n\nThe height of the process can be defined as any integer within the (\nmin_int\n ... \nmax_int\n) range, even if positive numbers are normally used, as the \nheight\n of the bottom is \n0\n and processes are placed above it.\n\n\nBy default, the value of the \nheight\n variable is \n0\n for all the processes, which means that if another value is not specified, the graphics of the processes will appear just above the bottom of the \nmode 7\n (above the plane three-dimensionally folded).\n\n\nThe \ngraphic's base\n will first be placed in the indicated \nheight\n of the process, unless \ncontrol point\n number \n0\n is defined. In this case, this point will be placed in that height.\n\n\nNote For further information about the \nmode 7 windows\n and how to place graphics inside these windows, see the help about the \nstart_mode7()\n function, which is used to activate them in the program.\n\n\n\n\nThis variable can be used for any other purpose in the non \nmode 7\n processes, as the system will completely ignore it.\n\n\n\n\nSee: \nLocal data\n - \nstart_mode7()", 
            "title": "LOCAL height"
        }, 
        {
            "location": "/local_height/#note-for-further-information-about-the-mode-7-windows-and-how-to-place-graphics-inside-these-windows-see-the-help-about-the-start_mode7-function-which-is-used-to-activate-them-in-the-program", 
            "text": "This variable can be used for any other purpose in the non  mode 7  processes, as the system will completely ignore it.   See:  Local data  -  start_mode7()", 
            "title": "Note For further information about the mode 7 windows and how to place graphics inside these windows, see the help about the start_mode7() function, which is used to activate them in the program."
        }, 
        {
            "location": "/local_cnumber/", 
            "text": "cnumber=0;\n // Number of scroll or mode 7 windows---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \ncnumber\n variable.\n\n\nThe local \ncnumber\n variable is \nexclusively\n used when, in a game, several \nscroll windows\n or several \nmode 7 windows\n simultaneously appear on screen.\n\n\n\n\n\n\nFor further information about the \nscroll windows\n, see the help about the \nstart_scroll()\n function, which is used to activate them in the program.\n\n\n\n\n\n\nFor further information about the \nmode 7 windows\n, see the help about the \nstart_mode7()\n function, which is used to activate them in the program.\n\n\n\n\n\n\n\n\nThe \ncnumber\n utility lies on indicating \nin which of these windows the graphic of the process must be seen\n. Obviously, this variable must be defined only in processes visible inside the \nscroll windows\n or the \nmode 7 windows\n. This variable is useless for the rest of the processes (screen processes or processes with no graphics).\n\n\nIf the process must be seen in all the windows\n, then it won't be necessary to modify this variable, as the value of \ncnumber\n (\n0\n) by default precisely indicates so.\n\n\nUp to \n10\n windows of both types may be activated, numbered from \n0\n to \n9\n. There are ten predefined constants used to define the value of \ncnumber\n. These are \nc_0, c_1, c_2, ..., c_9\n and directly correspond with the \n10\n possible windows of these types.\n\n\ncnumber\n must be assigned \nthe addition of the constants\n corresponding with the \nwindows in which the process must be visible\n.\n\n\nFor instance, if there are \n4 scroll windows\n numbered \n0\n, \n1\n, \n2\n and \n3\n in a program, and the aim is to define that a specific process must be only visible in windows \n0\n and \n2\n, the following statement must be used:\n\n\ncnumber=c_0+c_2;\n\n\nThe value of \ncnumber\n can be changed during the process execution if necessary.\n\n\n\n\nNote Keep in mind that for the graphic of the process to be seen in all the windows, it is not necessary to do anything, as it is the option by default.\n\n\n\n\nSee: \nLocal data\n - \nc_0...c_9", 
            "title": "LOCAL cnumber"
        }, 
        {
            "location": "/local_cnumber/#note-keep-in-mind-that-for-the-graphic-of-the-process-to-be-seen-in-all-the-windows-it-is-not-necessary-to-do-anything-as-it-is-the-option-by-default", 
            "text": "See:  Local data  -  c_0...c_9", 
            "title": "Note Keep in mind that for the graphic of the process to be seen in all the windows, it is not necessary to do anything, as it is the option by default."
        }, 
        {
            "location": "/local_resolution/", 
            "text": "resolution=0;\n // Resolution of the process coordinates---------------------------------------\n.\n\n\nThis is a predefined \nLOCAL\n variable, which means that each process will have its own value in its \nresolution\n variable.\n\n\nNormally, the coordinates of a process (indicated in the \nx\n and \ny\n local variables) are defined in screen pixels.\n\n\nThe \nresolution\n local variable must be used when the aim is to define the coordinates in \ndrives smaller\n than the pixel.\n\n\nThat is to say, this variable indicates the precision of the process' coordinates.\n\n\nBy default, the variable will equal \n0\n and the coordinates will be specified in pixels.\n\n\nThe greater the value of \nresolution\n is, the smaller (and more accurate)\nthe drive in which the coordinates are interpreted will be. Some examples are show below:\n\n\nresolution=1;\n - The coordinates are specified in pixels (similar to \nresolution=0\n, which is the value by default).\n\n\nresolution=10;\n - They are specified in tenths of a pixel.\n\n\nresolution=100;\n - They are specified in hundredths of pixels.\n\n\nresolution=2;\n - They are specified in half pixels.\n\n\n...\n\n\nFor instance, a process located at \n160\n, \n100\n with \nresolution\n equal to\n\n0\n (or \n1\n), will be in the same position as a process located at\n\n1600\n, \n1000\n and with \nresolution\n equal to \n10\n.\n\n\nThe value of \nresolution\n is normally defined as a \npositive integer multiple of 10\n (10, 100, 1000, ...).\n\n\n\n\nIn short, when the value of \nresolution\n is defined, the processes' manager of \nDIV Games Studio \nwill divide\n the coordinates of the processes\nbetween \nresolution\n when it comes to painting their graphics on screen.\n\n\n\n\nImportant Much care must be taken when, in a program,\n\n\nthere are several processes with different resolutions of coordinates,\nas some functions, such as \nget_dist()\n (used to obtain the distance between two processes), will return \nincorrect results\n\nwhen two processes using different resolution of coordinates are accessed.\n\n\nIt is normally advisable that all the processes active in the game,\nat least all that interact (that are detected, modified or that can be collide) use the same resolution.\n\n\n\n\nSee: \nLocal data", 
            "title": "LOCAL resolution"
        }, 
        {
            "location": "/local_resolution/#important-much-care-must-be-taken-when-in-a-program", 
            "text": "there are several processes with different resolutions of coordinates,\nas some functions, such as  get_dist()  (used to obtain the distance between two processes), will return  incorrect results \nwhen two processes using different resolution of coordinates are accessed.  It is normally advisable that all the processes active in the game,\nat least all that interact (that are detected, modified or that can be collide) use the same resolution.   See:  Local data", 
            "title": "Important Much care must be taken when, in a program,"
        }, 
        {
            "location": "/control_pointsdot/", 
            "text": "+230,0\nThe \ncontrol points\n are defined inside the \ngraphic editor\n\nwith the bar of control points, indicated with this icon.\n-\n*+231,1\n*-\n---------------------------------------\n\n\nIn order to access the \ngraphic editor\n, suffice will be to \ndouble-click\n with the left mouse button on a graphic inside the environment (on a map window).\n\n\nThe \ncontrol points\n are simply points that can be placed inside a graphic for different purposes.\n\n\nThe \nbar of control points\n allows us to position up to \n1000\n different points inside a graphic. Each of them will be identified by its number (from \n0\n to \n999\n).\n\n\nIn order to position one of these points, suffice will be to select the {number of\npoint} with the \nleft arrow\n and \nright arrow\n icons and then, to click on the graphic.\n\n\nIn order to \ndelete\n (unselect) a control point, it is necessary to click on the same  graphic a second time.\n\n\n\n\nThe only \ncontrol point\n used by the system is control point number \n0\n (the first one). This point defines which is the \nvirtual centre of the graphic\n and has many applications inside the language.\n\n\nWhen \ncontrol point number 0\n is not defined, the system\nwill work as if the graphic's virtual centre was its \nreal centre\n (a point located at half the width and height of the graphic).\n\n\n\n\nNote Once the control points have been defined, for them to have effect in a\n\n\nprogram, it is necessary to save the \nfile MAP\n or include the graphic again in the \nfile FPG\n by dragging the former to the latter (depending on which one of both is loaded in the program).", 
            "title": "Control points."
        }, 
        {
            "location": "/control_pointsdot/#note-once-the-control-points-have-been-defined-for-them-to-have-effect-in-a", 
            "text": "program, it is necessary to save the  file MAP  or include the graphic again in the  file FPG  by dragging the former to the latter (depending on which one of both is loaded in the program).", 
            "title": "Note Once the control points have been defined, for them to have effect in a"
        }, 
        {
            "location": "/videomodes/", 
            "text": "These constants are used to indicate the videomode in the \nset_mode()\n function. The whole list of constants is the following one:\n\n\nm320x200\n\nm320x240\n\nm320x400\n\nm360x240\n\nm360x360\n\nm376x282\n\nm640x400\n\nm640x480\n\nm800x600\n\nm1024x768\n\n\n\nEach constant indicates the videomode in the following way: first,\nthe letter \nm\n and then, the horizontal and vertical resolution of the mode, separated by an \nx\n.\n\n\nThe values defined for these constants are the following ones.\n\n\nm320x200  = 320200\n\nm320x240  = 320240\n\nm320x400  = 320400\n\nm360x240  = 360240\n\nm360x360  = 360360\n\nm376x282  = 376282\n\nm640x400  = 640400\n\nm640x480  = 640480\n\nm800x600  = 800600\n\nm1024x768 = 1024768\n\n\n\n\n\nNote Besides these standard video modes, the global structure\n\n\nvideo_modes\n contains a list of all modes compatible with the VESA standard\nsituated in the system's video adaptador.\n\n\n\n\nSee: \nConstants\n - \nset_mode()\n - \nvideo_modes", 
            "title": "Videomodes"
        }, 
        {
            "location": "/videomodes/#note-besides-these-standard-video-modes-the-global-structure", 
            "text": "video_modes  contains a list of all modes compatible with the VESA standard\nsituated in the system's video adaptador.   See:  Constants  -  set_mode()  -  video_modes", 
            "title": "Note Besides these standard video modes, the global structure"
        }, 
        {
            "location": "/true/", 
            "text": "This constant is used to indicate \ntrue\n values, to initialise logical variables or\nto define logical parameters. That is to say, it must be evaluated as a condition.\n\n\nIts value is \n1\n and, as in the language all the \nodd\n numbers are interpreted as \ntrue\n, this constant will be evaluated as a condition that is always complied (\ntrue\n).\n\n\n\n\nThe \nfalse\n constant is opposite to this one, and it is used to indicate logical \nfalse\n values.\n\n\n\n\nSee: \nConstants\n - \nfalse", 
            "title": "true"
        }, 
        {
            "location": "/false/", 
            "text": "This constant is used to indicate \nfalse\n values, to initialise logical variables or\nto define logical parameters. That is to say, it must be evaluated as a condition.\n\n\nIts value is \n0\n and, as in the language all the \neven\n numbers are interpreted as \nfalse\n, this constant will be evaluated as a condition that is never complied (\nfalse\n).\n\n\n\n\nThe \ntrue\n constant is opposite to this one, and it is used to indicate logical \ntrue\n values.\n\n\n\n\nSee: \nConstants\n - \ntrue", 
            "title": "false"
        }, 
        {
            "location": "/s_kill/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n0\n.\n\n\nThis signal transmits the imperative order \nkill\n\nto the processes. It is used to eliminate processes in the program\n(to make certain objects of the game disappear).\n\n\nThat is to say, on sending a signal \ns_kill\n to a process, the latter will be eliminated and will not appear any longer in the following frames of the game.\n\n\nThe constant \ns_kill_tree\n is directly linked to this constant, with the proviso that, on sending this signal, the former will eliminate the indicated process and its \nsons\n, which are the processes created by it.\n\n\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\n**s_kill**\n\n[s_wakeup](s_wakeup.md)\n\n[s_sleep](s_sleep.md)\n\n[s_freeze](s_freeze.md)\n\n[s_kill_tree](s_kill_tree.md)\n\n[s_wakeup_tree](s_wakeup_tree.md)\n\n[s_sleep_tree](s_sleep_tree.md)\n\n[s_freeze_tree](s_freeze_tree.md)\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_kill_tree", 
            "title": "s_kill"
        }, 
        {
            "location": "/s_wakeup/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n1\n.\n\n\nThis signal transmits the imperative order \nwakeup\n\nto the processes. It is used to restore the processes that have been made dormant (with the signal \ns_sleep\n), or frozen (with the signal \ns_freeze\n) to their normal state.\n\n\nThat is to say, on sending a signal \ns_wakeup\n to a process, the latter will be reactivated in the following frames of the game (it will be seen and processed again).\n\n\nThe constant \ns_wakeup_tree\n is directly linked to this constant, with the proviso that, on sending this signal, the former will wake up the indicated process and its \nsons\n, which are the processes created by it.\n\n\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\ns_kill\n\n\n**s_wakeup**\n\n[s_sleep](s_sleep.md)\n\n[s_freeze](s_freeze.md)\n\n[s_kill_tree](s_kill_tree.md)\n\n[s_wakeup_tree](s_wakeup_tree.md)\n\n[s_sleep_tree](s_sleep_tree.md)\n\n[s_freeze_tree](s_freeze_tree.md)\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_wakeup_tree", 
            "title": "s_wakeup"
        }, 
        {
            "location": "/s_sleep/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n2\n.\n\n\nThis signal transmits the imperative order \nsleep\n to the processes. It is used to make a process dormant. An asleep process will not appear in the following frames of the game, but it won't be eliminated, as it happens with the signal \n\ns_kill\n. Indeed, this kind of process may \nwake up\n at any moment with a signal \ns_wakeup\n.\n\n\nThat is to say, on sending a signal \ns_sleep \n to a process, the latter will not appear in the following frames of the game (until it is awaken or eliminated).\n\n\nThe constant \ns_sleep_tree\n is directly linked to this constant, with the proviso that, on sending this signal, the former will make dormant the indicated process and its \nsons\n, which are the processes created by it.\n\n\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\n[s_kill](s_kill.md)\n\n[s_wakeup](s_wakeup.md)\n\n**s_sleep**\n\n[s_freeze](s_freeze.md)\n\n[s_kill_tree](s_kill_tree.md)\n\n[s_wakeup_tree](s_wakeup_tree.md)\n\n[s_sleep_tree](s_sleep_tree.md)\n\n[s_freeze_tree](s_freeze_tree.md)\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_sleep_tree", 
            "title": "s_sleep"
        }, 
        {
            "location": "/s_freeze/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n3\n.\n\n\nThis signal transmits the imperative order \nfreeze\n\nto the processes. It is used to freeze (immobilise) a process. A frozen process will continue to appear in the following frames of the game, but it won't be processed, so it will remain immobile. This process can be \nreactivated\n at any moment if a signal \ns_wakeup\n is sent to it.\n\n\nThat is to say, on sending a signal \ns_freeze\n to a process, the latter will stop processing (stop interpreting its statements) in the following frames of the game (until it is activated or eliminated with \ns_kill\n).\n\n\nThe constant \ns_freeze_tree\n is directly linked to this constant, with the proviso that, on sending this signal, the indicated process as well as its \nsons\n (which are the processes created by it) will be frozen.\n\n\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\n[s_kill](s_kill.md)\n\n[s_wakeup](s_wakeup.md)\n\n[s_sleep](s_sleep.md)\n\n**s_freeze**\n\n[s_kill_tree](s_kill_tree.md)\n\n[s_wakeup_tree](s_wakeup_tree.md)\n\n[s_sleep_tree](s_sleep_tree.md)\n\n[s_freeze_tree](s_freeze_tree.md)\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_freeze_tree", 
            "title": "s_freeze"
        }, 
        {
            "location": "/s_kill_tree/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n100\n.\n\n\nThis signal is used to eliminate a process and all the process created by it, by sending the imperative order \nkill\n to them. This is a version of the signal \ns_kill\n, which eliminates a process, but not the processes that it had created.\n\n\nThat is to say, the signal \ns_kill_tree\n will eliminate the process and all its descendants. Thus, none of them will appear any longer in the following frames of the game.\n\n\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\n[s_kill](s_kill.md)\n\n[s_wakeup](s_wakeup.md)\n\n[s_sleep](s_sleep.md)\n\n[s_freeze](s_freeze.md)\n\n**s_kill_tree**\n\n[s_wakeup_tree](s_wakeup_tree.md)\n\n[s_sleep_tree](s_sleep_tree.md)\n\n[s_freeze_tree](s_freeze_tree.md)\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_kill", 
            "title": "s_kill_tree"
        }, 
        {
            "location": "/s_wakeup_tree/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n101\n.\n\n\nThis signal is used to \nwake up\n a process and all the processes created by it, by sending the imperative order \nwakeup\n to them. This is a version of the signal \ns_wakeup\n, which wakes a process up, but not the processes that it had created.\n\n\nThat is to say, the signal \ns_wakeup_tree\n will \nwake up\n the process and all its descendants. Thus, all these processes will return to their normal state in the following frames of the game.\n\n\nProcesses that have been \nmade dormant\n with the signal \ns_sleep_tree\n or \nfrozen\n with the signal \ns_freeze_tree\n can be woken up (reactivated).\n\n\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\n[s_kill](s_kill.md)\n\n[s_wakeup](s_wakeup.md)\n\n[s_sleep](s_sleep.md)\n\n[s_freeze](s_freeze.md)\n\n[s_kill_tree](s_kill_tree.md)\n\n**s_wakeup_tree**\n\n[s_sleep_tree](s_sleep_tree.md)\n\n[s_freeze_tree](s_freeze_tree.md)\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_wakeup", 
            "title": "s_wakeup_tree"
        }, 
        {
            "location": "/s_sleep_tree/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n102\n.\n\n\nThis signal is used to \nmake\n a process and all the processes created by it \ndormant\n, by sending the imperative order \nsleep\n to them. This is a version of the signal \ns_sleep\n, which makes a process dormant, but not the processes that it had created.\n\n\nThat is to say, the signal \ns_sleep_tree\n will make the process and all its descendants dormant. Thus, all these processes will disappear in the following frames of the game (but they won't be eliminated).\n\n\nThese \nasleep\n processes can be woken up (reactivated) with the signal \ns_wakeup_tree\n.\n\n\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\n[s_kill](s_kill.md)\n\n[s_wakeup](s_wakeup.md)\n\n[s_sleep](s_sleep.md)\n\n[s_freeze](s_freeze.md)\n\n[s_kill_tree](s_kill_tree.md)\n\n[s_wakeup_tree](s_wakeup_tree.md)\n\n**s_sleep_tree**\n\n[s_freeze_tree](s_freeze_tree.md)\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_sleep", 
            "title": "s_sleep_tree"
        }, 
        {
            "location": "/s_freeze_tree/", 
            "text": "This constant is used as a parameter of the \nsignal()\n function (to send signals to the processes).\nIts value is \n103\n.\n\n\nThis signal is used to freeze (immobilise) a process and all the processes created by it, by sending the imperative order \nfreeze\n to them. This is a version of the signal \ns_freeze\n, which freezes a process, but not the processes that it had created.\n\n\nThat is to say, the signal \ns_freeze_tree\n will \nfreeze\n the process and all its descendants. Thus, all these processes will stop processing in the following frames of the game (they will remain immobile, as they won't execute their statements).\n\n\nThese \nfrozen\n processes can be unfrozen (reactivated) with the signal \ns_wakeup_tree\n.\n.\nThe whole list of the constants used as signals that can be sent to the different processes of a program is the following one:\n\n\n[s_kill](s_kill.md)\n\n[s_wakeup](s_wakeup.md)\n\n[s_sleep](s_sleep.md)\n\n[s_freeze](s_freeze.md)\n\n[s_kill_tree](s_kill_tree.md)\n\n[s_wakeup_tree](s_wakeup_tree.md)\n\n[s_sleep_tree](s_sleep_tree.md)\n\n**s_freeze_tree**\n\n\n\n\n\nSee: \nConstants\n - \nsignal()\n - \ns_freeze", 
            "title": "s_freeze_tree"
        }, 
        {
            "location": "/all_text/", 
            "text": "This constant is used as a parameter of the \ndelete_text()\n function,\nto delete \nall\n the texts displayed in the program with the \nwrite()\n and \nwrite_int()\n functions.\n\n\nThat is to say, the following statement must be executed in order to make disappear all the texts displayed on screen:\n\n\ndelete_text(all_text);\n\n\nThe value assigned to this constant is \n0\n.\n\n\n\n\nSee: \nConstants\n - \ndelete_text()", 
            "title": "all_text"
        }, 
        {
            "location": "/all_sound/", 
            "text": "This constant is used as a parameter of the \nstop_sound()\n function,\nto stop \nall\n the sound effects previously activated with the \nsound()\n function.\n\n\nThat is to say, the following statement must be executed in order to stop all the sound channels, active at a specific moment:\n\n\nstop_sound(all_sound);\n\n\nThe value assigned to this constant is\n -1\n.\n\n\n\n\nSee: \nConstants\n - \nstop_sound()\n - \nsound()", 
            "title": "all_sound"
        }, 
        {
            "location": "/g_wide/", 
            "text": "This constant is used as a parameter of the \ngraphic_info()\n function,\nto ask for information about the \nwidth\n (in pixels) of a specific graphic.\nIts value is \n0\n.\n\n\nThe constants that can be used as parameter of this function are the following ones:\n\n\n**g_wide**\n\n[g_height](g_height.md)\n\n[g_x_centre](g_x_centre.md)\n\n[g_y_centre](g_y_centre.md)\n\n\n\n\n\nSee: \nConstants\n - \ngraphic_info()", 
            "title": "g_wide"
        }, 
        {
            "location": "/g_height/", 
            "text": "This constant is used as a parameter of the \ngraphic_info()\n function,\nto ask for information about the \nheight \n (in pixels) of a specific graphic.\nIts value is \n1\n.\n\n\nThe constants that can be used as parameter of this function are the following ones:\n\n\n[g_wide](g_wide.md)\n\n**g_height**\n\n[g_x_centre](g_x_centre.md)\n\n[g_y_centre](g_y_centre.md)\n\n\n\n\n\nSee: \nConstants\n - \ngraphic_info()", 
            "title": "g_height"
        }, 
        {
            "location": "/g_x_centre/", 
            "text": "This constant is used as a parameter of the \ngraphic_info()\n function,\nto ask for information about the \nhorizontal centre\n of a specific graphic.\nIts value is \n2\n.\n\n\nThe \nhorizontal centre\n of a graphic will be half the width (in pixels),\nif  \ncontrol point\n number \n0\n (graphic centre) has not been defined in the painting tool.\n\n\nThe constants that can be used as parameter of this function are the following ones:\n\n\n[g_wide](g_wide.md)\n\n[g_height](g_height.md)\n\n**g_x_centre**\n\n[g_y_centre](g_y_centre.md)\n\n\n\n\n\nSee: \nConstants\n - \ngraphic_info()", 
            "title": "g_x_centre"
        }, 
        {
            "location": "/g_y_centre/", 
            "text": "This constant is used as a parameter of the \ngraphic_info()\n function,\nto ask for information about the \nvertical centre\n of a specific graphic.\nIts value is \n3\n.\n\n\nThe \nvertical centre\n of a graphic will be half the height (in pixels),\nif the \ncontrol point\n number \n0\n (graphic centre) has not been defined in the painting tool.\n\n\nThe constants that can be used as parameter of this function are the following ones:\n\n\n[g_wide](g_wide.md)\n\n[g_height](g_height.md)\n\n[g_x_centre](g_x_centre.md)\n\n**g_y_centre**\n\n\n\n\n\nSee: \nConstants\n - \ngraphic_info()", 
            "title": "g_y_centre"
        }, 
        {
            "location": "/c_screen/", 
            "text": "This constant is used to be assigned to the predefined \nctype\n local variable used to define the type of coordinates that a process will have. Its value is \n0\n.\n\n\nThis is the value by default of\n \nctype\n, used for the coordinates of the graphic of the process to be interpreted as if they were referred to the screen. The (0,0) coordinate is the upper left corner.\n\n\nThere are other constants used for other systems of coordinates.\nThe whole list is the following one:\n\n\n**c_screen** - Screen coordinates\n\n[c_scroll](c_scroll.md) - Scroll coordinates\n\n[c_m7](c_m7.md)     - Mode 7 coordinates\n\n[c_m8](c_m8.md)     - coordinates of mode 8\n\n\n\n\n\nSee: \nConstants\n - \nctype", 
            "title": "c_screen"
        }, 
        {
            "location": "/c_scroll/", 
            "text": "This constant is used to be assigned to the predefined \nctype\n local variable used to define the type of coordinates that a process will have. Its value is \n1\n.\n\n\nThis is the value assigned to \nctype\n, used for the coordinates of the graphic of the process to be interpreted as if they were referred to a scroll window, to coordinates with respect to the foreground's graphic.\n\n\nFor further information about the \nscroll windows\n, it is possible to access the \nstart_scroll()\n function used to activate them.\n\n\nThere are other constants used for other systems of coordinates.\nThe whole list is the following one:\n\n\n[c_screen](c_screen.md) - Screen coordinates\n\n**c_scroll** - Scroll coordinates\n\n[c_m7](c_m7.md)     - Mode 7 coordinates\n\n[c_m8](c_m8.md)     - coordinates of mode 8\n\n\n\n\n\nSee: \nConstants\n - \nctype\n - \nstart_scroll()", 
            "title": "c_scroll"
        }, 
        {
            "location": "/c_m7/", 
            "text": "This constant is used to be assigned to the predefined \nctype\n local variable used to define the type of coordinates that a process will have. Its value is \n2\n.\n\n\nThis is the value assigned to \nctype\n, used for the coordinates of the graphic of the process to be interpreted as if they were referred to a mode 7 window, three-dimensionally folded in that window.\n\n\nFor further information about the \nmode 7 windows\n, it is possible to access the \nstart_mode7()\n function used to activate them.\n\n\nThere are other constants used for other systems of coordinates.\nThe whole list is the following one:\n\n\n[c_screen](c_screen.md) - Screen coordinates\n\n[c_scroll](c_scroll.md) - Scroll coordinates\n\n**c_m7**     - Mode 7 coordinates\n\n[c_m8](c_m8.md)     - coordinates of mode 8\n\n\n\n\n\nSee: \nConstants\n - \nctype\n - \nstart_mode7()", 
            "title": "c_m7"
        }, 
        {
            "location": "/partial_dump/", 
            "text": "This  constant is used to be assigned to the predefined\n\ndump_type\n global variable used to define the type of dump that will be performed on screen. Its value is \n0\n.\n\n\nThe following statement is used:\n\n\ndump_type=partial_dump;\n\n\nThis statement indicates to the manager of processes of DIV Games that the following dumps must be \npartial\n.\n\n\nDump\n is the name given to the system of sending the game frames to the monitor (to the video memory of the graphics card).\n\n\nThere are two types of dumps:\n\n\nPartial\n: Only the graphics that are updated and that have varied with regard to the previous frame will be dumped on screen. It is advisable to activate this dump in order \nto gain speed\n when programming a game (or a section of it) without a scroll or mode 7 window occupying the whole screen. That is to say, either when the game shows graphics movements against a fixed  background or when the active scroll or mode 7 windows are smaller that the screen.\n\n\nComplete\n: All the screen will be dumped, irrespective of whether the graphics have changed or not. This is the dump by default and it is \nslower that the partial dump\n. However, the complete dump must be used when the game has a scroll or mode 7 window occupying the whole screen.\n\n\n\n\nThe other constant used to designate the type of dump is \ncomplete_dump\n which, unlike this one, defines a \ncomplete\n dump.\n\n\n\n\nSee: \nConstants\n - \ndump_type\n - \ncomplete_dump", 
            "title": "partial_dump"
        }, 
        {
            "location": "/complete_dump/", 
            "text": "This  constant is used to be assigned to the predefined\n\ndump_type\n global variable used to define the type of dump that will be performed on screen. Its value is \n1\n.\n\n\nThis is the \nvalue by default\n of the \ndump_type\n variable.\nTo establish this value, it is necessary to use the following statement:\n\n\ndump_type=complete_dump;\n\n\nThis statement indicates that the following dumps must be \ncomplete\n to the manager of processes of DIV Games.\n\n\nDump\n is the name given to the system of sending the game frames to the monitor (to the video memory of the graphics card).\n\n\nThere are two types of dumps:\n\n\nPartial\n: Only the graphics that are updated and that have varied with regard to the previous frame will be dumped on screen. It is advisable to activate this dump in order \nto gain speed\n when programming a game (or a section of it) without a scroll or mode 7 window occupying the whole screen. That is to say, either when the game shows graphics movements on a fixed  background or when the active scroll or mode 7 windows are smaller that the screen.\n\n\nComplete\n: All the screen will be dumped, irrespective of whether the graphics have changed or not. This is the dump by default and it is \nslower that the partial dump\n. However, the complete dump must be used when the game has a scroll or mode 7 window occupying the whole screen.\n\n\n\n\nThe other constant used to designate the type of dump is \npartial_dump\n which, unlike this one, defines a \npartial\n dump.\n\n\n\n\nSee: \nConstants\n - \ndump_type\n - \npartial_dump", 
            "title": "complete_dump"
        }, 
        {
            "location": "/no_restore/", 
            "text": "This constant is used to be assigned to the predefined \nrestore_type\n global variable used to define the type of restoration that must be applied to the screen background after each game frame.\nIts value is\n -1\n.\n\n\nThe name \nbackground restoration\n deals with the operation of restoring the screen areas in which graphics have been painted or texts have been written in the previous frame. That is to say, to delete both the painted graphics and the written texts.\n\n\nThe following statement must be used to establish this value:\n\n\nrestore_type=no_restore;\n\n\nThis statement indicates to the manager of processes of DIV Games\nStudio that, after the following game frames {it is not necessary\nto restore the screen background}.\n\n\nIf the background is not restored,\nspeed will be gained\n in the execution of the game (that will go faster in slow computers). But this mode of restoration (\nno_restore\n) can only be applied in games or in their sections in which \nthere is a scroll or mode 7 window occupying the whole screen\n.\n\n\nThe three types of restoration that can be applied correspond with the following three constants:\n\n\nno_restore\n       - The fastest; it doesn't restore the background\n\n\npartial_restore\n  - Average, partial restorations\n\n\ncomplete_restore\n - The slowest one, complete restoration\n\n\n\n\nSee: \nConstants\n - \nrestore_type", 
            "title": "no_restore"
        }, 
        {
            "location": "/partial_restore/", 
            "text": "This constant is used to be assigned to the predefined \nrestore_type\n global variable used to define the type of restoration that must be applied to the screen background after each game frame.\nIts value is\n 0\n.\n\n\nThe name \nbackground restoration\n deals with the operation of restoring the screen areas in which graphics have been painted or texts have been written in the previous frame. That is to say, to delete both the painted graphics and the written texts. \n\n\nThe following statement must be used to establish this value:\n\n\nrestore_type=partial_restore;\n\n\nThis statement indicates to the manager of processes of DIV Games\nStudio that, after the following game frames \nonly the screen areas in which graphics have been painted or texts have been written must be restored\n.\n\n\nThis mode of restoration (\npartial_restore\n) is faster than a complete restoration (option by default), but it must only be applied in games, or in their sections, in which \nthere ISN'T a scroll or mode 7 window occupying the whole screen\n.\n\n\nThe three types of restoration that can be applied correspond with the following three constants:\n\n\nno_restore\n       - The fastest; it doesn't restore the background\n\n\npartial_restore\n  - Average, partial restorations\n\n\ncomplete_restore\n - The slowest one, complete restoration\n\n\n\n\nSee: \nConstants\n - \nrestore_type", 
            "title": "partial_restore"
        }, 
        {
            "location": "/complete_restore/", 
            "text": "This constant is used to be assigned to the predefined \nrestore_type\n global variable used to define the type of restoration that must be applied to the screen background after each game frame.\nIts value is\n 1\n.\n\n\nThe name \nbackground restoration\n deals with the operation of restoring the screen areas in which graphics have been painted or texts have been written in the previous frame. That is to say, to delete both the painted graphics and the written texts. \n\n\nThis is the value by default of the\n \nrestore_type\n \nvariable\n and,\nit is the \nslowest\n mode of the three available restoration modes.\nThe following statement must be used to establish this value:\n\n\nrestore_type=complete_restore;\n\n\nThis statement indicates to the manager of processes of DIV Games\nStudio that, after the following game's frames \nthe screen background must completely be restored\n.\n\n\nThis mode of restoration (\ncomplete_restore\n) is the slowest one (and it is the option by default). Therefore, it can be changed by another one in order \nto gain speed\n in the execution of the game (so it will go faster in slow computers). \n\n\nAs a matter of fact, this mode of restoration is only interesting for games (or for their sections) that \nDON'T have\n a scroll or mode 7 window occupying the whole screen, but that have a great number of graphics moving through the screen.\n\n\nThe three types of restoration that can be applied correspond with the following three constants:\n\n\nno_restore\n       - The fastest; it doesn't restore the background\n\n\npartial_restore\n  - Average, partial restorations\n\n\ncomplete_restore\n - The slowest one, complete restoration\n\n\n\n\nSee: \nConstants\n - \nrestore_type", 
            "title": "complete_restore"
        }, 
        {
            "location": "/numbers_of_window/", 
            "text": "These constants are used to be assigned to the predefined \ncnumber\n local variable that is used to define the scroll or mode 7 windows in which the graphic of a process must appear.\n\n\nThis will only be necessary when several scroll or mode 7 windows have been activated, and it ISN'T aimed to display the graphic of the process in all of them.\n\n\nUp to 10 windows of these types may be defined, numbered from \n0\n to \n9\n, and that directly correspond with the constants\n\nc_0\n, \nc_1\n, \nc_2\n ... \nc_9\n.\n\n\nFor the graphic of a process to appear in one of these windows only, the corresponding constant must be assigned to its \n\ncnumber\n local variable. For instance, if the aim was for the graphic of a process to appear only in (scroll or mode 7) window number 3, the following statement would be included in its code:\n\n\ncnumber=c_3;\n\n\nIf the aim for the graphic of a process is to appear in several of these windows, then the constants must be added.\nFor instance, for a process to appear in the windows 0, 4, and 5, the following assignment will be performed:\n\n\ncnumber=c_0+c_4+c_5;\n\n\nFor the graphic to appear in all the windows, suffice will be to assign \n0\n to the \ncnumber\n variable. It won't be necessary if this variable has not been modified, as it is its value by default.\n\n\nThe values equivalent to these constants correspond with the following powers of 2:\n\n\n**c_0** = 1   scroll / mode-7 number 0\n\n**c_1** = 2   scroll / mode-7 number 1\n\n**c_2** = 4   scroll / mode-7 number 2\n\n**c_3** = 8   scroll / mode-7 number 3\n\n**c_4** = 16  scroll / mode-7 number 4\n\n**c_5** = 32  scroll / mode-7 number 5\n\n**c_6** = 64  scroll / mode-7 number 6\n\n**c_7** = 128 scroll / mode-7 number 7\n\n**c_8** = 256 scroll / mode-7 number 8\n\n**c_9** = 512 scroll / mode-7 number 9\n\n\n\n\n\nSee: \nConstants\n - \ncnumber\n.", 
            "title": "Numbers of window"
        }, 
        {
            "location": "/key_codes/", 
            "text": "These constants are normally used as a parameter of the \nkey()\n function, to indicate which key is the one that the user wishes to know whether it is pressed.\n\n\nIt can also be used to compare the \nscan_code\n global variable, that contains the code of the last key that has been pressed, with these values.\n\n\nThe character \n_\n (underlining) followed by the name of the key, is normally used to designate each constant. For instance, for the [\nA\n] key, the constant referred to its code will be \n_a\n.\n\n\nThe whole list of these constants, with their respective values,\nis as follows (according to the standard arrangement of the keytable):\n\n\n_esc\n         = 1   [ESC] or escape\n\n\n_f1\n          = 59  [F1] or function 1\n\n\n_f2\n          = 60  [F2] or function 2\n\n\n_f3\n          = 61  [F3] or function 3\n\n\n_f4\n          = 62  [F4] or function 4\n\n\n_f5\n          = 63  [F5] or function 5\n\n\n_f6\n          = 64  [F6] or function 6\n\n\n_f7\n          = 65  [F7] or function 7\n\n\n_f8\n          = 66  [F8] or function 8\n\n\n_f9\n          = 67  [F9] or function 9\n\n\n_f10\n         = 68  [F10] or function 10\n\n\n_f11\n         = 87  [F11] or function 11\n\n\n_f12\n         = 88  [F12] or function 12 (DEBUGGER)\n\n\n_prn_scr\n     = 55  [PRINT SCREEN]\n\n\n_scroll_lock\n = 70  [SCROLL LOCK]\n\n\n_wave\n        = 41  [\n] or [\n] key\n\n\n_1\n           = 2   Number \n1\n key\n\n\n_2\n           = 3   Number \n2\n key\n\n\n_3\n           = 4   Number \n3\n key\n\n\n_4\n           = 5   Number \n4\n key\n\n\n_5\n           = 6   Number \n5\n key\n\n\n_6\n           = 7   Number \n6\n key\n\n\n_7\n           = 8   Number \n7\n key\n\n\n_8\n           = 9   Number \n8\n key\n\n\n_9\n           = 10  Number \n9\n key\n\n\n_0\n           = 11  Number \n0\n key\n\n\n_minus\n       = 12  Symbol \n?\n key\n\n\n_plus\n        = 13  Symbol \n key\n\n\n_backspace\n   = 14  Delete ( \n- ) key\n\n\n_tab\n         = 15  Tabulator [TAB] key\n\n\n_q\n           = 16  Letter \nQ\n key\n\n\n_w\n           = 17  Letter \nW\n key\n\n\n_e\n           = 18  Letter \nE\n key\n\n\n_r\n           = 19  Letter \nR\n key\n\n\n_t\n           = 20  Letter \nT\n key\n\n\n_y\n           = 21  Letter \nY\n key\n\n\n_u\n           = 22  Letter \nU\n key\n\n\n_i\n           = 23  Letter \nI\n key\n\n\n_o\n           = 24  Letter \nO\n key\n\n\n_p\n           = 25  Letter \nP\n key\n\n\n_l_brachet\n   = 26  Key [^] or [']\n\n\n_r_brachet\n   = 27  Key [*] or [+]\n\n\n_enter\n       = 28  [ENTER] (Enter or Return)\n\n\n_caps_lock\n   = 58  [CAPS LOCK] or capitals lock\n\n\n_a\n           = 30  Letter \nA\n key\n\n\n_s\n           = 31  Letter \nS\n key\n\n\n_d\n           = 32  Letter \nD\n key\n\n\n_f\n           = 33  Letter \nF\n key\n\n\n_g\n           = 34  Letter \nG\n key\n\n\n_h\n           = 35  Letter \nH\n key\n\n\n_j\n           = 36  Letter \nJ\n key\n\n\n_k\n           = 37  Letter \nK\n key\n\n\n_l\n           = 38  Letter \nL\n key\n\n\n_semicolon\n   = 39  Letter \n key\n\n\n_apostrophe\n  = 40  [\n{\n] key\n\n\n_backslash\n   = 43  [\n}\n] key\n\n\n_l_shift\n     = 42  [SHIFT] or left capitals\n\n\n_z\n           = 44   Letter \nZ\n key\n\n\n_x\n           = 45  Letter \nX\n key\n\n\n_c\n           = 46  Letter \nC\n key\n\n\n_v\n           = 47  Letter \nV\n key\n\n\n_b\n           = 48  Letter \nB\n key\n\n\n_n\n           = 49  Letter \nN\n key\n\n\n_m\n           = 50  Letter \nM\n key\n\n\n_comma\n       = 51  Key [;] or [,] key\n\n\n_point\n       = 51  [:] or [.] key\n\n\n_slash\n       = 51  [_] or [-] key\n\n\n_r_shift\n     = 54  [SHIFT] or right capitals\n\n\n_control\n     = 29  [CONTROL] keys\n\n\n_alt\n         = 56  [ALT] or [ALT GR] keys\n\n\n_space\n       = 57  [SPACE] or spacebar\n\n\n_ins\n         = 82  [INSERT]\n\n\n_home\n        = 71  [HOME]\n\n\n_pgup\n        = 73  [PGUP] or page up\n\n\n_del\n         = 83  [DEL] or delete\n\n\n_end\n         = 79  [END]\n\n\n_pgdn\n        = 81  [PGDN] or page down\n\n\n_up\n          = 72  Up cursor\n\n\n_down\n        = 80  Down cursor\n\n\n_left\n        = 75  Left cursor\n\n\n_right\n       = 77  Right cursor\n\n\n_num_lock\n    = 69  [NUM LOCK] or numeric lock\n\n\n_c_backslash\n = 53  Symbol [/] of the numeric keytable\n\n\n_c_asterisk\n  = 55  Symbol [*] of the numeric keytable\n\n\n_c_minus\n     = 74  Symbol [-] of the numeric keytable\n\n\n_c_home\n      = 71  [HOME] of the numeric keytable\n\n\n_c_up\n        = 72  Up cursor of the numeric keytable\n\n\n_c_pgup\n      = 73  [PGUP] of the numeric keytable\n\n\n_c_left\n      = 75  Left cursor of the numeric keytable\n\n\n_c_centre\n    = 76  [5] key of the numeric keytable\n\n\n_c_right\n     = 77  Right cursor of the numeric keytable\n\n\n_c_end\n       = 79  [END] of the numeric keytable\n\n\n_c_down\n      = 80  Down cursor of the numeric keytable\n\n\n_c_pgdn\n      = 81  [PG DN] of the numeric keytable\n\n\n_c_ins\n       = 82  [INS] of the numeric keytable\n\n\n_c_del\n       = 83  [DEL] of the numeric keytable\n\n\n_c_plus\n      = 78  Symbol [+] of the numeric keytable\n\n\n_c_enter\n     = 28  [ENTER] of the numeric keytable\n\n\nIt is indifferent to use these constants or the numeric values that they represent. That is to say, it is possible to call the \nkey()\n function, to verify whether the [\nA\n] key is pressed, such as \nkey(_a)\n or \nkey(30)\n (in the previous list, it is possible to verify that \n30\n is the numeric value of the constant \n_a\n).\n\n\n\n\nImportant Some of these codes can vary in certain keytables. In case of doubt it is possible to execute the following sample program, that shows a table on screen, corresponding to the \nkey()\n function (indicating the \ncodes of the keys that are pressed\n at any moment), besides the values of the \nscan_code\n, \nascii\n and \nshift_status\n variables (also related to the reading of the keytable).\n\n\nExample program\n\n\nPROGRAM example_codes_of_the_keytable;\n\nGLOBAL\n    keys[128];\n\nBEGIN\n    write(0, 0, 0, 0, \nCodes of the pressed keys, according to key()\n);\n    FROM x=0 TO 127;\n        write_int(0, (x%16)*20, (x/16)*10+20, 0, OFFSET keys[x]);\n    END\n    write(0, 0, 160, 0, \nCode of the last key pressed (scan_code):\n);\n    write_int(0, 320, 160, 2, OFFSET scan_code);\n    write(0, 0, 180, 0, \nCode ASCII of the last key (ascii):\n);\n    write_int(0, 320, 180, 2, OFFSET ascii);\n    write(0, 0, 190, 0, \nState of the special keys (shift_status):\n);\n    write_int(0, 320, 190, 2, OFFSET shift_status);\n    LOOP\n        FROM x=1 TO 127;\n            IF (key(x))\n                keys[x]=x;\n            ELSE\n                keys[x]=0;\n            END\n        END\n        FRAME;\n    END\nEND\n\n\n\n\nThis program may be used (by clicking on the text \n### Example program\n with the mouse and then, by pressing the [\nF10\n] key) to find out the code that any specific key has.\n\n\nThis numeric code can later be used as a parameter of the \nkey()\n function, to verify in the game whether this key is pressed at a specific moment.\n\n\n\n\nSee: \nConstants\n - \nkey()\n - \nscan_code\n - \nascii\n - \nshift_status", 
            "title": "Key codes"
        }, 
        {
            "location": "/key_codes/#important-some-of-these-codes-can-vary-in-certain-keytables-in-case-of-doubt-it-is-possible-to-execute-the-following-sample-program-that-shows-a-table-on-screen-corresponding-to-the-key-function-indicating-the-codes-of-the-keys-that-are-pressed-at-any-moment-besides-the-values-of-the-scan_code-ascii-and-shift_status-variables-also-related-to-the-reading-of-the-keytable", 
            "text": "", 
            "title": "Important Some of these codes can vary in certain keytables. In case of doubt it is possible to execute the following sample program, that shows a table on screen, corresponding to the key() function (indicating the codes of the keys that are pressed at any moment), besides the values of the scan_code, ascii and shift_status variables (also related to the reading of the keytable)."
        }, 
        {
            "location": "/key_codes/#example-program", 
            "text": "PROGRAM example_codes_of_the_keytable;\n\nGLOBAL\n    keys[128];\n\nBEGIN\n    write(0, 0, 0, 0,  Codes of the pressed keys, according to key() );\n    FROM x=0 TO 127;\n        write_int(0, (x%16)*20, (x/16)*10+20, 0, OFFSET keys[x]);\n    END\n    write(0, 0, 160, 0,  Code of the last key pressed (scan_code): );\n    write_int(0, 320, 160, 2, OFFSET scan_code);\n    write(0, 0, 180, 0,  Code ASCII of the last key (ascii): );\n    write_int(0, 320, 180, 2, OFFSET ascii);\n    write(0, 0, 190, 0,  State of the special keys (shift_status): );\n    write_int(0, 320, 190, 2, OFFSET shift_status);\n    LOOP\n        FROM x=1 TO 127;\n            IF (key(x))\n                keys[x]=x;\n            ELSE\n                keys[x]=0;\n            END\n        END\n        FRAME;\n    END\nEND  This program may be used (by clicking on the text  ### Example program  with the mouse and then, by pressing the [ F10 ] key) to find out the code that any specific key has.  This numeric code can later be used as a parameter of the  key()  function, to verify in the game whether this key is pressed at a specific moment.   See:  Constants  -  key()  -  scan_code  -  ascii  -  shift_status", 
            "title": "Example program"
        }, 
        {
            "location": "/min_int/", 
            "text": "This constant defines the minimum value that any variable can store in this language. This value is\n -2147483648\n.\n\n\nAll the data are 32 bit \nintegers\n with sign in this language.\nFor that reason, only integers within the range\n(\n -2147483648\n ...\n +2147483647\n ) may be used.\n\n\nWhen the result of an arithmetic operation exceeds that range,\nthe system won't report any error. In order to avoid this situation, much care must be taken.\n\n\n\n\nSee: \nConstants\n - \nmax_int", 
            "title": "min_int"
        }, 
        {
            "location": "/max_int/", 
            "text": "This constant defines the maximum value that any variable can store in this language. This value is\n 2147483647\n.\n\n\nAll the data are 32 bit \nintegers\n with sign in this language.\nFor that reason, only integers within the range\n(\n -2147483648\n ...\n +2147483647\n ) may be used.\n\n\nWhen the result of an arithmetic operation exceeds that range,\nthe system won't report any error. In order to avoid this situation, much care must be taken.\n\n\n\n\nSee: \nConstants\n - \nmin_int", 
            "title": "max_int"
        }, 
        {
            "location": "/pi/", 
            "text": "This constant defines the equivalence in \ndegree thousandths\n of the mathematical constant \npi\n (approximately \n3.14159265\n radians).\n\n\nIts value is \n180000\n degree thousandths (180 degrees), equivalent to\n\npi radians\n.\n\n\nIt is normally used to define angles. For instance, \n180 degrees\n could be defined as \npi\n,\n -90 degrees\n as\n -pi/2\n,\n\n45 degrees\n as \npi/4\n, etc.\n\n\n\n\nSee: \nConstants\n - \nUse of angles in the language", 
            "title": "pi"
        }, 
        {
            "location": "/predefined_global_data/", 
            "text": "Each of the predefined global data are now described.\n\n\nSTRUCT dirinfo\n         - List of files in a directory\n\n\nSTRUCT fileinfo\n        - Information about the file\n\n\nSTRUCT joy\n             - Parameters of the joystick\n\n\nSTRUCT m7[9]\n           - Control of the mode 7 windows\n\n\nSTRUCT m8[9]\n           - Control of the mode 8 windows\n\n\nSTRUCT mouse\n           - Parameters of the mouse\n\n\nSTRUCT net\n             - Parameters of the net hardware\n\n\nSTRUCT scroll[9]\n       - Control of the scroll windows\n\n\nSTRUCT setup\n           - Control of the sound card\n\n\nSTRUCT video_modes[31]\n - Modes of video disposed\n\n\nargc\n             - Number of arguments\n\n\nargv[]\n           - Arguments of the program\n\n\nascii\n            - Reading of keytable ASCII codes\n\n\n{#1416,channel[31]       - Sound Channels\n\n\ndraw_z\n           - Depth plane of the drawing\n\n\ndump_type\n        - Dump type of the screen\n\n\nfading\n           - Fading indicator of the screen\n\n\nfps\n              - Number of frames per second\n\n\njoy_filter\n       - Filter applied to the joystick\n\n\njoy_state\n        - State of the joystick\n\n\nmax_process_time\n - Max time of execution of the process\n\n\nnum_video_modes\n  - Number of detected video modes\n\n\nrestore_type\n     - Restore type of the screen\n\n\nscan_code\n        - Reading of codes of the key-board\n\n\nshift_state\n      - State of the special keys\n\n\ntext_z\n           - Depth plane of the texts\n\n\ntimer[9]\n         - time counter\n\n\nunit_size\n        - Size of the unity of reading/writing\n\n\nvsync\n            - vertical synchronisation\n\n\n\n\nSee: \nConstants\n - \nLocal data\n - \nSyntax", 
            "title": "Predefined global data"
        }, 
        {
            "location": "/predefined_local_data/", 
            "text": "Each of the predefined local data are now described.\n\n\nSTRUCT reserved\n - Internal parameters of the processes\n\n\nfather\n          - Identifier of the process' father\n\n\nson\n             - Identifier of the process' son\n\n\nsmallbro\n        - Identifier of the process' younger brother\n\n\nbigbro\n          - Identifier of the process' elder brother\n\n\npriority\n        - Priority of the process' execution\n\n\nctype\n           - Type of coordinates used by the process\n\n\nx\n               - Horizontal coordinate of the process\n\n\ny\n               - Vertical coordinate of the process\n\n\nz\n               - Depth plane of the process' graphic\n\n\ngraph\n           - Code of the graphic assigned to the process\n\n\nflags\n           - Indicators of mirror and transparency\n\n\nsize\n            - Size of the process' graphic\n\n\nangle\n           - angle of the process' graphic\n\n\nregion\n          - Screen region assigned to the process\n\n\nfile\n            - File code of the process' graphic\n\n\nxgraph\n          - OFFSET of the graphic table of the process\n\n\nheight\n          - Height of the process in mode 7 windows\n\n\ncnumber\n         - Numbers of scroll or mode 7 windows\n\n\nresolution\n      - Resolution of the process' coordinates\n\n\nm8_nextsector\n   - Sector where the process is going next\n\n\nm8_sector\n       - Number of sector the process is in\n\n\nm8_step\n         - Height which the process can rise\n\n\nm8_wall\n         - Wall number of map of sectors opposite with which you collided\n\n\nradius\n          - Radius of the mode 8 processes\n\n\n\n\nSee: \nConstants\n - \nGlobal data\n - \nSyntax", 
            "title": "Predefined local data"
        }, 
        {
            "location": "/constants_predefined/", 
            "text": "Each of the predefined constants are now described.\n\n\nm320x200 .. m1024x768\n - Videomodes\n\n\ntrue\n                  - True value\n\n\nfalse\n                 - False values\n\n\ns_kill\n                - Signal to kill processes \n\n\ns_wakeup\n              - Signal to wake processes up\n\n\ns_sleep\n               - Signal to make processes dormant\n\n\ns_freeze\n              - Signal to freeze processes\n\n\ns_kill_tree\n           - Signal to kill processes and sons\n\n\ns_wakeup_tree\n         - Signal to wake processes and sons up\n\n\ns_sleep_tree\n          - Signal to make processes and sons dormant\n\n\ns_freeze_tree\n         - Signal to freeze processes and sons\n\n\nall_text\n              - Indicator of all the texts\n\n\nall_sound\n             - Indicator of all the sounds\n\n\ng_wide\n                - Indicator of width\n\n\ng_height\n              - Indicator of height\n\n\ng_x_centre\n            - Indicator of horizontal centre\n\n\ng_y_centre\n            - Indicator of vertical centre\n\n\nc_screen\n              - Screen coordinates\n\n\nc_scroll\n              - Scroll window coordinates\n\n\nc_m7\n                  - Mode7 window coordinates\n\n\npartial_dump\n          - Partial background dump\n\n\ncomplete_dump\n         - Complete background dump\n\n\nno_restore\n            - Disabled screen restoration\n\n\npartial_restore\n       - Partial screen restoration\n\n\ncomplete_restore\n      - Complete screen restoration\n\n\nc_0 .. c_9\n            - Indicators of windows\n\n\nmin_int\n               - Minimum value of data\n\n\nmax_int\n               - Maximum values of data\n\n\npi\n                    - Mathematical value of pi\n\n\nKey codes\n     - Keytable codes\n\n\n_case_sensitive\n       - Distinguish capital and small letters\n\n\n_extended_conditions\n  - Extended conditions\n\n\n_free_syntax\n          - Free syntax\n\n\n_hidden\n               - Hidden file\n\n\n_ignore_errors\n        - Ignore all errors\n\n\n_max_process\n          - Max number of processes\n\n\n_no_check\n             - Do not check execution errors\n\n\n_no_id_check\n          - Do not check the identifiers\n\n\n_no_null_check\n        - Do not  check accesses to NULL\n\n\n_no_optimization\n      - Do not optimise the codes\n\n\n_no_range_check\n       - Do not check the rank\n\n\n_no_strfix\n            - Do not enlarge the text strings\n\n\n_normal\n               - file normal\n\n\n_simple_conditions\n    - Simple conditions\n\n\n_subdir\n               - Subdirectory\n\n\n_system\n               - system file\n\n\n_volid\n                - Volume etiquette\n\n\nall_drawing\n           - Indicator of all drawings\n\n\nseek_cur\n              - Current position of the file\n\n\nseek_end\n              - Final position of the file\n\n\nseek_set\n              - Beginning of file\n\n\n\n\nSee: \nGlobal data\n - \nLocal data\n - \nSyntax", 
            "title": "Constants predefined"
        }, 
        {
            "location": "/program_debugger/", 
            "text": "The programs debugger is an advanced tool, whose use first requires a correct understanding of all the programming concepts explained from chapter number 5 of the DIV Games Studio's book (User's Handbook).\n\n\n+70,0\nThe debugger is a dialog box that can be activated in programs' run time for one of the following reasons:\n\n\n\n\n\n\nThe program was entered with the option \nprograms \\ debug program\n.\n\n\n\n\n\n\nThe \nF12\n key was pressed in a program's run time.\n\n\n\n\n\n\nAn \nerror of execution\n arose in the program.\n\n\n\n\n\n\nA \ndebug\n statement was found in the executed program.\n\n\n\n\n\n\nThis tool allows us to execute the program statement by statement, verifying the value taken by the different program's data when necessary. It is useful because, on checking the program's execution step by step, it can find the mistakes eventually made by the programs.\n\n\nAs it is a dialog with a great deal of information, each of its sections are now described separately.\n-\n\n\n\n\nUpper information line\n\n\nTwo messages are reported in the upper part of the window. To the left, there is one indicating the \nnumber of processes active in the program\n out of the \ntotal that can be created\n. For instance, if it reports 23/3201, it means that there are 23 processes active in the program and that up to 3201 could be created before\nusing up the available memory for processes.\n\n\nThe maximum number of processes vary from some programs to others, depending on the number of their local and private variables.\n\n\nThe \nidentifying code\n of the process selected in the list, as well as its current state (normal, killed, asleep or frozen) are indicated to the right.\n\n\n\n\nList of active processes\n\n\nThis list appears in the upper left part of the debugger with a scrolling bar to its right. All the active processes in the program are shown in it. By active processes we mean the processes that have been created and that still have not been disappear. The following information appears for each process:\n\n\n\n\n\n\nThe process name in the program.\n\n\n\n\n\n\nIts identifying code in brackets (occasionally, there is no space to put it entirely).\n\n\n\n\n\n\nA letter indicating its state (\nA\n-Normal, \nK\n-killed, \nS\n-Asleep and\n\nF\n-Frozen).\n\n\n\n\n\n\nThe percentage of accomplished execution for the following frame.\n\n\n\n\n\n\nThe scrolling bar must be used to move through the processes' list.\n\n\nImportant\n: One of the processes appears with a white tip arrow pointing out its name. This is the process that \nis being executed\n in the program currently. Therefore, the next statement of the program will belong to this process.\n\n\nOne of the processes appears tagged with a black band. This is the process about which information is shown in the right part of the window (close to this list of processes). This process may be selected with the mouse, by clicking on the list.\n\n\nIt is very important to distinguish between the process in execution and the\nprocess about which the information is shown, as they don't have to necessarily be equal. For the information about the process in execution to be shown, it is necessary to select it (that of the white arrow) by clicking on the list with the left mouse button.\n\n\n\n\nInformation box about the indicated process\n\n\nTo the right of the previous list, information about the program tagged with a black band in the list (not the process in execution) is shown. Its identifying code and its state was shown in the uppermost line.\n\n\nThe complete process name is shown in a dark background's box. Below it\nthere is another box with the graphic of this process (when it is bigger, it will be reduced to fit this box).\n\n\nThe button \nSee data\n appears to the right of the graphic. This button allows us to access another dialog box in which all the data of the process must be consulted and modified. It will be later explained in the section \nInspecting data\n.\n\n\nThe (\nx\n,\ny\n) coordinates of the process, the system of coordinates used by it (referred to the \nscreen\n, to a \nscroll\n or to  a \nmode 7\n) and the mirrors or transparencies applied to the graphic of the process are always shown following this button..\n\n\nFinally, four buttons allow us to access the \nfather\n process (the\nprocess that called the one is selected), the \nson\n process (last process called by the selected one), the younger brother (\nsmallbro\n, the last one called by the father before it) and the elder brother (\nbigbro\n, the following one called by the father after it). If these buttons don't lead to any other process, that is because there is no process with that relationship.\n\n\n\n\nPartial execution controls\n\n\nTwo buttons called \nExec.Process\n and \nNext FRAME\n below the previous information box allow us to execute the program partially.\n\n\nExecution of the process\n. This first button allows the program to continue\njust to the end of the process currently under execution (the one pointed with the white arrow in the list). All its statements will be executed until it reaches the next \nFRAME\n (until the process is ready for the next frame of the game).\n\n\nNext FRAME\n. The second button will execute the program to its next frame, first executing all the pending processes and displaying the next frame of the game (in the debugger's background). The debugger will stop in the first statement of the first process to be executed in the new frame. It is possible to displace the dialog box with the debugger (by dragging its title bar) in order to contemplate the result of the previous frame of the game.\n\n\n\n\nDebugging box of the program's listing\n\n\nThe code of the program is shown in the lower part of the debugger.\nThe identifying code of the process under execution (again, the one pointed with the white arrow in the list) appears in the left upper corner.\nBelow it, there are three buttons and, to its right, the code window.\n\n\nIn the \ncode window\n, another white arrow indicates the line including the next statement to be executed by the process. It can be notice how the statement also appears highlighted in white from the rest of the code.\n\n\nThis window's contents can be displaced with the \ncursors\n keys. The program's lines can be tagged with a black band. Nevertheless, it is not possible to modify the program from the debugger. Indeed, to modify the program it is necessary to finish its execution (which can be done by pressing \nALT+X\n) and return to the editor of the environment.\n\n\nThe first button called \nProcess\n allows us to go in the code window to one of the processes of the program directly. A list containing all the processes found in the program will appear, being necessary to select the desired process with the mouse. However, it won't change the process currently under execution, which will continue to be the same.\n\n\nThe second button allows us to establish a \nBreakpoint\n in the program. For that, it is first necessary to tag the line of the listing with the black band. On reaching this line (with the cursors), the program must stop. Then, this button must be activated, appearing the line in red.\n\n\nBreakpoints can not be established in all the lines of the program,\nbut only in those for which the executable code has been generated\n(in which any action is performed).\n\n\nMany breakpoints can be established in the program. To execute the program until it reaches one of these points, suffice will be to close the debugger or press the \nESC\n key.\n\n\nTo \ndisable\n a breakpoint, it is necessary to select the line and click on the same button again.\n\n\nThe last button, \nDebug\n, is the one that really allows us to debug the program statement by statement. Every time it is clicked on, one of the program's statements will be executed. When a process finishes its execution, or\ncompletes a frame, you will pass to the first statement to be executed of the next process.\n\n\n\n\nInspecting data\n\n\n+71,0\nBy clicking on the button \nSee data\n of the programs' debugger it is possible to access this other dialog box, in which the values of the program's data can be consulted (and even modified) in the point in which it has stopped,\nnormally with the aim of carrying out tests in it.\n\n\nMost of this box is occupied by the data list. Each of them are shown with their name and numeric value. This list always appears in alphabetical order.\n\n\nThe data set appearing in this list can be selected through a series of switches. The two upper switches define the two following sets.\n\n\n\n\n\n\nPredefined\n. When this switch is activated, all the data predefined in the language will be included in the list. Thus, it will be possible to access the predefined local data (such as x, y, angle, size, ...), the predefined global data and the predefined constants.\n\n\n\n\n\n\nDefined by the user\n. This switch selects all the new data defined in the program. These are the specific constants, variables, tables and structures of every program.\n\n\n\n\n\n\nBesides selecting the data depending on whether they are predefined or new, they can be selected according to the sphere in which they have been declared,\nwith the following switches.\n\n\n\n\n\n\nCONST\n. This switch is used to include the constants in the list, even if the constants are not data, but synonymous of a numeric value. Therefore, they can not be modified.\n\n\n\n\n\n\nGLOBAL\n. On activating this switch, all the global data (accessible\nby all the processes) will be included in the list.\n\n\n\n\n\n\nLOCAL\n. When this switch is activated, the local data (the data that all the processes of the program have) will be included in the list.\n\n\n\n\n\n\nPRIVATE\n. This switch selects the specific data of the process tagged in the debugger window to include them in the list. These data exclusively are for the program's internal use.\n\n\n\n\n\n\nThe list of data can be displaced with the vertical scrolling bar\nor with the \ncursors\n and \nPg.Up / Pg.Dn\n keys.\n\n\nThe button \nChange\n allows us to modify the value of the selected data; only the constants can not be modified. A new dialog will appear with a text box in which the new value of the variable must be input. Any variable of the list can be selected with the \ncursors\n or clicking on it.\n\n\nBelow this button, there are other two buttons with the symbols\n -\n and\n +\n. They are used to \nmodify the index of tables and structures\n, which can also be done with the \nright cursor\n and \nleft cursor\n keys. The table or structure whose index is intended to change must previously be selected in the list.\nThis is the way to observe or modify any element of a table or structure\n\n\nFinally, a series of buttons appears in the lower part of this dialog. These buttons, mentioned below, allow us to display the value of a variable in a  specific way:\n\n\n\n\n\n\nAngle\n. This button allow us to display the variable as an angle. The angles are specified internally (in the programs) in degree thousandths. The\nvalue of the variable will be displayed as an angle in degrees and radians.\n\n\n\n\n\n\nProcess\n. If the variable is the \nidentifying code\n of a process, on selecting this display filter, the name of this process will appear in the list as a value of the variable.\n\n\n\n\n\n\nText\n. When the variable is a text or a pointer oriented to a text (to a literal\nof the program), that text will be displayed in the list by clicking on this button.\n\n\n\n\n\n\nLogical\n. If a variable contains a logical value, on applying this filter to it, in the upper list will be shown whether it is \nfalse\n or \ntrue\n.\nIn the language, on evaluating them as logical conditions, the odd numbers are considered true, and the even numbers are considered false.\n\n\n\n\n\n\nOnce the display filter of a variable has been established, it will remain during the rest of the program's execution. The same button must be double-clicked to display again the contents of the variable as a numeric value.\n-", 
            "title": "Program debugger"
        }, 
        {
            "location": "/commands_in_the_graphic_environment/", 
            "text": "Commands in the graphic environment\n\n\n\n\nALT+X\n         - To exit from the graphic environment to the operative system.\n\n\nESC+Control\n   - To exit the environment and programs directly.\n\n\nALT+S\n         - To execute a session of the MS-DOS operative system.\n\n\nESC\n           - To cancel a dialog box.\n\n\nTAB\n           - To chose the selected control of a window or box.\n\n\nEnter\n         - To activate the selected control.\n\n\nF1\n            - To invoke the help window.\n\n\nF2\n            - To save the selected program.\n\n\nF4\n            - To open a program.\n\n\nF10\n           - To save and execute the selected program.\n\n\nF11\n           - To compile the selected program.\n\n\nF12\n           - To save and debug the selected program.\n\n\nControl+ALT+P\n - To save a snapshot of the graphic environment (DIV_*.PCX)", 
            "title": "Commands in the graphic environment"
        }, 
        {
            "location": "/common_commands_in_the_games/", 
            "text": "Common commands in the games\n\n\n\n\nALT+X\n        - To exit the game.\n\n\nESC+Control\n  - To exit the game.\n\n\nControl+ALT+P\n - To save a snapshot of the game (SNAP*.PCX)\n\n\nF12\n          - To invoke the programs' debugger.\n\n\nPause\n        - To stop the game immediately.", 
            "title": "Common commands in the games"
        }, 
        {
            "location": "/commands_in_the_programsapostrophe_debugger/", 
            "text": "Commands in the programs' debugger\n\n\n\n\nCursors.\n  - Shift through the listing.\n\n\nPg.Up.\n    - Previous page.\n\n\nPg.Dn.\n    - Following page.\n\n\nF4\n        - Execute until the selected line is reached.\n\n\nF5\n        - To see the listing of a process.\n\n\nF6\n        - To execute the current process.\n\n\nF7\n        - To see or edit data.\n\n\nF8\n        - To debug a statement.\n\n\nF9\n        - To set a breaking point.\n\n\nF10\n       - Execute the following statement or call a process.\n\n\nF11\n       - To see the timing profiles of the program.\n\n\nF12\n       - To invoke the debugger / To advance frames.\n\n\nF\n         - To execute to the following frame.\n\n\nTAB\n       - To select a button.\n\n\nEnter\n     - To activate a button.\n\n\nESC\n       - To exit the debugger.", 
            "title": "Commands in the programs' debugger"
        }, 
        {
            "location": "/commands_in_the_programsapostrophe_editor/", 
            "text": "Commands in the programs' editor\n\n\n\n\nGeneric commands.\n\n\n\n\nF5\n        - To go to the beginning of a program's process.\n\n\nControl+Z\n - To zoom the selected program's window.\n\n\n\n\nBasic movement and edit commands.\n\n\n\n\nCursors\n                   - Basic movement of the cursor.\n\n\nHome\n                      - To go to the beginning of the line.\n\n\nEnd\n                       - To go to the end of the line.\n\n\nPgdn\n                     - Following page.\n\n\nPgup\n                     - Previous page.\n\n\nInsert\n                    - To toggle between insert and overwrite.\n\n\nDelete\n                    - To delete the cursor character.\n\n\nClear\n                     - To delete the character previous to the cursor.\n\n\nTAB\n                       - To go to the following tabulation.\n\n\nShift+TAB\n                 - Distabulate.\n\n\nControl+Delete, Control+Y\n - To delete the current line.\n\n\nControl+Right\n             - Following word.\n\n\nControl+Left\n              - Previous word.\n\n\nControl+Pgup\n             - To go to the beginning of the program.\n\n\nControl+Pgdn\n             - To go to the end of the program.\n\n\nControl+Home\n              - To go to the beginning of the page.\n\n\nControl+End\n               - To go to the end of the page.\n\n\n\n\nSearch and replacement commands.\n\n\n\n\nALT+F, Control+F\n     - To search for a text.\n\n\nALT+N, F3, Control+L\n - To repeat search.\n\n\nALT+R, Control+R\n     - To replace a text.\n\n\n\n\nBlocks commands of type Q EDIT.\n\n\n\n\nALT+A\n        - To tag the beginning or the end of a permanent block.\n\n\nALT+U\n        - To untag the permanent block.\n\n\nALT+C\n        - To copy the block to the current position.\n\n\nALT+M\n        - To move the block to the current position.\n\n\nALT+D, ALT+G\n - To delete the block.\n\n\n\n\nBlocks commands of type EDIT.\n\n\n\n\nShift+Movement keys\n    - To tag the volatile block (Movement keys:\n\nCursors, Control + Right, Control + Left, Pg.Up, Pg.Dn, Home, End\n).\n\n\nShift+Insert\n      - To paste block.\n\n\nControl+Insert\n    - To copy block.\n\n\nShift+Delete\n      - To cut block.\n\n\nControl+X\n         - To cut block.\n\n\nControl+C\n         - To copy block.\n\n\nControl+V\n         - To paste block.\n\n\nDelete\n            - To delete block.", 
            "title": "Commands in the programs' editor"
        }, 
        {
            "location": "/commands_in_the_graphic_editor/", 
            "text": "Commands in the graphic editor\n\n\n\n\nGeneric commands.\n\n\n\n\nF1\n                - To invoke the help window.\n\n\nESC\n               - To exit the graphic editor.\n\n\nCursors, OP/QA\n    - Movement of the cursor.\n\n\nSpace bar\n         - Equivalent to clicking with the left mouse button.\n\n\nShift+Movement\n    - 8 by 8 pixels movement.\n\n\nShift+Left button\n - To take the colour from the screen.\n\n\nW, S\n              - To choose colour within the current range.\n\n\nShift+W, S\n        - To choose current range.\n\n\nControl+Cursors\n   - To choose colour and range.\n\n\nBackspace\n         - To undo.\n\n\nShift+Delete\n      - To repeat action (redo).\n\n\n0\n                 - To select the transparent colour.\n\n\nB\n                 - To highlight the transparent colour.\n\n\nC\n                 - colours window.\n\n\nM\n                 - Mask window.\n\n\nT\n                 - Select a paintbrush.\n\n\nU\n                 - Select a texture.\n\n\nX\n                 - visualise a texture.\n\n\nZ\n                 - To change the zoom percentage.\n\n\n\n\nCommands of selecting tool.\n\n\n\n\nF2\n             - Pen, for hand drawing.\n\n\nF3\n             - Straight lines.\n\n\nF4\n             - Multi line, stringed lines.\n\n\nF5\n             - Curves b\nzier.\n\n\nF6\n             - Multi curve, stringed curves.\n\n\nF7\n             - Rectangles and boxes.\n\n\nF8\n             - Circles and circumferences.\n\n\nF9\n             - Paint spray.\n\n\nF10\n            - Filling of surfaces.\n\n\nF11\n            - Blocks edit.\n\n\nF12\n            - Undo and redo actions.\n\n\nShift+F1\n       - To write texts.\n\n\nShift+F2\n       - To position control points.\n\n\nShift+F3\n       - Dotting bar.\n\n\n\n\nSpecific commands.\n\n\n\n\nControl\n  - To move selection (bar: to select a block).\n\n\nD\n        - To stump (bars: pen, lines, curves and spray).\n\n\nH\n        - To hide the cursor (bar: offset block).\n\n\nK\n        - Copy window (bar: select block).\n\n\n +, -\n    - To vary the strength (bar: multi curve).\n\n\n +, -\n    - Change the checkpoint (bar: checkpoints).", 
            "title": "Commands in the graphic editor"
        }, 
        {
            "location": "/common_helpforward_slash_questions_about_div/", 
            "text": "Where can I find information about DIV?\n\n\nThe DIV Games Studio Environment has its own dedicated web site \nWWW.DIV-ARENA.COM\n,\nfrom here you can download upgrades and utility packages, get technical support, review / submit \nGames designs and chat to other DIV users about cool new games, hints on obtaining the best from DIV etc..\nin fact talk about whatever you wish.\n\n\nHow can I obtain help about ... ?\n\n\nAll options accessible from options menus are described\nexclusively in the \nuser manual\n for DIV Games Studio 2.\n\n\nHow can I resolve a configuration problem ?\n\n\nFor sound problems, incomplete installations, etc., see the chapter\n\nresolution of problems\n of this electronic help.\n\n\nWhat improvements have been made for this version?\n\n\nThey are divided in two groups: the \nnew language capabilities\n\n(explained in this \nhelp\n), and the \nnew environment\n (explained in the \nuser's manual\n).\n\n\nWhy did I get the error message \nCan't recognise the file type\n?\n\n\nIt is possible that you are attempting to load a file with an incorrect menu, which means,\nthe palette menu serves only to load palettes, the files menu only loads\ngraphics files (groups of graphics), the programs menu loads programs or text files, etc.\n\n\nYou may also be attempting to load a PCX or BMP Map in true colour,\nthis version of DIV can work only with 256 colour graphics, so these types of \nfiles are impossible to import. The graphics which you want to load\ninto DIV must first be converted into 256 colours with another application.\n\n\nHow can I stretch a graphic?\n\n\nTo stretch a graphic you must press the left mouse button in the\nmap window, not on the bar with its name, but on the proper graphic\ncontained in the window. Then move the mouse to the position\nin which you want leave the graphic and let go of the left mouse button \n(you can stretch maps in files, to the trash, to the background, in other maps\nor in the fonts generator).\n\n\nHow can I drag a graphic contained in another graphic out?\n\n\n+126,0\nYou must select the part of the graphic which you want to drag out from\nthe section blocks. The new section could be represented as a rectangle, \npainting contours, etc.\n-\n\n\n+133,0\nOnce the selection has been extracted many new icons  will appear \non the toolbar, including the icon \ncut the window\n.\nAfter pressing on this the desktop \ncreates a new map window\n\n\nand inserts the selected zone\n into it.\n-\n\n\nHow can I cut and copy the graphics?\n\n\n+126,0\n See also the last question. To cut and move graphics you must access\nthe \ntoolbar\n, inside the picture window, selecting the icon which shows cutters.\n\n\nFrom the desktop some operations can be achieved, such as copying\none graphic into another, this can be made by dragging the first one\ninto the second. Also a copy of a graphic can be created if you drag\nit to the background (area of the desktop which doesn't contain any windows).\n\n\nWhat must I do if the system becomes unstable?\n\n\nDIV Games Studio is a very complex program and, although it is stable\nin its execution, it is possible that a module makes an error\nafter completing a determined action, or crashes the PC.\n\n\nIf this happens, to return the system to its original state, you must load\nDIV from the MSDOS prompt indicating the parameter\n /SAFE\n (introducing the command \nD.EXE /SAFE from the directory where the program was installed), to enter DIV \nin  \ndebug mode\n.\n\n\nWhat must I do to learn the programming language ?\n\n\nThe basic concepts are not explained in this help file, but in the user's \nmanual for DIV Games Studio 2, in the chapters 4, 5 \n 6.\n\n\nAlso you can learn a lot from the Examples of the language functions \n(See the list of functions in the language help)\nand the tutorials, which are simple mini-games \ndesigned to simplify the learning of the language (you can find these tutorials\nin the directory PRG/TUTOR of DIV Games Studio 2).\n\n\nHow are the graphics loaded into the games?\n\n\nIn a game the graphics contained in the map (MAP or PCX files) can be used, \nloading them using the functions \nload_map()\n or \nload_pcx\n, \nor placing some graphics in FPG file of several graphics and then loading them \nwith the function \nload_fpg()\n, this last option has an advantage because \nmany graphics can be loaded at the same time in the game.\n\n\nOften the graphics are assigned to the variable\n\nLOCAL graph\n of the processes of the game.\n\n\nHow to show a new graphic in the game?\n\n\nTo create a new graphic or \nsprite\n in a game, first a new process (\nPROCESS\n) \nmust be created with the commands which will manage\nits conduct in the game, then every time you want\nto create a process of this type, you must call the process\n(See how to make a \ncall to a process\n).\n\n\nHow to undo a process?\n\n\nTo undo or \nkill\n a process of the game, you can execute\na \nRETURN\n statement from itself or, to kill a process from another process, \nsend a signal s_kill (See the function \nsignal()\n, which is used for this).\n\n\nWhich are the functions that manage the mouse?\n\n\nThe mouse is not controlled by any function, but by the global structure\n\nmouse\n, you can access the help file about \nlanguage\n / \nglobal data\n\nto see the other structures which control other important aspects of the games.\n\n\nWhere are all DIV files loading from ?\n\n\nWhen the function load_fpg( ... ) is called in a program \nthe internal manager of DIV attempts to locate this file following this\nmethod (supposing that it intends to load the file \nDIR/file.EXT\n):\n\n\n\n\n\n\nFirst it checks where the executable (EXE) of the game is,\nor in the main directory of DIV (where D.EXE is) in case the game\nwill be executed from this environment.\n\n\n\n\n\n\nThen the program attempts to open the file from the directory \nspecified in the function (\nDIR/file.EXT\n).\n\n\n\n\n\n\nIf the program has still failed to open the file, it will attempt to load the\nfile inside a directory which has the same extension as the one specified, \nsuch as \nEXT/DIR/file.EXT\n.\n\n\n\n\n\n\nIf this is still not found, the program will try to load the file\nwithout a specific path, meaning \nfile.EXT\n.\n\n\n\n\n\n\nFinally, if the file was not found in any of those directories, the program will\nattempt to find the file in the directory whose name coincides with the extension \nof the file, ignoring the path passed to the function, such as \nEXT/file.EXT\n.", 
            "title": "Common help/ questions about DIV"
        }, 
        {
            "location": "/help_about_the_calculator/", 
            "text": "How it functions?\n\n\nThe calculator included in the environment functions differently from conventional\ncalculators, it is made for programmers, and therefore functions as an evaluator \nof expressions.\n\n\nIts use is very simple, you write the mathematical expression and press\nthe \nEnter\n key. Pressing \nF1\n will always take you to this help page.\n\n\nFor example, you can type in the calculator the expression 2+2 and press \nEnter\n;\nthe value 4 will appear in the results window. To introduce a new expression\nthe previous one must first be rubbed out, this can be done by pressing the \nESC\n key.\n\n\nIt is possible to introduce complex expressions, using parentheses \n( )\n to indicate\nthe priorities in the calculations.\n\n\n\n\nThe \noperators\n which can be used in the calculator expressions are\nthe following (indicates all symbols accepted in each operator):\n\n\n + -\n      Addition and Subtraction.\n\n\n * /\n      Multiplication and division.\n\n\n % MOD\n    Modulus, or remainder from whole division.\n\n\n \n \n     Binary rotation to the left.\n\n\n \n \n     Rotation to the right.\n\n\n ^ ^^ XOR\n OR exclusive binary.\n\n\n | || OR\n  OR binary.\n\n\n \n \n AND\n AND binary.\n\n\n ! NoT\n    Binary negation.\n\n\n SQRT\n     Square root.\n\n\n\n\nThe calculator has two cells which can change their {mode of\nfunctioning}. Their options are the following:\n\n\nInt\n - If this cell activates, all operations will be rounded down \nto whole number values,  as in the language DIV. For example, the result \nof the division 8/3 will be 2.\n\n\nHex\n - When this cell is activated, the result will be shown in\nthe hexadecimal system. Also numbers in this system can be introduced \ninside the expressions preceded by '\n0x\n' (as in the language).\n\n\n\n\nNote On the desktop as many calculators as necessary can be opened,\n\n\nso many different expressions can be visible simultaneously .", 
            "title": "Help about the calculator"
        }, 
        {
            "location": "/help_about_the_calculator/#note-on-the-desktop-as-many-calculators-as-necessary-can-be-opened", 
            "text": "so many different expressions can be visible simultaneously .", 
            "title": "Note On the desktop as many calculators as necessary can be opened,"
        }, 
        {
            "location": "/compilation_options/", 
            "text": "These options modify the form in which DIV interprets a program and the code\nwhich it generates for DIVl. Normally it is not necessary to specify any options.\n\n\nTo add one or more of these options to program the word \nCOMPILER_OPTIONS\n must \nbe specified as the initial statement of the program (commentaries in margin) \nfollowed by the names of the included options.\n\n\nIf many options are included, they must appear separated by commas, adding\nalways a semicolon at the end (after the last option).\n\n\n\n\ndisposed compilation options\n\n\n_max_process=x\n\n\nWhere x is a whole positive number. This defines the max number of\n simultaneous processes permitted during execution. This can be set\nwhen a program is completed (when it is known how many \nprocesses it will have in one moment), to optimise memory during execution. \nWhen this value isn't defined, a min of 1 Mb (and a max of 2 Mb) will be reserved \nfor the program memory.\n\n\n_extended_conditions\n\n\nAllows you to use assignations inside a condition (such as:\nIF(id2=get_id(...))...)\n; \nit was permitted by default in the first version. It may be necessary to declare this \noption in order to ensure that programs written with DIV1 function in DIV2.\n\n\n_simple_conditions\n\n\nInterprets the symbol = as a comparison, when it appears inside a condition. \nThis is the opposite case to previously (and incompatible with l), \nonce this option is included you will be able to make comparisons like \n\nIF(x=0)...\n, instead of interpreting them as an assignation of the value 0 to \nthe variable x.\n\n\n_case_sensitive\n\n\nThis option Differentiates between capital and small letters.\nIf this option is active \nAbc\n and \nabc\n will be\ntwo different names. It is important to know that, if activated,\nall reserved words of the language such as (\nprogram\n, \nloop\n,\n\nframe\n, \nif\n, ...) must be put in small letters.\n\n\n_ignore_errors\n\n\nForbids the appearance of error messages during the\nexecution of the program. The majority of errors will be ignored\n(such as memory errors, file not found, divisions by zero, etc.) , \nwe don't advise you use this option but, if you want it to be included, \nthen do so only if the programs are finished, sufficiently checked, and without known\nerrors, before compiling the installation (See the final considerations).\n\n\n_free_syntax\n\n\nPermits you to use free syntax. With this option the symbols \n;\n (semicolon) \nat the end of the statements will no longer be necessary and parentheses are no \nlonger required in statements like \nIF\n, \nWHILE\n or \nUNTIL\n. For example, in\nthis mode statements such as: \nIF a\n0 a=0 END\n (See before final considerations) \nwill be valid.\n\n\n_no_strfix\n\n\nWill not finish automatically text strings. When\nyou put a character in a variable of type \nSTRING\n, normally the program \ninserts the character after the end of the string,\nand adds white spaces with the character \nNUL\n (ascii 0) at the end of the string. \nThis option disables this characteristic.\n\n\n_no_optimization\n\n\nDo not optimise the generated code. By default the programs are optimised. \nThis option can be included to disable these optimisation processes. This means,\nif this option is specified, the programs will go slower and will occupy more memory.\n\n\n_no_range_check\n\n\nDoesn't check that values accessed are out of the range of tables and structures. \nThe compiler generates code to check during the execution that expressions used as indexes\nof a table or structure are in the permitted limits,\nand to show an error when a value is out of range. This option prevents this code being \ngenerated.\n\n\n_no_id_check\n\n\nDo not check the validity of the identification code. The\ncompiler also generates code to check the validity of the\nidentifier when it is used to access a local variable\nfrom another process (as in \nid2.graph\n). If this option is specified\nat the beginning of the program, then this checking will not be done.\n\n\n_no_null_check\n\n\nDo not check the accesses to null pointers (\nNULL POINTER\n). \nThis disables the checking of attempts to access memory with null pointers \nor undefined pointers. Including this option means the code \nto protect these accesses of reading or writing in memory will not be generated .\n\n\n_no_check\n\n\nDoes not allow any security checking.\nThis option unites the three previous options, and forbids the compiler\nto generate code to check any type of anomalous operation during the execution. \nThe programs will run faster, but it is not recommended to use these options\nuntil the programs have been tested and are without errors.\n\n\n\n\nTo use these options, for example, the program can be begun with the following statement:\n\n\nCOMPILER_OPTIONS _max_process=64,_no_id_check;\n\n\nIn this case the compiler is set to reserve memory for 64 simultaneous processes in the \nexecution of the program, and no validity checks on the identifiers to local variables of other\nprocesses will be made (it is useful to switch off these checks,\nwhen the programmer has sufficient experience to know what he's doing).\n\n\n\n\nImportant: considerations about some of the options.\n\n\n1.\n New users of DIV or those with little programming experience can\nsimplfy a little the conditions with the option \n_simple_conditions\n, so that \ntwo values with the symbol \n=\n (also with the symbol \n==\n) can be compared. \nIn contrast, users who have more experience, will probably prefer to activate \nthe option \n_extended_conditions\n so that more complex conditions can be created, \nwith assignations inside of them.\n\n\n2.\n The options \n_ignore_error\n and all variants of \n_no_check\n must be used only\nby experienced programmers, and only in the finished version of the program. \nOtherwise we don't recommend you use it, because major execution errors\ncan be produced, and it will be more difficult to find the cause without these error \nmessages.\n\n\n3.\n In general the programs are already optimised (the generated code is \n60%\n\nfaster than in the previous version), but any of these options will significantly change  the\nspeed of execution. The \nprofiles of time\n of the debugger can be used to see the \nrepercussions of each option.\n\n\n4.\n The option \n_ignore_errors\n is often not the best, nearly always it is better to use\nthe function \nignore_error()\n to ignore selectively some predetermined errors the \nprogram is known to generate during execution.\n\n\n5.\n The use of free syntax (with \n_free_syntax\n) also has many dangers. Because\nthere is no differentiation between lines and white spaces, and in some cases \nincorrect interpretations can be produced . For example, in the\nstatement: \nIF right ++x END\n, the compiler will interpret that the symbol\n ++\n is the\npost increment of \nright\n, instead of the pre increment of \nx\n (although this symbol\nis united with this last variable). Another similar anomaly can happen using C programming\nstyle pointers, for instance, with these two consecutive assignations:  \na=1 *ptr=2\n, the compiler\nwill interpret them as: \na=(1*ptr)=2\n (although they were in different phrases).\nBut in general, if you are not using preincrements or C programming style pointers, \nthere will be no problems with the free syntax (also parentheses or\nsemicolons can be used in concrete cases, to resolve these small problems).\n\n\n6.\n However, the option \n_max_process\n (which is the only one which must be followed by the\nthe symbol \n=\n and a number value) is strongly recommended. If the \nnumber of processes which the program can have running simultaneously is known,\nthen less memory needs to be reserved (leaving this free for graphics, sounds, etc.).", 
            "title": "compilation options"
        }, 
        {
            "location": "/compilation_options/#disposed-compilation-options", 
            "text": "_max_process=x  Where x is a whole positive number. This defines the max number of\n simultaneous processes permitted during execution. This can be set\nwhen a program is completed (when it is known how many \nprocesses it will have in one moment), to optimise memory during execution. \nWhen this value isn't defined, a min of 1 Mb (and a max of 2 Mb) will be reserved \nfor the program memory.  _extended_conditions  Allows you to use assignations inside a condition (such as: IF(id2=get_id(...))...) ; \nit was permitted by default in the first version. It may be necessary to declare this \noption in order to ensure that programs written with DIV1 function in DIV2.  _simple_conditions  Interprets the symbol = as a comparison, when it appears inside a condition. \nThis is the opposite case to previously (and incompatible with l), \nonce this option is included you will be able to make comparisons like  IF(x=0)... , instead of interpreting them as an assignation of the value 0 to \nthe variable x.  _case_sensitive  This option Differentiates between capital and small letters.\nIf this option is active  Abc  and  abc  will be\ntwo different names. It is important to know that, if activated,\nall reserved words of the language such as ( program ,  loop , frame ,  if , ...) must be put in small letters.  _ignore_errors  Forbids the appearance of error messages during the\nexecution of the program. The majority of errors will be ignored\n(such as memory errors, file not found, divisions by zero, etc.) , \nwe don't advise you use this option but, if you want it to be included, \nthen do so only if the programs are finished, sufficiently checked, and without known\nerrors, before compiling the installation (See the final considerations).  _free_syntax  Permits you to use free syntax. With this option the symbols  ;  (semicolon) \nat the end of the statements will no longer be necessary and parentheses are no \nlonger required in statements like  IF ,  WHILE  or  UNTIL . For example, in\nthis mode statements such as:  IF a 0 a=0 END  (See before final considerations) \nwill be valid.  _no_strfix  Will not finish automatically text strings. When\nyou put a character in a variable of type  STRING , normally the program \ninserts the character after the end of the string,\nand adds white spaces with the character  NUL  (ascii 0) at the end of the string. \nThis option disables this characteristic.  _no_optimization  Do not optimise the generated code. By default the programs are optimised. \nThis option can be included to disable these optimisation processes. This means,\nif this option is specified, the programs will go slower and will occupy more memory.  _no_range_check  Doesn't check that values accessed are out of the range of tables and structures. \nThe compiler generates code to check during the execution that expressions used as indexes\nof a table or structure are in the permitted limits,\nand to show an error when a value is out of range. This option prevents this code being \ngenerated.  _no_id_check  Do not check the validity of the identification code. The\ncompiler also generates code to check the validity of the\nidentifier when it is used to access a local variable\nfrom another process (as in  id2.graph ). If this option is specified\nat the beginning of the program, then this checking will not be done.  _no_null_check  Do not check the accesses to null pointers ( NULL POINTER ). \nThis disables the checking of attempts to access memory with null pointers \nor undefined pointers. Including this option means the code \nto protect these accesses of reading or writing in memory will not be generated .  _no_check  Does not allow any security checking.\nThis option unites the three previous options, and forbids the compiler\nto generate code to check any type of anomalous operation during the execution. \nThe programs will run faster, but it is not recommended to use these options\nuntil the programs have been tested and are without errors.   To use these options, for example, the program can be begun with the following statement:  COMPILER_OPTIONS _max_process=64,_no_id_check;  In this case the compiler is set to reserve memory for 64 simultaneous processes in the \nexecution of the program, and no validity checks on the identifiers to local variables of other\nprocesses will be made (it is useful to switch off these checks,\nwhen the programmer has sufficient experience to know what he's doing).   Important: considerations about some of the options.  1.  New users of DIV or those with little programming experience can\nsimplfy a little the conditions with the option  _simple_conditions , so that \ntwo values with the symbol  =  (also with the symbol  == ) can be compared. \nIn contrast, users who have more experience, will probably prefer to activate \nthe option  _extended_conditions  so that more complex conditions can be created, \nwith assignations inside of them.  2.  The options  _ignore_error  and all variants of  _no_check  must be used only\nby experienced programmers, and only in the finished version of the program. \nOtherwise we don't recommend you use it, because major execution errors\ncan be produced, and it will be more difficult to find the cause without these error \nmessages.  3.  In general the programs are already optimised (the generated code is  60% \nfaster than in the previous version), but any of these options will significantly change  the\nspeed of execution. The  profiles of time  of the debugger can be used to see the \nrepercussions of each option.  4.  The option  _ignore_errors  is often not the best, nearly always it is better to use\nthe function  ignore_error()  to ignore selectively some predetermined errors the \nprogram is known to generate during execution.  5.  The use of free syntax (with  _free_syntax ) also has many dangers. Because\nthere is no differentiation between lines and white spaces, and in some cases \nincorrect interpretations can be produced . For example, in the\nstatement:  IF right ++x END , the compiler will interpret that the symbol  ++  is the\npost increment of  right , instead of the pre increment of  x  (although this symbol\nis united with this last variable). Another similar anomaly can happen using C programming\nstyle pointers, for instance, with these two consecutive assignations:   a=1 *ptr=2 , the compiler\nwill interpret them as:  a=(1*ptr)=2  (although they were in different phrases).\nBut in general, if you are not using preincrements or C programming style pointers, \nthere will be no problems with the free syntax (also parentheses or\nsemicolons can be used in concrete cases, to resolve these small problems).  6.  However, the option  _max_process  (which is the only one which must be followed by the\nthe symbol  =  and a number value) is strongly recommended. If the \nnumber of processes which the program can have running simultaneously is known,\nthen less memory needs to be reserved (leaving this free for graphics, sounds, etc.).", 
            "title": "disposed compilation options"
        }, 
        {
            "location": "/types_of_data/", 
            "text": "In DIV there exists data of the types \nINT\n), \nSTRING\n (text strings), \nWORD\n \n(16 bit whole positive values), \nBYTE\n (8 bit whole positive values) and \nPOINTER\n (pointers, of all\nthese types). Also tables and structures (also of any types) of 2 or 3 dimensions \n(see the \ndeclaration of a table\n)can be defined. \n\n\nINT\n - whole numerical data between -2147483648 and +2147483647 (\nmin_int\n ... \nmax_int\n).\n\n\nWORD\n - whole numerical data between 0 and 65535 (whole of 16 bit without sign).\n\n\nBYTE\n - whole numerical data between 0 and 255 (whole of 8 bit without sign).\n\n\nPOINTER\n - Pointers to data of any type.\n\n\nSTRING\n - strings of text (tables of 8 bit characters without sign, between 0 and 255)\n\n\n\n\nNote The reserved word \nINT\n can be omitted, because all data will be of this type by default\n\n\n(32 bit whole numbers with sign).\n\n\n\n\nSee: \nDeclaration of data", 
            "title": "types of data"
        }, 
        {
            "location": "/types_of_data/#note-the-reserved-word-int-can-be-omitted-because-all-data-will-be-of-this-type-by-default", 
            "text": "(32 bit whole numbers with sign).   See:  Declaration of data", 
            "title": "Note The reserved word INT can be omitted, because all data will be of this type by default"
        }, 
        {
            "location": "/data_of_type_int/", 
            "text": "Whole numerical data between -2147483648 and +2147483647 (values defined\nin the constants \nmin_int\n ... \nmax_int\n).\n\n\nThis is the basic data type of the language, when the\n\ntype of the data\n is not otherwise specified , it will be \nINT\n by default.\n\n\n\n\nSee: \ntypes of data\n - \nDeclaration of a data", 
            "title": "data of type INT"
        }, 
        {
            "location": "/data_of_type_word/", 
            "text": "Numerical whole data between 0 and 65535 (16 bit whole value without sign).\n\n\nTables of type \nWORD\n can signify a big saving of memory,\nwith respect to tables of type \nINT\n(which occupy \ntwice as much\n memory). \nBut \nthe fastest will be operations with data of type\n \nINT\n.\n\n\nSee the \nadjustment of data in memory\n, where the amount of memory \noccupied with the different types of data is shown.\n\n\n\n\nSee: \ntypes of data\n - \nDeclaration of a data", 
            "title": "data of type WORD"
        }, 
        {
            "location": "/data_of_type_byte/", 
            "text": "Whole numerical data between 0 and 255 (8 bit whole value without sign).\n\n\nThe tables of type \n BYTE\n can signify a big saving of memory,\nwith respect to the tables of type \nINT\n (which occupy \n4 times more\n memory). But\n\nthe fastest operations will be with data of type\n \nINT\n.\n\n\nSee the \nadjustment of data in memory\n, where the amount of memory \noccupied with the different types of data is shown.\n\n\n\n\nSee: \ntypes of data\n - \nDeclaration of a data", 
            "title": "data of type BYTE"
        }, 
        {
            "location": "/data_of_type_pointer/", 
            "text": "Pointers to data of any type (\nINT\n), \nWORD\n,\n\nBYTE\n and \nSTRING\n).\n\n\nThe pointers in the DIV language are different to\nother programming languages, for one thing they are more simple to use.\n\n\nThese pointers are used as if they were mobile tables, that is, tables which can be defined\nwhere they are situated, assigning them an \nOFFSET\n (to the data). \nSo you can access the data situated in this position from\n\npointer[index]\n, for reading and writing of the values.\n\n\n\n\ndifferent data of type pointer\n\n\nINT POINTER\n - Pointer to whole number data. The word INT can be omitted, declaring\na pointer to data of type \nINT\n as \nPOINTER name;\n.\n\n\nWORD POINTER\n - Pointer to a list or table of data of type \nWORD\n.\n\n\nBYTE POINTER\n - Pointer to a list or table of data of type \nBYTE\n.\n\n\nSTRING POINTER\n - Pointer to a string of text contained in a \nSTRING\n.\n\n\nSTRUCT POINTER\n - Pointer to a structure, which must be declared as {STRUCT\nPOINTER name_structure \nname\n;}. Where \nname\n will be the pointer to the structure.\n\n\n\n\nFor example, if in a program there exist different tables of type \nWORD\n (declared as\n\nWORD t1[9], t2[9], t3[9];\n), then a denominated pointer \nptr\ncan be defined \nwhich permits you to access to any of the tables (as \nWORD POINTER ptr\n;). In addition\nyou must assign the direction or location of the specific table to the pointer\n(such as \nptr = OFFSET t1;\n) to access it. From then on you can access the\nvalues of the table with the pointer (you can access \nt1[n]\n using the term \nptr[n]\n).\n\n\nThe functioning of the pointers \nINT\n), \nWORD\n and \nBYTE\n are practically identical\n(they allow you to access a list of consecutive data).\n\n\nThe pointers \nSTRING\n permit you to access only one string of text (all\ncharacters contained in that string).\n\n\nIn the declaration of the pointers of type \nSTRUCT\n, the name of the structure\nto which the pointers refer must be declared. The pointers can give access to only one structure\nbut, after assigning the \nOFFSET\n of the structure (or of any register)\nyou than have access to all fields and successive registers, as if the pointer were\na conventional structure.\n\n\nNote To declare a pointer to a structure it is necessary to have previously defined the structure.\n\n\nIt's enough to define the different fields, but it is not\nnecessary to define the number of registers of the structure.\n\n\n\n\nLimitation in the access of the pointers.\n\n\nYou can't access the written data before the \nOFFSET of the pointer\nis established. \nThis \nOFFSET\n can't be assigned in the declaration of the pointer,\nit must be done in a statement of the program, until this statement is reached the pointer\nwill value 0 (\npointer zero\n). The access to data with the pointer zero will provoke an\nexecution error.\n\n\nIt is possible \nto limit the range of access of a pointer\n, indicating in its declaration the\nmax value from the index permitted for it. For it must be only\nindicated in brackets, after the name of the pointer. For example, the following\ndeclaration:\n\n\nSTRING POINTER s[32];\n\n\nDefines the pointer to one string of text, but it will stop to access\ndirectly to its 33 (from 0 to 32) firsts characters. If it is intended\nto access out of these limits, the program will advert it indicating an access\nout of the rank.\n\n\n\n\nSee: \ntypes de data\n - \nDeclaration of a data\n - \nOFFSET", 
            "title": "data of type POINTER"
        }, 
        {
            "location": "/data_of_type_pointer/#different-data-of-type-pointer", 
            "text": "INT POINTER  - Pointer to whole number data. The word INT can be omitted, declaring\na pointer to data of type  INT  as  POINTER name; .  WORD POINTER  - Pointer to a list or table of data of type  WORD .  BYTE POINTER  - Pointer to a list or table of data of type  BYTE .  STRING POINTER  - Pointer to a string of text contained in a  STRING .  STRUCT POINTER  - Pointer to a structure, which must be declared as {STRUCT\nPOINTER name_structure  name ;}. Where  name  will be the pointer to the structure.   For example, if in a program there exist different tables of type  WORD  (declared as WORD t1[9], t2[9], t3[9]; ), then a denominated pointer  ptr can be defined \nwhich permits you to access to any of the tables (as  WORD POINTER ptr ;). In addition\nyou must assign the direction or location of the specific table to the pointer\n(such as  ptr = OFFSET t1; ) to access it. From then on you can access the\nvalues of the table with the pointer (you can access  t1[n]  using the term  ptr[n] ).  The functioning of the pointers  INT ),  WORD  and  BYTE  are practically identical\n(they allow you to access a list of consecutive data).  The pointers  STRING  permit you to access only one string of text (all\ncharacters contained in that string).  In the declaration of the pointers of type  STRUCT , the name of the structure\nto which the pointers refer must be declared. The pointers can give access to only one structure\nbut, after assigning the  OFFSET  of the structure (or of any register)\nyou than have access to all fields and successive registers, as if the pointer were\na conventional structure.", 
            "title": "different data of type pointer"
        }, 
        {
            "location": "/data_of_type_pointer/#note-to-declare-a-pointer-to-a-structure-it-is-necessary-to-have-previously-defined-the-structure", 
            "text": "It's enough to define the different fields, but it is not\nnecessary to define the number of registers of the structure.   Limitation in the access of the pointers.  You can't access the written data before the  OFFSET of the pointer is established. \nThis  OFFSET  can't be assigned in the declaration of the pointer,\nit must be done in a statement of the program, until this statement is reached the pointer\nwill value 0 ( pointer zero ). The access to data with the pointer zero will provoke an\nexecution error.  It is possible  to limit the range of access of a pointer , indicating in its declaration the\nmax value from the index permitted for it. For it must be only\nindicated in brackets, after the name of the pointer. For example, the following\ndeclaration:  STRING POINTER s[32];  Defines the pointer to one string of text, but it will stop to access\ndirectly to its 33 (from 0 to 32) firsts characters. If it is intended\nto access out of these limits, the program will advert it indicating an access\nout of the rank.   See:  types de data  -  Declaration of a data  -  OFFSET", 
            "title": "Note To declare a pointer to a structure it is necessary to have previously defined the structure."
        }, 
        {
            "location": "/data_of_type_string/", 
            "text": "The \nSTRING\n tables are different to the other data types, for one thing their data can only \nbe \nstrings of text\n and they can only have \n1 dimension\n. If a literal is not assigned to them, \nthe string will stay initiated as \n (\nempty string\n).\n\n\nIf a string is defined as \nSTRING s=\nabc\n;\n, then when it is accessed by its\nname (\ns\n), it will refer to the contained string (\nabc\n). Also you can \naccess any character of the string as if it were an element of a table\n(for Example, the statement \ns[3]=\nd\n;\n would add a \nd\n to the string).\n\n\nNote It is not necessary to declare in brackets the length of the text strings\n\n\n(by default 256 characters will be set aside for the string).\n\n\n\n\noperations with strings of text.\n\n\nInside a program, supposing the data \ns\n and \nr\n are of type \nSTRING\n, then \nthe following operations can be performed on the data.\n\n\n1.\n data of type \nSTRING\n can be used in all functions which require\ntext (such as \nwrite\n(0,0,0,0,s), \nload_fpg\n(r), ...).\n\n\n2.\n It is also possible to assign literals to a string by writing \n\ns=\nany text...\n;\n or assigning one string to another, as \ns=r;\n.\n\n\n3.\n the strings Can be summed with statements such as \ns+=\ntext to be added\n;\n or\n\ns=r+\nho\n+\nthe\n;\n.\n\n\n4.\n Also a character can be added to a string with statements such as \ns+=ascii;\n\nor \nr+=\na\n;\n.\n\n\n5.\n A character can be deleted (from the end) of the string with \ns--;\n, \ns-=1;\n \nor \nr=s-1;\n.\n\n\n6.\n Strings can be compared with conditions such as \n(s==\nhello\n)\n, \n(s\n=r)\n,\n\n(s\n0\n+r)\n, etc.\n\n\n7.\n And, finally, a great number of functions for text management exist (See the {#1032,\nlist of functions of the language}).\n\n\n\n\nLiterals of many lines.\n\n\nIt is possible to define literals over many lines, for this you only need to divide the\ntext into many texts, and place them one after the other (without any separation with symbols). \nFor example, a constant can be defined as:\n\n\ngreetings=\nHo\n\n\n       \nthe!\n;\n\n\nThis can also be used to initiate data of type \nSTRING\n. There is no limit\nin the number of lines allowed. Between two following literals only \ncommentaries\n\ncan appear.\n\n\n\n\nSee: \ntypes of data\n - \nDeclaration of data", 
            "title": "data of type STRING"
        }, 
        {
            "location": "/data_of_type_string/#note-it-is-not-necessary-to-declare-in-brackets-the-length-of-the-text-strings", 
            "text": "(by default 256 characters will be set aside for the string).   operations with strings of text.  Inside a program, supposing the data  s  and  r  are of type  STRING , then \nthe following operations can be performed on the data.  1.  data of type  STRING  can be used in all functions which require\ntext (such as  write (0,0,0,0,s),  load_fpg (r), ...).  2.  It is also possible to assign literals to a string by writing  s= any text... ;  or assigning one string to another, as  s=r; .  3.  the strings Can be summed with statements such as  s+= text to be added ;  or s=r+ ho + the ; .  4.  Also a character can be added to a string with statements such as  s+=ascii; \nor  r+= a ; .  5.  A character can be deleted (from the end) of the string with  s--; ,  s-=1;  \nor  r=s-1; .  6.  Strings can be compared with conditions such as  (s== hello ) ,  (s =r) , (s 0 +r) , etc.  7.  And, finally, a great number of functions for text management exist (See the {#1032,\nlist of functions of the language}).   Literals of many lines.  It is possible to define literals over many lines, for this you only need to divide the\ntext into many texts, and place them one after the other (without any separation with symbols). \nFor example, a constant can be defined as:  greetings= Ho          the! ;  This can also be used to initiate data of type  STRING . There is no limit\nin the number of lines allowed. Between two following literals only  commentaries \ncan appear.   See:  types of data  -  Declaration of data", 
            "title": "Note It is not necessary to declare in brackets the length of the text strings"
        }, 
        {
            "location": "/adjustment_of_data_in_memory/", 
            "text": "It is important to stress that all data in this language will be adjusted to \n4 bytes\n \nof memory (the size of data of type \nINT\n. This means that the \nOFFSET\n of all data will \nalways be situated in one area of absolute memory \nmultiple of picture\n.\n\n\nIt has direct implications for data of types \nWORD\n and \nBYTE\n. Because\nthey occupy respectively \n2 bytes\n and \n1 byte\n. therefore, if you define a variable of\ntype \nWORD\n, so, 2 bytes of memory won't be used, and if you define a variable of type\n\nBYTE\n 3 bytes won't be used (because the following data will also be adjusted to 4 bytes).\n\n\nTherefore, to use the PC memory better, we recommend you use these two types of data as \ntables (see the \ndeclaration of a table\n), because the different elements of a table\nalways save as the following, and don't adjust in memory.\n\n\n\n\nExamples of occupation of memory\n\n\nBYTE b1;\n - required memory 1, occupied memory 4.\n\n\nWORD w1;\n - required memory 2, occupied memory 4.\n\n\nINT i1;\n - required memory 4, occupied memory 4.\n\n\nBYTE b2[7];\n - required memory 8, occupied memory 8.\n\n\nWORD w2[2];\n - required memory 6, occupied memory 8.\n\n\nBYTE b3[2];\n - required memory 3, occupied memory 4.\n\n\nWORD w3[3]\n - required memory 8, occupied memory 8.\n\n\n\n\nAs you can see, the occupied memory (in bytes) by data \nwill always be a multiple value of 4.\n\n\nYou must also remember this in the fields of the \nstructures of data\n because\nfor example; two consecutive variables of type \nWORD\n will occupy \n8 bytes\n,\nwhile a \nWORD\n table with two elements occupies only \n4 bytes\n.\n\n\n\n\nSee: \ntypes of data\n - \nDeclaration of data", 
            "title": "Adjustment of data in memory"
        }, 
        {
            "location": "/adjustment_of_data_in_memory/#examples-of-occupation-of-memory", 
            "text": "BYTE b1;  - required memory 1, occupied memory 4.  WORD w1;  - required memory 2, occupied memory 4.  INT i1;  - required memory 4, occupied memory 4.  BYTE b2[7];  - required memory 8, occupied memory 8.  WORD w2[2];  - required memory 6, occupied memory 8.  BYTE b3[2];  - required memory 3, occupied memory 4.  WORD w3[3]  - required memory 8, occupied memory 8.   As you can see, the occupied memory (in bytes) by data \nwill always be a multiple value of 4.  You must also remember this in the fields of the  structures of data  because\nfor example; two consecutive variables of type  WORD  will occupy  8 bytes ,\nwhile a  WORD  table with two elements occupies only  4 bytes .   See:  types of data  -  Declaration of data", 
            "title": "Examples of occupation of memory"
        }, 
        {
            "location": "/the_function_blocks_/", 
            "text": "The new \nFUNCTION\n blocks behave the same way as the functions of any\nother programming languages, they execute sequentially (not in parallel\nas the \nPROCESS\n blocks do), not returning before they are finished.\n\n\nFUNCTION\n \nname\n \n(\n \nparameters\n \n)\n\n\nDeclaration of private data\n\n\nBEGIN\n\n\n[\nlt;statement\ngt;](declaration_of_statementsdot.md) **;**\n\n...\n\n\n\nEND\n\n\nThese blocks will continue to function in a similar way as the normal processes,\nbut with one important difference: they will halt the calling process until the function\nhas finished, in other words, the process which called these functions will be sleeping, \nuntil these functions return or their process will be finished.\n\n\nIf the function doesn't use the statements \nFRAME\n, it will behave as\na normal process, but if a function executes the statement \nFRAME\n, it will not return\nto the block from which it was called (as it would do in a normal process).\n\n\nTherefore, a function can always return a value with \nRETURN\n(\nexpression\n)\n,\nincluding after executing one or more \nFRAME\n statements.\n\n\n\n\nsuccessive programming.\n\n\nIt is not recommended to program only with functions in a successive way, but it is useful to \nknow how it is possible to simplify the understanding of programming DIV for programmers \nof other languages.\n\n\nIt is possible to make a program in the traditional programming style using\nexclusively \nFUNCTION\n blocks, this way at each moment in the execution there will only \nbe one process.\n\n\nAfter programming in this way, the statement \nFRAME\n converts in exactly the same order\nas it \nconverts to video\n. Logically, if there is only one process executing, when it executes \nthis order the system will show the following frame of the program.\n\n\nBut, programming this way, could different graphics be shown on screen?.\n\n\nThe answer is yes, because mini-processes can be created which will function as\nan instruction of the type \npaint the graphic for the following frame\n (different to\nfunctions such as \nput()\n, which paint a graphic forever).\n\n\nTo show a graphic in the following frame a process must be constructed which receives\nthe necessary visual parameters and only executes the \nFRAME\n statement, for example:\n\n\nPROCESS paint_graphic(x,y,graph)\n\n\nBEGIN\n\n\n    FRAME;\n\n\nEND\n\n\nAfter calling this process {a temporal process will be created which will be painted\nin the next frame} and then disappear. Other parameters can be sent to this process\n(besides \nx\n, \ny\n, such as \nfile\n, \nsize\n,\n\nangle\n, \nz\n, ... (See the \npredefined local data\n).\n\n\nIt is clear that, after programming this way, a table of sprites needs to be created \n(normally in a global \nstructure\n) in such way that the program could manage\nall the graphics. This may seem difficult, but is the normal way games are programmed\nin any other language other than DIV.\n\n\n\n\nApplications in the main program.\n\n\nThe statements which appear between the words \nBEGIN\n and \nEND\n of the main program \n(after the declarations of data), control the \nmain process of the program\n. \nIt initiates the program, draws the images and graphics, controls the menu loops , the game loops \n(creating necessary processes), and closes the program.\n\n\nFrom the main program, it can be very useful to call the \nFUNCTION\n blocks. Because this way\nthe main program will be temporarily stopped while the program executes the contents of this function.\n\n\nFor example, the presentation sequence can be made in a function, the menu options in other, etc. \nAlso, remember that functions can always, after finishing,\nreturn a value with the \nRETURN\n(\nexpression\n)\n, which can be useful,\nfor example in the menu to return the option number that was selected.\n\n\nNote Reaching the end of execution of the main code doesn't mean the execution of the\n\n\nprogram is finished, so it will continue if any other processes are still active; if you want to force the \nprogram to close after this code has finished, you can use, for example, the\nfunction \nlet_me_alone()\n just before the \nEND\n of the \nmain code\n, or also the function\n\nexit()\n (in any point of the program).\n\n\n\n\nSee: \nLos blocks PROCESS\n - \nsyntax", 
            "title": "The FUNCTION blocks "
        }, 
        {
            "location": "/the_function_blocks_/#note-reaching-the-end-of-execution-of-the-main-code-doesnt-mean-the-execution-of-the", 
            "text": "program is finished, so it will continue if any other processes are still active; if you want to force the \nprogram to close after this code has finished, you can use, for example, the\nfunction  let_me_alone()  just before the  END  of the  main code , or also the function exit()  (in any point of the program).   See:  Los blocks PROCESS  -  syntax", 
            "title": "Note Reaching the end of execution of the main code doesn't mean the execution of the"
        }, 
        {
            "location": "/global_argv[/", 
            "text": "argv[];\n // Arguments of the program\n\n\nargc;\n   // Number of arguments---------------------------------------\n\n\nYou can access the last parameters of the program (normally after executing it from MS-DOS), \nin a similar way to how it is done in the programming language C, in the global predefined \ndata \nargc\n and \nargv[]\n.\n\n\nThe variable \nargc\n will contain, after executing the program, a number of parameters.\nthe min number of parameters is \n1\n, because the program always counts as a parameter the name \nof the game executable.\n\n\nThe table \nargv[]\n is a list of \ntext strings\n, and will contain as many elements\nas are indicated in the variable \nargc\n, but the name of the program will always be \nstored in \nargv[0]\n.\n\n\n\n\nNote When a program executes from the DIV environment, it will not receive any more\n\n\nparameters, just the name of the executable. Therefore these variables will be useful\nonly for the versions already installed in the programs.\n\n\n\n\nSee: \nglobal data", 
            "title": "GLOBAL argv["
        }, 
        {
            "location": "/global_argv[/#note-when-a-program-executes-from-the-div-environment-it-will-not-receive-any-more", 
            "text": "parameters, just the name of the executable. Therefore these variables will be useful\nonly for the versions already installed in the programs.   See:  global data", 
            "title": "Note When a program executes from the DIV environment, it will not receive any more"
        }, 
        {
            "location": "/global_struct_net/", 
            "text": "STRUCT net;\n\n\n**device;**      // Connection mechanism\n\n**com;**         // communications Port\n\n**speed;**       // Speed of connection\n\n**number;**      // Telephone number\n\n**init;**        // Modem initiation string\n\n**mode;**        // Mode (press or tone)\n\n**server;**      // Indicates if the PC is a server\n\n**max_players;** // Max number of players\n\n**num_players;** // Current number of players\n\n\n\nEND\n\n\nThis data structure requires you to have extensive programming experience \nto know how to create a game oriented for net connection (you can find out \nmore information in the \nuser's manual\n).\n\n\nIt contains data about your PC's net hardware, which are needed in conjunction\nwith the functions \nnet_join_game()\n and \nnet_get_games()\n.\n\n\nThe structure \nnet\n has only one register. In its different fields\nare established the parameters which define the type of connection.\n\n\n\n\ndevice\n - Mechanism with which the connection will be established,\nit can be one of three values:\n\n\n1\n - Connection in one \nlocal net\n, with protocol IPX.\n\n\n2\n - Connection by cable (only two crews).\n\n\n3\n - Modem connection (only two crews).\n\n\nFor the connection mechanism to function the fields of the structure \nnet\n must be initiated, \nbecause many of these parameters are needed to control the mechanism.\n\n\n\n\ncom\n - communications port used for the connection, it means, the\nnumber of COM mechanism (from COM1 to COM4), indicating it as numerical value between \n1\n and \n4\n.\n\n\nThis field only needs to be defined for connections by cable or modem.\n\n\n\n\nspeed\n - speed in bauds (number of bits per second), up to 115000.\nThis speed must correspond to the cable or modem's capabilities,\nand to the amount of data the program requires to run.\n\n\nThis field only needs to be defined for cable or modem connections.\n\n\n\n\nnumber\n - Telephone number, of course this field is necessary only for\nmodem connections.\n\n\nFor example, the telephone number which the modem needs to dial must be assigned with a statement\nlike the following: \nnet.number=\n912345678\n;\n.\n\n\n\n\ninit\n - Initiation string, it is a field only required for modem connections; for example a statement like: \nnet.init=\nATZ\n;\n.\n\n\n\n\nmode\n - mode in which the modem connection must be established (also only for this connection mechanism), the values can be one of the following:\n\n\n0\n - Pulse.\n\n\n1\n - Tones.\n\n\n\n\nserver\n - indicates if a PC (computer) is the server. This (field is only for reading, it can't \nbe modified).\n\n\nIn a connection, only one PC will have the field \nnet.server\n being the value \n1\n, this\nPC will be the server of the game, and will coordinate and control the most important actions\nof the program.\n\n\n\n\nmax_players\n - The max number of players which is allowed per game,\nfrom \n2\n to \n16\n. This field is useful only for LAN (local area network) connections,\nbecause in cable or modem connections the max number of players will always be \n2\n.\n\n\nThis number must coincide with the max number of registers the global\nstructure has used in its communication parcels between the different PCs.\n\n\n\n\nnum_players\n - The current number of players connected to the game,\nfrom \n1\n to \nnet.max_players\n. This is a dynamic value, which  changes as (players connect\n and disconnect from the current game) in real time.\n\n\nThe game program must predetermine if players can dynamically enter and exit\nfrom the game as they wish, or if all of them must be connected before the game starts.\n\n\n\n\nSee: \nglobal data\n - \nnet_join_game()\n - \nnet_get_games()", 
            "title": "GLOBAL STRUCT net"
        }, 
        {
            "location": "/global_struct_m8/", 
            "text": "STRUCT m8[9];\n\n\n**z;**      // Priority of impression\n\n**camera;** // Camera identifier\n\n**height;** // Camera height\n\n**angle;**  // Vertical angle\n\n\n\nEND\n\n\nThis structure of \n10\n registers contains certain fields concerning \nthe modifiable parameters for \nmode 8 windows \n. The ten\nregisters have the same field names, but each one of them\nmodifies the parameters of a mode 8 window differently\n(because up to 10 mode 8 windows can be activated).\n\n\nA \nmode 8 window\n can be defined as a region of the screen which shows a three-dimensional\nmap of sectors.\n\n\nFor a register (from \n0\n to \n9\n) of the \nstructure m8\n to have any sense or purpose,\nyou must first activated its corresponding \nmode 8window\n (from \n0\n to \n9\n) with the\nfunction \nstart_mode8()\n (see this function for more information about mode 8\nwindows}.\n\n\nThe fields of this structure are complementary to the call parameters for this last \nfunction. To see a practical example of a mode 8 window, you can look up help about \nthe function \nload_wld()\n or about \nstart_mode8()\n.\n\n\n\n\nform of use for an m8 structure\n\n\nTo access these fields the name of the field must be preceded \nby the word \nm8\n, the register number in brackets and the symbol \n. (full stop)\n.\n\n\nFor example, if two mode 8 windows are initiated, the number 0 and the number 1, \nyou can access to the \ncamera\n variable of both windows with the terminology\n\nm8[0].camera\n and \nm8[1].camera\n, respectively. When you access mode 8 window number 0 \nyou can also omit the brackets around the window number, this means, that the variable \n\nm8.camera\n and the variable \nm8[0].camera\n are, to all purposes, the same.\n\n\n\n\nIn continuation a detailed description of each field is shown\n\n\nz\n - priority of impression of the mode 8 window, where the plane of depth (layer)that this window \nmust be painted in is indicated, with respect to the rest of the processes. By default, this\nvariable has the value \n256\n which means that, as processes by default have their \nlocal z\n variable \nset to layer \n0\n, the mode 8 window will be painted to a plane of further depth, or more to the background, \nwith the processes' graphics being displayed in front of the window. To change this situation you can modify the\nvariable \nz\n of the window (for example change it to \n -1\n) or the variable \nz\n of\nprocesses (for example place it at \n257\n), then the process graphics will be hidden behind the window.\n\n\n\n\ncamera\n - \nIdentifier code of the process\n where the camera is situated. To move\nthe camera which controls the visible region of the mode 8, all you need to do is create a mode 8 process,\n in other words one which has its local variable \nctype\n \n=\n \nc_m8\n, and put its\n\nidentifier code\n in the \ncamera\n variable of this structure.\nThen, in order to move the camera's position you only need to modify the local variables \nx\n, \n\ny\n, \nz\n and \nangle\n of this process and, for instance, use the function \n\nadvance()\n to move the camera forward.\n\n\n\n\nheight\n - camera height with respect to the process, by default this field\nis initialised as \n32\n. The mode 8 process will be positioned on screen in its vertical\ncoordinate \nz\n, its local variable \nheight\n determines the height of the main process, \nand the field (\nm8.height\n) determines the height of the camera (the user's viewpoint of the process \nwith respect to its base).\n\n\n\n\nangle\n - vertical angle of the camera, the value of this angle is between \n -128\n and \n128\n.\nIt defines whether the camera is pointing upwards or downwards. When \nm8.angle\n values \n0\n,\nwhich is the default value, the camera will be looking horizontally.\n\n\nThe horizontal angle will be the local variable \nangle\n of the main process\nwhich is used as the window  camera (which identifier is contained in \nm8.camera\n).\n\n\n\n\nSee also these other \nlocal variables\n with respect to \nmode 8\n.\n\n\nLOCAL radius\n\n\nLOCAL m8_wall\n\n\nLOCAL m8_sector\n\n\nLOCAL m8_nextsector\n\n\nLOCAL m8_step\n\n\n\n\nSee: \nglobal data\n - \nstart_mode8()", 
            "title": "GLOBAL STRUCT m8"
        }, 
        {
            "location": "/global_struct_m8/#form-of-use-for-an-m8-structure", 
            "text": "To access these fields the name of the field must be preceded \nby the word  m8 , the register number in brackets and the symbol  . (full stop) .  For example, if two mode 8 windows are initiated, the number 0 and the number 1, \nyou can access to the  camera  variable of both windows with the terminology m8[0].camera  and  m8[1].camera , respectively. When you access mode 8 window number 0 \nyou can also omit the brackets around the window number, this means, that the variable  m8.camera  and the variable  m8[0].camera  are, to all purposes, the same.   In continuation a detailed description of each field is shown  z  - priority of impression of the mode 8 window, where the plane of depth (layer)that this window \nmust be painted in is indicated, with respect to the rest of the processes. By default, this\nvariable has the value  256  which means that, as processes by default have their  local z  variable \nset to layer  0 , the mode 8 window will be painted to a plane of further depth, or more to the background, \nwith the processes' graphics being displayed in front of the window. To change this situation you can modify the\nvariable  z  of the window (for example change it to   -1 ) or the variable  z  of\nprocesses (for example place it at  257 ), then the process graphics will be hidden behind the window.   camera  -  Identifier code of the process  where the camera is situated. To move\nthe camera which controls the visible region of the mode 8, all you need to do is create a mode 8 process,\n in other words one which has its local variable  ctype   =   c_m8 , and put its identifier code  in the  camera  variable of this structure.\nThen, in order to move the camera's position you only need to modify the local variables  x ,  y ,  z  and  angle  of this process and, for instance, use the function  advance()  to move the camera forward.   height  - camera height with respect to the process, by default this field\nis initialised as  32 . The mode 8 process will be positioned on screen in its vertical\ncoordinate  z , its local variable  height  determines the height of the main process, \nand the field ( m8.height ) determines the height of the camera (the user's viewpoint of the process \nwith respect to its base).   angle  - vertical angle of the camera, the value of this angle is between   -128  and  128 .\nIt defines whether the camera is pointing upwards or downwards. When  m8.angle  values  0 ,\nwhich is the default value, the camera will be looking horizontally.  The horizontal angle will be the local variable  angle  of the main process\nwhich is used as the window  camera (which identifier is contained in  m8.camera ).   See also these other  local variables  with respect to  mode 8 .  LOCAL radius  LOCAL m8_wall  LOCAL m8_sector  LOCAL m8_nextsector  LOCAL m8_step   See:  global data  -  start_mode8()", 
            "title": "form of use for an m8 structure"
        }, 
        {
            "location": "/c_m8/", 
            "text": "This constant is used to assign to the predefined local variable \nctype\n which \nserves to define the type and number of coordinates (dimensions) a process will have. \nIts value is set to \n3\n.\n\n\nThis value (3) is the value the variable \nctype\n understands \nas meaning the graphic coordinates are contained in a mode 8 window, a three-dimensional \nsector map which the graphics are shown.\n\n\nFor more information about  \nmode 8 windows\n, you can access\nthe function \nstart_mode8()\n, used to activate them.\n\n\nOther constants exist which are used for other coordinates systems,\nhere is the complete list :\n\n\n[c_screen](c_screen.md) - coordinates of screen\n\n[c_scroll](c_scroll.md) - coordinates of scroll\n\n[c_m7](c_m7.md)     - coordinates of mode 7\n\n**c_m8**            - coordinates of mode 8\n\n\n\n\n\nSee: \nconstants\n - \nctype\n - \nstart_mode8()", 
            "title": "c_m8"
        }, 
        {
            "location": "/global_struct_dirinfo/", 
            "text": "STRUCT dirinfo;\n\n\n**files;**      // Number of files in list\n\n**name[1024];** // File names\n\n\n\nEND\n\n\nThis global predefined structure is used as the return value of the function\n\nget_dirinfo()\n, to contain the list of files in a directory (or folder).\n\n\nIt consists of one structure register, which groups one variable\n\nfiles\n and one table of pointers in the \ntext strings\n (\nname[]\n).\n\n\n\n\nIn continuation a detailed description of each field is shown\n\n\nname[]\n - The function \nget_dirinfo()\n only returns the \ntotal number\n of files listed;\nthe names of these files are saved in the global structure, in the table \nname[]\n\n(the first name of file is saved in \ndirinfo.name[0]\n, the second in \ndirinfo.name[1]\n, etc.).\n\n\n\n\nfiles\n - The \ntotal number\n of files listed which this function returns are also saved in this field \n(in \ndirinfo.files\n).\n\n\n\n\nThe list of file names are always saved in alphabetical order, the function \nqsort()\n \ncan be used to order the structure by other criterion.\n\n\n\n\nSee: \nglobal data\n - \nget_dirinfo()", 
            "title": "GLOBAL STRUCT dirinfo"
        }, 
        {
            "location": "/global_struct_fileinfo/", 
            "text": "STRUCT fileinfo;\n\n\n**string fullpath[254];** // Full name\n\n**drive;**                // Drive letter\n\n**string dir[254];**      // Directory\n\n**string name[7];**       // Name\n\n**string ext[3];**        // Extension\n\n**size;**                 // Size (in bytes)\n\n**day;**                  // Day\n\n**month;**                // Month\n\n**year;**                 // Year\n\n**hour;**                 // Hour\n\n**min;**                  // Minute\n\n**sec;**                  // Second\n\n**attrib;**               // Attributes\n\n\n\nEND\n\n\nThis global predefined structure is used as the return value of the function\n\nget_fileinfo()\n, to contain the attributes of a file (or subdirectory).\n\n\nIt is a one register structure, which groups different strings of text (data of \ntype \nSTRING\n) and numeric variables (data of type \nINT\n).\n\n\n\n\nBelow is a detailed description of each field is shown\n\n\nfullpath\n - Full name (including the path). The file path can be specified completely (beginning with\nthe root directory of the drive, such as \nC:\\WINDOWS...\n) or relative to the current directory\n(starting from where the game executes, such as \nMAP\\MIOS...\n).\nIn all cases, \nfileinfo.fullpath\n always returns the full path\nfrom the root directory, including the drive letter.\n\n\n\n\ndrive\n - Drive disk where the file is situated.\nThe drive disk is returned not as its corresponding letter, but as a number, \nestablishing the following correspondence: \n1\n for ### A, \n2\n for \nB\n:, \n3\n for ### C, etc.\n\n\n\n\ndir\n - The directory where the file is situated. This string not only returns \nthe name of the folder or directory where the file is, but also the full path,\nbeginning with the current directory and listing all the directories in the path (for example \n\\DIV\\MAP\\\n)\nrelative to the directory of the program executable. \nThe return value always has an inverted bar () at the beginning and at the end.\n\n\n\n\nname\n - the filename, this field (\nfileinfo.name\n), returns the\nname of the file, without its suffix/extension, up to a maximum of \n8 characters\n.\n\n\n\n\next\n - Extension of the file. The extension of the file is returned in this field, \nin a string which includes the point which separates the filename from its extension.\n\n\n\n\nsize\n - file size, this value will be \n0\n if the information refers to a directory. \nThe size returns as a number of simple data, this means, as a multiple of data like \n\nINT\n (number of bytes in multiples of four (4,8,12,16 etc...)). It is possible to \nchange this relationship by modifying the global variable \nunit_size\n).\n\n\n\n\nday\n - Day of the month of the last actualisation of the file.\n\n\nmonth\n - Month of the last actualisation of the file.\n\n\nyear\n - Year of the last actualisation of the file.\n\n\nhour\n - Hour of the last actualisation (from \n0\n to \n23\n).\n\n\nmin\n - Minute of the hour.\n\n\nsec\n - Second of the minute.\n\n\n\n\nattrib\n - Attributes of the file, they indicate the characteristics of the\nfile, if it is a system file, a read-only file, an archive file ,etc. \nThis value is the sum of the following constants:\n\n\n0\n - Normal file.\n\n\n1\n - Read-only file.\n\n\n2\n - file archive.\n\n\n4\n - System file.\n\n\n8\n - Volume Label.\n\n\n16\n - Subdirectory.\n\n\n32\n - file speed.\n\n\nFor example, for a system and archive file, the value of \nfileinfo.attrib\n\nwould be \n6\n (2 archive + 4 system).\n\n\n\n\nSee: \nglobal data\n - \nget_fileinfo()", 
            "title": "GLOBAL STRUCT fileinfo"
        }, 
        {
            "location": "/global_struct_video_modes/", 
            "text": "STRUCT video_modes[31];\n\n\n**width;**  // Width of mode\n\n**height;** // Height of mode\n\n**mode;**   // Number of mode\n\n\n\nEND\n\n\nIn the global predefined structure \nvideo_modes\n, at the beginning of all programs, \nthe \nlist of VESA modes\n supported by the PC's video adaptor are detailed (all of them \nof \n256 colours\n), up to a \nmaximum of 32\n (from [0] to [31]).\n\n\nThe number of found VESA modes is saved in the global variable \nnum_video_modes\n.\n\n\nThis information is generated by the system automatically, so you don't need\nto call any function. For all found modes the following information is registered :\n\n\nwidth\n - Number of horizontal pixels of the video mode.\n\n\nheight\n - Number of vertical pixels of the video mode.\n\n\nmode\n - Number of mode. This value can be used directly as a parameter for the function \nset_mode()\n.\n\n\nOnce the \nwidth\n and \nheight\n of the video mode which you want to activate has been selected,\nand therefore the \nnumber of registers\n its structure shall consist of has been defined, \nyou must then activate it by calling the function with :\n\n\nset_mode(video_modes[\nnumber of register\n].mode);\n\n\n\n\nNote Besides the registered modes in this structure, there also exists a list\n\n\nof standard video modes, which numbers are contained in the constants\n\nm320x200 ... m1024x768\n.\n\n\n\n\nSee: \nglobal data\n - \nnum_video_modes\n - \nset_mode()", 
            "title": "GLOBAL STRUCT video_modes"
        }, 
        {
            "location": "/global_struct_video_modes/#note-besides-the-registered-modes-in-this-structure-there-also-exists-a-list", 
            "text": "of standard video modes, which numbers are contained in the constants m320x200 ... m1024x768 .   See:  global data  -  num_video_modes  -  set_mode()", 
            "title": "Note Besides the registered modes in this structure, there also exists a list"
        }, 
        {
            "location": "/global_channel[]/", 
            "text": "channel[31];\n // Use of sound channels---------------------------------------\n\n\nThe global table \nchannel\n maintains information about the use\nof the different (up to 32) sound channels of the audio system.\n\n\nEach time when you play a sound with the function \nsound()\n, it is sent \nto one of these channels. And if the playback of one musical module with the \nfunction \nsong()\n is initiated, a determined number of channels (up to 24) \nare reserved for it.\n\n\nIn this table, each position represents one of these sound channels,\nand the system sets the value of each position to \n1\n when its respective channel is used.\n\n\nThe function \nchange_channel()\n allows you to modify the parameters of\neach one of these channels.\n\n\n\n\nNote The system will never automatically set the value of the positions of the table \nchannel\n to \n0\n,\n\n\nthis must be done with the program code, and similarly the program must determine\nwhen a channel is used once more.\n\n\n\n\nSee: \nglobal data\n - \nchange_channel()", 
            "title": "GLOBAL channel[]"
        }, 
        {
            "location": "/global_channel[]/#note-the-system-will-never-automatically-set-the-value-of-the-positions-of-the-table-channel-to-0", 
            "text": "this must be done with the program code, and similarly the program must determine\nwhen a channel is used once more.   See:  global data  -  change_channel()", 
            "title": "Note The system will never automatically set the value of the positions of the table channel to 0,"
        }, 
        {
            "location": "/global_vsync/", 
            "text": "vsync=0;\n // Wait the vertical retrace---------------------------------------\n\n\nThe global predefined variable \nvsync\n defines a logical value (0 or 1) which\nindicates if it is necessary to wait before doing a \nvertical retrace\n the following\nframe is converted to video (when all processes execute the statement \nFRAME\n).\n\n\nBy default this variable will be set to \n0\n, which means, the process does not delay the\nvertical retrace before converting each frame to video.\n\n\nTo indicate to the system that it must delay the vertical retrace you must set\nthis variable to \n1\n (with the statement \nvsync=1;\n).\n\n\n\n\nNote Delaying the vertical retrace can make movements more soft to the eye\n\n\n(this effect is visible most of all in the panoramic effects, see \nstart_scroll()\n), \n but delaying the retrace will also slow the programs down in the great majority of cases.\n\n\n\n\nSee: \nglobal data", 
            "title": "GLOBAL vsync"
        }, 
        {
            "location": "/global_vsync/#note-delaying-the-vertical-retrace-can-make-movements-more-soft-to-the-eye", 
            "text": "(this effect is visible most of all in the panoramic effects, see  start_scroll() ), \n but delaying the retrace will also slow the programs down in the great majority of cases.   See:  global data", 
            "title": "Note Delaying the vertical retrace can make movements more soft to the eye"
        }, 
        {
            "location": "/global_draw_z/", 
            "text": "draw_z=-255;\n // plane of depth of the primitive graphics ---------------------------------------\n\n\nThe \nprimitive graphics\n are such things as straight lines, rectangles, circles,\netc., which are painted with the function \ndraw()\n.\n\n\nIn this global variable the plane of depth in which the primitive graphic must appear\non screen is indicated, this means what must appear in front and what must appear behind\non screen.\n\n\nThe plane of depth can be any whole number inside the range (\nmin_int\n ... \nmax_int\n), \nthe bigger the number the more to the background the frame will be situated .\n\n\nThe process' graphics have their \nlocal z\n variable set to \n0\n by default, \nthe texts \ntext_z\n are set to \n -256\n and the mouse pointer has its z - value\n\nmouse.z\n set to \n -512\n by default.\n\n\nThis means, that by default, if these values are not modified,\nthe primitive graphic will appear in front of the processes, but behind the mouse pointer \nand the texts.\n\n\n\n\nNote 1 The variable \ndraw_z\n is \nGLOBAL\n for all primitive graphics, in other words,\n\n\nthey cannot be represented in different planes.\n\n\n\n\nSee: \nglobal data\n - \ndraw()", 
            "title": "GLOBAL draw_z"
        }, 
        {
            "location": "/global_draw_z/#note-1-the-variable-draw_z-is-global-for-all-primitive-graphics-in-other-words", 
            "text": "they cannot be represented in different planes.   See:  global data  -  draw()", 
            "title": "Note 1 The variable draw_z is GLOBAL for all primitive graphics, in other words,"
        }, 
        {
            "location": "/global_num_video_modes/", 
            "text": "num_video_modes;\n // Number of detected video modes---------------------------------------\n\n\nThe global variable \nnum_video_modes\n contains the number of VESA video modes\nwhich were detected in the system's graphics adaptor.\n\n\nThe parameters of each one of these modes are registered in the global structure\n\nvideo_modes\n, therefore the variable \nnum_video_modes\n\ndefines the total number of registers defined in this structure.\n\n\n\n\nNote Besides the modes registered in this structure, there exists a list\n\n\nof \n10 standard video modes\n, which numbers are contained in the constants \n\nm320x200 ... m1024x768\n.\n\n\n\n\nSee: \nglobal data\n - \nSTRUCT video_modes\n - \nset_mode()", 
            "title": "GLOBAL num_video_modes"
        }, 
        {
            "location": "/global_num_video_modes/#note-besides-the-modes-registered-in-this-structure-there-exists-a-list", 
            "text": "of  10 standard video modes , which numbers are contained in the constants  m320x200 ... m1024x768 .   See:  global data  -  STRUCT video_modes  -  set_mode()", 
            "title": "Note Besides the modes registered in this structure, there exists a list"
        }, 
        {
            "location": "/global_unit_size/", 
            "text": "unit_size=4;\n // Minimum unit of reading/writing---------------------------------------\n\n\nThe global predefined variable \nunit_size\n indicates the minimum\nunit of reading and writing for the functions of files situated in \nhandles\n.\n\n\nBy default it always has the value \n4\n, because 4 bytes is the unit size \nof the standard data \nINT\n (32 bit whole number), and each piece of  data \nhas 4 bytes assigned in memory (see the \nassignation of data in memory\n).\n\n\nThe functions which count up the number of these \nunit_size\n blocks a variable contains \nare the following:\n\n\nfread()\n\n\nfwrite()\n\n\nfseek()\n\n\nftell()\n\n\nfilelength()\n\n\nAnd also the field \nsize\n of the global structure \nfileinfo\n.\n\n\n\n\nThe minimum size of 4 implies that it is impossible to write to or to read from any files\nwhose length is not a multiple of this number.\n\n\nThis size can be changed; for example assigning \n1\n to \nunit_size\n (with the\nstatement \nunit_size=1;\n). By doing this, all \nlengths\n of the\nprevious functions will be indicated in bytes (and not in units of data).\n\n\nHowever, after changing the unit size, you must remember the following:\n\n\n\n\n\n\nSIZEOF()\n will continue to return the data length (in units of 4 bytes).\nFor example, to save a table on the drive it will be not enough to indicate \nsizeof(\ntable\n)\n\nas its length, you will also need to multiply this value by 4 (if its \nunit_size\n is \ndefined  as \n1\n).\n\n\n\n\n\n\nThe functions of files \nsave()\n and \nload()\n (which are not functions\nbased on the file \nhandles\n) will continue to indicate file length in data.\n\n\n\n\n\n\nThe functions of dynamic memory \nmalloc()\n and \nfree()\n also\nwill continue to work with the length in data, therefore adjustments must be made \nto cater for working with both groups of functions.\n\n\n\n\n\n\n\n\nSee: \nglobal data\n - \nAlignment of data in memory", 
            "title": "GLOBAL unit_size"
        }, 
        {
            "location": "/local_radius/", 
            "text": "radius;\n // Radius (width) of the mode 8 processes ---------------------------------------\n\n\nThis predefined variable is \nLOCAL\n, that means that each\nprocess will have their own value in its variable \nradius\n.\n\n\nThis local variable is used exclusively in mode 8  processes (which have assigned \n\nc_m8\n to \nctype\n).\n\n\nradius\n indicates the radius, or horizontal size, of the process.\nThe system requires this value to calculate any collisions with the limits outlining \nthe borders of the sectors of the three-dimensional map.\n\n\nThe smaller the value of \nradius\n is for a process, the nearer it can be to its walls \nand, therefore, the bigger the pixels (or texel) of its textures will be.\n\n\n\n\nNote For more information about mode 8 windows, see the global structure\n\n\nm8\n and the function \nstart_mode8()\n, which is used to initiate regions of this type.\n\n\n\n\nSee: \nlocal data\n - \nstart_mode8()", 
            "title": "LOCAL radius"
        }, 
        {
            "location": "/local_radius/#note-for-more-information-about-mode-8-windows-see-the-global-structure", 
            "text": "m8  and the function  start_mode8() , which is used to initiate regions of this type.   See:  local data  -  start_mode8()", 
            "title": "Note For more information about mode 8 windows, see the global structure"
        }, 
        {
            "location": "/local_m8_wall/", 
            "text": "m8_wall;\n // Wall number of the sector map ---------------------------------------\n\n\nThis predefined variable is \nLOCAL\n, that means that each\nprocess will have its own value in its variable \nm8_wall\n.\n\n\nThis local variable is used exclusively in mode 8 processes \n(which have assigned the value \nc_m8\n to \nctype\n).\n\n\nthe system stores in the variable \nm8_wall\n, the number of the wall\nthe process has just collided against.\n\n\nThis information can be useful to detect distinct active zones\ninside a map of sectors (such as ports, interrupts, etc.).\n\n\n\n\nNote For more information about mode 8, see the global structure\n\n\nm8\n and the function \nstart_mode8()\n, which is used to\nset up regions of this type.\n\n\n\n\nSee: \nlocal data\n - \nstart_mode8()", 
            "title": "LOCAL m8_wall"
        }, 
        {
            "location": "/local_m8_wall/#note-for-more-information-about-mode-8-see-the-global-structure", 
            "text": "m8  and the function  start_mode8() , which is used to\nset up regions of this type.   See:  local data  -  start_mode8()", 
            "title": "Note For more information about mode 8, see the global structure"
        }, 
        {
            "location": "/local_m8_sector/", 
            "text": "m8_sector;\n // Number of sector in where the process is---------------------------------------\n\n\nThis predefined variable is \nLOCAL\n, that means that each\nprocess will have its own value in its variable \nm8_sector\n.\n\n\nThis local variable is used exclusively in mode 8  processes \n(which have assigned the value \nc_m8\n to \nctype\n).\n\n\nIn \nm8_sector\n the system automatically saves the number of\nthe sector over which the process is situated, inside the map.\n\n\nThe information about the sector number can be useful to program events\nwhere a process enters the specific sector.\n\n\n\n\nNote For more information about mode 8, see the global structure\n\n\nm8\n and the function \nstart_mode8()\n, which is used to\ninitiate regions of this type.\n\n\n\n\nSee: \nlocal data\n - \nstart_mode8()", 
            "title": "LOCAL m8_sector"
        }, 
        {
            "location": "/local_m8_sector/#note-for-more-information-about-mode-8-see-the-global-structure", 
            "text": "m8  and the function  start_mode8() , which is used to\ninitiate regions of this type.   See:  local data  -  start_mode8()", 
            "title": "Note For more information about mode 8, see the global structure"
        }, 
        {
            "location": "/local_m8_nextsector/", 
            "text": "m8_nextsector;\n // Sector the process is directed towards---------------------------------------\n\n\nThis predefined variable is \nLOCAL\n, that means that each\nprocess has its own value in its \nm8_nextsector\n variable.\n\n\nThis local variable is used exclusively in mode 8  processes \n(which have assigned the value \nc_m8\n to \nctype\n).\n\n\nIn \nm8_nextsector\n the system automatically saves the\nsector a process is directed towards. This means that, when the\nprocess collides with one of the map walls (borders), the system checks \nto see if any other sectors exist beyond this boundary, and if so, will store \nits number in this variable.\n\n\nThis information can be useful, for example, to obtain the\nheights at which this sector is situated (See \nget_sector_height()\n)\nand, in this way, can check if the program must adjust its height, and by how much,\nto proceed to the named sector.\n\n\n\n\nNote For more information about mode 8, see the global structure\n\n\nm8\n and the function \nstart_mode8()\n, which is used to\ninitiate regions of this type.\n\n\n\n\nSee: \nlocal data\n - \nstart_mode8()", 
            "title": "LOCAL m8_nextsector"
        }, 
        {
            "location": "/local_m8_nextsector/#note-for-more-information-about-mode-8-see-the-global-structure", 
            "text": "m8  and the function  start_mode8() , which is used to\ninitiate regions of this type.   See:  local data  -  start_mode8()", 
            "title": "Note For more information about mode 8, see the global structure"
        }, 
        {
            "location": "/local_m8_step/", 
            "text": "m8_step;\n // height to which can lift the process---------------------------------------\n\n\nThis predefined variable is \nLOCAL\n, that means that each\nprocess will have its own value in its variable \nm8_step\n.\n\n\nThis local variable is used exclusively in mode 8 processes \n(which have assigned the value \nc_m8\n to \nctype\n).\n\n\nIn \nm8_step\n the maximum height which the process can be raised to reach the sectors is given, \nas \nthe height of step\n which this process can rise by.\n\n\nWhen a process comes across a more elevated sector, the system\nchecks with help of this variable to see if the process can reach this elevated sector, \nif the answer is yes the new height of the process will be set automatically and, \nbut in the contrary case, the process will stop (it will collide with the boundary that\nseparates both sectors).\n\n\n\n\nNote For more information about mode 8, see the global structure\n\n\nm8\n and the function \nstart_mode8()\n, which is used to\ninitiate regions of this type.\n\n\n\n\nSee: \nlocal data\n - \nstart_mode8()", 
            "title": "LOCAL m8_step"
        }, 
        {
            "location": "/local_m8_step/#note-for-more-information-about-mode-8-see-the-global-structure", 
            "text": "m8  and the function  start_mode8() , which is used to\ninitiate regions of this type.   See:  local data  -  start_mode8()", 
            "title": "Note For more information about mode 8, see the global structure"
        }, 
        {
            "location": "/global_fps/", 
            "text": "fps;\n // Number of frames per second---------------------------------------\n\n\nThe global predefined variable \nfps\n (frames per second) maintains the\nnumber of frames per second which the program shows.\n\n\nThis variable is set by the internal processes of DIV Games\nStudio automatically. It doesn't determine this value in an instant, but\nrather takes an average over the last few seconds.\n\n\nThe function \nset_fps()\n allows you to set the number of frames\nper second of the program, but this establishes the ideal number\nof frames and not the actual (which is stored in \nfps\n).\n\n\nThis means, that this variable serves as a counter to determine how many frames\nper second, on average, are converted to video.\n\n\n\n\nNote The variable \nfps\n contains data only for reading, and its value cannot be\n\n\nmodified by the program.\n\n\n\n\nSee: \nglobal data\n - \nset_fps()", 
            "title": "GLOBAL fps"
        }, 
        {
            "location": "/global_fps/#note-the-variable-fps-contains-data-only-for-reading-and-its-value-cannot-be", 
            "text": "modified by the program.   See:  global data  -  set_fps()", 
            "title": "Note The variable fps contains data only for reading, and its value cannot be"
        }, 
        {
            "location": "/welcome_to_div_2015not/", 
            "text": "This help file outlines the basic concepts required in the usage of the DIV Games Studio\ndevelopment environment.\n\n\nUsing this electronic help you can access a lot of information about\nthis environment, but even so, the learning of the programming language and the menu options\nare described only in the \nUser's manual\n.\n\n\n\n\nNote If you are using the DIV programming environment for the first time,\n\n\nyou should know that in order to exit from DIV (or any game created with DIV),\nyou should use the key combination \nALT\n+\nX\n.\n\n\n\n\nWhat's new in DIV3?\n\n\n\n\n\n\nNew language commands and variables\n\n\n\n\n\n\nNew environment aspects\n\n\n\n\n\n\nintroductory chapters\n\n\n\n\n\n\nHow to use the help system\n\n\n\n\n\n\nFrequently asked questions (FAQ)\n\n\n\n\n\n\nResolution of configuration problems\n\n\n\n\n\n\nWhat is DIV Games Studio?\n\n\n\n\n\n\nWorking with windows\n\n\n\n\n\n\nTypes of windows\n\n\n\n\n\n\nFixing a video mode\n\n\n\n\n\n\nThe configuration window\n\n\n\n\n\n\nFirst contact with the language\n\n\n\n\n\n\nDebugging your program\n\n\n\n\n\n\n\n\nDIV Games Studio appeared on the market in December 1998 as the first development environment \nwith a programming language designed exclusively for games programming.\n\n\nIn the beginning, our wish as developers was not the creation of a\nprofessional environment, but more to create a simple and interesting environment which\ncould serve as an introduction to the fascinating world of games development;\nsomething like a \ngame to make games\n in which any person could learn how to program.\n\n\nThe very good response to DIV1 leads us to make this second version of the environment,\nin which the same philosophy is maintained.\n\n\nA great number of received opinions, criticism and wishes permitted us to create \nthe new DIV Games Studio with improvements in all areas. We intended to improve, although only \na little, all areas of the environment. In this sense there are major differences with the \nprevious version, (and they are very practical and logical ones).\n\n\nWe would like to thank everyone who has supported our ideas and this product.\nAt the time of releasing this second version we don't know if an alternative to the DIV environment\nexists, which although on the one hand seems regretful, it does give us pride in the knowledge\nthat such an environment exists here.\n\n\nThe DIV Games Studio team.", 
            "title": "Welcome to DIV 2015!"
        }, 
        {
            "location": "/welcome_to_div_2015not/#note-if-you-are-using-the-div-programming-environment-for-the-first-time", 
            "text": "you should know that in order to exit from DIV (or any game created with DIV),\nyou should use the key combination  ALT + X .   What's new in DIV3?    New language commands and variables    New environment aspects    introductory chapters    How to use the help system    Frequently asked questions (FAQ)    Resolution of configuration problems    What is DIV Games Studio?    Working with windows    Types of windows    Fixing a video mode    The configuration window    First contact with the language    Debugging your program     DIV Games Studio appeared on the market in December 1998 as the first development environment \nwith a programming language designed exclusively for games programming.  In the beginning, our wish as developers was not the creation of a\nprofessional environment, but more to create a simple and interesting environment which\ncould serve as an introduction to the fascinating world of games development;\nsomething like a  game to make games  in which any person could learn how to program.  The very good response to DIV1 leads us to make this second version of the environment,\nin which the same philosophy is maintained.  A great number of received opinions, criticism and wishes permitted us to create \nthe new DIV Games Studio with improvements in all areas. We intended to improve, although only \na little, all areas of the environment. In this sense there are major differences with the \nprevious version, (and they are very practical and logical ones).  We would like to thank everyone who has supported our ideas and this product.\nAt the time of releasing this second version we don't know if an alternative to the DIV environment\nexists, which although on the one hand seems regretful, it does give us pride in the knowledge\nthat such an environment exists here.  The DIV Games Studio team.", 
            "title": "Note If you are using the DIV programming environment for the first time,"
        }, 
        {
            "location": "/new_language_commands_etcdotdot_in_div_version_3dot0/", 
            "text": "More extensive programming language.\n The programming language has been enlarged, including\nmany new characteristics and internal functions, the more prominent of which are detailed\nbelow.\n\n\n\n\n+150,0\nThe \ncompilation options\n are a new characteristic of this version, \nwhich allow you to adapt the process of compilation to the individual requirements of\neach project (see \nCompiler_options\n).\n-\n\n\n+150,0\nIn addition to the first version's data (which are now known as \nINT\n), \nthere now also exists data of the types \nSTRING\n (strings of text), \nWORD\n (16 bit \npositive whole number values), \nBYTE\n (8 bit positive whole number values) and \nPOINTER\n \n(pointers, to all these types).\n-\n\n\n+150,0\nAlso 2 or 3 dimensional \ntables\n and \nstructures\n (also of any of these\ntypes) can be defined (see the \ndeclaration of a table\n), and\nthe structures can be initiated globally (see \ndeclaration of a structure\n).\n-\n\n\n+150,0\nThe new \nFUNCTION blocks\n behave in a similar way to the functions of\nother programming languages, they execute sequentially (and not parallel as the processes do),\nnot returning until they are finished.\n-\n\n\n+171,0\n Different aspects of the \nprogram debugger\n have been improved, with new functions and\nsupport for new types of data. Also new are the \ntime profiles\n, which you can access from the \ndebugger using the keyboard command \nF11\n, here you can observe the time taken in the \nexecution and painting of each process.\n-\n\n\n+152,0\nThe \nerror control system\n for the programs has been improved, creating a \nmore stable and better executable, there also now exists the possibility\nto ignore certain execution errors to allow the program to continue running \n(see the function \nignore_error()\n.\n-\n\n\n+157,0\n*new functions of file management\n* have been added, which give you \nmuch more flexibility and potential over the way a program handles files; \nsee for example \nfopen()\n, \nfseek()\n, \nget_dirinfo()\n, \nchdir()\n, \n\nremove()\n) or \ndisk_free()\n.\n-\n\n\n+158,0\nBesides support for CD-Audio music and digital effects, there now exist\ndifferent functions for the reproduction / playback of music modules \nMOD\n, \nS3M\n and \nXM\n\n(see \nload_song()\n, \nsong()\n or \nset_song_pos()\n).\n-\n\n\n+163,0\n*Optimised code generator.\n* The code generated for the programs is better and\nfaster (at least 60%) than the previous version. Also the created programs \nEXE\n\nare much smaller.\n-\n\n\n+164,0\n*Functions for playing games over the internet or other network.\n* With DIV Games\nStudio 2, it is possible to create games to play by \ncable\n, \nmodem\n and \n\nlocal net IPX\n. This functionality is very simply controlled by the functions \n\nnet_join_game()\n and \nnet_get_games()\n.\n-\n\n\n+165,0\nAlso new is the integration into the language of the ability to \nmanipulate strings of text, with data of type \nSTRING\n, many new\nfunctions (such as for example \nstrcat()\n, \nstrchr()\n, \nupper()\n\nor \nstrdel()\n) have been added along with adapted syntax to work with \nstring expressions directly in the language.\n-\n\n\n+166,0\n*Dynamic memory support\n*. It is possible to ask for and free up memory\ndynamically whilst a program is running, thanks to the functions \nmalloc()\n and\n\nfree()\n (complemented with the new data type \nPOINTER\n).\nAlso the function \nmemory_free()\n allows you to determine the free disposed memory \nin the system at a certain point in the program.\n-\n\n\n+167,0\nYou can also now \norder\n and \ndisorder\n data,\nwith the simple function \nqsort()\n which permits you to order\nand disorder data structures, taking any field as its index.\n-\n\n\n+168,0\nAnother new feature is the ability to \nsearch for a path\n. This is achieved with \ndifferent functions (see \npath_find()\n) which, for instance, allow you to find the shortest\nand best available routes between two points, avoiding any obstacles.\n-\n\n\n+169,0\n*Compression of data.\n* Everything is more compact; the\nexecutables and installed data (can be created as \ncompact and protected installations\n).\nAlso functions of compression are included in the language (see \ncompress_file()\n).\n-\n\n\n+170,0\n*New mode 8.\n* A new mode with up to 10 screen regions, which allows you to visualise \nmaps of three-dimensional sectors. These three-dimensional environments also include an \nintegrated editor in the environment and many specific functions (see for example\n\nstart_mode8()\n, \nset_sector_height()\n, or \nset_fog()\n).\n-\n\n\n\n\n+176,0\n*And much more.\n* What's new in the language doesn't stop here,\nthere are many other improvements and functions (besides the bugs in the original version\nwhich have been fixed). Outlined below we describe what else is new in the DIV programming\nlanguage.\n-\n\n\n\n\n\n\nA new function, called \nforce_pal()\n, allows all {graphics loaded in a program \nto adapt automatically to a palette} at the time of execution.\n\n\n\n\n\n\nFunctions for data encryption also exist, such as \nencode()\n, \n\nencode_file()\n and \ndecode_file()\n.\n\n\n\n\n\n\nThe \nlibrary declarations\n reside now in the headline of the program,\njust after the \nPROGRAM\n statement (see \nIMPORT\n).\n\n\n\n\n\n\nIt is now possible to create programs in \nmuch more video modes\n, because the available\nVESA modes can also be detected (See \nvideo_modes\n).\n\n\n\n\n\n\nIn this new version \nassignations inside a condition\n are prohibited, \nto simplify the programming for less advanced users. However this can be changed \n(see \n_extended_conditions and _simple_conditions\n).\n\n\n\n\n\n\nNow it is possible to define the \nmax number of processes\n which can be active in the \nprogram during execution (see \n_max_process\n).\n\n\n\n\n\n\nIt is now possible to define \nliterals over many lines\n, to do this the text must only be \ndivided into distinctive literals, and put successively (see the \nlimitation symbols of literals\n).\n\n\n\n\n\n\nThe \nsound system\n is completely new, and it is now possible to play back \nWAV files of better quality\n \nin the programs (See \nload_wav()\n and new fields of the structure \nsetup\n). \nAlso new sound functions such as \nchange_channel()\n or \nis_playing_sound()\n have been added.\n\n\n\n\n\n\nAlso it is now permitted to use directly \nframes of PCX format\n in the\nprograms (See \nload_pcx()\n), and to save these files (See \nsave_map/pcx()\n).\n\n\n\n\n\n\nFunctions now exist to fix \na colour of the palette\n, such as (\nset_color()\n) and also\nto localise colours (\nfind_color()\n).\n\n\n\n\n\n\nTrigonometric \nmathematical functions\n as \nsin()\n, \ncos()\n, \ntan()\n,\n\nasin()\n, ... have been added.\n\n\n\n\n\n\nAlso a \nprimitives painting tool\n has been included to create distinct graphics on screen:\nsuch as lines, rectangles and boxes, circles, ... (See \ndraw()\n).\n\n\n\n\n\n\nother functions\n have been added which increase the existing possibilities\nin the creation of programs, such as \nscreen_copy()\n, \nwrite_in_map()\n,\n\ncalculate()\n, \nload_screen()\n, \nxadvance()\n, \nnew_map()\n, ...\n\n\n\n\n\n\nAlso you can count the \nframes per second\n (See \nfps\n), obtain the \nparameters of the program\n (See\n\nargv[]\n), delay the \nvertical retrace\n (See \nvsync\n), control the\nmouse in the programs better (See \nmouse.cursor\n and \nmouse.speed\n), etc.\n\n\n\n\n\n\n\n\nAnd of course, all functions, data and possibilities which were available in the first\nversion of DIV Games Studio, still remain! \n:)\n\n\n\n\nSee also \nNew graphical environment changes", 
            "title": "New language commands etc.. in DIV version 3.0"
        }, 
        {
            "location": "/new_language_commands_etcdotdot_in_div_version_3dot0/#see-also-new-graphical-environment-changes", 
            "text": "", 
            "title": "See also New graphical environment changes"
        }, 
        {
            "location": "/new_additions_to_the_environment_in_version_3dot0/", 
            "text": "More flexibility and simplicity in use.\n The development environment of DIV Games\nStudio has evolved into several smaller modules, and together they form\na more intuitive structure than in the previous version.\n\n\n\n\n+151,0\n*A new help.\n* The help section has been restructured, and of course covers\n everything that's new in the DIV language. The window includes a new navigation bar.\n-\n\n\n+154,0\n*Multiple paintbrush sizes.\n* In the graphical editor paintbrushes of various \nsizes and forms can now be selected, either in monochrome or in greyscale. \nBy pressing the key \nT\n you access the new dialogue; new paintbrushes can also be added, \nadding them to the file \nBRUSH.FPG\n of the \nSYSTEM\n directory.\n-\n\n\n+155,0\n*Cover a Picture with coat or textures.\n* In the graphical editor using the\nkey \nU\n you can access the new dialogue where you can select any\nof the maps from the desktop as a texture to paint onto the surface of an image \n(with the key \nX\n you can see and allocate this texture). The \naerosol\n tool has\nbeen improved, as has the bar of shade \ncheckpoints\n, and also \nnew keyboard commands\n\nwere added (such as \nK\n to copy a graphic in a window, or\n +/-\n to change the checkpoint).\n-\n\n\n+156,0\n*Graphical visualisers.\n* Almost all windows to open files\ncan display a square window \nthumbnail\n which allow you to view the contents\nof these files before they are loaded. It is also possible {to load different\nfiles at once} highlighting them with the mouse while the \ncontrol\n key is held down\n(the \nShift\n key allows you to highlight isolated consecutive graphics).\n-\n\n\n+157,0\n*Developed system of files.\n* In this version the internal management of the FPG files \nhas been improved; errors have been eliminated, thumbnails of the contained maps can be viewed,\nlists can be printed, a complete FPG file transferred to a map and vice versa.\n-\n\n\n+159,0\n*Sound effects editor.\n* The audio has been completely revised, permitting many more \noperations, formats and including a \nmixer\n and \neffects editor\n of the sound. You can access \nthis editor from the sounds menu.\n-\n\n\n+160,0\n*Evaluation of expressions.\n* Now you can access the new \ncalculator\n windows\n(from the system menu) to evaluate numerical expressions while programming, without \nhaving to exit from the DIV environment.\n-\n\n\n+161,0\n*Sprite Generator.\n* The character generator is also a new characteristic of this version.\nIt was made to create a base on which the realistic pictures of humans and animations can be \nrealised. These photo-images can then be modified in the graphical editor.\n-\n\n\n+162,0\n*Three-dimensional maps editor.\n* A menu for 3D maps, their editor\nand all functions related to them in the programming language, are also a new characteristic of \nthis version of DIV Games Studio.\n-\n\n\n+171,0\n*Time profiles.\n* From the program debugger you can access, by pressing F11, the time \nprofiles of the program. These statistics indicate the time consumption of a process during \nthe executing of the program, and allow the manual optimisation of the speed of these programs.\n-\n\n\n+153,0\n*New examples.\n* Several sample games and programs\ndeveloped by users of the previous version of DIV Games Studio are included in this version.\nAlso, on the CD-ROM you can find multiple shareware utilities available for free use in this \ndevelopment environment.\n-\n\n\n+172,0\n*Facility of impression.\n* This version of DIV Games Studio allows you to print,\nin addition to a program list, lists of the graphics contained in the FPG file\nand the electronic help pages.\n-\n\n\n+173,0\n*Volume Controls.\n* Amongst the improvements included in the audio system,\nthere now exists a better volume level control, in the environment and the program. \nIn the CD player window there is a small button which gives you access to the mixer.\n-\n\n\n+174,0\n*Library of graphics.\n* The library of graphics included in the program has been\nenlarged and better structured. Also now maps can be imported of any colour depth in the \nformats BMP, PCX or JPG.\n-\n\n\n+175,0\n*New installation system.\n* The installation system of the program\nhas been completely re-done, generating a more compact and protected installation, \nand using a \nmore intuitive and graphical adaptable interface\n.\n-\n\n\n\n\n+176,0\n*And much more.\n* Many more small improvements in the environment  exist,\nmany of them imperceptible, but they make the environment more powerful and easy to use. \nOutlined below you can see in detail the more relevant of these.\n-\n\n\n\n\n\n\nThe process of entering and exiting\n from the environment \nhas been optimised\n, as has\nthe execution of programs from it, also the environment loads faster and all delays between processes \nare shorter.\n\n\n\n\n\n\nThe program editor is now \nin colour\n, highlighting the key-words of the language, \nalso you can define more clearly, for example, the tabulation size.\n\n\n\n\n\n\nNow, after loading the environment, you have the option to {continue with the previous\nsession} or \nstart a new one\n.\n\n\n\n\n\n\nIt is possible to select \nmore visualisation modes\n for the environment, depending on the modes\nsupported by the installed video-card and VESA adaptator.\n\n\n\n\n\n\nA \ncolour palette editor\n simplifies the generation of explosions (which\ncan now be aborted) and the preparation of the background (a preview is now shown).\n\n\n\n\n\n\nThe \nspeed of the mouse pointer\n can be configured using the small bar\npresented in the configuration window of the system menu.\n\n\n\n\n\n\nIn the fonts windows \na sample of letters appears\n, which indicate which collection \nof characters are selected.\n\n\n\n\n\n\nIt is possible to generate fonts of \nletters with shadows or outlines\n, by simply creating them with\nan outline of 1 pixel of the background colour.\n\n\n\n\n\n\n\n\nSee also \nNew features of the programming language", 
            "title": "New additions to the environment in version 3.0"
        }, 
        {
            "location": "/new_additions_to_the_environment_in_version_3dot0/#see-also-new-features-of-the-programming-language", 
            "text": "", 
            "title": "See also New features of the programming language"
        }, 
        {
            "location": "/resolution_of_configuration_problems/", 
            "text": "General resolution of audio problems.\n\n\nIf the audio system couldn't be initiated, it is most likely because of a sound card\nconflict. This problem is often produced by one of these causes :\n\n\n\n\n\n\nThe card is being used at the same time by \nanother program\n. It cannot\ninitiate the sound if any other program is reading or writing\ndata via the card (such as an  MP3 player or sound capture device).\n\n\n\n\n\n\nA problem can occur with the \nauto-detection\n of the soundcard's parameters.\nYou must execute the sound configuration program or define these values in the \nvariable BLASTER or ULTRASND of the system environment (you can find\nmore information in the user's manual for DIV Games Studio 2).\n\n\n\n\n\n\nBecause the soundcard is \nincompatible\n with DIV. \nIf the card is not a GRAVIS (tm) or SOUND BLASTER (tm), it may be incompatible\nwith DIV Games Studio. The majority of commercial cards are compatible\nwith SOUND BLASTER, but may not be 100% compatible and may present some problems.\n\n\n\n\n\n\nIf your particular problem doesn't fit into any of these three cases,\nyou must first execute the sound configuration program. This can be\ncalled from DIV by pressing \nF4\n, or loading the program \nSETUP.PRG\n from the\n\nSETUP\n directory , and executing it with the key command \nF10\n.\n\n\nIn this program you must input the parameters of your sound card.\nTo obtain these parameters in MS Windows it is probably best to consult\nthe soundcard's handbook, but normally you can also access them the following way: \npressing with the right mouse button in \nMy Computer\n, activating the Properties menu \\\nDevice Manager \\ Sound, video and games Controllers,\nselecting your audio card (normally one compatible with \nSound Blaster\n or \nSB\n) \nand pressing the Properties button. Then a dialogue will appear with the \ncharacteristics of your sound card where, in the Resources pane you'll find:\n\n\n1.\n The IRQ number of your card as an \ninterrupt request value\n.\n\n\n2.\n The DMA and of DMA2 (also denominated as HDMA or DMA16) numbers \nwhich are the two \ndirect memory access\n values.\n\n\n3.\n The port number as the initial value of the first \nenter/exit value\n.\n\n\nAlso you can try to configure the sound system indicating in the \nconfiguration program a simpler card (previous to yours). For example, if you\nhave a soundcard compatible with a \nSound Blaster AWE 64\n or \n128\n and cannot\nget the sound system to initiate; try to configure the system as if it were\na \nSound Blaster 16\n, or \nSound Blaster Pro\n card.\n\n\nAs the last recourse, if it is not possible to configure the sound in your system,\nyou must deactivate it. For this you must execute the configuration program\nand select the value \nWithout sound\n in the field which defines the type of card.\nThen press the \nSave\n button to establish this configuration and deactivate\nthe sound in DIV Games Studio 2.\n\n\nIf you are unable to hear the sound effects in your program on your PC, you probably have a sound \ncard which is not 100% compatible with the Sound Blaster or Gravis Ultrasound family of cards. \nConsult your dealer.\n\n\nNote The reproduction of CD-Audio is independent of the digital sound system\n\n\nwhose configuration is described here; therefore CD music will be reproduced\nalthough the sound system may not have been correctly initialised.\n\n\n\n\nVideo or Graphics card Problems.\n\n\nIf at any time DIV enters a resolution which cannot be displayed properly, the first thing which \nmust be done is to exit from the environment by pressing the key combination \nESC+control\n \n(or \nALT+X\n and \nEnter\n in succession) and, then, re-enter the program in safety mode. To enable this \nmode you must, from the \nMS-DOS\n command prompt and in the directory (FOLDER) in which the program \nwas installed , execute the following command:\n\n\n  D /SAFE\n\n\nThis way you will load up the environment in a low resolution (in 320x200, the most compatible mode),\nfrom this mode you can attempt to put in other resolutions which will be\ncompatible with your graphics card and with your monitor.\n\n\nOn those PCs where the graphics card is not compatible with the standard\nVESA system you must install VESA driver for the card. For this, you must contact your \ncard supplier or technical support of your hardware for the driver. ( A driver is a small program \nwhich must be installed on the PC to give support for some hardware or utilities such as, \nin this case, your video or graphics card).\n\n\n\n\nProblems with the mouse.\n\n\nIf the mouse is jumping on the screen, instead of moving smoothly from point to point, \nit is because you're using an incorrect or out of date mouse handler (the mouse driver is not\nfunctioning properly). You can resolve this problem in one of these ways:\n\n\n1.\n Contact with the supplier of your PC to obtain the latest driver for your mouse.\n\n\n2.\n Change the resolution of the program (with the option \nsystem\\video mode\n)\nto another which does not produce this problem.\n\n\n3.\n (MS-DOS, only for advanced users). Comment out the line in your autoexec.bat file \nin which the mouse driver is loaded. This can be done from the DIV environment, by loading this file \n(situating on the root directory of your hard disk) with the key command F4 \nand adding the word REM at the beginning the line which loads the mouse driver \n(a line which normally finishes with the text ...  mouse.com). Then press\nF2 to save the file, close it (pressing on the upper left corner\nof the text window), exit from DIV (ALT+X) and re-start your PC. If\nyou then have problems with another program which requires this driver,\nreturn to edit the same autoexec.bat file and remove the word REM which was added.\n\n\n\n\nSolution of possible installation problems.\n\n\nIf you find any problem, check the minimum requirements indicated in the program. \nIf you have doubts about one of the elements consult the technical support of your PC \nor your PC supplier.\n\n\nThe most likely problem is reading from the CD-ROM drive; for this, clean the surface of the \nDIV Games Studio CD carefully with a clean and dry duster, and attempt the installation of the \nprogram once more.\n\n\nManual installation\n\n\nIf you couldn't install the program correctly and have a lot of free space on the \nhard disk of your PC (sufficient to allow a maximum installation) you can attempt a manual \ninstallation of the program, by following these steps:\n\n\nMS-DOS users\n - Supposing that your CD-ROM disk drive is the letter D:, select the CD-ROM \ndrive with the following command:\n\n\nD\n\n\nAnd press Enter. Then introduce the following commands (supposing that your hard disk is the C:\ndrive):\n\n\n  XCOPY DATA*.\n C:\\DIV*.\n /S\n\n\nC\n\n\n  CD \\DIV\n\n\n  DEL INSTALL*.\n*\n\n\nPressing Enter after each one of these commands. If you have sufficient space the\nprogram will be installed without any problem, introduce this command to execute it afterwards:\n\n\n  D /SAFE\n\n\nFor the next steps in executing the program, follow the conventional instructions.\n\n\nUsers of Windows 95/98\n - Open the MS-DOS prompt (double clicking on its icon, or via\nstart menu \\ programs \\ ms-dos) and follow the instructions for MS-DOS users. For \nthe remaining executions of the program you can use the instructions that come with the\noperating system, remembering that the program will be installed in the DIV folder\nof your hard disk.\n\n\n\n\nIf you cannot get the program to function correctly with these suggestions, then contact\nyour FastTrak Technical Support, its tel. is (44) 1923 495497 (01923 495497 for UK users) \nduring normal office hours \nMonday to Friday\n from \n09:00 to 17:30\n or go to \nhttp://www.div-arena.com\n\nand try the message forums or the live chatroom.\n\n\nRemember though, that as DIV Games Studio is a big selling product with limited technical support\nfacilities, it is best to first try and follow carefully all instructions and check the website \nbefore making a call to this service.\n\n\nImportant This technical support service does not provide any consultation regarding\n\n\nthe programming language, because we could not give any more advice than is contained in the \n\nhelp file\n and the \nuser's manual\n of the program. With these you can find a solution \nfor any doubts regarding the programming language you have.", 
            "title": "Resolution of configuration problems"
        }, 
        {
            "location": "/resolution_of_configuration_problems/#note-the-reproduction-of-cd-audio-is-independent-of-the-digital-sound-system", 
            "text": "whose configuration is described here; therefore CD music will be reproduced\nalthough the sound system may not have been correctly initialised.   Video or Graphics card Problems.  If at any time DIV enters a resolution which cannot be displayed properly, the first thing which \nmust be done is to exit from the environment by pressing the key combination  ESC+control  \n(or  ALT+X  and  Enter  in succession) and, then, re-enter the program in safety mode. To enable this \nmode you must, from the  MS-DOS  command prompt and in the directory (FOLDER) in which the program \nwas installed , execute the following command:    D /SAFE  This way you will load up the environment in a low resolution (in 320x200, the most compatible mode),\nfrom this mode you can attempt to put in other resolutions which will be\ncompatible with your graphics card and with your monitor.  On those PCs where the graphics card is not compatible with the standard\nVESA system you must install VESA driver for the card. For this, you must contact your \ncard supplier or technical support of your hardware for the driver. ( A driver is a small program \nwhich must be installed on the PC to give support for some hardware or utilities such as, \nin this case, your video or graphics card).   Problems with the mouse.  If the mouse is jumping on the screen, instead of moving smoothly from point to point, \nit is because you're using an incorrect or out of date mouse handler (the mouse driver is not\nfunctioning properly). You can resolve this problem in one of these ways:  1.  Contact with the supplier of your PC to obtain the latest driver for your mouse.  2.  Change the resolution of the program (with the option  system\\video mode )\nto another which does not produce this problem.  3.  (MS-DOS, only for advanced users). Comment out the line in your autoexec.bat file \nin which the mouse driver is loaded. This can be done from the DIV environment, by loading this file \n(situating on the root directory of your hard disk) with the key command F4 \nand adding the word REM at the beginning the line which loads the mouse driver \n(a line which normally finishes with the text ...  mouse.com). Then press\nF2 to save the file, close it (pressing on the upper left corner\nof the text window), exit from DIV (ALT+X) and re-start your PC. If\nyou then have problems with another program which requires this driver,\nreturn to edit the same autoexec.bat file and remove the word REM which was added.   Solution of possible installation problems.  If you find any problem, check the minimum requirements indicated in the program. \nIf you have doubts about one of the elements consult the technical support of your PC \nor your PC supplier.  The most likely problem is reading from the CD-ROM drive; for this, clean the surface of the \nDIV Games Studio CD carefully with a clean and dry duster, and attempt the installation of the \nprogram once more.  Manual installation  If you couldn't install the program correctly and have a lot of free space on the \nhard disk of your PC (sufficient to allow a maximum installation) you can attempt a manual \ninstallation of the program, by following these steps:  MS-DOS users  - Supposing that your CD-ROM disk drive is the letter D:, select the CD-ROM \ndrive with the following command:", 
            "title": "Note The reproduction of CD-Audio is independent of the digital sound system"
        }, 
        {
            "location": "/resolution_of_configuration_problems/#d", 
            "text": "And press Enter. Then introduce the following commands (supposing that your hard disk is the C:\ndrive):    XCOPY DATA*.  C:\\DIV*.  /S", 
            "title": "D"
        }, 
        {
            "location": "/resolution_of_configuration_problems/#c", 
            "text": "CD \\DIV    DEL INSTALL*. *  Pressing Enter after each one of these commands. If you have sufficient space the\nprogram will be installed without any problem, introduce this command to execute it afterwards:    D /SAFE  For the next steps in executing the program, follow the conventional instructions.  Users of Windows 95/98  - Open the MS-DOS prompt (double clicking on its icon, or via\nstart menu \\ programs \\ ms-dos) and follow the instructions for MS-DOS users. For \nthe remaining executions of the program you can use the instructions that come with the\noperating system, remembering that the program will be installed in the DIV folder\nof your hard disk.   If you cannot get the program to function correctly with these suggestions, then contact\nyour FastTrak Technical Support, its tel. is (44) 1923 495497 (01923 495497 for UK users) \nduring normal office hours  Monday to Friday  from  09:00 to 17:30  or go to  http://www.div-arena.com \nand try the message forums or the live chatroom.  Remember though, that as DIV Games Studio is a big selling product with limited technical support\nfacilities, it is best to first try and follow carefully all instructions and check the website \nbefore making a call to this service.", 
            "title": "C"
        }, 
        {
            "location": "/resolution_of_configuration_problems/#important-this-technical-support-service-does-not-provide-any-consultation-regarding", 
            "text": "the programming language, because we could not give any more advice than is contained in the  help file  and the  user's manual  of the program. With these you can find a solution \nfor any doubts regarding the programming language you have.", 
            "title": "Important This technical support service does not provide any consultation regarding"
        }, 
        {
            "location": "/what_is_div_games_studio/", 
            "text": "It is a graphical environment which integrates a new programming language\nfor videogames together with other utilities such as a painting tool, \ntools to create fonts, palettes, etc.\n\n\nThe programming language was made exclusively for the creation\nof games and, as you can see, allows you to obtain very good results with\nvery short and simple programs.\n\n\nIt is not necessary to know how to program to use it, DIV was designed so that the user \ncould learn to program with it. \nIt has a user-friendly environment to make you lose the fear of the word \nprogramming\n ...\n\n\n\n\nSee: \nWorking with the IDE windows\n - \nIntroduction to DIV 3.0", 
            "title": "What is DIV Games Studio?"
        }, 
        {
            "location": "/working_with_windows/", 
            "text": "The windows, can be moved to any position on screen if you press\non the title bar with the mouse and drag it to the new position.\n\n\nTitle bar.\n - Is the top zone of the window, where the name of the window is shown \nin white against a blue background. When the name of the window appears in grey scale,\nit is because the window is not selected (as another window is currently selected ), \nto select it press on it.\n\n\nDrag.\n - This term is applied inside the graphical environment to mean the action of holding \nthe mouse button down over an object, moving it to the new position, and finally releasing the\nmouse button.\n\n\nTo ask the system to place the window automatically, you must double click\nwith the mouse on the title bar of the window. If the system\nfinds a better position for the window, it will move it there.\n\n\nThe windows can be in \ndifferent modes\n, and therefore their functions and operations will\nbe distinct from each other. These modes are described below :\n\n\n1. Active windows:\n Are those which, normally, have an illuminated title bar, in white letters \nagainst a blue background and are situated foremost on the desktop.\n\n\n2. Inactive windows:\n These type of windows have a dark title bar, in black\nletters against a dark grey background. To activate one of these windows simply click\non them with the mouse.\n\n\n3. Windows in the second plane:\n These are windows which are obscured; this is because\nthey are at least partially, covered by other windows. With these windows you can't \ninteract with them until they come into the foremost plane by clicking on them with the mouse.\n\n\n4. Icons:\n The icons are the minimised windows, this means, the windows which were\nreduced temporarily. The icons don't have a picture, just a button\nwith the sign \n+\n followed by the title of the window.\n\n\nNote To drag the graphics (to a file, to the desktop, etc.) don't press\n\n\non the title bar of the window, but on the contents of the window. This means, \nyou must press the mouse button in the middle of the window and, without releasing\nthe mouse button, move it to the new position.\n\n\n\n\nSee: \nTypes of windows\n - \nIntroduction a DIV 2", 
            "title": "Working with windows"
        }, 
        {
            "location": "/working_with_windows/#note-to-drag-the-graphics-to-a-file-to-the-desktop-etc-dont-press", 
            "text": "on the title bar of the window, but on the contents of the window. This means, \nyou must press the mouse button in the middle of the window and, without releasing\nthe mouse button, move it to the new position.   See:  Types of windows  -  Introduction a DIV 2", 
            "title": "Note To drag the graphics (to a file, to the desktop, etc.) don't press"
        }, 
        {
            "location": "/types_of_windows/", 
            "text": "The windows can be classified by their function, into the following groups:\n\n\n1. Interactive dialogues:\n These are windows which are used to impart\ninformation to the user; there exists a huge variety of them, which you'll see in \nthe respective options.\n\n\n2. Error message Windows :\n Are the dialogues in which the title bar appears in white\nagainst a red background and inform the user about the problem which has arisen.\n\n\n3. Options Menus :\n These menus contain the list of options which call other\nmenus, windows or dialogues after they have been clicked on. All these menus stem from the\nmain menu. Some menus may have certain options disabled (a pointer is shown with the \nprohibited symbol if you place the  mouse over it); this is because\nthese options interact only with the specific types of windows, and there is no\nwindow of this type currently active (it must be created or loaded beforehand).\n\n\n4. Programs:\n In these windows the programs are created and are effectively text windows.\nTo edit a program its window must be activated (only one program window can be activated at \nany one time). The text is similar to that of other text editors (supports the standard DOS \ncommand EDIT).\n\n\nTo ask for help in a program about a specific word of the programming language you must \nplace the blinking cursor (not the mouse pointer) on it and, then,\npress the key \nF1\n. These windows can be changed in size by pressing on the\ntheir lower right button and dragging with the mouse or by pressing the keys \ncontrol\n+\nZ\n.\n\n\n5. Maps or graphics:\n These windows are those which contain a map (bitmap) or\ngraphic and are controlled with help of the menu of maps.\nThey can be loaded from a MAP file (proper format), or imported from\na PCX, BMP or JPG file. To edit the graphics you must double click with the mouse  button \nin the centre of these windows thus opening, in this way,\nthe graphics editor (described in the \nuser's manual\n). These graphics can\nbe dragged to the background (to make a copy), to another graphic (to insert in them), \nto a file of graphics (to include them) or to the trash (to delete them), to drag them you\nmust drag from the centre of the windows, and not from the title bar.\n\n\n6. 3D Maps:\n These are vector maps created in the 3D maps editor,\nhow a collection of closed polygons is shown in their window representing the \nvertical section of a plan. Its creation is not a trivial matter, and is explained in\nthe \nuser's manual\n. These maps are saved on disk in files with the extension WLD.\n\n\n7. FPG or graphics library files :\n These windows show the contents of one\nfile on the drive. These files are libraries or collections of graphics used in the\ngame. Their purpose is to load a large quantity of maps into a game. They have two\nbasic modes of function, activated with the help of buttons named \nInfo\n and \nImages\n \nalong the bottom of the window. When the \ninfo\n button is not activated (by default), graphics\ncan be created and moved, or dragged (to the background, to other files, maps or the trashcan).\nWhen the  \ninfo\n button is activated, the graphics codes and their\ndescriptions are displayed with a thumbnail image. These FPG files are always \ncontrolled from the FPG file menu.\n\n\nThe FPG file windows are always just a reflection of the \ngraphics file\n\ncontained on the hard disk of the PC, and therefore can be closed at any time,\nwithout need to save them before. Their contents will never be lost.\nThe option \nFiles \\ Save\n allows you to make a copy of the FPG saving it under another\nname (as temporary or security copy).\n\n\n8. Fonts of letters:\n The fonts or letter types are small windows which\ndisplay the current typography. You must click on them with the mouse to see an\nexample of the font in real size. They correspond to FNT files (official font format)\nand are controlled by the fonts menu, from which you can access the fonts generator, \nwhich is the tool used to create new fonts of letters. The fonts of letters are used \ninside the painting program and in the programs to write texts.\n\n\n9. Sound effects:\n These windows represent on screen a PCM file (press code\nmodulation) or WAV file with a sound effect. They are controlled with the sounds menu, so \nyou can create new effects (with the sound recorder) or edit them. You can find a \nlibrary of sound effects already prepared for use in the games. To hear these\nsound effects you must have a sound card compatible with the Gravis Ultrasound or\nSound Blaster family, correctly configured and then click over one of these windows.\n\n\n10. Musical modes:\n Songs in the formats MOD, S3M and XM can be loaded . \nThey are represented in a small window which allows you to activate or stop its\nplayback. You cannot compose new modules from the environment though.\n\n\n11. Help window :\n It is controlled mainly with the mouse, but you can also use\nthe cursors, and the PageUp, PageDown and BackSpace keys to return to the previous page. \nIn the help windows the texts are shown in white which make reference to\nother help pages. You must click on these references to access to these pages.\nIn the help windows are also shown example programs which can be selected by clicking on \ntheir title, executed with the key F10 and closed by clicking ALT+X.\n\n\n12. Calculators:\n The calculators windows function as evaluators of\nmathematical expressions, in the style of expressions presented in the programs.\nTheir functioning is very simple, because you need only introduce an expression and\npress Enter to see the result. You can use parentheses to indicate subexpressions.\n\n\nNote The trash window must be activated first from the system menu, with the\n\n\ncorresponding option (\nSystem \\ Trash\n).\n\n\n\n\nSee: \nFixing the video mode\n - \nIntroduction to DIV 2", 
            "title": "Types of windows"
        }, 
        {
            "location": "/types_of_windows/#note-the-trash-window-must-be-activated-first-from-the-system-menu-with-the", 
            "text": "corresponding option ( System \\ Trash ).   See:  Fixing the video mode  -  Introduction to DIV 2", 
            "title": "Note The trash window must be activated first from the system menu, with the"
        }, 
        {
            "location": "/demo_session/", 
            "text": "This is a version of DIV Games Studio 2 designed for evaluation purposes only, and is limited\n\nto 31 executions of the program.\n\n\nThis demo version is completely functional, and was created with the aim that\nyou could evaluate the possibilities of the program and its compatibility with \nyour system, before obtaining the full registered copy.\n\n\nThere are only two restricted functions in this version:\n\n\n\n\n\n\nThe \nprogram size\n which can be compiled is limited by the\nmaximum number of objects allowed in this version.\n\n\n\n\n\n\nAll finished programs (after creating an EXE independent from DIV with the option\n\nPrograms\n \\ \nCreate installation\n) will be marked with a message stating this is a demo \nversion only.\n\n\n\n\n\n\nThese restrictions don't exist in the commercial version of the program, but in addition remember\nthat the full version also contains a \nUser's manual\n which is essential\nto access all the functions of the program and to effectively learn the programming \nlanguage of DIV 2.\n\n\n\n\nNote The information contained in the User's manual of DIV Games Studio 2\n\n\n(about what's new in the environment, the program options, a tutorial for the new\nlanguage, ...) cannot be found in this electronic help.", 
            "title": "Demo Session"
        }, 
        {
            "location": "/demo_session/#note-the-information-contained-in-the-users-manual-of-div-games-studio-2", 
            "text": "(about what's new in the environment, the program options, a tutorial for the new\nlanguage, ...) cannot be found in this electronic help.", 
            "title": "Note The information contained in the User's manual of DIV Games Studio 2"
        }, 
        {
            "location": "/conflict_with_the_sound_system/", 
            "text": "The audio system of DIV Games Studio was not initiated because of\na conflict with your sound card. This problem is often produced for these reasons:\n\n\n\n\n\n\nThe card is being used at the same time by \nanother program\n. It cannot\nreproduce the sound if any other program exists which reading or writing\ndata to the card (such as an MP3 player or sound capture device).\n\n\n\n\n\n\nA problem with the \nauto-detection\n of the card's parameters can occur.\nYou must execute the sound configuration program or define\nthese values in the variable BLASTER or ULTRASND of the system environment (you can find\nmore information on this in the user's manual of DIV Games Studio 2).\n\n\n\n\n\n\nBecause of the \nincompatibility\n of the card. If the card is not a\nmark GRAVIS (tm) or SOUND BLASTER (tm), it may be incompatible\nwith DIV Games Studio. The majority of commercially available cards are compatible\nwith SOUND BLASTER cards, but they still may not be 100% compatible and may\npresent some problems.\n\n\n\n\n\n\n\n\nGeneral solution of the audio problems.\n\n\nIf your particular problem doesn't fit into any of these three cases,\nyou must first execute the sound configuration program. This can be accessed\nfrom DIV by pressing \nF4\n, loading the program \nSETUP.PRG\n from the\n\nSETUP\n directory, and executing it with the key command \nF10\n.\n\n\nIn the first chapter of the \nuser's manual\n you can find the information \nabout how to obtain the parameters of your sound card.\n\n\nAlso you can try the configure the sound system indicating in the configuration \nprogram as if your card was a simpler one (previous to yours). For example, if you\nhave a card compatible with a \nSound Blaster AWE 64\n or \n128\n and cannot\ninitiate the sound system; try to configure the system as a\n \nSound Blaster 16\n, or \nSound Blaster Pro\n card.\n\n\nAs the last recourse, if it still wasn't possible to configure the sound in your system,\nyou must deactivate it. To do this execute the configuration program\nand select \nWithout sound\n in the field which defines the type of card.\nThen press the \nSave\n button to establish this configuration and deactivate\nthe sound in DIV Games Studio 2.\n\n\n\n\nNote The playback of CD-Audio is independent of the digital sound system\n\n\nwhich configuration is described here; therefore CD music will continue to be played\nalthough the sound system has not been initiated properly.", 
            "title": "conflict with the sound system"
        }, 
        {
            "location": "/conflict_with_the_sound_system/#note-the-playback-of-cd-audio-is-independent-of-the-digital-sound-system", 
            "text": "which configuration is described here; therefore CD music will continue to be played\nalthough the sound system has not been initiated properly.", 
            "title": "Note The playback of CD-Audio is independent of the digital sound system"
        }, 
        {
            "location": "/the_sound_system_is_not_working/", 
            "text": "Digital sounds cannot be played back inside DIV Games Studio 2 if the sound system is \ndeactivated.\n\n\nProbably, in the configuration program the option \nWithout sound\n was selected, \ninstead of indicating the type of card you have installed on your PC (or one \ncompatible with it).\n\n\n\n\nSee: \nconflicts with the sound dispositive", 
            "title": "The sound system is not working"
        }, 
        {
            "location": "/fixing_a_video_mode/", 
            "text": "The option \nSystem \\ Video mode\n gives access to the dialogue window which permits\nyou to modify the resolution used by the graphical environment of DIV Games Studio 2.\n\n\nThe video resolutions are indicated as the number of horizontal and vertical pixels \nthe video will be displayed in on screen in this mode and will be a value between 320x200 \n(low resolution) and the max resolution which your video card permits. To select\na new resolution you must click on the list which appears in the window over the resolution\ndesired and then select the button \nAccept\n.\n\n\nNote Some of these video modes can be visualised incorrectly\n\n\n(for example, a resolution which is permitted by your video card but not by your\nmonitor); in this case you must wait \n15 seconds\n for the environment to\nrestore the previous resolution. Don't press any key, don't do anything, just be \npatient and wait.\n\n\nSelection of the system font.\n\n\nThere are two settings allowed to select the font used by the system, which not only \nhave differences in the size of the letters but, also in the\nsize of the windows of the environment. They are :\n\n\n1. Small font (and small windows).\n In this mode all windows,\nmenus and pictures are seen in a small size, being ideal for low modes\nof resolution or a PC with a big monitor (17\n or more).\n\n\n2. Big font (and big windows).\n This mode can be activated\nonly in resolutions from 640x480 up and is ideal for small monitors (15\n or less).\n\n\nNote The font of letters used in the programs and in the help window is\n\n\nindependent from that selected for the system, and is defined in the configuration\nwindow, also accessible from this system menu.\n\n\n\n\nSee: \nThe window of configuration\n - \nIntroduction to DIV 2", 
            "title": "Fixing a video mode"
        }, 
        {
            "location": "/fixing_a_video_mode/#note-some-of-these-video-modes-can-be-visualised-incorrectly", 
            "text": "(for example, a resolution which is permitted by your video card but not by your\nmonitor); in this case you must wait  15 seconds  for the environment to\nrestore the previous resolution. Don't press any key, don't do anything, just be \npatient and wait.  Selection of the system font.  There are two settings allowed to select the font used by the system, which not only \nhave differences in the size of the letters but, also in the\nsize of the windows of the environment. They are :  1. Small font (and small windows).  In this mode all windows,\nmenus and pictures are seen in a small size, being ideal for low modes\nof resolution or a PC with a big monitor (17  or more).  2. Big font (and big windows).  This mode can be activated\nonly in resolutions from 640x480 up and is ideal for small monitors (15  or less).", 
            "title": "Note Some of these video modes can be visualised incorrectly"
        }, 
        {
            "location": "/fixing_a_video_mode/#note-the-font-of-letters-used-in-the-programs-and-in-the-help-window-is", 
            "text": "independent from that selected for the system, and is defined in the configuration\nwindow, also accessible from this system menu.   See:  The window of configuration  -  Introduction to DIV 2", 
            "title": "Note The font of letters used in the programs and in the help window is"
        }, 
        {
            "location": "/the_configuration_window/", 
            "text": "With help of the option \nSystem\\Configuration\n you can access the following dialogue window\ndivided into sections, which are outlined below.\n\n\nColours windows\n\n\nThis first section establishes the colours used by the environment; the colours for \nbackground of the windows, the colour of letters / fonts and the colour of the title \nbar can be selected. To change these colours click on the boxes. The system not\nonly uses these three colour windows but, starting from them, generates a gamma array\nof colours used for texts, cursors, buttons, etc.\n\n\nPrograms Editor\n\n\nThis establishes the appearance of the program windows. Different colours for different objects\n(words or symbols) presented in the program can be selected.\n\n\n1.\n Background of the edition window.\n\n\n2.\n General colour of letters.\n\n\n3.\n Cursor.\n\n\n4.\n Commentaries of the programs.\n\n\n5.\n Symbols and operators of expressions.\n\n\n6.\n Reserved words of the language.\n\n\n7.\n Numbers inside the program.\n\n\n8.\n Literals, or texts in inverted commas.\n\n\nThe text blocks marked inside the editor are seen with the interchanged colours of paint\nand background.\n\n\nA text box allows you to define the size (n number of spaces) of the tabulator in the\nprograms editor, as a number between 1 and 16. By default the program tabulates every \n4 columns.\n\n\nIt is also possible to select here the size of the letters of the programs and the help,\nfrom 6x8 up to 9x16 points. All fonts of letters are fixed for a particular setup.\n\n\nPainting Program \n\n\nDefines the quantity of memory reserved to carry out operations in the graphics editor,\nthe speed of the mouse pointer and its representation.\n\n\nThe quantity of \nmemory\n is specified in Kbytes, and by default is set at\n1088Kb (more than one megabyte), but it is not necessary to modify this value even if \nan operation can't be realised in the graphical editor because of not enough memory available\n(in this case the program will divert more memory to it). Please note though, that the more memory\nreserved for graphics, the  less memory will be disposed in the system for the rest of the actions.\n\n\nThe speed of the mouse pointer is defined with the small horizontal bar (faster\nto the left and slower to the right), and affects the mouse in all window environments,\nnot only the painting program.\n\n\nGlobal options of the environment\n\n\n1. Emergent windows.\n Indicate all windows effects to be visualised, \nwhen they are opening, closing, minimising, etc. If this option is deactivated,\nthe environment will lose these effects but will gain a faster response speed.\n\n\n2. Move complete windows.\n With this option enabled, windows will show their \ncomplete content whilst being dragged, otherwise only the outline will be shown.\nIt can be useful to deactivate this option on slower PCs.\n\n\n3. Always save session.\n Means that when exiting from DIV Games Studio, the contents\nof the desktop and all its objects (programs, maps, sounds,etc.) must be saved. \nIf this option is deactivated then entering and exiting from the environment will be faster,\nbut there is a risk of losing the work which was not saved prior to exiting from DIV.\n\n\n4. Colour of the lists.\n Indicates that, when a file with the extension PRG is being edited, \nall colours previously selected for the editor must be applied. Alternatively only the colours \nof the background and cursor will be applied. The same applies when you are editing a file \nwhich is not a PRG \ndiv source program\n file.\n\n\nNote If you close the configuration window or press the key ESC all changes you have just made\n\n\nwill be lost, and the values of the previous configuration will be restored.\n\n\n\n\nSee: \nFirst contact with the language\n - \nIntroduction to DIV 2", 
            "title": "The configuration window"
        }, 
        {
            "location": "/the_configuration_window/#note-if-you-close-the-configuration-window-or-press-the-key-esc-all-changes-you-have-just-made", 
            "text": "will be lost, and the values of the previous configuration will be restored.   See:  First contact with the language  -  Introduction to DIV 2", 
            "title": "Note If you close the configuration window or press the key ESC all changes you have just made"
        }, 
        {
            "location": "/first_contact_with_the_language/", 
            "text": "In this section it is explained how to execute the Sample games of DIV Games Studio and\nquick instructions how to start learning about DIV, receiving the first notions about \nthis programming language.\n\n\nGeneral instructions\n\n\nAll included games are simple examples, they don't pretend\nto compete with the commercial games which can be created with this tool.\nAlthough we're talking about complete games, the majority of them are very simple \nor very short.\n\n\nThe aim was to demonstrate the techniques which are used and how the programs are\nmade, by use of examples, instead of huge lists of instructions in which the user gets\neasily confused.\n\n\nNote These games can never show the true capabilities of this environment,\n\n\nbecause practically no single game uses all of them. The majority of the new\nand potential capabilities of this version of DIV Games Studio weren't used\nin these example, giving you the opportunity to be the first persons who\nattempt, or maybe manage, to explore these possibilities to the full.\n\n\nTo execute any of these examples you must, first, load the program with the\noption \nPrograms\\Open program\n, and then a window will appear with a list\nof the loaded programs.\n\n\nThe help system\n\n\nOne of the best ways of learning the DIV environment; after placing the cursor\non a reserved word, constant, variable, function, etc., of the language you can \npress the key F1 to see a help page about this subject.\n\n\nIf, after pressing F1, help about the subject doesn't appear (but instead the general index\nappears) it is because this is not a specific word of the DIV language, and the data or process \nis not directly from the game language (processes are functions which control the behaviour \nof the graphics, or 'sprites', in the games).\n\n\nNote We recommend you begin by learning with simple games, as tutorials or, better still,\n\n\nwith the examples included in the electronic help; to access them you must press\nthe Functions button in the help window and, from this page, access the different explanations \nof the functions of the programming language, from where small examples can be viewed by \npressing on their headline or title.\n\n\nTexts which begin with the symbol // (double bar) are explanation comments,\nthey don't form part of the program, but only consist of \nexplanatory notes\n\nabout the internal functioning of the program. These comments are often a big\nhelp in understanding the functioning of the programs. The comments can also\nappear between the symbols /\n and \n/ (covering many lines of the program).\n\n\nTo go to one of the program processes (one of the program blocks used to control a graphic \nor sprite of the game), you must press the F5 key and select the name of the process with \nthe help of the mouse.\n\n\nExecution of the examples\n\n\nTo execute one of the loaded programs, press with the mouse on its\nwindow and then with the key F10 (this action can also be instigated with the option \nprograms \\ execute).\n\n\nThe contents of the games are different, but the majority of them allow you to exit\nby pressing the ESC key and are managed with the cursor and control keys (See the \n\ngeneral commands in the games\n).\n\n\nThe Pause key can be used in all games to immediately stop the execution of the program. \nAll programs can be aborted at any point, independent of their programming, if the \ncombination of keys ALT+X is pressed.\n\n\n\n\nSee: \nDebugging your program\n - \nIntroduction to DIV 2", 
            "title": "First contact with the language"
        }, 
        {
            "location": "/first_contact_with_the_language/#note-these-games-can-never-show-the-true-capabilities-of-this-environment", 
            "text": "because practically no single game uses all of them. The majority of the new\nand potential capabilities of this version of DIV Games Studio weren't used\nin these example, giving you the opportunity to be the first persons who\nattempt, or maybe manage, to explore these possibilities to the full.  To execute any of these examples you must, first, load the program with the\noption  Programs\\Open program , and then a window will appear with a list\nof the loaded programs.  The help system  One of the best ways of learning the DIV environment; after placing the cursor\non a reserved word, constant, variable, function, etc., of the language you can \npress the key F1 to see a help page about this subject.  If, after pressing F1, help about the subject doesn't appear (but instead the general index\nappears) it is because this is not a specific word of the DIV language, and the data or process \nis not directly from the game language (processes are functions which control the behaviour \nof the graphics, or 'sprites', in the games).", 
            "title": "Note These games can never show the true capabilities of this environment,"
        }, 
        {
            "location": "/first_contact_with_the_language/#note-we-recommend-you-begin-by-learning-with-simple-games-as-tutorials-or-better-still", 
            "text": "with the examples included in the electronic help; to access them you must press\nthe Functions button in the help window and, from this page, access the different explanations \nof the functions of the programming language, from where small examples can be viewed by \npressing on their headline or title.  Texts which begin with the symbol // (double bar) are explanation comments,\nthey don't form part of the program, but only consist of  explanatory notes \nabout the internal functioning of the program. These comments are often a big\nhelp in understanding the functioning of the programs. The comments can also\nappear between the symbols /  and  / (covering many lines of the program).  To go to one of the program processes (one of the program blocks used to control a graphic \nor sprite of the game), you must press the F5 key and select the name of the process with \nthe help of the mouse.  Execution of the examples  To execute one of the loaded programs, press with the mouse on its\nwindow and then with the key F10 (this action can also be instigated with the option \nprograms \\ execute).  The contents of the games are different, but the majority of them allow you to exit\nby pressing the ESC key and are managed with the cursor and control keys (See the  general commands in the games ).  The Pause key can be used in all games to immediately stop the execution of the program. \nAll programs can be aborted at any point, independent of their programming, if the \ncombination of keys ALT+X is pressed.   See:  Debugging your program  -  Introduction to DIV 2", 
            "title": "Note We recommend you begin by learning with simple games, as tutorials or, better still,"
        }, 
        {
            "location": "/monitoring_or_debugging_the_programs/", 
            "text": "The more active people can find out more detail about the progress of the games during runtime\nby pressing the key F12 (from the game itself, during its execution), that allows you to access\nthe program debugger, which permits you to execute  the games step by step.\nHere you can observe all processes and modify their data (if you have convenient data,\nall dynamic parameters of the game can be changed, the phase number, the lives left, \nammunition left ...).\n\n\nIn the upper part of this window there appears a list with the processes currently active at \nany moment (such as toys or graphics which are being used by program). They can be selected \nwith the mouse and, by pressing the button \nsee data\n, all variables, counters, etc. which the \nprocess is using will be seen.\n\n\nIn the lower part of the screen appears the lists of the program, which basically\nare the order in which the PC must action things whilst the game is running. It is\nnormally divided into small blocks which begin with the word \nPROCESS\n (one of the reserved words \nof the programming language). In each one of these blocks the orders for a main element of the\ngame are specified (for example, for a shot being fired, an enemy or an explosion).\n\n\nGeneral functioning of the programs\n\n\nIn short, the games always consist of a sequence of frames. Each frame is composed of\ndifferent elements (or processes)of the game. All these elements must, in each frame,\ncomplete a series of operations or calculations (normally very simple) to determine \nwhat their appearance  must be in the following frame (which picture or graphics the \nframe must show, in which position, of which size, which orientation etc.)\n\n\nThe PC is realising the orders specified for each process until it\ncomes to the orders for the \nFRAME\n (frame or fotogram) itself. This order indicates that a\nprocess is already prepared to be shown in the following frame, which means, all the parameters \nwhich will define its appearance in the following frame have already been allocated.\n\n\nNote The orders specified in a program are denoted as statements. Each one of these\n\n\nstatements indicates an operation or calculations which the PC must realise.\n\n\nIn this way, the PC continues realising all these operations and calculations\nwhich the orders of each process have specified, until all active processes\nhave reached the order statement \nFRAME\n. At this moment, the PC stops executing \norders and will focus instead on composing the following frame which must be displayed \non screen.\n\n\nIn the games these two tasks are consistently alternating, first the orders are executed,\nand then the frames are composed and displayed.\n\n\nBasic controls of the debugger\n\n\nThis can be viewed from the program debugger, with the help of different buttons\nwhich allow the actions of the program or game to be realised step by step, \nvisibly on screen. These main buttons are the following:\n\n\n1. Step.\n Indicates to the PC to execute the following order of the next process. The\nnext process appears in white in the most prominent list of the debugger, and the following \norder to be realised (by this process) appears in the program list in the same colour.\n\n\n2. Exec.process.\n This button instructs the PC to execute all\ninstructions of the following process until it  reaches the order FRAME, this means, it must\nrealise all necessary operations required before the next process can be\ndisplayed in the next frame.\n\n\n3. Foll.Frame.\n This button is used to advance the game frame by frame.\nEach time it is pressed, all necessary orders of all active processes will be executed, \nthe new frame will be composed, and finally the frame will be converted to video \n(the term \nconvert to video\n means that the action of one frame of the\nis composed in the video / graphics card, and thus will be displayed on the\nmonitor of the PC).\n\n\nWhen a program is realised, all its aspects can be controlled: the order in which the different processes \nare executed, the order in which the graphics are displayed on screen, the interactions of the processes\non screen (when they \nare touching\n one another, for instance), when sound effects must be played,\nthe reactions of each process on the keyboard, mouse, etc ...\n\n\n\n\nSee: \nIntroduction to DIV 2", 
            "title": "Monitoring or debugging the programs"
        }, 
        {
            "location": "/monitoring_or_debugging_the_programs/#note-the-orders-specified-in-a-program-are-denoted-as-statements-each-one-of-these", 
            "text": "statements indicates an operation or calculations which the PC must realise.  In this way, the PC continues realising all these operations and calculations\nwhich the orders of each process have specified, until all active processes\nhave reached the order statement  FRAME . At this moment, the PC stops executing \norders and will focus instead on composing the following frame which must be displayed \non screen.  In the games these two tasks are consistently alternating, first the orders are executed,\nand then the frames are composed and displayed.  Basic controls of the debugger  This can be viewed from the program debugger, with the help of different buttons\nwhich allow the actions of the program or game to be realised step by step, \nvisibly on screen. These main buttons are the following:  1. Step.  Indicates to the PC to execute the following order of the next process. The\nnext process appears in white in the most prominent list of the debugger, and the following \norder to be realised (by this process) appears in the program list in the same colour.  2. Exec.process.  This button instructs the PC to execute all\ninstructions of the following process until it  reaches the order FRAME, this means, it must\nrealise all necessary operations required before the next process can be\ndisplayed in the next frame.  3. Foll.Frame.  This button is used to advance the game frame by frame.\nEach time it is pressed, all necessary orders of all active processes will be executed, \nthe new frame will be composed, and finally the frame will be converted to video \n(the term  convert to video  means that the action of one frame of the\nis composed in the video / graphics card, and thus will be displayed on the\nmonitor of the PC).  When a program is realised, all its aspects can be controlled: the order in which the different processes \nare executed, the order in which the graphics are displayed on screen, the interactions of the processes\non screen (when they  are touching  one another, for instance), when sound effects must be played,\nthe reactions of each process on the keyboard, mouse, etc ...   See:  Introduction to DIV 2", 
            "title": "Note The orders specified in a program are denoted as statements. Each one of these"
        }, 
        {
            "location": "/the_last_possible_term_inside_this_hypertext/", 
            "text": "", 
            "title": "The last possible term inside this hypertext"
        }
    ]
}